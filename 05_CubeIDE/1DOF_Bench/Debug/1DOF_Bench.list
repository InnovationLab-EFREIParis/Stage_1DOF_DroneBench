
1DOF_Bench.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c90c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e4  0800caa0  0800caa0  0001caa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d084  0800d084  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d084  0800d084  0001d084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d08c  0800d08c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d08c  0800d08c  0001d08c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d090  0800d090  0001d090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800d094  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  200001e8  0800d27c  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  0800d27c  00020430  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001800e  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cd3  00000000  00000000  00038226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001438  00000000  00000000  0003af00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001320  00000000  00000000  0003c338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029cf1  00000000  00000000  0003d658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017084  00000000  00000000  00067349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109ff6  00000000  00000000  0007e3cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001883c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cc8  00000000  00000000  00188414  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ca84 	.word	0x0800ca84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800ca84 	.word	0x0800ca84

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t gaz_buffer[4];

int _write(int file, char *data, int len) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
	if ((file != STDOUT_FILENO) && (file != STDERR_FILENO)) {
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d00a      	beq.n	8001020 <_write+0x28>
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	2b02      	cmp	r3, #2
 800100e:	d007      	beq.n	8001020 <_write+0x28>
		errno = EBADF;
 8001010:	f007 f80c 	bl	800802c <__errno>
 8001014:	4603      	mov	r3, r0
 8001016:	2209      	movs	r2, #9
 8001018:	601a      	str	r2, [r3, #0]
		return -1;
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
 800101e:	e00f      	b.n	8001040 <_write+0x48>
	}

	// arbitrary timeout 1000
	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2, (uint8_t*) data, len,
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	b29a      	uxth	r2, r3
 8001024:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001028:	68b9      	ldr	r1, [r7, #8]
 800102a:	4807      	ldr	r0, [pc, #28]	; (8001048 <_write+0x50>)
 800102c:	f005 fe82 	bl	8006d34 <HAL_UART_Transmit>
 8001030:	4603      	mov	r3, r0
 8001032:	75fb      	strb	r3, [r7, #23]
			1000);

	// return # of bytes written - as best we can tell
	return (status == HAL_OK ? len : 0);
 8001034:	7dfb      	ldrb	r3, [r7, #23]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d101      	bne.n	800103e <_write+0x46>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	e000      	b.n	8001040 <_write+0x48>
 800103e:	2300      	movs	r3, #0
}
 8001040:	4618      	mov	r0, r3
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	200002fc 	.word	0x200002fc

0800104c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800104c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800104e:	b09f      	sub	sp, #124	; 0x7c
 8001050:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE BEGIN 1 */

	enum states etat;
	 etat = init_uc;
 8001052:	2300      	movs	r3, #0
 8001054:	77fb      	strb	r3, [r7, #31]
	 char r_buffer[2];
	 	 int okay;
	 	int valeur_can;
	 	int mapped_value;
	 char gaz_data[4];
	 	int counter=4;
 8001056:	2304      	movs	r3, #4
 8001058:	617b      	str	r3, [r7, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800105a:	f000 ff73 	bl	8001f44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800105e:	f000 f9cd 	bl	80013fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001062:	f000 fb69 	bl	8001738 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001066:	f000 fb09 	bl	800167c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800106a:	f000 fa19 	bl	80014a0 <MX_ADC1_Init>
  MX_DMA_Init();
 800106e:	f000 fb35 	bl	80016dc <MX_DMA_Init>
  MX_TIM3_Init();
 8001072:	f000 fa8b 	bl	800158c <MX_TIM3_Init>
	//blinkGreenLed(10, 100);
	// Welcome message on UART

	//sendWelcomeMsgRS232(&huart2);
	//la fonction au dessus pose des soucis
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001076:	2104      	movs	r1, #4
 8001078:	48b7      	ldr	r0, [pc, #732]	; (8001358 <main+0x30c>)
 800107a:	f004 fd01 	bl	8005a80 <HAL_TIM_PWM_Start>
	//NOus mettons ici la valeur minimale pour emettre un signal vers notre ESC dans notre registre capture and compare register

	//TIM3->CCR2 = valeur_min_moteur;
	y_print(&huart2, " 0 to 6 to change state \r\n", 26);
 800107e:	221a      	movs	r2, #26
 8001080:	49b6      	ldr	r1, [pc, #728]	; (800135c <main+0x310>)
 8001082:	48b7      	ldr	r0, [pc, #732]	; (8001360 <main+0x314>)
 8001084:	f000 ff1d 	bl	8001ec2 <y_print>
	HAL_Delay(3000);
 8001088:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800108c:	f000 ffd6 	bl	800203c <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		__HAL_UART_CLEAR_OREFLAG(&huart2);
 8001090:	4bb3      	ldr	r3, [pc, #716]	; (8001360 <main+0x314>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2208      	movs	r2, #8
 8001096:	621a      	str	r2, [r3, #32]

		//differents etats qu'on peut avoir

		//---------changement d'etat-------

		switch (etat) {
 8001098:	7ffb      	ldrb	r3, [r7, #31]
 800109a:	2b06      	cmp	r3, #6
 800109c:	f200 81a5 	bhi.w	80013ea <main+0x39e>
 80010a0:	a201      	add	r2, pc, #4	; (adr r2, 80010a8 <main+0x5c>)
 80010a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a6:	bf00      	nop
 80010a8:	080010c5 	.word	0x080010c5
 80010ac:	0800114f 	.word	0x0800114f
 80010b0:	08001191 	.word	0x08001191
 80010b4:	080012b7 	.word	0x080012b7
 80010b8:	08001219 	.word	0x08001219
 80010bc:	08001123 	.word	0x08001123
 80010c0:	0800134b 	.word	0x0800134b
		case init_uc:
			//traitement des sorties
			/*if (HAL_UART_Transmit(&huart2, (uint8_t*) "UC Initialization \n\r", 22,
			 100) != HAL_OK)
			 Error_Handler();*/
			printf("nucleo ready\r\n");
 80010c4:	48a7      	ldr	r0, [pc, #668]	; (8001364 <main+0x318>)
 80010c6:	f007 fef1 	bl	8008eac <puts>
			HAL_Delay(1000);
 80010ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010ce:	f000 ffb5 	bl	800203c <HAL_Delay>
			//traitement des entrées (transitions)
			do {

				if (HAL_UART_Receive(&huart2, (uint8_t*) r_buffer, 2, 10)
 80010d2:	f107 0108 	add.w	r1, r7, #8
 80010d6:	230a      	movs	r3, #10
 80010d8:	2202      	movs	r2, #2
 80010da:	48a1      	ldr	r0, [pc, #644]	; (8001360 <main+0x314>)
 80010dc:	f005 febe 	bl	8006e5c <HAL_UART_Receive>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d10c      	bne.n	8001100 <main+0xb4>
						== HAL_OK) {
					HAL_Delay(50);
 80010e6:	2032      	movs	r0, #50	; 0x32
 80010e8:	f000 ffa8 	bl	800203c <HAL_Delay>
					HAL_UART_Transmit(&huart2, (uint8_t*) r_buffer, 2, 10);
 80010ec:	f107 0108 	add.w	r1, r7, #8
 80010f0:	230a      	movs	r3, #10
 80010f2:	2202      	movs	r2, #2
 80010f4:	489a      	ldr	r0, [pc, #616]	; (8001360 <main+0x314>)
 80010f6:	f005 fe1d 	bl	8006d34 <HAL_UART_Transmit>
					HAL_Delay(50);
 80010fa:	2032      	movs	r0, #50	; 0x32
 80010fc:	f000 ff9e 	bl	800203c <HAL_Delay>
				}

			} while ((r_buffer[0] != '1') && (r_buffer[0] != '2')); //|| (r_buffer[0] != '2')
 8001100:	7a3b      	ldrb	r3, [r7, #8]
 8001102:	2b31      	cmp	r3, #49	; 0x31
 8001104:	d002      	beq.n	800110c <main+0xc0>
 8001106:	7a3b      	ldrb	r3, [r7, #8]
 8001108:	2b32      	cmp	r3, #50	; 0x32
 800110a:	d1e2      	bne.n	80010d2 <main+0x86>
			if (r_buffer[0] == '2')
 800110c:	7a3b      	ldrb	r3, [r7, #8]
 800110e:	2b32      	cmp	r3, #50	; 0x32
 8001110:	d102      	bne.n	8001118 <main+0xcc>
				etat = info_mode;
 8001112:	2305      	movs	r3, #5
 8001114:	77fb      	strb	r3, [r7, #31]
 8001116:	e001      	b.n	800111c <main+0xd0>
			else
				etat = init_motor;
 8001118:	2301      	movs	r3, #1
 800111a:	77fb      	strb	r3, [r7, #31]
			r_buffer[0] = ' ';
 800111c:	2320      	movs	r3, #32
 800111e:	723b      	strb	r3, [r7, #8]
			break;
 8001120:	e164      	b.n	80013ec <main+0x3a0>

		case info_mode:
			//if (HAL_UART_Transmit(&huart2, (uint8_t*) "Info mode\n\r", 12, 100)
			//	!= HAL_OK)
			//Error_Handler();
			printf("Info mode\r\n");
 8001122:	4891      	ldr	r0, [pc, #580]	; (8001368 <main+0x31c>)
 8001124:	f007 fec2 	bl	8008eac <puts>
			printf("Firmware version %.2f \n\r", firmware_version);
 8001128:	4b90      	ldr	r3, [pc, #576]	; (800136c <main+0x320>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fa0b 	bl	8000548 <__aeabi_f2d>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	488e      	ldr	r0, [pc, #568]	; (8001370 <main+0x324>)
 8001138:	f007 fe32 	bl	8008da0 <iprintf>
			HAL_Delay(3000);
 800113c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001140:	f000 ff7c 	bl	800203c <HAL_Delay>
			 HAL_Delay(50);
			 }

			 } while (r_buffer[0] != '0');*/

			etat = init_uc;
 8001144:	2300      	movs	r3, #0
 8001146:	77fb      	strb	r3, [r7, #31]
			// Reinitialisation du buffer
			r_buffer[0] = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	723b      	strb	r3, [r7, #8]
			//printf("%f");
			//le programme freeze dans l'etat info
			break;
 800114c:	e14e      	b.n	80013ec <main+0x3a0>

		case init_motor:
			/*if (HAL_UART_Transmit(&huart2,
			 (uint8_t*) "Motor Initialization \r\n", 24, 100) != HAL_OK)
			 Error_Handler();*/
			printf("Motor Initialization \n\r");
 800114e:	4889      	ldr	r0, [pc, #548]	; (8001374 <main+0x328>)
 8001150:	f007 fe26 	bl	8008da0 <iprintf>
			HAL_Delay(1000);
 8001154:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001158:	f000 ff70 	bl	800203c <HAL_Delay>
			//Chargement de la pwm
			//HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
			load_pwm(htim3, valeur_min_moteur);
 800115c:	4b86      	ldr	r3, [pc, #536]	; (8001378 <main+0x32c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4e7d      	ldr	r6, [pc, #500]	; (8001358 <main+0x30c>)
 8001162:	930f      	str	r3, [sp, #60]	; 0x3c
 8001164:	466d      	mov	r5, sp
 8001166:	f106 0410 	add.w	r4, r6, #16
 800116a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800116c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800116e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001170:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001172:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001174:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001176:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800117a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800117e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001182:	f000 fe8f 	bl	8001ea4 <load_pwm>
			r_buffer[0] = ' ';
 8001186:	2320      	movs	r3, #32
 8001188:	723b      	strb	r3, [r7, #8]
			etat = motor_ready;
 800118a:	2302      	movs	r3, #2
 800118c:	77fb      	strb	r3, [r7, #31]

			break;
 800118e:	e12d      	b.n	80013ec <main+0x3a0>
			/*	if (HAL_UART_Transmit(&huart2, (uint8_t*) "Motor ready \n\r", 15,
			 100) != HAL_OK)
			 Error_Handler();
			 HAL_Delay(3000);*/
			//k = 0;
			load_pwm(htim3, valeur_min_moteur);
 8001190:	4b79      	ldr	r3, [pc, #484]	; (8001378 <main+0x32c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4e70      	ldr	r6, [pc, #448]	; (8001358 <main+0x30c>)
 8001196:	930f      	str	r3, [sp, #60]	; 0x3c
 8001198:	466d      	mov	r5, sp
 800119a:	f106 0410 	add.w	r4, r6, #16
 800119e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011aa:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80011ae:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80011b2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80011b6:	f000 fe75 	bl	8001ea4 <load_pwm>
			printf("Motor ready \n\r");
 80011ba:	4870      	ldr	r0, [pc, #448]	; (800137c <main+0x330>)
 80011bc:	f007 fdf0 	bl	8008da0 <iprintf>
			HAL_Delay(1000);
 80011c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011c4:	f000 ff3a 	bl	800203c <HAL_Delay>
			do {

				if (HAL_UART_Receive(&huart2, (uint8_t*) r_buffer, 2, 10)
 80011c8:	f107 0108 	add.w	r1, r7, #8
 80011cc:	230a      	movs	r3, #10
 80011ce:	2202      	movs	r2, #2
 80011d0:	4863      	ldr	r0, [pc, #396]	; (8001360 <main+0x314>)
 80011d2:	f005 fe43 	bl	8006e5c <HAL_UART_Receive>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d10c      	bne.n	80011f6 <main+0x1aa>
						== HAL_OK) {
					HAL_Delay(50);
 80011dc:	2032      	movs	r0, #50	; 0x32
 80011de:	f000 ff2d 	bl	800203c <HAL_Delay>
					HAL_UART_Transmit(&huart2, (uint8_t*) r_buffer, 2, 10);
 80011e2:	f107 0108 	add.w	r1, r7, #8
 80011e6:	230a      	movs	r3, #10
 80011e8:	2202      	movs	r2, #2
 80011ea:	485d      	ldr	r0, [pc, #372]	; (8001360 <main+0x314>)
 80011ec:	f005 fda2 	bl	8006d34 <HAL_UART_Transmit>
					HAL_Delay(50);
 80011f0:	2032      	movs	r0, #50	; 0x32
 80011f2:	f000 ff23 	bl	800203c <HAL_Delay>
				}

			} while ((r_buffer[0] != '3') && (r_buffer[0] != '4')); //|| (r_buffer[0] != '2')
 80011f6:	7a3b      	ldrb	r3, [r7, #8]
 80011f8:	2b33      	cmp	r3, #51	; 0x33
 80011fa:	d002      	beq.n	8001202 <main+0x1b6>
 80011fc:	7a3b      	ldrb	r3, [r7, #8]
 80011fe:	2b34      	cmp	r3, #52	; 0x34
 8001200:	d1e2      	bne.n	80011c8 <main+0x17c>
			if (r_buffer[0] == '3')
 8001202:	7a3b      	ldrb	r3, [r7, #8]
 8001204:	2b33      	cmp	r3, #51	; 0x33
 8001206:	d102      	bne.n	800120e <main+0x1c2>
				etat = init_pot;
 8001208:	2306      	movs	r3, #6
 800120a:	77fb      	strb	r3, [r7, #31]
 800120c:	e001      	b.n	8001212 <main+0x1c6>
			else
				etat = auto_mode;
 800120e:	2304      	movs	r3, #4
 8001210:	77fb      	strb	r3, [r7, #31]
			r_buffer[0] = ' ';
 8001212:	2320      	movs	r3, #32
 8001214:	723b      	strb	r3, [r7, #8]

			break;
 8001216:	e0e9      	b.n	80013ec <main+0x3a0>
		case auto_mode:
			//if (HAL_UART_Transmit(&huart2, (uint8_t*) "Auto mode \n\r", 15, 100)
				//	!= HAL_OK)
				//Error_Handler();
			//HAL_Delay(3000);
			printf("Auto mode \n\r");
 8001218:	4859      	ldr	r0, [pc, #356]	; (8001380 <main+0x334>)
 800121a:	f007 fdc1 	bl	8008da0 <iprintf>

			do {

				if (HAL_UART_Receive(&huart2, (uint8_t*) r_buffer, 2, 10)
 800121e:	f107 0108 	add.w	r1, r7, #8
 8001222:	230a      	movs	r3, #10
 8001224:	2202      	movs	r2, #2
 8001226:	484e      	ldr	r0, [pc, #312]	; (8001360 <main+0x314>)
 8001228:	f005 fe18 	bl	8006e5c <HAL_UART_Receive>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d102      	bne.n	8001238 <main+0x1ec>
						== HAL_OK)
					HAL_Delay(10);
 8001232:	200a      	movs	r0, #10
 8001234:	f000 ff02 	bl	800203c <HAL_Delay>
				//HAL_UART_Transmit(&huart2, (uint8_t*) r_buffer, 2, 10);
				//HAL_Delay(50);

			} while (r_buffer[0] != '6' && r_buffer[0] != 'g');
 8001238:	7a3b      	ldrb	r3, [r7, #8]
 800123a:	2b36      	cmp	r3, #54	; 0x36
 800123c:	d002      	beq.n	8001244 <main+0x1f8>
 800123e:	7a3b      	ldrb	r3, [r7, #8]
 8001240:	2b67      	cmp	r3, #103	; 0x67
 8001242:	d1ec      	bne.n	800121e <main+0x1d2>

			//quand on envoie le caratère g on se retrouve dans la phase de gaz sur le clavier
			//si 6 on retourne au mode ready

			if (r_buffer[0] == '6') {
 8001244:	7a3b      	ldrb	r3, [r7, #8]
 8001246:	2b36      	cmp	r3, #54	; 0x36
 8001248:	d104      	bne.n	8001254 <main+0x208>
				etat = motor_ready;
 800124a:	2302      	movs	r3, #2
 800124c:	77fb      	strb	r3, [r7, #31]
				r_buffer[0] = ' ';
 800124e:	2320      	movs	r3, #32
 8001250:	723b      	strb	r3, [r7, #8]
				break;
 8001252:	e0cb      	b.n	80013ec <main+0x3a0>
				//le but pour l'entrée des gaz sera de mettre une valeur, la traiter et retourner en mode auto pour recommencer encore
				//solution simple
			}else {

				//Soucis avec la recuperation deplusieurs caracteres sur la console, rien ne s'affiche
				printf("vroum sur le clavier \n\r");
 8001254:	484b      	ldr	r0, [pc, #300]	; (8001384 <main+0x338>)
 8001256:	f007 fda3 	bl	8008da0 <iprintf>
				HAL_Delay(1150);
 800125a:	f240 407e 	movw	r0, #1150	; 0x47e
 800125e:	f000 feed 	bl	800203c <HAL_Delay>

				//clear le gaz buffer
				gaz_buffer[0]=' ',gaz_buffer[1]=' ',gaz_buffer[2]=' ',gaz_buffer[3]=' ';
 8001262:	4b49      	ldr	r3, [pc, #292]	; (8001388 <main+0x33c>)
 8001264:	2220      	movs	r2, #32
 8001266:	701a      	strb	r2, [r3, #0]
 8001268:	4b47      	ldr	r3, [pc, #284]	; (8001388 <main+0x33c>)
 800126a:	2220      	movs	r2, #32
 800126c:	705a      	strb	r2, [r3, #1]
 800126e:	4b46      	ldr	r3, [pc, #280]	; (8001388 <main+0x33c>)
 8001270:	2220      	movs	r2, #32
 8001272:	709a      	strb	r2, [r3, #2]
 8001274:	4b44      	ldr	r3, [pc, #272]	; (8001388 <main+0x33c>)
 8001276:	2220      	movs	r2, #32
 8001278:	70da      	strb	r2, [r3, #3]
				do {


						if (HAL_UART_Receive(&huart2, (uint8_t*) gaz_buffer, 4, 10)
 800127a:	230a      	movs	r3, #10
 800127c:	2204      	movs	r2, #4
 800127e:	4942      	ldr	r1, [pc, #264]	; (8001388 <main+0x33c>)
 8001280:	4837      	ldr	r0, [pc, #220]	; (8001360 <main+0x314>)
 8001282:	f005 fdeb 	bl	8006e5c <HAL_UART_Receive>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d105      	bne.n	8001298 <main+0x24c>
														== HAL_OK)
						HAL_UART_Transmit(&huart2, (uint8_t*) gaz_buffer, 4, 10);
 800128c:	230a      	movs	r3, #10
 800128e:	2204      	movs	r2, #4
 8001290:	493d      	ldr	r1, [pc, #244]	; (8001388 <main+0x33c>)
 8001292:	4833      	ldr	r0, [pc, #204]	; (8001360 <main+0x314>)
 8001294:	f005 fd4e 	bl	8006d34 <HAL_UART_Transmit>


						//je compare les differentes case de mon tableau pour ma boucle de sortie
						} while (gaz_buffer[1] !='\n' && gaz_buffer[2] !='\n' && gaz_buffer[3] !='\n' );
 8001298:	4b3b      	ldr	r3, [pc, #236]	; (8001388 <main+0x33c>)
 800129a:	785b      	ldrb	r3, [r3, #1]
 800129c:	2b0a      	cmp	r3, #10
 800129e:	d007      	beq.n	80012b0 <main+0x264>
 80012a0:	4b39      	ldr	r3, [pc, #228]	; (8001388 <main+0x33c>)
 80012a2:	789b      	ldrb	r3, [r3, #2]
 80012a4:	2b0a      	cmp	r3, #10
 80012a6:	d003      	beq.n	80012b0 <main+0x264>
 80012a8:	4b37      	ldr	r3, [pc, #220]	; (8001388 <main+0x33c>)
 80012aa:	78db      	ldrb	r3, [r3, #3]
 80012ac:	2b0a      	cmp	r3, #10
 80012ae:	d1e4      	bne.n	800127a <main+0x22e>
				etat = auto_mode;
 80012b0:	2304      	movs	r3, #4
 80012b2:	77fb      	strb	r3, [r7, #31]
				break;
 80012b4:	e09a      	b.n	80013ec <main+0x3a0>



		case manual_mode:

			if (HAL_UART_Transmit(&huart2, (uint8_t*) "Manual mode \n\r", 15,
 80012b6:	2364      	movs	r3, #100	; 0x64
 80012b8:	220f      	movs	r2, #15
 80012ba:	4934      	ldr	r1, [pc, #208]	; (800138c <main+0x340>)
 80012bc:	4828      	ldr	r0, [pc, #160]	; (8001360 <main+0x314>)
 80012be:	f005 fd39 	bl	8006d34 <HAL_UART_Transmit>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <main+0x280>
					100) != HAL_OK)
				Error_Handler();
 80012c8:	f000 fa9c 	bl	8001804 <Error_Handler>
			//
			//recuperation de la pwm

			do {

				if (HAL_UART_Receive(&huart2, (uint8_t*) r_buffer, 2, 1)
 80012cc:	f107 0108 	add.w	r1, r7, #8
 80012d0:	2301      	movs	r3, #1
 80012d2:	2202      	movs	r2, #2
 80012d4:	4822      	ldr	r0, [pc, #136]	; (8001360 <main+0x314>)
 80012d6:	f005 fdc1 	bl	8006e5c <HAL_UART_Receive>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d102      	bne.n	80012e6 <main+0x29a>
						== HAL_OK)
					HAL_Delay(10);
 80012e0:	200a      	movs	r0, #10
 80012e2:	f000 feab 	bl	800203c <HAL_Delay>
				//HAL_UART_Transmit(&huart2, (uint8_t*) r_buffer, 2, 10);
				//HAL_Delay(50);
				valeur_can = load_adc(hadc1, 5);
 80012e6:	4c2a      	ldr	r4, [pc, #168]	; (8001390 <main+0x344>)
 80012e8:	2305      	movs	r3, #5
 80012ea:	9315      	str	r3, [sp, #84]	; 0x54
 80012ec:	4668      	mov	r0, sp
 80012ee:	f104 0310 	add.w	r3, r4, #16
 80012f2:	2254      	movs	r2, #84	; 0x54
 80012f4:	4619      	mov	r1, r3
 80012f6:	f006 fec3 	bl	8008080 <memcpy>
 80012fa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80012fe:	f000 fd89 	bl	8001e14 <load_adc>
 8001302:	60f8      	str	r0, [r7, #12]
				mapped_value = mapping_adc_value(valeur_can);
 8001304:	68f8      	ldr	r0, [r7, #12]
 8001306:	f000 fda1 	bl	8001e4c <mapping_adc_value>
 800130a:	6138      	str	r0, [r7, #16]
				HAL_Delay(100);
 800130c:	2064      	movs	r0, #100	; 0x64
 800130e:	f000 fe95 	bl	800203c <HAL_Delay>
				load_pwm(htim3, mapped_value);
 8001312:	4e11      	ldr	r6, [pc, #68]	; (8001358 <main+0x30c>)
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	930f      	str	r3, [sp, #60]	; 0x3c
 8001318:	466d      	mov	r5, sp
 800131a:	f106 0410 	add.w	r4, r6, #16
 800131e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001320:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001322:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001324:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001326:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001328:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800132a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800132e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001332:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001336:	f000 fdb5 	bl	8001ea4 <load_pwm>

			} while (r_buffer[0] != '6');
 800133a:	7a3b      	ldrb	r3, [r7, #8]
 800133c:	2b36      	cmp	r3, #54	; 0x36
 800133e:	d1c5      	bne.n	80012cc <main+0x280>

			etat = motor_ready;
 8001340:	2302      	movs	r3, #2
 8001342:	77fb      	strb	r3, [r7, #31]
			r_buffer[0] = ' ';
 8001344:	2320      	movs	r3, #32
 8001346:	723b      	strb	r3, [r7, #8]
			break;
 8001348:	e050      	b.n	80013ec <main+0x3a0>

		case init_pot:
			//if (HAL_UART_Transmit(&huart2, (uint8_t*) "Auto mode \n\r", 15, 100)
			//	!= HAL_OK)
			//Error_Handler();
			okay = 1;
 800134a:	2301      	movs	r3, #1
 800134c:	61bb      	str	r3, [r7, #24]
			//val = load_adc(hadc1, 5);
			//load_pwm(htim3, val);
			printf("mettez le potentiometre à zero \n\r");
 800134e:	4811      	ldr	r0, [pc, #68]	; (8001394 <main+0x348>)
 8001350:	f007 fd26 	bl	8008da0 <iprintf>
			//HAL_Delay(3000);

			while (okay == 1) {
 8001354:	e03e      	b.n	80013d4 <main+0x388>
 8001356:	bf00      	nop
 8001358:	200002b0 	.word	0x200002b0
 800135c:	0800caa0 	.word	0x0800caa0
 8001360:	200002fc 	.word	0x200002fc
 8001364:	0800cabc 	.word	0x0800cabc
 8001368:	0800cacc 	.word	0x0800cacc
 800136c:	20000004 	.word	0x20000004
 8001370:	0800cad8 	.word	0x0800cad8
 8001374:	0800caf4 	.word	0x0800caf4
 8001378:	20000008 	.word	0x20000008
 800137c:	0800cb0c 	.word	0x0800cb0c
 8001380:	0800cb1c 	.word	0x0800cb1c
 8001384:	0800cb2c 	.word	0x0800cb2c
 8001388:	20000410 	.word	0x20000410
 800138c:	0800cb44 	.word	0x0800cb44
 8001390:	20000204 	.word	0x20000204
 8001394:	0800cb54 	.word	0x0800cb54
				//valeur_can = load_adc(hadc1, 5);
				//printf("%d \r",valeur_can);
				//printf("\n");
				mapped_value = mapping_adc_value(load_adc(hadc1, 5));
 8001398:	4c15      	ldr	r4, [pc, #84]	; (80013f0 <main+0x3a4>)
 800139a:	2305      	movs	r3, #5
 800139c:	9315      	str	r3, [sp, #84]	; 0x54
 800139e:	4668      	mov	r0, sp
 80013a0:	f104 0310 	add.w	r3, r4, #16
 80013a4:	2254      	movs	r2, #84	; 0x54
 80013a6:	4619      	mov	r1, r3
 80013a8:	f006 fe6a 	bl	8008080 <memcpy>
 80013ac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013b0:	f000 fd30 	bl	8001e14 <load_adc>
 80013b4:	4603      	mov	r3, r0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f000 fd48 	bl	8001e4c <mapping_adc_value>
 80013bc:	6138      	str	r0, [r7, #16]
				printf("pot %d \r", mapped_value);
 80013be:	6939      	ldr	r1, [r7, #16]
 80013c0:	480c      	ldr	r0, [pc, #48]	; (80013f4 <main+0x3a8>)
 80013c2:	f007 fced 	bl	8008da0 <iprintf>
				//printf("%d okayy \n \r",okay);
				//load_pwm(htim3, mapped_value);
				if (mapped_value <= 1513) {
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	f240 52e9 	movw	r2, #1513	; 0x5e9
 80013cc:	4293      	cmp	r3, r2
 80013ce:	dc01      	bgt.n	80013d4 <main+0x388>
					okay = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61bb      	str	r3, [r7, #24]
			while (okay == 1) {
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d0de      	beq.n	8001398 <main+0x34c>
					//printf("o %d \n \r", okay);

				}

			}
			printf("succes \n\r");
 80013da:	4807      	ldr	r0, [pc, #28]	; (80013f8 <main+0x3ac>)
 80013dc:	f007 fce0 	bl	8008da0 <iprintf>
			etat = manual_mode;
 80013e0:	2303      	movs	r3, #3
 80013e2:	77fb      	strb	r3, [r7, #31]
			r_buffer[0] = ' ';
 80013e4:	2320      	movs	r3, #32
 80013e6:	723b      	strb	r3, [r7, #8]

			break;
 80013e8:	e000      	b.n	80013ec <main+0x3a0>

		default:
			break;
 80013ea:	bf00      	nop
		__HAL_UART_CLEAR_OREFLAG(&huart2);
 80013ec:	e650      	b.n	8001090 <main+0x44>
 80013ee:	bf00      	nop
 80013f0:	20000204 	.word	0x20000204
 80013f4:	0800cb78 	.word	0x0800cb78
 80013f8:	0800cb84 	.word	0x0800cb84

080013fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b096      	sub	sp, #88	; 0x58
 8001400:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001402:	f107 0314 	add.w	r3, r7, #20
 8001406:	2244      	movs	r2, #68	; 0x44
 8001408:	2100      	movs	r1, #0
 800140a:	4618      	mov	r0, r3
 800140c:	f006 fe46 	bl	800809c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001410:	463b      	mov	r3, r7
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
 800141c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800141e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001422:	f002 ff75 	bl	8004310 <HAL_PWREx_ControlVoltageScaling>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800142c:	f000 f9ea 	bl	8001804 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001430:	2302      	movs	r3, #2
 8001432:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001434:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001438:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800143a:	2310      	movs	r3, #16
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800143e:	2302      	movs	r3, #2
 8001440:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001442:	2302      	movs	r3, #2
 8001444:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001446:	2301      	movs	r3, #1
 8001448:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800144a:	230a      	movs	r3, #10
 800144c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800144e:	2307      	movs	r3, #7
 8001450:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001452:	2302      	movs	r3, #2
 8001454:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001456:	2302      	movs	r3, #2
 8001458:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	4618      	mov	r0, r3
 8001460:	f002 ffac 	bl	80043bc <HAL_RCC_OscConfig>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800146a:	f000 f9cb 	bl	8001804 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800146e:	230f      	movs	r3, #15
 8001470:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001472:	2303      	movs	r3, #3
 8001474:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001476:	2300      	movs	r3, #0
 8001478:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800147e:	2300      	movs	r3, #0
 8001480:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001482:	463b      	mov	r3, r7
 8001484:	2104      	movs	r1, #4
 8001486:	4618      	mov	r0, r3
 8001488:	f003 fb80 	bl	8004b8c <HAL_RCC_ClockConfig>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001492:	f000 f9b7 	bl	8001804 <Error_Handler>
  }
}
 8001496:	bf00      	nop
 8001498:	3758      	adds	r7, #88	; 0x58
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	; 0x28
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80014a6:	f107 031c 	add.w	r3, r7, #28
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
 80014c0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80014c2:	4b2f      	ldr	r3, [pc, #188]	; (8001580 <MX_ADC1_Init+0xe0>)
 80014c4:	4a2f      	ldr	r2, [pc, #188]	; (8001584 <MX_ADC1_Init+0xe4>)
 80014c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80014c8:	4b2d      	ldr	r3, [pc, #180]	; (8001580 <MX_ADC1_Init+0xe0>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014ce:	4b2c      	ldr	r3, [pc, #176]	; (8001580 <MX_ADC1_Init+0xe0>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014d4:	4b2a      	ldr	r3, [pc, #168]	; (8001580 <MX_ADC1_Init+0xe0>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014da:	4b29      	ldr	r3, [pc, #164]	; (8001580 <MX_ADC1_Init+0xe0>)
 80014dc:	2200      	movs	r2, #0
 80014de:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014e0:	4b27      	ldr	r3, [pc, #156]	; (8001580 <MX_ADC1_Init+0xe0>)
 80014e2:	2204      	movs	r2, #4
 80014e4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80014e6:	4b26      	ldr	r3, [pc, #152]	; (8001580 <MX_ADC1_Init+0xe0>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014ec:	4b24      	ldr	r3, [pc, #144]	; (8001580 <MX_ADC1_Init+0xe0>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80014f2:	4b23      	ldr	r3, [pc, #140]	; (8001580 <MX_ADC1_Init+0xe0>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014f8:	4b21      	ldr	r3, [pc, #132]	; (8001580 <MX_ADC1_Init+0xe0>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001500:	4b1f      	ldr	r3, [pc, #124]	; (8001580 <MX_ADC1_Init+0xe0>)
 8001502:	2200      	movs	r2, #0
 8001504:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001506:	4b1e      	ldr	r3, [pc, #120]	; (8001580 <MX_ADC1_Init+0xe0>)
 8001508:	2200      	movs	r2, #0
 800150a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800150c:	4b1c      	ldr	r3, [pc, #112]	; (8001580 <MX_ADC1_Init+0xe0>)
 800150e:	2200      	movs	r2, #0
 8001510:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001514:	4b1a      	ldr	r3, [pc, #104]	; (8001580 <MX_ADC1_Init+0xe0>)
 8001516:	2200      	movs	r2, #0
 8001518:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800151a:	4b19      	ldr	r3, [pc, #100]	; (8001580 <MX_ADC1_Init+0xe0>)
 800151c:	2200      	movs	r2, #0
 800151e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001522:	4817      	ldr	r0, [pc, #92]	; (8001580 <MX_ADC1_Init+0xe0>)
 8001524:	f000 ffa4 	bl	8002470 <HAL_ADC_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800152e:	f000 f969 	bl	8001804 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001536:	f107 031c 	add.w	r3, r7, #28
 800153a:	4619      	mov	r1, r3
 800153c:	4810      	ldr	r0, [pc, #64]	; (8001580 <MX_ADC1_Init+0xe0>)
 800153e:	f002 f96f 	bl	8003820 <HAL_ADCEx_MultiModeConfigChannel>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001548:	f000 f95c 	bl	8001804 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800154c:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <MX_ADC1_Init+0xe8>)
 800154e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001550:	2306      	movs	r3, #6
 8001552:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001558:	237f      	movs	r3, #127	; 0x7f
 800155a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800155c:	2304      	movs	r3, #4
 800155e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001564:	1d3b      	adds	r3, r7, #4
 8001566:	4619      	mov	r1, r3
 8001568:	4805      	ldr	r0, [pc, #20]	; (8001580 <MX_ADC1_Init+0xe0>)
 800156a:	f001 fcaf 	bl	8002ecc <HAL_ADC_ConfigChannel>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001574:	f000 f946 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001578:	bf00      	nop
 800157a:	3728      	adds	r7, #40	; 0x28
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000204 	.word	0x20000204
 8001584:	50040000 	.word	0x50040000
 8001588:	14f00020 	.word	0x14f00020

0800158c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08e      	sub	sp, #56	; 0x38
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001592:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	609a      	str	r2, [r3, #8]
 800159e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a0:	f107 031c 	add.w	r3, r7, #28
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ac:	463b      	mov	r3, r7
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	609a      	str	r2, [r3, #8]
 80015b6:	60da      	str	r2, [r3, #12]
 80015b8:	611a      	str	r2, [r3, #16]
 80015ba:	615a      	str	r2, [r3, #20]
 80015bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015be:	4b2d      	ldr	r3, [pc, #180]	; (8001674 <MX_TIM3_Init+0xe8>)
 80015c0:	4a2d      	ldr	r2, [pc, #180]	; (8001678 <MX_TIM3_Init+0xec>)
 80015c2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80015c4:	4b2b      	ldr	r3, [pc, #172]	; (8001674 <MX_TIM3_Init+0xe8>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ca:	4b2a      	ldr	r3, [pc, #168]	; (8001674 <MX_TIM3_Init+0xe8>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4096;
 80015d0:	4b28      	ldr	r3, [pc, #160]	; (8001674 <MX_TIM3_Init+0xe8>)
 80015d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d8:	4b26      	ldr	r3, [pc, #152]	; (8001674 <MX_TIM3_Init+0xe8>)
 80015da:	2200      	movs	r2, #0
 80015dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015de:	4b25      	ldr	r3, [pc, #148]	; (8001674 <MX_TIM3_Init+0xe8>)
 80015e0:	2280      	movs	r2, #128	; 0x80
 80015e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015e4:	4823      	ldr	r0, [pc, #140]	; (8001674 <MX_TIM3_Init+0xe8>)
 80015e6:	f004 f993 	bl	8005910 <HAL_TIM_Base_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80015f0:	f000 f908 	bl	8001804 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015fe:	4619      	mov	r1, r3
 8001600:	481c      	ldr	r0, [pc, #112]	; (8001674 <MX_TIM3_Init+0xe8>)
 8001602:	f004 fd77 	bl	80060f4 <HAL_TIM_ConfigClockSource>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800160c:	f000 f8fa 	bl	8001804 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001610:	4818      	ldr	r0, [pc, #96]	; (8001674 <MX_TIM3_Init+0xe8>)
 8001612:	f004 f9d4 	bl	80059be <HAL_TIM_PWM_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800161c:	f000 f8f2 	bl	8001804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001620:	2300      	movs	r3, #0
 8001622:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001624:	2300      	movs	r3, #0
 8001626:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001628:	f107 031c 	add.w	r3, r7, #28
 800162c:	4619      	mov	r1, r3
 800162e:	4811      	ldr	r0, [pc, #68]	; (8001674 <MX_TIM3_Init+0xe8>)
 8001630:	f005 fa8c 	bl	8006b4c <HAL_TIMEx_MasterConfigSynchronization>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800163a:	f000 f8e3 	bl	8001804 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800163e:	2360      	movs	r3, #96	; 0x60
 8001640:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 25;
 8001642:	2319      	movs	r3, #25
 8001644:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001646:	2300      	movs	r3, #0
 8001648:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800164e:	463b      	mov	r3, r7
 8001650:	2204      	movs	r2, #4
 8001652:	4619      	mov	r1, r3
 8001654:	4807      	ldr	r0, [pc, #28]	; (8001674 <MX_TIM3_Init+0xe8>)
 8001656:	f004 fc39 	bl	8005ecc <HAL_TIM_PWM_ConfigChannel>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001660:	f000 f8d0 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001664:	4803      	ldr	r0, [pc, #12]	; (8001674 <MX_TIM3_Init+0xe8>)
 8001666:	f000 f9bd 	bl	80019e4 <HAL_TIM_MspPostInit>

}
 800166a:	bf00      	nop
 800166c:	3738      	adds	r7, #56	; 0x38
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	200002b0 	.word	0x200002b0
 8001678:	40000400 	.word	0x40000400

0800167c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001680:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <MX_USART2_UART_Init+0x58>)
 8001682:	4a15      	ldr	r2, [pc, #84]	; (80016d8 <MX_USART2_UART_Init+0x5c>)
 8001684:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001686:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <MX_USART2_UART_Init+0x58>)
 8001688:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800168c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800168e:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <MX_USART2_UART_Init+0x58>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001694:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <MX_USART2_UART_Init+0x58>)
 8001696:	2200      	movs	r2, #0
 8001698:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800169a:	4b0e      	ldr	r3, [pc, #56]	; (80016d4 <MX_USART2_UART_Init+0x58>)
 800169c:	2200      	movs	r2, #0
 800169e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016a0:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <MX_USART2_UART_Init+0x58>)
 80016a2:	220c      	movs	r2, #12
 80016a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a6:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <MX_USART2_UART_Init+0x58>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ac:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <MX_USART2_UART_Init+0x58>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016b2:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <MX_USART2_UART_Init+0x58>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <MX_USART2_UART_Init+0x58>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016be:	4805      	ldr	r0, [pc, #20]	; (80016d4 <MX_USART2_UART_Init+0x58>)
 80016c0:	f005 faea 	bl	8006c98 <HAL_UART_Init>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80016ca:	f000 f89b 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	200002fc 	.word	0x200002fc
 80016d8:	40004400 	.word	0x40004400

080016dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016e2:	4b14      	ldr	r3, [pc, #80]	; (8001734 <MX_DMA_Init+0x58>)
 80016e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016e6:	4a13      	ldr	r2, [pc, #76]	; (8001734 <MX_DMA_Init+0x58>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	6493      	str	r3, [r2, #72]	; 0x48
 80016ee:	4b11      	ldr	r3, [pc, #68]	; (8001734 <MX_DMA_Init+0x58>)
 80016f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	607b      	str	r3, [r7, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2100      	movs	r1, #0
 80016fe:	200b      	movs	r0, #11
 8001700:	f002 fa19 	bl	8003b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001704:	200b      	movs	r0, #11
 8001706:	f002 fa32 	bl	8003b6e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800170a:	2200      	movs	r2, #0
 800170c:	2100      	movs	r1, #0
 800170e:	2010      	movs	r0, #16
 8001710:	f002 fa11 	bl	8003b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001714:	2010      	movs	r0, #16
 8001716:	f002 fa2a 	bl	8003b6e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800171a:	2200      	movs	r2, #0
 800171c:	2100      	movs	r1, #0
 800171e:	2011      	movs	r0, #17
 8001720:	f002 fa09 	bl	8003b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001724:	2011      	movs	r0, #17
 8001726:	f002 fa22 	bl	8003b6e <HAL_NVIC_EnableIRQ>

}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40021000 	.word	0x40021000

08001738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08a      	sub	sp, #40	; 0x28
 800173c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173e:	f107 0314 	add.w	r3, r7, #20
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
 800174c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800174e:	4b2b      	ldr	r3, [pc, #172]	; (80017fc <MX_GPIO_Init+0xc4>)
 8001750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001752:	4a2a      	ldr	r2, [pc, #168]	; (80017fc <MX_GPIO_Init+0xc4>)
 8001754:	f043 0304 	orr.w	r3, r3, #4
 8001758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800175a:	4b28      	ldr	r3, [pc, #160]	; (80017fc <MX_GPIO_Init+0xc4>)
 800175c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175e:	f003 0304 	and.w	r3, r3, #4
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001766:	4b25      	ldr	r3, [pc, #148]	; (80017fc <MX_GPIO_Init+0xc4>)
 8001768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176a:	4a24      	ldr	r2, [pc, #144]	; (80017fc <MX_GPIO_Init+0xc4>)
 800176c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001772:	4b22      	ldr	r3, [pc, #136]	; (80017fc <MX_GPIO_Init+0xc4>)
 8001774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800177e:	4b1f      	ldr	r3, [pc, #124]	; (80017fc <MX_GPIO_Init+0xc4>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001782:	4a1e      	ldr	r2, [pc, #120]	; (80017fc <MX_GPIO_Init+0xc4>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800178a:	4b1c      	ldr	r3, [pc, #112]	; (80017fc <MX_GPIO_Init+0xc4>)
 800178c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	60bb      	str	r3, [r7, #8]
 8001794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001796:	4b19      	ldr	r3, [pc, #100]	; (80017fc <MX_GPIO_Init+0xc4>)
 8001798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179a:	4a18      	ldr	r2, [pc, #96]	; (80017fc <MX_GPIO_Init+0xc4>)
 800179c:	f043 0302 	orr.w	r3, r3, #2
 80017a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017a2:	4b16      	ldr	r3, [pc, #88]	; (80017fc <MX_GPIO_Init+0xc4>)
 80017a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	607b      	str	r3, [r7, #4]
 80017ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2120      	movs	r1, #32
 80017b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b6:	f002 fd85 	bl	80042c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017c0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80017c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017ca:	f107 0314 	add.w	r3, r7, #20
 80017ce:	4619      	mov	r1, r3
 80017d0:	480b      	ldr	r0, [pc, #44]	; (8001800 <MX_GPIO_Init+0xc8>)
 80017d2:	f002 fbcd 	bl	8003f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80017d6:	2320      	movs	r3, #32
 80017d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017da:	2301      	movs	r3, #1
 80017dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e2:	2300      	movs	r3, #0
 80017e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017e6:	f107 0314 	add.w	r3, r7, #20
 80017ea:	4619      	mov	r1, r3
 80017ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f0:	f002 fbbe 	bl	8003f70 <HAL_GPIO_Init>

}
 80017f4:	bf00      	nop
 80017f6:	3728      	adds	r7, #40	; 0x28
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40021000 	.word	0x40021000
 8001800:	48000800 	.word	0x48000800

08001804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001808:	b672      	cpsid	i
}
 800180a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800180c:	e7fe      	b.n	800180c <Error_Handler+0x8>
	...

08001810 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001816:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <HAL_MspInit+0x44>)
 8001818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800181a:	4a0e      	ldr	r2, [pc, #56]	; (8001854 <HAL_MspInit+0x44>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	6613      	str	r3, [r2, #96]	; 0x60
 8001822:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <HAL_MspInit+0x44>)
 8001824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800182e:	4b09      	ldr	r3, [pc, #36]	; (8001854 <HAL_MspInit+0x44>)
 8001830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001832:	4a08      	ldr	r2, [pc, #32]	; (8001854 <HAL_MspInit+0x44>)
 8001834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001838:	6593      	str	r3, [r2, #88]	; 0x58
 800183a:	4b06      	ldr	r3, [pc, #24]	; (8001854 <HAL_MspInit+0x44>)
 800183c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001842:	603b      	str	r3, [r7, #0]
 8001844:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	40021000 	.word	0x40021000

08001858 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b0ac      	sub	sp, #176	; 0xb0
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	2288      	movs	r2, #136	; 0x88
 8001876:	2100      	movs	r1, #0
 8001878:	4618      	mov	r0, r3
 800187a:	f006 fc0f 	bl	800809c <memset>
  if(hadc->Instance==ADC1)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a41      	ldr	r2, [pc, #260]	; (8001988 <HAL_ADC_MspInit+0x130>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d17a      	bne.n	800197e <HAL_ADC_MspInit+0x126>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001888:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800188c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800188e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001892:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001896:	2302      	movs	r3, #2
 8001898:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800189a:	2301      	movs	r3, #1
 800189c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800189e:	2308      	movs	r3, #8
 80018a0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80018a2:	2307      	movs	r3, #7
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80018a6:	2302      	movs	r3, #2
 80018a8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80018aa:	2302      	movs	r3, #2
 80018ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80018ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018b2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	4618      	mov	r0, r3
 80018ba:	f003 fb6d 	bl	8004f98 <HAL_RCCEx_PeriphCLKConfig>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80018c4:	f7ff ff9e 	bl	8001804 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80018c8:	4b30      	ldr	r3, [pc, #192]	; (800198c <HAL_ADC_MspInit+0x134>)
 80018ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018cc:	4a2f      	ldr	r2, [pc, #188]	; (800198c <HAL_ADC_MspInit+0x134>)
 80018ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018d4:	4b2d      	ldr	r3, [pc, #180]	; (800198c <HAL_ADC_MspInit+0x134>)
 80018d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018dc:	613b      	str	r3, [r7, #16]
 80018de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e0:	4b2a      	ldr	r3, [pc, #168]	; (800198c <HAL_ADC_MspInit+0x134>)
 80018e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e4:	4a29      	ldr	r2, [pc, #164]	; (800198c <HAL_ADC_MspInit+0x134>)
 80018e6:	f043 0301 	orr.w	r3, r3, #1
 80018ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ec:	4b27      	ldr	r3, [pc, #156]	; (800198c <HAL_ADC_MspInit+0x134>)
 80018ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018f8:	2301      	movs	r3, #1
 80018fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80018fe:	230b      	movs	r3, #11
 8001900:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800190e:	4619      	mov	r1, r3
 8001910:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001914:	f002 fb2c 	bl	8003f70 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001918:	4b1d      	ldr	r3, [pc, #116]	; (8001990 <HAL_ADC_MspInit+0x138>)
 800191a:	4a1e      	ldr	r2, [pc, #120]	; (8001994 <HAL_ADC_MspInit+0x13c>)
 800191c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800191e:	4b1c      	ldr	r3, [pc, #112]	; (8001990 <HAL_ADC_MspInit+0x138>)
 8001920:	2200      	movs	r2, #0
 8001922:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001924:	4b1a      	ldr	r3, [pc, #104]	; (8001990 <HAL_ADC_MspInit+0x138>)
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800192a:	4b19      	ldr	r3, [pc, #100]	; (8001990 <HAL_ADC_MspInit+0x138>)
 800192c:	2200      	movs	r2, #0
 800192e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001930:	4b17      	ldr	r3, [pc, #92]	; (8001990 <HAL_ADC_MspInit+0x138>)
 8001932:	2280      	movs	r2, #128	; 0x80
 8001934:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001936:	4b16      	ldr	r3, [pc, #88]	; (8001990 <HAL_ADC_MspInit+0x138>)
 8001938:	f44f 7280 	mov.w	r2, #256	; 0x100
 800193c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800193e:	4b14      	ldr	r3, [pc, #80]	; (8001990 <HAL_ADC_MspInit+0x138>)
 8001940:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001944:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001946:	4b12      	ldr	r3, [pc, #72]	; (8001990 <HAL_ADC_MspInit+0x138>)
 8001948:	2200      	movs	r2, #0
 800194a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800194c:	4b10      	ldr	r3, [pc, #64]	; (8001990 <HAL_ADC_MspInit+0x138>)
 800194e:	2200      	movs	r2, #0
 8001950:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001952:	480f      	ldr	r0, [pc, #60]	; (8001990 <HAL_ADC_MspInit+0x138>)
 8001954:	f002 f926 	bl	8003ba4 <HAL_DMA_Init>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 800195e:	f7ff ff51 	bl	8001804 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a0a      	ldr	r2, [pc, #40]	; (8001990 <HAL_ADC_MspInit+0x138>)
 8001966:	64da      	str	r2, [r3, #76]	; 0x4c
 8001968:	4a09      	ldr	r2, [pc, #36]	; (8001990 <HAL_ADC_MspInit+0x138>)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800196e:	2200      	movs	r2, #0
 8001970:	2100      	movs	r1, #0
 8001972:	2012      	movs	r0, #18
 8001974:	f002 f8df 	bl	8003b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001978:	2012      	movs	r0, #18
 800197a:	f002 f8f8 	bl	8003b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800197e:	bf00      	nop
 8001980:	37b0      	adds	r7, #176	; 0xb0
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	50040000 	.word	0x50040000
 800198c:	40021000 	.word	0x40021000
 8001990:	20000268 	.word	0x20000268
 8001994:	40020008 	.word	0x40020008

08001998 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a0d      	ldr	r2, [pc, #52]	; (80019dc <HAL_TIM_Base_MspInit+0x44>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d113      	bne.n	80019d2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019aa:	4b0d      	ldr	r3, [pc, #52]	; (80019e0 <HAL_TIM_Base_MspInit+0x48>)
 80019ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ae:	4a0c      	ldr	r2, [pc, #48]	; (80019e0 <HAL_TIM_Base_MspInit+0x48>)
 80019b0:	f043 0302 	orr.w	r3, r3, #2
 80019b4:	6593      	str	r3, [r2, #88]	; 0x58
 80019b6:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <HAL_TIM_Base_MspInit+0x48>)
 80019b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80019c2:	2200      	movs	r2, #0
 80019c4:	2100      	movs	r1, #0
 80019c6:	201d      	movs	r0, #29
 80019c8:	f002 f8b5 	bl	8003b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80019cc:	201d      	movs	r0, #29
 80019ce:	f002 f8ce 	bl	8003b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80019d2:	bf00      	nop
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40000400 	.word	0x40000400
 80019e0:	40021000 	.word	0x40021000

080019e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b088      	sub	sp, #32
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ec:	f107 030c 	add.w	r3, r7, #12
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a11      	ldr	r2, [pc, #68]	; (8001a48 <HAL_TIM_MspPostInit+0x64>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d11c      	bne.n	8001a40 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a06:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <HAL_TIM_MspPostInit+0x68>)
 8001a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0a:	4a10      	ldr	r2, [pc, #64]	; (8001a4c <HAL_TIM_MspPostInit+0x68>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a12:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <HAL_TIM_MspPostInit+0x68>)
 8001a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a1e:	2380      	movs	r3, #128	; 0x80
 8001a20:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a22:	2302      	movs	r3, #2
 8001a24:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a32:	f107 030c 	add.w	r3, r7, #12
 8001a36:	4619      	mov	r1, r3
 8001a38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a3c:	f002 fa98 	bl	8003f70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a40:	bf00      	nop
 8001a42:	3720      	adds	r7, #32
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40000400 	.word	0x40000400
 8001a4c:	40021000 	.word	0x40021000

08001a50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b0ac      	sub	sp, #176	; 0xb0
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	2288      	movs	r2, #136	; 0x88
 8001a6e:	2100      	movs	r1, #0
 8001a70:	4618      	mov	r0, r3
 8001a72:	f006 fb13 	bl	800809c <memset>
  if(huart->Instance==USART2)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a4f      	ldr	r2, [pc, #316]	; (8001bb8 <HAL_UART_MspInit+0x168>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	f040 8096 	bne.w	8001bae <HAL_UART_MspInit+0x15e>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a82:	2302      	movs	r3, #2
 8001a84:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a86:	2300      	movs	r3, #0
 8001a88:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a8a:	f107 0314 	add.w	r3, r7, #20
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f003 fa82 	bl	8004f98 <HAL_RCCEx_PeriphCLKConfig>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001a9a:	f7ff feb3 	bl	8001804 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a9e:	4b47      	ldr	r3, [pc, #284]	; (8001bbc <HAL_UART_MspInit+0x16c>)
 8001aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa2:	4a46      	ldr	r2, [pc, #280]	; (8001bbc <HAL_UART_MspInit+0x16c>)
 8001aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aa8:	6593      	str	r3, [r2, #88]	; 0x58
 8001aaa:	4b44      	ldr	r3, [pc, #272]	; (8001bbc <HAL_UART_MspInit+0x16c>)
 8001aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab6:	4b41      	ldr	r3, [pc, #260]	; (8001bbc <HAL_UART_MspInit+0x16c>)
 8001ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aba:	4a40      	ldr	r2, [pc, #256]	; (8001bbc <HAL_UART_MspInit+0x16c>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ac2:	4b3e      	ldr	r3, [pc, #248]	; (8001bbc <HAL_UART_MspInit+0x16c>)
 8001ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ace:	230c      	movs	r3, #12
 8001ad0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ae6:	2307      	movs	r3, #7
 8001ae8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001af0:	4619      	mov	r1, r3
 8001af2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001af6:	f002 fa3b 	bl	8003f70 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001afa:	4b31      	ldr	r3, [pc, #196]	; (8001bc0 <HAL_UART_MspInit+0x170>)
 8001afc:	4a31      	ldr	r2, [pc, #196]	; (8001bc4 <HAL_UART_MspInit+0x174>)
 8001afe:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8001b00:	4b2f      	ldr	r3, [pc, #188]	; (8001bc0 <HAL_UART_MspInit+0x170>)
 8001b02:	2202      	movs	r2, #2
 8001b04:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b06:	4b2e      	ldr	r3, [pc, #184]	; (8001bc0 <HAL_UART_MspInit+0x170>)
 8001b08:	2210      	movs	r2, #16
 8001b0a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b0c:	4b2c      	ldr	r3, [pc, #176]	; (8001bc0 <HAL_UART_MspInit+0x170>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b12:	4b2b      	ldr	r3, [pc, #172]	; (8001bc0 <HAL_UART_MspInit+0x170>)
 8001b14:	2280      	movs	r2, #128	; 0x80
 8001b16:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b18:	4b29      	ldr	r3, [pc, #164]	; (8001bc0 <HAL_UART_MspInit+0x170>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b1e:	4b28      	ldr	r3, [pc, #160]	; (8001bc0 <HAL_UART_MspInit+0x170>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001b24:	4b26      	ldr	r3, [pc, #152]	; (8001bc0 <HAL_UART_MspInit+0x170>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b2a:	4b25      	ldr	r3, [pc, #148]	; (8001bc0 <HAL_UART_MspInit+0x170>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001b30:	4823      	ldr	r0, [pc, #140]	; (8001bc0 <HAL_UART_MspInit+0x170>)
 8001b32:	f002 f837 	bl	8003ba4 <HAL_DMA_Init>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8001b3c:	f7ff fe62 	bl	8001804 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a1f      	ldr	r2, [pc, #124]	; (8001bc0 <HAL_UART_MspInit+0x170>)
 8001b44:	66da      	str	r2, [r3, #108]	; 0x6c
 8001b46:	4a1e      	ldr	r2, [pc, #120]	; (8001bc0 <HAL_UART_MspInit+0x170>)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001b4c:	4b1e      	ldr	r3, [pc, #120]	; (8001bc8 <HAL_UART_MspInit+0x178>)
 8001b4e:	4a1f      	ldr	r2, [pc, #124]	; (8001bcc <HAL_UART_MspInit+0x17c>)
 8001b50:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8001b52:	4b1d      	ldr	r3, [pc, #116]	; (8001bc8 <HAL_UART_MspInit+0x178>)
 8001b54:	2202      	movs	r2, #2
 8001b56:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b58:	4b1b      	ldr	r3, [pc, #108]	; (8001bc8 <HAL_UART_MspInit+0x178>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b5e:	4b1a      	ldr	r3, [pc, #104]	; (8001bc8 <HAL_UART_MspInit+0x178>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b64:	4b18      	ldr	r3, [pc, #96]	; (8001bc8 <HAL_UART_MspInit+0x178>)
 8001b66:	2280      	movs	r2, #128	; 0x80
 8001b68:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b6a:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <HAL_UART_MspInit+0x178>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b70:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <HAL_UART_MspInit+0x178>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001b76:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <HAL_UART_MspInit+0x178>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b7c:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <HAL_UART_MspInit+0x178>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001b82:	4811      	ldr	r0, [pc, #68]	; (8001bc8 <HAL_UART_MspInit+0x178>)
 8001b84:	f002 f80e 	bl	8003ba4 <HAL_DMA_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 8001b8e:	f7ff fe39 	bl	8001804 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a0c      	ldr	r2, [pc, #48]	; (8001bc8 <HAL_UART_MspInit+0x178>)
 8001b96:	671a      	str	r2, [r3, #112]	; 0x70
 8001b98:	4a0b      	ldr	r2, [pc, #44]	; (8001bc8 <HAL_UART_MspInit+0x178>)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	2026      	movs	r0, #38	; 0x26
 8001ba4:	f001 ffc7 	bl	8003b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ba8:	2026      	movs	r0, #38	; 0x26
 8001baa:	f001 ffe0 	bl	8003b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bae:	bf00      	nop
 8001bb0:	37b0      	adds	r7, #176	; 0xb0
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40004400 	.word	0x40004400
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	20000380 	.word	0x20000380
 8001bc4:	40020080 	.word	0x40020080
 8001bc8:	200003c8 	.word	0x200003c8
 8001bcc:	4002006c 	.word	0x4002006c

08001bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bd4:	e7fe      	b.n	8001bd4 <NMI_Handler+0x4>

08001bd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bda:	e7fe      	b.n	8001bda <HardFault_Handler+0x4>

08001bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001be0:	e7fe      	b.n	8001be0 <MemManage_Handler+0x4>

08001be2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001be2:	b480      	push	{r7}
 8001be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001be6:	e7fe      	b.n	8001be6 <BusFault_Handler+0x4>

08001be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bec:	e7fe      	b.n	8001bec <UsageFault_Handler+0x4>

08001bee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c1c:	f000 f9ee 	bl	8001ffc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c20:	bf00      	nop
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c28:	4802      	ldr	r0, [pc, #8]	; (8001c34 <DMA1_Channel1_IRQHandler+0x10>)
 8001c2a:	f002 f8f2 	bl	8003e12 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20000268 	.word	0x20000268

08001c38 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001c3c:	4802      	ldr	r0, [pc, #8]	; (8001c48 <DMA1_Channel6_IRQHandler+0x10>)
 8001c3e:	f002 f8e8 	bl	8003e12 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	200003c8 	.word	0x200003c8

08001c4c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001c50:	4802      	ldr	r0, [pc, #8]	; (8001c5c <DMA1_Channel7_IRQHandler+0x10>)
 8001c52:	f002 f8de 	bl	8003e12 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20000380 	.word	0x20000380

08001c60 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c64:	4802      	ldr	r0, [pc, #8]	; (8001c70 <ADC1_2_IRQHandler+0x10>)
 8001c66:	f000 fef9 	bl	8002a5c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000204 	.word	0x20000204

08001c74 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c78:	4802      	ldr	r0, [pc, #8]	; (8001c84 <TIM3_IRQHandler+0x10>)
 8001c7a:	f004 f807 	bl	8005c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	200002b0 	.word	0x200002b0

08001c88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c8c:	4802      	ldr	r0, [pc, #8]	; (8001c98 <USART2_IRQHandler+0x10>)
 8001c8e:	f005 f9b7 	bl	8007000 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	200002fc 	.word	0x200002fc

08001c9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
	return 1;
 8001ca0:	2301      	movs	r3, #1
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <_kill>:

int _kill(int pid, int sig)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001cb6:	f006 f9b9 	bl	800802c <__errno>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2216      	movs	r2, #22
 8001cbe:	601a      	str	r2, [r3, #0]
	return -1;
 8001cc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <_exit>:

void _exit (int status)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001cd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f7ff ffe7 	bl	8001cac <_kill>
	while (1) {}		/* Make sure we hang here */
 8001cde:	e7fe      	b.n	8001cde <_exit+0x12>

08001ce0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]
 8001cf0:	e00a      	b.n	8001d08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001cf2:	f3af 8000 	nop.w
 8001cf6:	4601      	mov	r1, r0
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	1c5a      	adds	r2, r3, #1
 8001cfc:	60ba      	str	r2, [r7, #8]
 8001cfe:	b2ca      	uxtb	r2, r1
 8001d00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	3301      	adds	r3, #1
 8001d06:	617b      	str	r3, [r7, #20]
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	dbf0      	blt.n	8001cf2 <_read+0x12>
	}

return len;
 8001d10:	687b      	ldr	r3, [r7, #4]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3718      	adds	r7, #24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <_close>:
	}
	return len;
}

int _close(int file)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
	return -1;
 8001d22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
 8001d3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d42:	605a      	str	r2, [r3, #4]
	return 0;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <_isatty>:

int _isatty(int file)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b083      	sub	sp, #12
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
	return 1;
 8001d5a:	2301      	movs	r3, #1
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
	return 0;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
	...

08001d84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d8c:	4a14      	ldr	r2, [pc, #80]	; (8001de0 <_sbrk+0x5c>)
 8001d8e:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <_sbrk+0x60>)
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d98:	4b13      	ldr	r3, [pc, #76]	; (8001de8 <_sbrk+0x64>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d102      	bne.n	8001da6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001da0:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <_sbrk+0x64>)
 8001da2:	4a12      	ldr	r2, [pc, #72]	; (8001dec <_sbrk+0x68>)
 8001da4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001da6:	4b10      	ldr	r3, [pc, #64]	; (8001de8 <_sbrk+0x64>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d207      	bcs.n	8001dc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001db4:	f006 f93a 	bl	800802c <__errno>
 8001db8:	4603      	mov	r3, r0
 8001dba:	220c      	movs	r2, #12
 8001dbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc2:	e009      	b.n	8001dd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dc4:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <_sbrk+0x64>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dca:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <_sbrk+0x64>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	4a05      	ldr	r2, [pc, #20]	; (8001de8 <_sbrk+0x64>)
 8001dd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20018000 	.word	0x20018000
 8001de4:	00000400 	.word	0x00000400
 8001de8:	20000414 	.word	0x20000414
 8001dec:	20000430 	.word	0x20000430

08001df0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001df4:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <SystemInit+0x20>)
 8001df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dfa:	4a05      	ldr	r2, [pc, #20]	; (8001e10 <SystemInit+0x20>)
 8001dfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <load_adc>:
	 return concat_value;
}*/



int load_adc(ADC_HandleTypeDef hadc, int polTime) {
 8001e14:	b084      	sub	sp, #16
 8001e16:	b580      	push	{r7, lr}
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	f107 0c08 	add.w	ip, r7, #8
 8001e1e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	HAL_ADC_Start(&hadc);
 8001e22:	f107 0008 	add.w	r0, r7, #8
 8001e26:	f000 fc79 	bl	800271c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, polTime);
 8001e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	f107 0008 	add.w	r0, r7, #8
 8001e32:	f000 fd2d 	bl	8002890 <HAL_ADC_PollForConversion>
	return HAL_ADC_GetValue(&hadc);
 8001e36:	f107 0008 	add.w	r0, r7, #8
 8001e3a:	f000 fe01 	bl	8002a40 <HAL_ADC_GetValue>
 8001e3e:	4603      	mov	r3, r0



}
 8001e40:	4618      	mov	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001e48:	b004      	add	sp, #16
 8001e4a:	4770      	bx	lr

08001e4c <mapping_adc_value>:

int mapping_adc_value(int val){
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
	remap = 1512 +  (val * 2583/4095);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f640 2217 	movw	r2, #2583	; 0xa17
 8001e5a:	fb02 f303 	mul.w	r3, r2, r3
 8001e5e:	4a0f      	ldr	r2, [pc, #60]	; (8001e9c <mapping_adc_value+0x50>)
 8001e60:	fb82 1203 	smull	r1, r2, r2, r3
 8001e64:	441a      	add	r2, r3
 8001e66:	12d2      	asrs	r2, r2, #11
 8001e68:	17db      	asrs	r3, r3, #31
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	f503 63bd 	add.w	r3, r3, #1512	; 0x5e8
 8001e70:	ee07 3a90 	vmov	s15, r3
 8001e74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e78:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <mapping_adc_value+0x54>)
 8001e7a:	edc3 7a00 	vstr	s15, [r3]
	int map =  remap;
 8001e7e:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <mapping_adc_value+0x54>)
 8001e80:	edd3 7a00 	vldr	s15, [r3]
 8001e84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e88:	ee17 3a90 	vmov	r3, s15
 8001e8c:	60fb      	str	r3, [r7, #12]
	return map;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3714      	adds	r7, #20
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	80080081 	.word	0x80080081
 8001ea0:	20000418 	.word	0x20000418

08001ea4 <load_pwm>:

void load_pwm(TIM_HandleTypeDef htimX, int val) {
 8001ea4:	b084      	sub	sp, #16
 8001ea6:	b490      	push	{r4, r7}
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	f107 0408 	add.w	r4, r7, #8
 8001eae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	htimX.Instance->CCR2 = val;
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001eb6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc90      	pop	{r4, r7}
 8001ebe:	b004      	add	sp, #16
 8001ec0:	4770      	bx	lr

08001ec2 <y_print>:

void y_print(UART_HandleTypeDef *huart, char *mess,int len) {
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b084      	sub	sp, #16
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	60f8      	str	r0, [r7, #12]
 8001eca:	60b9      	str	r1, [r7, #8]
 8001ecc:	607a      	str	r2, [r7, #4]

	if (HAL_UART_Transmit(huart, (uint8_t*) mess,len, 100) != HAL_OK)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	2364      	movs	r3, #100	; 0x64
 8001ed4:	68b9      	ldr	r1, [r7, #8]
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f004 ff2c 	bl	8006d34 <HAL_UART_Transmit>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <y_print+0x24>
		Error_Handler();
 8001ee2:	f7ff fc8f 	bl	8001804 <Error_Handler>
}
 8001ee6:	bf00      	nop
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ef0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f28 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ef4:	f7ff ff7c 	bl	8001df0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ef8:	480c      	ldr	r0, [pc, #48]	; (8001f2c <LoopForever+0x6>)
  ldr r1, =_edata
 8001efa:	490d      	ldr	r1, [pc, #52]	; (8001f30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001efc:	4a0d      	ldr	r2, [pc, #52]	; (8001f34 <LoopForever+0xe>)
  movs r3, #0
 8001efe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f00:	e002      	b.n	8001f08 <LoopCopyDataInit>

08001f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f06:	3304      	adds	r3, #4

08001f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f0c:	d3f9      	bcc.n	8001f02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f0e:	4a0a      	ldr	r2, [pc, #40]	; (8001f38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f10:	4c0a      	ldr	r4, [pc, #40]	; (8001f3c <LoopForever+0x16>)
  movs r3, #0
 8001f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f14:	e001      	b.n	8001f1a <LoopFillZerobss>

08001f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f18:	3204      	adds	r2, #4

08001f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f1c:	d3fb      	bcc.n	8001f16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f1e:	f006 f88b 	bl	8008038 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f22:	f7ff f893 	bl	800104c <main>

08001f26 <LoopForever>:

LoopForever:
    b LoopForever
 8001f26:	e7fe      	b.n	8001f26 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f28:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f30:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001f34:	0800d094 	.word	0x0800d094
  ldr r2, =_sbss
 8001f38:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001f3c:	20000430 	.word	0x20000430

08001f40 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f40:	e7fe      	b.n	8001f40 <ADC3_IRQHandler>
	...

08001f44 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f4e:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <HAL_Init+0x3c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a0b      	ldr	r2, [pc, #44]	; (8001f80 <HAL_Init+0x3c>)
 8001f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f58:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f5a:	2003      	movs	r0, #3
 8001f5c:	f001 fde0 	bl	8003b20 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f60:	2000      	movs	r0, #0
 8001f62:	f000 f80f 	bl	8001f84 <HAL_InitTick>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d002      	beq.n	8001f72 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	71fb      	strb	r3, [r7, #7]
 8001f70:	e001      	b.n	8001f76 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f72:	f7ff fc4d 	bl	8001810 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f76:	79fb      	ldrb	r3, [r7, #7]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40022000 	.word	0x40022000

08001f84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f90:	4b17      	ldr	r3, [pc, #92]	; (8001ff0 <HAL_InitTick+0x6c>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d023      	beq.n	8001fe0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f98:	4b16      	ldr	r3, [pc, #88]	; (8001ff4 <HAL_InitTick+0x70>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	4b14      	ldr	r3, [pc, #80]	; (8001ff0 <HAL_InitTick+0x6c>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f001 fdeb 	bl	8003b8a <HAL_SYSTICK_Config>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10f      	bne.n	8001fda <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b0f      	cmp	r3, #15
 8001fbe:	d809      	bhi.n	8001fd4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	6879      	ldr	r1, [r7, #4]
 8001fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc8:	f001 fdb5 	bl	8003b36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fcc:	4a0a      	ldr	r2, [pc, #40]	; (8001ff8 <HAL_InitTick+0x74>)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	e007      	b.n	8001fe4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	73fb      	strb	r3, [r7, #15]
 8001fd8:	e004      	b.n	8001fe4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	73fb      	strb	r3, [r7, #15]
 8001fde:	e001      	b.n	8001fe4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000010 	.word	0x20000010
 8001ff4:	20000000 	.word	0x20000000
 8001ff8:	2000000c 	.word	0x2000000c

08001ffc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002000:	4b06      	ldr	r3, [pc, #24]	; (800201c <HAL_IncTick+0x20>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	461a      	mov	r2, r3
 8002006:	4b06      	ldr	r3, [pc, #24]	; (8002020 <HAL_IncTick+0x24>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4413      	add	r3, r2
 800200c:	4a04      	ldr	r2, [pc, #16]	; (8002020 <HAL_IncTick+0x24>)
 800200e:	6013      	str	r3, [r2, #0]
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	20000010 	.word	0x20000010
 8002020:	2000041c 	.word	0x2000041c

08002024 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  return uwTick;
 8002028:	4b03      	ldr	r3, [pc, #12]	; (8002038 <HAL_GetTick+0x14>)
 800202a:	681b      	ldr	r3, [r3, #0]
}
 800202c:	4618      	mov	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	2000041c 	.word	0x2000041c

0800203c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002044:	f7ff ffee 	bl	8002024 <HAL_GetTick>
 8002048:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002054:	d005      	beq.n	8002062 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002056:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <HAL_Delay+0x44>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	461a      	mov	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4413      	add	r3, r2
 8002060:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002062:	bf00      	nop
 8002064:	f7ff ffde 	bl	8002024 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	429a      	cmp	r2, r3
 8002072:	d8f7      	bhi.n	8002064 <HAL_Delay+0x28>
  {
  }
}
 8002074:	bf00      	nop
 8002076:	bf00      	nop
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20000010 	.word	0x20000010

08002084 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	431a      	orrs	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	609a      	str	r2, [r3, #8]
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
 80020b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	431a      	orrs	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	609a      	str	r2, [r3, #8]
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b087      	sub	sp, #28
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
 80020f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	3360      	adds	r3, #96	; 0x60
 80020fe:	461a      	mov	r2, r3
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	4b08      	ldr	r3, [pc, #32]	; (8002130 <LL_ADC_SetOffset+0x44>)
 800210e:	4013      	ands	r3, r2
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	430a      	orrs	r2, r1
 800211a:	4313      	orrs	r3, r2
 800211c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002124:	bf00      	nop
 8002126:	371c      	adds	r7, #28
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	03fff000 	.word	0x03fff000

08002134 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3360      	adds	r3, #96	; 0x60
 8002142:	461a      	mov	r2, r3
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002154:	4618      	mov	r0, r3
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002160:	b480      	push	{r7}
 8002162:	b087      	sub	sp, #28
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	3360      	adds	r3, #96	; 0x60
 8002170:	461a      	mov	r2, r3
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	431a      	orrs	r2, r3
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800218a:	bf00      	nop
 800218c:	371c      	adds	r7, #28
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80021aa:	2301      	movs	r3, #1
 80021ac:	e000      	b.n	80021b0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80021bc:	b480      	push	{r7}
 80021be:	b087      	sub	sp, #28
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	3330      	adds	r3, #48	; 0x30
 80021cc:	461a      	mov	r2, r3
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	0a1b      	lsrs	r3, r3, #8
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	f003 030c 	and.w	r3, r3, #12
 80021d8:	4413      	add	r3, r2
 80021da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	f003 031f 	and.w	r3, r3, #31
 80021e6:	211f      	movs	r1, #31
 80021e8:	fa01 f303 	lsl.w	r3, r1, r3
 80021ec:	43db      	mvns	r3, r3
 80021ee:	401a      	ands	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	0e9b      	lsrs	r3, r3, #26
 80021f4:	f003 011f 	and.w	r1, r3, #31
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	f003 031f 	and.w	r3, r3, #31
 80021fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002202:	431a      	orrs	r2, r3
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002208:	bf00      	nop
 800220a:	371c      	adds	r7, #28
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002220:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002228:	2301      	movs	r3, #1
 800222a:	e000      	b.n	800222e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800223a:	b480      	push	{r7}
 800223c:	b087      	sub	sp, #28
 800223e:	af00      	add	r7, sp, #0
 8002240:	60f8      	str	r0, [r7, #12]
 8002242:	60b9      	str	r1, [r7, #8]
 8002244:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	3314      	adds	r3, #20
 800224a:	461a      	mov	r2, r3
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	0e5b      	lsrs	r3, r3, #25
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	f003 0304 	and.w	r3, r3, #4
 8002256:	4413      	add	r3, r2
 8002258:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	0d1b      	lsrs	r3, r3, #20
 8002262:	f003 031f 	and.w	r3, r3, #31
 8002266:	2107      	movs	r1, #7
 8002268:	fa01 f303 	lsl.w	r3, r1, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	401a      	ands	r2, r3
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	0d1b      	lsrs	r3, r3, #20
 8002274:	f003 031f 	and.w	r3, r3, #31
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	fa01 f303 	lsl.w	r3, r1, r3
 800227e:	431a      	orrs	r2, r3
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002284:	bf00      	nop
 8002286:	371c      	adds	r7, #28
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a8:	43db      	mvns	r3, r3
 80022aa:	401a      	ands	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f003 0318 	and.w	r3, r3, #24
 80022b2:	4908      	ldr	r1, [pc, #32]	; (80022d4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80022b4:	40d9      	lsrs	r1, r3
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	400b      	ands	r3, r1
 80022ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022be:	431a      	orrs	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80022c6:	bf00      	nop
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	0007ffff 	.word	0x0007ffff

080022d8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f003 031f 	and.w	r3, r3, #31
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002304:	4618      	mov	r0, r3
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002320:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	6093      	str	r3, [r2, #8]
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002344:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002348:	d101      	bne.n	800234e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800236c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002370:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002394:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002398:	d101      	bne.n	800239e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800239a:	2301      	movs	r3, #1
 800239c:	e000      	b.n	80023a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023c0:	f043 0201 	orr.w	r2, r3, #1
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d101      	bne.n	80023ec <LL_ADC_IsEnabled+0x18>
 80023e8:	2301      	movs	r3, #1
 80023ea:	e000      	b.n	80023ee <LL_ADC_IsEnabled+0x1a>
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b083      	sub	sp, #12
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800240a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800240e:	f043 0204 	orr.w	r2, r3, #4
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 0304 	and.w	r3, r3, #4
 8002432:	2b04      	cmp	r3, #4
 8002434:	d101      	bne.n	800243a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002436:	2301      	movs	r3, #1
 8002438:	e000      	b.n	800243c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 0308 	and.w	r3, r3, #8
 8002458:	2b08      	cmp	r3, #8
 800245a:	d101      	bne.n	8002460 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800245c:	2301      	movs	r3, #1
 800245e:	e000      	b.n	8002462 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
	...

08002470 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002470:	b590      	push	{r4, r7, lr}
 8002472:	b089      	sub	sp, #36	; 0x24
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002478:	2300      	movs	r3, #0
 800247a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800247c:	2300      	movs	r3, #0
 800247e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e136      	b.n	80026f8 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002494:	2b00      	cmp	r3, #0
 8002496:	d109      	bne.n	80024ac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f7ff f9dd 	bl	8001858 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff ff3f 	bl	8002334 <LL_ADC_IsDeepPowerDownEnabled>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d004      	beq.n	80024c6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff ff25 	bl	8002310 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff ff5a 	bl	8002384 <LL_ADC_IsInternalRegulatorEnabled>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d115      	bne.n	8002502 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff ff3e 	bl	800235c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024e0:	4b87      	ldr	r3, [pc, #540]	; (8002700 <HAL_ADC_Init+0x290>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	099b      	lsrs	r3, r3, #6
 80024e6:	4a87      	ldr	r2, [pc, #540]	; (8002704 <HAL_ADC_Init+0x294>)
 80024e8:	fba2 2303 	umull	r2, r3, r2, r3
 80024ec:	099b      	lsrs	r3, r3, #6
 80024ee:	3301      	adds	r3, #1
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80024f4:	e002      	b.n	80024fc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	3b01      	subs	r3, #1
 80024fa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f9      	bne.n	80024f6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff ff3c 	bl	8002384 <LL_ADC_IsInternalRegulatorEnabled>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10d      	bne.n	800252e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002516:	f043 0210 	orr.w	r2, r3, #16
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002522:	f043 0201 	orr.w	r2, r3, #1
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff ff75 	bl	8002422 <LL_ADC_REG_IsConversionOngoing>
 8002538:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253e:	f003 0310 	and.w	r3, r3, #16
 8002542:	2b00      	cmp	r3, #0
 8002544:	f040 80cf 	bne.w	80026e6 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	2b00      	cmp	r3, #0
 800254c:	f040 80cb 	bne.w	80026e6 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002554:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002558:	f043 0202 	orr.w	r2, r3, #2
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff ff35 	bl	80023d4 <LL_ADC_IsEnabled>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d115      	bne.n	800259c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002570:	4865      	ldr	r0, [pc, #404]	; (8002708 <HAL_ADC_Init+0x298>)
 8002572:	f7ff ff2f 	bl	80023d4 <LL_ADC_IsEnabled>
 8002576:	4604      	mov	r4, r0
 8002578:	4864      	ldr	r0, [pc, #400]	; (800270c <HAL_ADC_Init+0x29c>)
 800257a:	f7ff ff2b 	bl	80023d4 <LL_ADC_IsEnabled>
 800257e:	4603      	mov	r3, r0
 8002580:	431c      	orrs	r4, r3
 8002582:	4863      	ldr	r0, [pc, #396]	; (8002710 <HAL_ADC_Init+0x2a0>)
 8002584:	f7ff ff26 	bl	80023d4 <LL_ADC_IsEnabled>
 8002588:	4603      	mov	r3, r0
 800258a:	4323      	orrs	r3, r4
 800258c:	2b00      	cmp	r3, #0
 800258e:	d105      	bne.n	800259c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	4619      	mov	r1, r3
 8002596:	485f      	ldr	r0, [pc, #380]	; (8002714 <HAL_ADC_Init+0x2a4>)
 8002598:	f7ff fd74 	bl	8002084 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	7e5b      	ldrb	r3, [r3, #25]
 80025a0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025a6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80025ac:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80025b2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025ba:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025bc:	4313      	orrs	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d106      	bne.n	80025d8 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ce:	3b01      	subs	r3, #1
 80025d0:	045b      	lsls	r3, r3, #17
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d009      	beq.n	80025f4 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ec:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	4b47      	ldr	r3, [pc, #284]	; (8002718 <HAL_ADC_Init+0x2a8>)
 80025fc:	4013      	ands	r3, r2
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6812      	ldr	r2, [r2, #0]
 8002602:	69b9      	ldr	r1, [r7, #24]
 8002604:	430b      	orrs	r3, r1
 8002606:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff ff08 	bl	8002422 <LL_ADC_REG_IsConversionOngoing>
 8002612:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff ff15 	bl	8002448 <LL_ADC_INJ_IsConversionOngoing>
 800261e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d13d      	bne.n	80026a2 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d13a      	bne.n	80026a2 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002630:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002638:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002648:	f023 0302 	bic.w	r3, r3, #2
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	6812      	ldr	r2, [r2, #0]
 8002650:	69b9      	ldr	r1, [r7, #24]
 8002652:	430b      	orrs	r3, r1
 8002654:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800265c:	2b01      	cmp	r3, #1
 800265e:	d118      	bne.n	8002692 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800266a:	f023 0304 	bic.w	r3, r3, #4
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002676:	4311      	orrs	r1, r2
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800267c:	4311      	orrs	r1, r2
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002682:	430a      	orrs	r2, r1
 8002684:	431a      	orrs	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f042 0201 	orr.w	r2, r2, #1
 800268e:	611a      	str	r2, [r3, #16]
 8002690:	e007      	b.n	80026a2 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	691a      	ldr	r2, [r3, #16]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 0201 	bic.w	r2, r2, #1
 80026a0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d10c      	bne.n	80026c4 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b0:	f023 010f 	bic.w	r1, r3, #15
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	1e5a      	subs	r2, r3, #1
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	631a      	str	r2, [r3, #48]	; 0x30
 80026c2:	e007      	b.n	80026d4 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 020f 	bic.w	r2, r2, #15
 80026d2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d8:	f023 0303 	bic.w	r3, r3, #3
 80026dc:	f043 0201 	orr.w	r2, r3, #1
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	655a      	str	r2, [r3, #84]	; 0x54
 80026e4:	e007      	b.n	80026f6 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ea:	f043 0210 	orr.w	r2, r3, #16
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80026f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3724      	adds	r7, #36	; 0x24
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd90      	pop	{r4, r7, pc}
 8002700:	20000000 	.word	0x20000000
 8002704:	053e2d63 	.word	0x053e2d63
 8002708:	50040000 	.word	0x50040000
 800270c:	50040100 	.word	0x50040100
 8002710:	50040200 	.word	0x50040200
 8002714:	50040300 	.word	0x50040300
 8002718:	fff0c007 	.word	0xfff0c007

0800271c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002724:	4857      	ldr	r0, [pc, #348]	; (8002884 <HAL_ADC_Start+0x168>)
 8002726:	f7ff fdd7 	bl	80022d8 <LL_ADC_GetMultimode>
 800272a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff fe76 	bl	8002422 <LL_ADC_REG_IsConversionOngoing>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	f040 809c 	bne.w	8002876 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002744:	2b01      	cmp	r3, #1
 8002746:	d101      	bne.n	800274c <HAL_ADC_Start+0x30>
 8002748:	2302      	movs	r3, #2
 800274a:	e097      	b.n	800287c <HAL_ADC_Start+0x160>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 ffa9 	bl	80036ac <ADC_Enable>
 800275a:	4603      	mov	r3, r0
 800275c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800275e:	7dfb      	ldrb	r3, [r7, #23]
 8002760:	2b00      	cmp	r3, #0
 8002762:	f040 8083 	bne.w	800286c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800276e:	f023 0301 	bic.w	r3, r3, #1
 8002772:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a42      	ldr	r2, [pc, #264]	; (8002888 <HAL_ADC_Start+0x16c>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d002      	beq.n	800278a <HAL_ADC_Start+0x6e>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	e000      	b.n	800278c <HAL_ADC_Start+0x70>
 800278a:	4b40      	ldr	r3, [pc, #256]	; (800288c <HAL_ADC_Start+0x170>)
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	6812      	ldr	r2, [r2, #0]
 8002790:	4293      	cmp	r3, r2
 8002792:	d002      	beq.n	800279a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d105      	bne.n	80027a6 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027b2:	d106      	bne.n	80027c2 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b8:	f023 0206 	bic.w	r2, r3, #6
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	659a      	str	r2, [r3, #88]	; 0x58
 80027c0:	e002      	b.n	80027c8 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	221c      	movs	r2, #28
 80027ce:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a2a      	ldr	r2, [pc, #168]	; (8002888 <HAL_ADC_Start+0x16c>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d002      	beq.n	80027e8 <HAL_ADC_Start+0xcc>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	e000      	b.n	80027ea <HAL_ADC_Start+0xce>
 80027e8:	4b28      	ldr	r3, [pc, #160]	; (800288c <HAL_ADC_Start+0x170>)
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	6812      	ldr	r2, [r2, #0]
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d008      	beq.n	8002804 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d005      	beq.n	8002804 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	2b05      	cmp	r3, #5
 80027fc:	d002      	beq.n	8002804 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	2b09      	cmp	r3, #9
 8002802:	d114      	bne.n	800282e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d007      	beq.n	8002822 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002816:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800281a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff fde7 	bl	80023fa <LL_ADC_REG_StartConversion>
 800282c:	e025      	b.n	800287a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002832:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a12      	ldr	r2, [pc, #72]	; (8002888 <HAL_ADC_Start+0x16c>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d002      	beq.n	800284a <HAL_ADC_Start+0x12e>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	e000      	b.n	800284c <HAL_ADC_Start+0x130>
 800284a:	4b10      	ldr	r3, [pc, #64]	; (800288c <HAL_ADC_Start+0x170>)
 800284c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00f      	beq.n	800287a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002862:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	655a      	str	r2, [r3, #84]	; 0x54
 800286a:	e006      	b.n	800287a <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002874:	e001      	b.n	800287a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002876:	2302      	movs	r3, #2
 8002878:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800287a:	7dfb      	ldrb	r3, [r7, #23]
}
 800287c:	4618      	mov	r0, r3
 800287e:	3718      	adds	r7, #24
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	50040300 	.word	0x50040300
 8002888:	50040100 	.word	0x50040100
 800288c:	50040000 	.word	0x50040000

08002890 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b088      	sub	sp, #32
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800289a:	4866      	ldr	r0, [pc, #408]	; (8002a34 <HAL_ADC_PollForConversion+0x1a4>)
 800289c:	f7ff fd1c 	bl	80022d8 <LL_ADC_GetMultimode>
 80028a0:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	2b08      	cmp	r3, #8
 80028a8:	d102      	bne.n	80028b0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80028aa:	2308      	movs	r3, #8
 80028ac:	61fb      	str	r3, [r7, #28]
 80028ae:	e02a      	b.n	8002906 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d005      	beq.n	80028c2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	2b05      	cmp	r3, #5
 80028ba:	d002      	beq.n	80028c2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	2b09      	cmp	r3, #9
 80028c0:	d111      	bne.n	80028e6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d007      	beq.n	80028e0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d4:	f043 0220 	orr.w	r2, r3, #32
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e0a4      	b.n	8002a2a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80028e0:	2304      	movs	r3, #4
 80028e2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80028e4:	e00f      	b.n	8002906 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80028e6:	4853      	ldr	r0, [pc, #332]	; (8002a34 <HAL_ADC_PollForConversion+0x1a4>)
 80028e8:	f7ff fd04 	bl	80022f4 <LL_ADC_GetMultiDMATransfer>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d007      	beq.n	8002902 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f6:	f043 0220 	orr.w	r2, r3, #32
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e093      	b.n	8002a2a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002902:	2304      	movs	r3, #4
 8002904:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002906:	f7ff fb8d 	bl	8002024 <HAL_GetTick>
 800290a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800290c:	e021      	b.n	8002952 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002914:	d01d      	beq.n	8002952 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002916:	f7ff fb85 	bl	8002024 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	429a      	cmp	r2, r3
 8002924:	d302      	bcc.n	800292c <HAL_ADC_PollForConversion+0x9c>
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d112      	bne.n	8002952 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	4013      	ands	r3, r2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10b      	bne.n	8002952 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800293e:	f043 0204 	orr.w	r2, r3, #4
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e06b      	b.n	8002a2a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	4013      	ands	r3, r2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0d6      	beq.n	800290e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002964:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff fc10 	bl	8002196 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d01c      	beq.n	80029b6 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	7e5b      	ldrb	r3, [r3, #25]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d118      	bne.n	80029b6 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0308 	and.w	r3, r3, #8
 800298e:	2b08      	cmp	r3, #8
 8002990:	d111      	bne.n	80029b6 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002996:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d105      	bne.n	80029b6 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ae:	f043 0201 	orr.w	r2, r3, #1
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a1f      	ldr	r2, [pc, #124]	; (8002a38 <HAL_ADC_PollForConversion+0x1a8>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d002      	beq.n	80029c6 <HAL_ADC_PollForConversion+0x136>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	e000      	b.n	80029c8 <HAL_ADC_PollForConversion+0x138>
 80029c6:	4b1d      	ldr	r3, [pc, #116]	; (8002a3c <HAL_ADC_PollForConversion+0x1ac>)
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	6812      	ldr	r2, [r2, #0]
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d008      	beq.n	80029e2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d005      	beq.n	80029e2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	2b05      	cmp	r3, #5
 80029da:	d002      	beq.n	80029e2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	2b09      	cmp	r3, #9
 80029e0:	d104      	bne.n	80029ec <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	61bb      	str	r3, [r7, #24]
 80029ea:	e00c      	b.n	8002a06 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a11      	ldr	r2, [pc, #68]	; (8002a38 <HAL_ADC_PollForConversion+0x1a8>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d002      	beq.n	80029fc <HAL_ADC_PollForConversion+0x16c>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	e000      	b.n	80029fe <HAL_ADC_PollForConversion+0x16e>
 80029fc:	4b0f      	ldr	r3, [pc, #60]	; (8002a3c <HAL_ADC_PollForConversion+0x1ac>)
 80029fe:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	2b08      	cmp	r3, #8
 8002a0a:	d104      	bne.n	8002a16 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2208      	movs	r2, #8
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	e008      	b.n	8002a28 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d103      	bne.n	8002a28 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	220c      	movs	r2, #12
 8002a26:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3720      	adds	r7, #32
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	50040300 	.word	0x50040300
 8002a38:	50040100 	.word	0x50040100
 8002a3c:	50040000 	.word	0x50040000

08002a40 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
	...

08002a5c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b08a      	sub	sp, #40	; 0x28
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002a64:	2300      	movs	r3, #0
 8002a66:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a78:	4882      	ldr	r0, [pc, #520]	; (8002c84 <HAL_ADC_IRQHandler+0x228>)
 8002a7a:	f7ff fc2d 	bl	80022d8 <LL_ADC_GetMultimode>
 8002a7e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d017      	beq.n	8002aba <HAL_ADC_IRQHandler+0x5e>
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d012      	beq.n	8002aba <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a98:	f003 0310 	and.w	r3, r3, #16
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d105      	bne.n	8002aac <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa4:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 fead 	bl	800380c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d004      	beq.n	8002ace <HAL_ADC_IRQHandler+0x72>
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	f003 0304 	and.w	r3, r3, #4
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10a      	bne.n	8002ae4 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 8083 	beq.w	8002be0 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	f003 0308 	and.w	r3, r3, #8
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d07d      	beq.n	8002be0 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae8:	f003 0310 	and.w	r3, r3, #16
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d105      	bne.n	8002afc <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff fb48 	bl	8002196 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d062      	beq.n	8002bd2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a5d      	ldr	r2, [pc, #372]	; (8002c88 <HAL_ADC_IRQHandler+0x22c>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d002      	beq.n	8002b1c <HAL_ADC_IRQHandler+0xc0>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	e000      	b.n	8002b1e <HAL_ADC_IRQHandler+0xc2>
 8002b1c:	4b5b      	ldr	r3, [pc, #364]	; (8002c8c <HAL_ADC_IRQHandler+0x230>)
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	6812      	ldr	r2, [r2, #0]
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d008      	beq.n	8002b38 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d005      	beq.n	8002b38 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	2b05      	cmp	r3, #5
 8002b30:	d002      	beq.n	8002b38 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	2b09      	cmp	r3, #9
 8002b36:	d104      	bne.n	8002b42 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	623b      	str	r3, [r7, #32]
 8002b40:	e00c      	b.n	8002b5c <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a50      	ldr	r2, [pc, #320]	; (8002c88 <HAL_ADC_IRQHandler+0x22c>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d002      	beq.n	8002b52 <HAL_ADC_IRQHandler+0xf6>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	e000      	b.n	8002b54 <HAL_ADC_IRQHandler+0xf8>
 8002b52:	4b4e      	ldr	r3, [pc, #312]	; (8002c8c <HAL_ADC_IRQHandler+0x230>)
 8002b54:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002b5c:	6a3b      	ldr	r3, [r7, #32]
 8002b5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d135      	bne.n	8002bd2 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0308 	and.w	r3, r3, #8
 8002b70:	2b08      	cmp	r3, #8
 8002b72:	d12e      	bne.n	8002bd2 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff fc52 	bl	8002422 <LL_ADC_REG_IsConversionOngoing>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d11a      	bne.n	8002bba <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f022 020c 	bic.w	r2, r2, #12
 8002b92:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d112      	bne.n	8002bd2 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb0:	f043 0201 	orr.w	r2, r3, #1
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	655a      	str	r2, [r3, #84]	; 0x54
 8002bb8:	e00b      	b.n	8002bd2 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bbe:	f043 0210 	orr.w	r2, r3, #16
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bca:	f043 0201 	orr.w	r2, r3, #1
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f95c 	bl	8002e90 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	220c      	movs	r2, #12
 8002bde:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	f003 0320 	and.w	r3, r3, #32
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d004      	beq.n	8002bf4 <HAL_ADC_IRQHandler+0x198>
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	f003 0320 	and.w	r3, r3, #32
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d10b      	bne.n	8002c0c <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f000 809f 	beq.w	8002d3e <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 8099 	beq.w	8002d3e <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c10:	f003 0310 	and.w	r3, r3, #16
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d105      	bne.n	8002c24 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c1c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff faf3 	bl	8002214 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002c2e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff faae 	bl	8002196 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c3a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a11      	ldr	r2, [pc, #68]	; (8002c88 <HAL_ADC_IRQHandler+0x22c>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d002      	beq.n	8002c4c <HAL_ADC_IRQHandler+0x1f0>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	e000      	b.n	8002c4e <HAL_ADC_IRQHandler+0x1f2>
 8002c4c:	4b0f      	ldr	r3, [pc, #60]	; (8002c8c <HAL_ADC_IRQHandler+0x230>)
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	6812      	ldr	r2, [r2, #0]
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d008      	beq.n	8002c68 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d005      	beq.n	8002c68 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	2b06      	cmp	r3, #6
 8002c60:	d002      	beq.n	8002c68 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	2b07      	cmp	r3, #7
 8002c66:	d104      	bne.n	8002c72 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	623b      	str	r3, [r7, #32]
 8002c70:	e013      	b.n	8002c9a <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a04      	ldr	r2, [pc, #16]	; (8002c88 <HAL_ADC_IRQHandler+0x22c>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d009      	beq.n	8002c90 <HAL_ADC_IRQHandler+0x234>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	e007      	b.n	8002c92 <HAL_ADC_IRQHandler+0x236>
 8002c82:	bf00      	nop
 8002c84:	50040300 	.word	0x50040300
 8002c88:	50040100 	.word	0x50040100
 8002c8c:	50040000 	.word	0x50040000
 8002c90:	4b7d      	ldr	r3, [pc, #500]	; (8002e88 <HAL_ADC_IRQHandler+0x42c>)
 8002c92:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d047      	beq.n	8002d30 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002ca0:	6a3b      	ldr	r3, [r7, #32]
 8002ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d007      	beq.n	8002cba <HAL_ADC_IRQHandler+0x25e>
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d03f      	beq.n	8002d30 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002cb0:	6a3b      	ldr	r3, [r7, #32]
 8002cb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d13a      	bne.n	8002d30 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc4:	2b40      	cmp	r3, #64	; 0x40
 8002cc6:	d133      	bne.n	8002d30 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002cc8:	6a3b      	ldr	r3, [r7, #32]
 8002cca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d12e      	bne.n	8002d30 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff fbb6 	bl	8002448 <LL_ADC_INJ_IsConversionOngoing>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d11a      	bne.n	8002d18 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002cf0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d112      	bne.n	8002d30 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0e:	f043 0201 	orr.w	r2, r3, #1
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	655a      	str	r2, [r3, #84]	; 0x54
 8002d16:	e00b      	b.n	8002d30 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1c:	f043 0210 	orr.w	r2, r3, #16
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d28:	f043 0201 	orr.w	r2, r3, #1
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 fd43 	bl	80037bc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2260      	movs	r2, #96	; 0x60
 8002d3c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d011      	beq.n	8002d6c <HAL_ADC_IRQHandler+0x310>
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00c      	beq.n	8002d6c <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d56:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f8a0 	bl	8002ea4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2280      	movs	r2, #128	; 0x80
 8002d6a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d012      	beq.n	8002d9c <HAL_ADC_IRQHandler+0x340>
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00d      	beq.n	8002d9c <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d84:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 fd29 	bl	80037e4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d9a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d012      	beq.n	8002dcc <HAL_ADC_IRQHandler+0x370>
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00d      	beq.n	8002dcc <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 fd1b 	bl	80037f8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dca:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f003 0310 	and.w	r3, r3, #16
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d036      	beq.n	8002e44 <HAL_ADC_IRQHandler+0x3e8>
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	f003 0310 	and.w	r3, r3, #16
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d031      	beq.n	8002e44 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d102      	bne.n	8002dee <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8002de8:	2301      	movs	r3, #1
 8002dea:	627b      	str	r3, [r7, #36]	; 0x24
 8002dec:	e014      	b.n	8002e18 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d008      	beq.n	8002e06 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002df4:	4825      	ldr	r0, [pc, #148]	; (8002e8c <HAL_ADC_IRQHandler+0x430>)
 8002df6:	f7ff fa7d 	bl	80022f4 <LL_ADC_GetMultiDMATransfer>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00b      	beq.n	8002e18 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002e00:	2301      	movs	r3, #1
 8002e02:	627b      	str	r3, [r7, #36]	; 0x24
 8002e04:	e008      	b.n	8002e18 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002e14:	2301      	movs	r3, #1
 8002e16:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d10e      	bne.n	8002e3c <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e22:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2e:	f043 0202 	orr.w	r2, r3, #2
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f83e 	bl	8002eb8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2210      	movs	r2, #16
 8002e42:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d018      	beq.n	8002e80 <HAL_ADC_IRQHandler+0x424>
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d013      	beq.n	8002e80 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e68:	f043 0208 	orr.w	r2, r3, #8
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e78:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 fca8 	bl	80037d0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002e80:	bf00      	nop
 8002e82:	3728      	adds	r7, #40	; 0x28
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	50040000 	.word	0x50040000
 8002e8c:	50040300 	.word	0x50040300

08002e90 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b0b6      	sub	sp, #216	; 0xd8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002edc:	2300      	movs	r3, #0
 8002ede:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d101      	bne.n	8002eee <HAL_ADC_ConfigChannel+0x22>
 8002eea:	2302      	movs	r3, #2
 8002eec:	e3c7      	b.n	800367e <HAL_ADC_ConfigChannel+0x7b2>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7ff fa91 	bl	8002422 <LL_ADC_REG_IsConversionOngoing>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f040 83a8 	bne.w	8003658 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	2b05      	cmp	r3, #5
 8002f0e:	d824      	bhi.n	8002f5a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	3b02      	subs	r3, #2
 8002f16:	2b03      	cmp	r3, #3
 8002f18:	d81b      	bhi.n	8002f52 <HAL_ADC_ConfigChannel+0x86>
 8002f1a:	a201      	add	r2, pc, #4	; (adr r2, 8002f20 <HAL_ADC_ConfigChannel+0x54>)
 8002f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f20:	08002f31 	.word	0x08002f31
 8002f24:	08002f39 	.word	0x08002f39
 8002f28:	08002f41 	.word	0x08002f41
 8002f2c:	08002f49 	.word	0x08002f49
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	220c      	movs	r2, #12
 8002f34:	605a      	str	r2, [r3, #4]
          break;
 8002f36:	e011      	b.n	8002f5c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	2212      	movs	r2, #18
 8002f3c:	605a      	str	r2, [r3, #4]
          break;
 8002f3e:	e00d      	b.n	8002f5c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	2218      	movs	r2, #24
 8002f44:	605a      	str	r2, [r3, #4]
          break;
 8002f46:	e009      	b.n	8002f5c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f4e:	605a      	str	r2, [r3, #4]
          break;
 8002f50:	e004      	b.n	8002f5c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	2206      	movs	r2, #6
 8002f56:	605a      	str	r2, [r3, #4]
          break;
 8002f58:	e000      	b.n	8002f5c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002f5a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6818      	ldr	r0, [r3, #0]
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	6859      	ldr	r1, [r3, #4]
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	461a      	mov	r2, r3
 8002f6a:	f7ff f927 	bl	80021bc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff fa55 	bl	8002422 <LL_ADC_REG_IsConversionOngoing>
 8002f78:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff fa61 	bl	8002448 <LL_ADC_INJ_IsConversionOngoing>
 8002f86:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f8a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f040 81a6 	bne.w	80032e0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f040 81a1 	bne.w	80032e0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6818      	ldr	r0, [r3, #0]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	6819      	ldr	r1, [r3, #0]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	461a      	mov	r2, r3
 8002fac:	f7ff f945 	bl	800223a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	695a      	ldr	r2, [r3, #20]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	08db      	lsrs	r3, r3, #3
 8002fbc:	f003 0303 	and.w	r3, r3, #3
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	d00a      	beq.n	8002fe8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6818      	ldr	r0, [r3, #0]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	6919      	ldr	r1, [r3, #16]
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002fe2:	f7ff f883 	bl	80020ec <LL_ADC_SetOffset>
 8002fe6:	e17b      	b.n	80032e0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2100      	movs	r1, #0
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7ff f8a0 	bl	8002134 <LL_ADC_GetOffsetChannel>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d10a      	bne.n	8003014 <HAL_ADC_ConfigChannel+0x148>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2100      	movs	r1, #0
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff f895 	bl	8002134 <LL_ADC_GetOffsetChannel>
 800300a:	4603      	mov	r3, r0
 800300c:	0e9b      	lsrs	r3, r3, #26
 800300e:	f003 021f 	and.w	r2, r3, #31
 8003012:	e01e      	b.n	8003052 <HAL_ADC_ConfigChannel+0x186>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2100      	movs	r1, #0
 800301a:	4618      	mov	r0, r3
 800301c:	f7ff f88a 	bl	8002134 <LL_ADC_GetOffsetChannel>
 8003020:	4603      	mov	r3, r0
 8003022:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003026:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800302a:	fa93 f3a3 	rbit	r3, r3
 800302e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003032:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003036:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800303a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8003042:	2320      	movs	r3, #32
 8003044:	e004      	b.n	8003050 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8003046:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800304a:	fab3 f383 	clz	r3, r3
 800304e:	b2db      	uxtb	r3, r3
 8003050:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800305a:	2b00      	cmp	r3, #0
 800305c:	d105      	bne.n	800306a <HAL_ADC_ConfigChannel+0x19e>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	0e9b      	lsrs	r3, r3, #26
 8003064:	f003 031f 	and.w	r3, r3, #31
 8003068:	e018      	b.n	800309c <HAL_ADC_ConfigChannel+0x1d0>
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003072:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003076:	fa93 f3a3 	rbit	r3, r3
 800307a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800307e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003082:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003086:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800308e:	2320      	movs	r3, #32
 8003090:	e004      	b.n	800309c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8003092:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003096:	fab3 f383 	clz	r3, r3
 800309a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800309c:	429a      	cmp	r2, r3
 800309e:	d106      	bne.n	80030ae <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2200      	movs	r2, #0
 80030a6:	2100      	movs	r1, #0
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff f859 	bl	8002160 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2101      	movs	r1, #1
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff f83d 	bl	8002134 <LL_ADC_GetOffsetChannel>
 80030ba:	4603      	mov	r3, r0
 80030bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10a      	bne.n	80030da <HAL_ADC_ConfigChannel+0x20e>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2101      	movs	r1, #1
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff f832 	bl	8002134 <LL_ADC_GetOffsetChannel>
 80030d0:	4603      	mov	r3, r0
 80030d2:	0e9b      	lsrs	r3, r3, #26
 80030d4:	f003 021f 	and.w	r2, r3, #31
 80030d8:	e01e      	b.n	8003118 <HAL_ADC_ConfigChannel+0x24c>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2101      	movs	r1, #1
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff f827 	bl	8002134 <LL_ADC_GetOffsetChannel>
 80030e6:	4603      	mov	r3, r0
 80030e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80030f0:	fa93 f3a3 	rbit	r3, r3
 80030f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80030f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80030fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003100:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003104:	2b00      	cmp	r3, #0
 8003106:	d101      	bne.n	800310c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003108:	2320      	movs	r3, #32
 800310a:	e004      	b.n	8003116 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800310c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003110:	fab3 f383 	clz	r3, r3
 8003114:	b2db      	uxtb	r3, r3
 8003116:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003120:	2b00      	cmp	r3, #0
 8003122:	d105      	bne.n	8003130 <HAL_ADC_ConfigChannel+0x264>
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	0e9b      	lsrs	r3, r3, #26
 800312a:	f003 031f 	and.w	r3, r3, #31
 800312e:	e018      	b.n	8003162 <HAL_ADC_ConfigChannel+0x296>
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003138:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800313c:	fa93 f3a3 	rbit	r3, r3
 8003140:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003144:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003148:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800314c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003150:	2b00      	cmp	r3, #0
 8003152:	d101      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003154:	2320      	movs	r3, #32
 8003156:	e004      	b.n	8003162 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003158:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800315c:	fab3 f383 	clz	r3, r3
 8003160:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003162:	429a      	cmp	r2, r3
 8003164:	d106      	bne.n	8003174 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2200      	movs	r2, #0
 800316c:	2101      	movs	r1, #1
 800316e:	4618      	mov	r0, r3
 8003170:	f7fe fff6 	bl	8002160 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2102      	movs	r1, #2
 800317a:	4618      	mov	r0, r3
 800317c:	f7fe ffda 	bl	8002134 <LL_ADC_GetOffsetChannel>
 8003180:	4603      	mov	r3, r0
 8003182:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10a      	bne.n	80031a0 <HAL_ADC_ConfigChannel+0x2d4>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2102      	movs	r1, #2
 8003190:	4618      	mov	r0, r3
 8003192:	f7fe ffcf 	bl	8002134 <LL_ADC_GetOffsetChannel>
 8003196:	4603      	mov	r3, r0
 8003198:	0e9b      	lsrs	r3, r3, #26
 800319a:	f003 021f 	and.w	r2, r3, #31
 800319e:	e01e      	b.n	80031de <HAL_ADC_ConfigChannel+0x312>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2102      	movs	r1, #2
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fe ffc4 	bl	8002134 <LL_ADC_GetOffsetChannel>
 80031ac:	4603      	mov	r3, r0
 80031ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031b6:	fa93 f3a3 	rbit	r3, r3
 80031ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80031be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80031c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80031ce:	2320      	movs	r3, #32
 80031d0:	e004      	b.n	80031dc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80031d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80031d6:	fab3 f383 	clz	r3, r3
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d105      	bne.n	80031f6 <HAL_ADC_ConfigChannel+0x32a>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	0e9b      	lsrs	r3, r3, #26
 80031f0:	f003 031f 	and.w	r3, r3, #31
 80031f4:	e016      	b.n	8003224 <HAL_ADC_ConfigChannel+0x358>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003202:	fa93 f3a3 	rbit	r3, r3
 8003206:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003208:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800320a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800320e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8003216:	2320      	movs	r3, #32
 8003218:	e004      	b.n	8003224 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800321a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800321e:	fab3 f383 	clz	r3, r3
 8003222:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003224:	429a      	cmp	r2, r3
 8003226:	d106      	bne.n	8003236 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2200      	movs	r2, #0
 800322e:	2102      	movs	r1, #2
 8003230:	4618      	mov	r0, r3
 8003232:	f7fe ff95 	bl	8002160 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2103      	movs	r1, #3
 800323c:	4618      	mov	r0, r3
 800323e:	f7fe ff79 	bl	8002134 <LL_ADC_GetOffsetChannel>
 8003242:	4603      	mov	r3, r0
 8003244:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10a      	bne.n	8003262 <HAL_ADC_ConfigChannel+0x396>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2103      	movs	r1, #3
 8003252:	4618      	mov	r0, r3
 8003254:	f7fe ff6e 	bl	8002134 <LL_ADC_GetOffsetChannel>
 8003258:	4603      	mov	r3, r0
 800325a:	0e9b      	lsrs	r3, r3, #26
 800325c:	f003 021f 	and.w	r2, r3, #31
 8003260:	e017      	b.n	8003292 <HAL_ADC_ConfigChannel+0x3c6>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2103      	movs	r1, #3
 8003268:	4618      	mov	r0, r3
 800326a:	f7fe ff63 	bl	8002134 <LL_ADC_GetOffsetChannel>
 800326e:	4603      	mov	r3, r0
 8003270:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003272:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003274:	fa93 f3a3 	rbit	r3, r3
 8003278:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800327a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800327c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800327e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003284:	2320      	movs	r3, #32
 8003286:	e003      	b.n	8003290 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003288:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800328a:	fab3 f383 	clz	r3, r3
 800328e:	b2db      	uxtb	r3, r3
 8003290:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800329a:	2b00      	cmp	r3, #0
 800329c:	d105      	bne.n	80032aa <HAL_ADC_ConfigChannel+0x3de>
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	0e9b      	lsrs	r3, r3, #26
 80032a4:	f003 031f 	and.w	r3, r3, #31
 80032a8:	e011      	b.n	80032ce <HAL_ADC_ConfigChannel+0x402>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032b2:	fa93 f3a3 	rbit	r3, r3
 80032b6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80032b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80032bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80032c2:	2320      	movs	r3, #32
 80032c4:	e003      	b.n	80032ce <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80032c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032c8:	fab3 f383 	clz	r3, r3
 80032cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d106      	bne.n	80032e0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2200      	movs	r2, #0
 80032d8:	2103      	movs	r1, #3
 80032da:	4618      	mov	r0, r3
 80032dc:	f7fe ff40 	bl	8002160 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff f875 	bl	80023d4 <LL_ADC_IsEnabled>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f040 813f 	bne.w	8003570 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6818      	ldr	r0, [r3, #0]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	6819      	ldr	r1, [r3, #0]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	461a      	mov	r2, r3
 8003300:	f7fe ffc6 	bl	8002290 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	4a8e      	ldr	r2, [pc, #568]	; (8003544 <HAL_ADC_ConfigChannel+0x678>)
 800330a:	4293      	cmp	r3, r2
 800330c:	f040 8130 	bne.w	8003570 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800331c:	2b00      	cmp	r3, #0
 800331e:	d10b      	bne.n	8003338 <HAL_ADC_ConfigChannel+0x46c>
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	0e9b      	lsrs	r3, r3, #26
 8003326:	3301      	adds	r3, #1
 8003328:	f003 031f 	and.w	r3, r3, #31
 800332c:	2b09      	cmp	r3, #9
 800332e:	bf94      	ite	ls
 8003330:	2301      	movls	r3, #1
 8003332:	2300      	movhi	r3, #0
 8003334:	b2db      	uxtb	r3, r3
 8003336:	e019      	b.n	800336c <HAL_ADC_ConfigChannel+0x4a0>
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003340:	fa93 f3a3 	rbit	r3, r3
 8003344:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003346:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003348:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800334a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003350:	2320      	movs	r3, #32
 8003352:	e003      	b.n	800335c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003354:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003356:	fab3 f383 	clz	r3, r3
 800335a:	b2db      	uxtb	r3, r3
 800335c:	3301      	adds	r3, #1
 800335e:	f003 031f 	and.w	r3, r3, #31
 8003362:	2b09      	cmp	r3, #9
 8003364:	bf94      	ite	ls
 8003366:	2301      	movls	r3, #1
 8003368:	2300      	movhi	r3, #0
 800336a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800336c:	2b00      	cmp	r3, #0
 800336e:	d079      	beq.n	8003464 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003378:	2b00      	cmp	r3, #0
 800337a:	d107      	bne.n	800338c <HAL_ADC_ConfigChannel+0x4c0>
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	0e9b      	lsrs	r3, r3, #26
 8003382:	3301      	adds	r3, #1
 8003384:	069b      	lsls	r3, r3, #26
 8003386:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800338a:	e015      	b.n	80033b8 <HAL_ADC_ConfigChannel+0x4ec>
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003392:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003394:	fa93 f3a3 	rbit	r3, r3
 8003398:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800339a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800339c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800339e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80033a4:	2320      	movs	r3, #32
 80033a6:	e003      	b.n	80033b0 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80033a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033aa:	fab3 f383 	clz	r3, r3
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	3301      	adds	r3, #1
 80033b2:	069b      	lsls	r3, r3, #26
 80033b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d109      	bne.n	80033d8 <HAL_ADC_ConfigChannel+0x50c>
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	0e9b      	lsrs	r3, r3, #26
 80033ca:	3301      	adds	r3, #1
 80033cc:	f003 031f 	and.w	r3, r3, #31
 80033d0:	2101      	movs	r1, #1
 80033d2:	fa01 f303 	lsl.w	r3, r1, r3
 80033d6:	e017      	b.n	8003408 <HAL_ADC_ConfigChannel+0x53c>
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033e0:	fa93 f3a3 	rbit	r3, r3
 80033e4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80033e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033e8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80033ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d101      	bne.n	80033f4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80033f0:	2320      	movs	r3, #32
 80033f2:	e003      	b.n	80033fc <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80033f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033f6:	fab3 f383 	clz	r3, r3
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	3301      	adds	r3, #1
 80033fe:	f003 031f 	and.w	r3, r3, #31
 8003402:	2101      	movs	r1, #1
 8003404:	fa01 f303 	lsl.w	r3, r1, r3
 8003408:	ea42 0103 	orr.w	r1, r2, r3
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003414:	2b00      	cmp	r3, #0
 8003416:	d10a      	bne.n	800342e <HAL_ADC_ConfigChannel+0x562>
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	0e9b      	lsrs	r3, r3, #26
 800341e:	3301      	adds	r3, #1
 8003420:	f003 021f 	and.w	r2, r3, #31
 8003424:	4613      	mov	r3, r2
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	4413      	add	r3, r2
 800342a:	051b      	lsls	r3, r3, #20
 800342c:	e018      	b.n	8003460 <HAL_ADC_ConfigChannel+0x594>
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003436:	fa93 f3a3 	rbit	r3, r3
 800343a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800343c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800343e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003446:	2320      	movs	r3, #32
 8003448:	e003      	b.n	8003452 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800344a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800344c:	fab3 f383 	clz	r3, r3
 8003450:	b2db      	uxtb	r3, r3
 8003452:	3301      	adds	r3, #1
 8003454:	f003 021f 	and.w	r2, r3, #31
 8003458:	4613      	mov	r3, r2
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	4413      	add	r3, r2
 800345e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003460:	430b      	orrs	r3, r1
 8003462:	e080      	b.n	8003566 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800346c:	2b00      	cmp	r3, #0
 800346e:	d107      	bne.n	8003480 <HAL_ADC_ConfigChannel+0x5b4>
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	0e9b      	lsrs	r3, r3, #26
 8003476:	3301      	adds	r3, #1
 8003478:	069b      	lsls	r3, r3, #26
 800347a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800347e:	e015      	b.n	80034ac <HAL_ADC_ConfigChannel+0x5e0>
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003488:	fa93 f3a3 	rbit	r3, r3
 800348c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800348e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003490:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003498:	2320      	movs	r3, #32
 800349a:	e003      	b.n	80034a4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800349c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349e:	fab3 f383 	clz	r3, r3
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	3301      	adds	r3, #1
 80034a6:	069b      	lsls	r3, r3, #26
 80034a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d109      	bne.n	80034cc <HAL_ADC_ConfigChannel+0x600>
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	0e9b      	lsrs	r3, r3, #26
 80034be:	3301      	adds	r3, #1
 80034c0:	f003 031f 	and.w	r3, r3, #31
 80034c4:	2101      	movs	r1, #1
 80034c6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ca:	e017      	b.n	80034fc <HAL_ADC_ConfigChannel+0x630>
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d2:	6a3b      	ldr	r3, [r7, #32]
 80034d4:	fa93 f3a3 	rbit	r3, r3
 80034d8:	61fb      	str	r3, [r7, #28]
  return result;
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80034e4:	2320      	movs	r3, #32
 80034e6:	e003      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	fab3 f383 	clz	r3, r3
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	3301      	adds	r3, #1
 80034f2:	f003 031f 	and.w	r3, r3, #31
 80034f6:	2101      	movs	r1, #1
 80034f8:	fa01 f303 	lsl.w	r3, r1, r3
 80034fc:	ea42 0103 	orr.w	r1, r2, r3
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10d      	bne.n	8003528 <HAL_ADC_ConfigChannel+0x65c>
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	0e9b      	lsrs	r3, r3, #26
 8003512:	3301      	adds	r3, #1
 8003514:	f003 021f 	and.w	r2, r3, #31
 8003518:	4613      	mov	r3, r2
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	4413      	add	r3, r2
 800351e:	3b1e      	subs	r3, #30
 8003520:	051b      	lsls	r3, r3, #20
 8003522:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003526:	e01d      	b.n	8003564 <HAL_ADC_ConfigChannel+0x698>
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	fa93 f3a3 	rbit	r3, r3
 8003534:	613b      	str	r3, [r7, #16]
  return result;
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d103      	bne.n	8003548 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003540:	2320      	movs	r3, #32
 8003542:	e005      	b.n	8003550 <HAL_ADC_ConfigChannel+0x684>
 8003544:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	fab3 f383 	clz	r3, r3
 800354e:	b2db      	uxtb	r3, r3
 8003550:	3301      	adds	r3, #1
 8003552:	f003 021f 	and.w	r2, r3, #31
 8003556:	4613      	mov	r3, r2
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	4413      	add	r3, r2
 800355c:	3b1e      	subs	r3, #30
 800355e:	051b      	lsls	r3, r3, #20
 8003560:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003564:	430b      	orrs	r3, r1
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	6892      	ldr	r2, [r2, #8]
 800356a:	4619      	mov	r1, r3
 800356c:	f7fe fe65 	bl	800223a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	4b44      	ldr	r3, [pc, #272]	; (8003688 <HAL_ADC_ConfigChannel+0x7bc>)
 8003576:	4013      	ands	r3, r2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d07a      	beq.n	8003672 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800357c:	4843      	ldr	r0, [pc, #268]	; (800368c <HAL_ADC_ConfigChannel+0x7c0>)
 800357e:	f7fe fda7 	bl	80020d0 <LL_ADC_GetCommonPathInternalCh>
 8003582:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a41      	ldr	r2, [pc, #260]	; (8003690 <HAL_ADC_ConfigChannel+0x7c4>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d12c      	bne.n	80035ea <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003590:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003594:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d126      	bne.n	80035ea <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a3c      	ldr	r2, [pc, #240]	; (8003694 <HAL_ADC_ConfigChannel+0x7c8>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d004      	beq.n	80035b0 <HAL_ADC_ConfigChannel+0x6e4>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a3b      	ldr	r2, [pc, #236]	; (8003698 <HAL_ADC_ConfigChannel+0x7cc>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d15d      	bne.n	800366c <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80035b8:	4619      	mov	r1, r3
 80035ba:	4834      	ldr	r0, [pc, #208]	; (800368c <HAL_ADC_ConfigChannel+0x7c0>)
 80035bc:	f7fe fd75 	bl	80020aa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035c0:	4b36      	ldr	r3, [pc, #216]	; (800369c <HAL_ADC_ConfigChannel+0x7d0>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	099b      	lsrs	r3, r3, #6
 80035c6:	4a36      	ldr	r2, [pc, #216]	; (80036a0 <HAL_ADC_ConfigChannel+0x7d4>)
 80035c8:	fba2 2303 	umull	r2, r3, r2, r3
 80035cc:	099b      	lsrs	r3, r3, #6
 80035ce:	1c5a      	adds	r2, r3, #1
 80035d0:	4613      	mov	r3, r2
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	4413      	add	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80035da:	e002      	b.n	80035e2 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	3b01      	subs	r3, #1
 80035e0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1f9      	bne.n	80035dc <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035e8:	e040      	b.n	800366c <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a2d      	ldr	r2, [pc, #180]	; (80036a4 <HAL_ADC_ConfigChannel+0x7d8>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d118      	bne.n	8003626 <HAL_ADC_ConfigChannel+0x75a>
 80035f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d112      	bne.n	8003626 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a23      	ldr	r2, [pc, #140]	; (8003694 <HAL_ADC_ConfigChannel+0x7c8>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d004      	beq.n	8003614 <HAL_ADC_ConfigChannel+0x748>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a22      	ldr	r2, [pc, #136]	; (8003698 <HAL_ADC_ConfigChannel+0x7cc>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d12d      	bne.n	8003670 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003614:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003618:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800361c:	4619      	mov	r1, r3
 800361e:	481b      	ldr	r0, [pc, #108]	; (800368c <HAL_ADC_ConfigChannel+0x7c0>)
 8003620:	f7fe fd43 	bl	80020aa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003624:	e024      	b.n	8003670 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a1f      	ldr	r2, [pc, #124]	; (80036a8 <HAL_ADC_ConfigChannel+0x7dc>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d120      	bne.n	8003672 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003630:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003634:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d11a      	bne.n	8003672 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a14      	ldr	r2, [pc, #80]	; (8003694 <HAL_ADC_ConfigChannel+0x7c8>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d115      	bne.n	8003672 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003646:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800364a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800364e:	4619      	mov	r1, r3
 8003650:	480e      	ldr	r0, [pc, #56]	; (800368c <HAL_ADC_ConfigChannel+0x7c0>)
 8003652:	f7fe fd2a 	bl	80020aa <LL_ADC_SetCommonPathInternalCh>
 8003656:	e00c      	b.n	8003672 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365c:	f043 0220 	orr.w	r2, r3, #32
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800366a:	e002      	b.n	8003672 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800366c:	bf00      	nop
 800366e:	e000      	b.n	8003672 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003670:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800367a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800367e:	4618      	mov	r0, r3
 8003680:	37d8      	adds	r7, #216	; 0xd8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	80080000 	.word	0x80080000
 800368c:	50040300 	.word	0x50040300
 8003690:	c7520000 	.word	0xc7520000
 8003694:	50040000 	.word	0x50040000
 8003698:	50040200 	.word	0x50040200
 800369c:	20000000 	.word	0x20000000
 80036a0:	053e2d63 	.word	0x053e2d63
 80036a4:	cb840000 	.word	0xcb840000
 80036a8:	80000001 	.word	0x80000001

080036ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7fe fe8b 	bl	80023d4 <LL_ADC_IsEnabled>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d14d      	bne.n	8003760 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	689a      	ldr	r2, [r3, #8]
 80036ca:	4b28      	ldr	r3, [pc, #160]	; (800376c <ADC_Enable+0xc0>)
 80036cc:	4013      	ands	r3, r2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00d      	beq.n	80036ee <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d6:	f043 0210 	orr.w	r2, r3, #16
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e2:	f043 0201 	orr.w	r2, r3, #1
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e039      	b.n	8003762 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fe fe5a 	bl	80023ac <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80036f8:	f7fe fc94 	bl	8002024 <HAL_GetTick>
 80036fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036fe:	e028      	b.n	8003752 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4618      	mov	r0, r3
 8003706:	f7fe fe65 	bl	80023d4 <LL_ADC_IsEnabled>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d104      	bne.n	800371a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4618      	mov	r0, r3
 8003716:	f7fe fe49 	bl	80023ac <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800371a:	f7fe fc83 	bl	8002024 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d914      	bls.n	8003752 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b01      	cmp	r3, #1
 8003734:	d00d      	beq.n	8003752 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800373a:	f043 0210 	orr.w	r2, r3, #16
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003746:	f043 0201 	orr.w	r2, r3, #1
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e007      	b.n	8003762 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b01      	cmp	r3, #1
 800375e:	d1cf      	bne.n	8003700 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	8000003f 	.word	0x8000003f

08003770 <LL_ADC_IsEnabled>:
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	2b01      	cmp	r3, #1
 8003782:	d101      	bne.n	8003788 <LL_ADC_IsEnabled+0x18>
 8003784:	2301      	movs	r3, #1
 8003786:	e000      	b.n	800378a <LL_ADC_IsEnabled+0x1a>
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <LL_ADC_REG_IsConversionOngoing>:
{
 8003796:	b480      	push	{r7}
 8003798:	b083      	sub	sp, #12
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 0304 	and.w	r3, r3, #4
 80037a6:	2b04      	cmp	r3, #4
 80037a8:	d101      	bne.n	80037ae <LL_ADC_REG_IsConversionOngoing+0x18>
 80037aa:	2301      	movs	r3, #1
 80037ac:	e000      	b.n	80037b0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003820:	b590      	push	{r4, r7, lr}
 8003822:	b09f      	sub	sp, #124	; 0x7c
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800382a:	2300      	movs	r3, #0
 800382c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003836:	2b01      	cmp	r3, #1
 8003838:	d101      	bne.n	800383e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800383a:	2302      	movs	r3, #2
 800383c:	e093      	b.n	8003966 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003846:	2300      	movs	r3, #0
 8003848:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800384a:	2300      	movs	r3, #0
 800384c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a47      	ldr	r2, [pc, #284]	; (8003970 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d102      	bne.n	800385e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003858:	4b46      	ldr	r3, [pc, #280]	; (8003974 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800385a:	60bb      	str	r3, [r7, #8]
 800385c:	e001      	b.n	8003862 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800385e:	2300      	movs	r3, #0
 8003860:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d10b      	bne.n	8003880 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386c:	f043 0220 	orr.w	r2, r3, #32
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e072      	b.n	8003966 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	4618      	mov	r0, r3
 8003884:	f7ff ff87 	bl	8003796 <LL_ADC_REG_IsConversionOngoing>
 8003888:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f7ff ff81 	bl	8003796 <LL_ADC_REG_IsConversionOngoing>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d154      	bne.n	8003944 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800389a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800389c:	2b00      	cmp	r3, #0
 800389e:	d151      	bne.n	8003944 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80038a0:	4b35      	ldr	r3, [pc, #212]	; (8003978 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80038a2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d02c      	beq.n	8003906 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80038ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	6859      	ldr	r1, [r3, #4]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80038be:	035b      	lsls	r3, r3, #13
 80038c0:	430b      	orrs	r3, r1
 80038c2:	431a      	orrs	r2, r3
 80038c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038c6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038c8:	4829      	ldr	r0, [pc, #164]	; (8003970 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80038ca:	f7ff ff51 	bl	8003770 <LL_ADC_IsEnabled>
 80038ce:	4604      	mov	r4, r0
 80038d0:	4828      	ldr	r0, [pc, #160]	; (8003974 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80038d2:	f7ff ff4d 	bl	8003770 <LL_ADC_IsEnabled>
 80038d6:	4603      	mov	r3, r0
 80038d8:	431c      	orrs	r4, r3
 80038da:	4828      	ldr	r0, [pc, #160]	; (800397c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80038dc:	f7ff ff48 	bl	8003770 <LL_ADC_IsEnabled>
 80038e0:	4603      	mov	r3, r0
 80038e2:	4323      	orrs	r3, r4
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d137      	bne.n	8003958 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80038e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80038f0:	f023 030f 	bic.w	r3, r3, #15
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	6811      	ldr	r1, [r2, #0]
 80038f8:	683a      	ldr	r2, [r7, #0]
 80038fa:	6892      	ldr	r2, [r2, #8]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	431a      	orrs	r2, r3
 8003900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003902:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003904:	e028      	b.n	8003958 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800390e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003910:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003912:	4817      	ldr	r0, [pc, #92]	; (8003970 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003914:	f7ff ff2c 	bl	8003770 <LL_ADC_IsEnabled>
 8003918:	4604      	mov	r4, r0
 800391a:	4816      	ldr	r0, [pc, #88]	; (8003974 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800391c:	f7ff ff28 	bl	8003770 <LL_ADC_IsEnabled>
 8003920:	4603      	mov	r3, r0
 8003922:	431c      	orrs	r4, r3
 8003924:	4815      	ldr	r0, [pc, #84]	; (800397c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003926:	f7ff ff23 	bl	8003770 <LL_ADC_IsEnabled>
 800392a:	4603      	mov	r3, r0
 800392c:	4323      	orrs	r3, r4
 800392e:	2b00      	cmp	r3, #0
 8003930:	d112      	bne.n	8003958 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800393a:	f023 030f 	bic.w	r3, r3, #15
 800393e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003940:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003942:	e009      	b.n	8003958 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003948:	f043 0220 	orr.w	r2, r3, #32
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003956:	e000      	b.n	800395a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003958:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003962:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003966:	4618      	mov	r0, r3
 8003968:	377c      	adds	r7, #124	; 0x7c
 800396a:	46bd      	mov	sp, r7
 800396c:	bd90      	pop	{r4, r7, pc}
 800396e:	bf00      	nop
 8003970:	50040000 	.word	0x50040000
 8003974:	50040100 	.word	0x50040100
 8003978:	50040300 	.word	0x50040300
 800397c:	50040200 	.word	0x50040200

08003980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f003 0307 	and.w	r3, r3, #7
 800398e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003990:	4b0c      	ldr	r3, [pc, #48]	; (80039c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800399c:	4013      	ands	r3, r2
 800399e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039b2:	4a04      	ldr	r2, [pc, #16]	; (80039c4 <__NVIC_SetPriorityGrouping+0x44>)
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	60d3      	str	r3, [r2, #12]
}
 80039b8:	bf00      	nop
 80039ba:	3714      	adds	r7, #20
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	e000ed00 	.word	0xe000ed00

080039c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039cc:	4b04      	ldr	r3, [pc, #16]	; (80039e0 <__NVIC_GetPriorityGrouping+0x18>)
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	0a1b      	lsrs	r3, r3, #8
 80039d2:	f003 0307 	and.w	r3, r3, #7
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr
 80039e0:	e000ed00 	.word	0xe000ed00

080039e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	4603      	mov	r3, r0
 80039ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	db0b      	blt.n	8003a0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039f6:	79fb      	ldrb	r3, [r7, #7]
 80039f8:	f003 021f 	and.w	r2, r3, #31
 80039fc:	4907      	ldr	r1, [pc, #28]	; (8003a1c <__NVIC_EnableIRQ+0x38>)
 80039fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a02:	095b      	lsrs	r3, r3, #5
 8003a04:	2001      	movs	r0, #1
 8003a06:	fa00 f202 	lsl.w	r2, r0, r2
 8003a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a0e:	bf00      	nop
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	e000e100 	.word	0xe000e100

08003a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	4603      	mov	r3, r0
 8003a28:	6039      	str	r1, [r7, #0]
 8003a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	db0a      	blt.n	8003a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	b2da      	uxtb	r2, r3
 8003a38:	490c      	ldr	r1, [pc, #48]	; (8003a6c <__NVIC_SetPriority+0x4c>)
 8003a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a3e:	0112      	lsls	r2, r2, #4
 8003a40:	b2d2      	uxtb	r2, r2
 8003a42:	440b      	add	r3, r1
 8003a44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a48:	e00a      	b.n	8003a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	b2da      	uxtb	r2, r3
 8003a4e:	4908      	ldr	r1, [pc, #32]	; (8003a70 <__NVIC_SetPriority+0x50>)
 8003a50:	79fb      	ldrb	r3, [r7, #7]
 8003a52:	f003 030f 	and.w	r3, r3, #15
 8003a56:	3b04      	subs	r3, #4
 8003a58:	0112      	lsls	r2, r2, #4
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	440b      	add	r3, r1
 8003a5e:	761a      	strb	r2, [r3, #24]
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	e000e100 	.word	0xe000e100
 8003a70:	e000ed00 	.word	0xe000ed00

08003a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b089      	sub	sp, #36	; 0x24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f003 0307 	and.w	r3, r3, #7
 8003a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	f1c3 0307 	rsb	r3, r3, #7
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	bf28      	it	cs
 8003a92:	2304      	movcs	r3, #4
 8003a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	3304      	adds	r3, #4
 8003a9a:	2b06      	cmp	r3, #6
 8003a9c:	d902      	bls.n	8003aa4 <NVIC_EncodePriority+0x30>
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	3b03      	subs	r3, #3
 8003aa2:	e000      	b.n	8003aa6 <NVIC_EncodePriority+0x32>
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab2:	43da      	mvns	r2, r3
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	401a      	ands	r2, r3
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003abc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac6:	43d9      	mvns	r1, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003acc:	4313      	orrs	r3, r2
         );
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3724      	adds	r7, #36	; 0x24
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
	...

08003adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003aec:	d301      	bcc.n	8003af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003aee:	2301      	movs	r3, #1
 8003af0:	e00f      	b.n	8003b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003af2:	4a0a      	ldr	r2, [pc, #40]	; (8003b1c <SysTick_Config+0x40>)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	3b01      	subs	r3, #1
 8003af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003afa:	210f      	movs	r1, #15
 8003afc:	f04f 30ff 	mov.w	r0, #4294967295
 8003b00:	f7ff ff8e 	bl	8003a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b04:	4b05      	ldr	r3, [pc, #20]	; (8003b1c <SysTick_Config+0x40>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b0a:	4b04      	ldr	r3, [pc, #16]	; (8003b1c <SysTick_Config+0x40>)
 8003b0c:	2207      	movs	r2, #7
 8003b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	e000e010 	.word	0xe000e010

08003b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f7ff ff29 	bl	8003980 <__NVIC_SetPriorityGrouping>
}
 8003b2e:	bf00      	nop
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b086      	sub	sp, #24
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	60b9      	str	r1, [r7, #8]
 8003b40:	607a      	str	r2, [r7, #4]
 8003b42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003b44:	2300      	movs	r3, #0
 8003b46:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b48:	f7ff ff3e 	bl	80039c8 <__NVIC_GetPriorityGrouping>
 8003b4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	68b9      	ldr	r1, [r7, #8]
 8003b52:	6978      	ldr	r0, [r7, #20]
 8003b54:	f7ff ff8e 	bl	8003a74 <NVIC_EncodePriority>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b5e:	4611      	mov	r1, r2
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7ff ff5d 	bl	8003a20 <__NVIC_SetPriority>
}
 8003b66:	bf00      	nop
 8003b68:	3718      	adds	r7, #24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b082      	sub	sp, #8
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	4603      	mov	r3, r0
 8003b76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7ff ff31 	bl	80039e4 <__NVIC_EnableIRQ>
}
 8003b82:	bf00      	nop
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b082      	sub	sp, #8
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7ff ffa2 	bl	8003adc <SysTick_Config>
 8003b98:	4603      	mov	r3, r0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
	...

08003ba4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e098      	b.n	8003ce8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	4b4d      	ldr	r3, [pc, #308]	; (8003cf4 <HAL_DMA_Init+0x150>)
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d80f      	bhi.n	8003be2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	4b4b      	ldr	r3, [pc, #300]	; (8003cf8 <HAL_DMA_Init+0x154>)
 8003bca:	4413      	add	r3, r2
 8003bcc:	4a4b      	ldr	r2, [pc, #300]	; (8003cfc <HAL_DMA_Init+0x158>)
 8003bce:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd2:	091b      	lsrs	r3, r3, #4
 8003bd4:	009a      	lsls	r2, r3, #2
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a48      	ldr	r2, [pc, #288]	; (8003d00 <HAL_DMA_Init+0x15c>)
 8003bde:	641a      	str	r2, [r3, #64]	; 0x40
 8003be0:	e00e      	b.n	8003c00 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	461a      	mov	r2, r3
 8003be8:	4b46      	ldr	r3, [pc, #280]	; (8003d04 <HAL_DMA_Init+0x160>)
 8003bea:	4413      	add	r3, r2
 8003bec:	4a43      	ldr	r2, [pc, #268]	; (8003cfc <HAL_DMA_Init+0x158>)
 8003bee:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf2:	091b      	lsrs	r3, r3, #4
 8003bf4:	009a      	lsls	r2, r3, #2
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a42      	ldr	r2, [pc, #264]	; (8003d08 <HAL_DMA_Init+0x164>)
 8003bfe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2202      	movs	r2, #2
 8003c04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c1a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003c24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c5a:	d039      	beq.n	8003cd0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c60:	4a27      	ldr	r2, [pc, #156]	; (8003d00 <HAL_DMA_Init+0x15c>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d11a      	bne.n	8003c9c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003c66:	4b29      	ldr	r3, [pc, #164]	; (8003d0c <HAL_DMA_Init+0x168>)
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6e:	f003 031c 	and.w	r3, r3, #28
 8003c72:	210f      	movs	r1, #15
 8003c74:	fa01 f303 	lsl.w	r3, r1, r3
 8003c78:	43db      	mvns	r3, r3
 8003c7a:	4924      	ldr	r1, [pc, #144]	; (8003d0c <HAL_DMA_Init+0x168>)
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003c80:	4b22      	ldr	r3, [pc, #136]	; (8003d0c <HAL_DMA_Init+0x168>)
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6859      	ldr	r1, [r3, #4]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8c:	f003 031c 	and.w	r3, r3, #28
 8003c90:	fa01 f303 	lsl.w	r3, r1, r3
 8003c94:	491d      	ldr	r1, [pc, #116]	; (8003d0c <HAL_DMA_Init+0x168>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	600b      	str	r3, [r1, #0]
 8003c9a:	e019      	b.n	8003cd0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003c9c:	4b1c      	ldr	r3, [pc, #112]	; (8003d10 <HAL_DMA_Init+0x16c>)
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca4:	f003 031c 	and.w	r3, r3, #28
 8003ca8:	210f      	movs	r1, #15
 8003caa:	fa01 f303 	lsl.w	r3, r1, r3
 8003cae:	43db      	mvns	r3, r3
 8003cb0:	4917      	ldr	r1, [pc, #92]	; (8003d10 <HAL_DMA_Init+0x16c>)
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003cb6:	4b16      	ldr	r3, [pc, #88]	; (8003d10 <HAL_DMA_Init+0x16c>)
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6859      	ldr	r1, [r3, #4]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc2:	f003 031c 	and.w	r3, r3, #28
 8003cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cca:	4911      	ldr	r1, [pc, #68]	; (8003d10 <HAL_DMA_Init+0x16c>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3714      	adds	r7, #20
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	40020407 	.word	0x40020407
 8003cf8:	bffdfff8 	.word	0xbffdfff8
 8003cfc:	cccccccd 	.word	0xcccccccd
 8003d00:	40020000 	.word	0x40020000
 8003d04:	bffdfbf8 	.word	0xbffdfbf8
 8003d08:	40020400 	.word	0x40020400
 8003d0c:	400200a8 	.word	0x400200a8
 8003d10:	400204a8 	.word	0x400204a8

08003d14 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d008      	beq.n	8003d3e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2204      	movs	r2, #4
 8003d30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e022      	b.n	8003d84 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 020e 	bic.w	r2, r2, #14
 8003d4c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 0201 	bic.w	r2, r2, #1
 8003d5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d62:	f003 021c 	and.w	r2, r3, #28
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d70:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003d82:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3714      	adds	r7, #20
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d005      	beq.n	8003db4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2204      	movs	r2, #4
 8003dac:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	73fb      	strb	r3, [r7, #15]
 8003db2:	e029      	b.n	8003e08 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f022 020e 	bic.w	r2, r2, #14
 8003dc2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 0201 	bic.w	r2, r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd8:	f003 021c 	and.w	r2, r3, #28
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de0:	2101      	movs	r1, #1
 8003de2:	fa01 f202 	lsl.w	r2, r1, r2
 8003de6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d003      	beq.n	8003e08 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	4798      	blx	r3
    }
  }
  return status;
 8003e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b084      	sub	sp, #16
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2e:	f003 031c 	and.w	r3, r3, #28
 8003e32:	2204      	movs	r2, #4
 8003e34:	409a      	lsls	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	4013      	ands	r3, r2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d026      	beq.n	8003e8c <HAL_DMA_IRQHandler+0x7a>
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	f003 0304 	and.w	r3, r3, #4
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d021      	beq.n	8003e8c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0320 	and.w	r3, r3, #32
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d107      	bne.n	8003e66 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f022 0204 	bic.w	r2, r2, #4
 8003e64:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6a:	f003 021c 	and.w	r2, r3, #28
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	2104      	movs	r1, #4
 8003e74:	fa01 f202 	lsl.w	r2, r1, r2
 8003e78:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d071      	beq.n	8003f66 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003e8a:	e06c      	b.n	8003f66 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e90:	f003 031c 	and.w	r3, r3, #28
 8003e94:	2202      	movs	r2, #2
 8003e96:	409a      	lsls	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d02e      	beq.n	8003efe <HAL_DMA_IRQHandler+0xec>
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d029      	beq.n	8003efe <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0320 	and.w	r3, r3, #32
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10b      	bne.n	8003ed0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f022 020a 	bic.w	r2, r2, #10
 8003ec6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed4:	f003 021c 	and.w	r2, r3, #28
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003edc:	2102      	movs	r1, #2
 8003ede:	fa01 f202 	lsl.w	r2, r1, r2
 8003ee2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d038      	beq.n	8003f66 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003efc:	e033      	b.n	8003f66 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f02:	f003 031c 	and.w	r3, r3, #28
 8003f06:	2208      	movs	r2, #8
 8003f08:	409a      	lsls	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d02a      	beq.n	8003f68 <HAL_DMA_IRQHandler+0x156>
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	f003 0308 	and.w	r3, r3, #8
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d025      	beq.n	8003f68 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f022 020e 	bic.w	r2, r2, #14
 8003f2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f30:	f003 021c 	and.w	r2, r3, #28
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f38:	2101      	movs	r1, #1
 8003f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f3e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d004      	beq.n	8003f68 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003f66:	bf00      	nop
 8003f68:	bf00      	nop
}
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b087      	sub	sp, #28
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f7e:	e17f      	b.n	8004280 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	2101      	movs	r1, #1
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	fa01 f303 	lsl.w	r3, r1, r3
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f000 8171 	beq.w	800427a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f003 0303 	and.w	r3, r3, #3
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d005      	beq.n	8003fb0 <HAL_GPIO_Init+0x40>
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f003 0303 	and.w	r3, r3, #3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d130      	bne.n	8004012 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	2203      	movs	r2, #3
 8003fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	68da      	ldr	r2, [r3, #12]
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	fa02 f303 	lsl.w	r3, r2, r3
 8003fee:	43db      	mvns	r3, r3
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	091b      	lsrs	r3, r3, #4
 8003ffc:	f003 0201 	and.w	r2, r3, #1
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	fa02 f303 	lsl.w	r3, r2, r3
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	4313      	orrs	r3, r2
 800400a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f003 0303 	and.w	r3, r3, #3
 800401a:	2b03      	cmp	r3, #3
 800401c:	d118      	bne.n	8004050 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004022:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004024:	2201      	movs	r2, #1
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	fa02 f303 	lsl.w	r3, r2, r3
 800402c:	43db      	mvns	r3, r3
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	4013      	ands	r3, r2
 8004032:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	08db      	lsrs	r3, r3, #3
 800403a:	f003 0201 	and.w	r2, r3, #1
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	fa02 f303 	lsl.w	r3, r2, r3
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	4313      	orrs	r3, r2
 8004048:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f003 0303 	and.w	r3, r3, #3
 8004058:	2b03      	cmp	r3, #3
 800405a:	d017      	beq.n	800408c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	2203      	movs	r2, #3
 8004068:	fa02 f303 	lsl.w	r3, r2, r3
 800406c:	43db      	mvns	r3, r3
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	4013      	ands	r3, r2
 8004072:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	fa02 f303 	lsl.w	r3, r2, r3
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	4313      	orrs	r3, r2
 8004084:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f003 0303 	and.w	r3, r3, #3
 8004094:	2b02      	cmp	r3, #2
 8004096:	d123      	bne.n	80040e0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	08da      	lsrs	r2, r3, #3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	3208      	adds	r2, #8
 80040a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f003 0307 	and.w	r3, r3, #7
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	220f      	movs	r2, #15
 80040b0:	fa02 f303 	lsl.w	r3, r2, r3
 80040b4:	43db      	mvns	r3, r3
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	4013      	ands	r3, r2
 80040ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	691a      	ldr	r2, [r3, #16]
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f003 0307 	and.w	r3, r3, #7
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	08da      	lsrs	r2, r3, #3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	3208      	adds	r2, #8
 80040da:	6939      	ldr	r1, [r7, #16]
 80040dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	005b      	lsls	r3, r3, #1
 80040ea:	2203      	movs	r2, #3
 80040ec:	fa02 f303 	lsl.w	r3, r2, r3
 80040f0:	43db      	mvns	r3, r3
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	4013      	ands	r3, r2
 80040f6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f003 0203 	and.w	r2, r3, #3
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	fa02 f303 	lsl.w	r3, r2, r3
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	4313      	orrs	r3, r2
 800410c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800411c:	2b00      	cmp	r3, #0
 800411e:	f000 80ac 	beq.w	800427a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004122:	4b5f      	ldr	r3, [pc, #380]	; (80042a0 <HAL_GPIO_Init+0x330>)
 8004124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004126:	4a5e      	ldr	r2, [pc, #376]	; (80042a0 <HAL_GPIO_Init+0x330>)
 8004128:	f043 0301 	orr.w	r3, r3, #1
 800412c:	6613      	str	r3, [r2, #96]	; 0x60
 800412e:	4b5c      	ldr	r3, [pc, #368]	; (80042a0 <HAL_GPIO_Init+0x330>)
 8004130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	60bb      	str	r3, [r7, #8]
 8004138:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800413a:	4a5a      	ldr	r2, [pc, #360]	; (80042a4 <HAL_GPIO_Init+0x334>)
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	089b      	lsrs	r3, r3, #2
 8004140:	3302      	adds	r3, #2
 8004142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004146:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f003 0303 	and.w	r3, r3, #3
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	220f      	movs	r2, #15
 8004152:	fa02 f303 	lsl.w	r3, r2, r3
 8004156:	43db      	mvns	r3, r3
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	4013      	ands	r3, r2
 800415c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004164:	d025      	beq.n	80041b2 <HAL_GPIO_Init+0x242>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a4f      	ldr	r2, [pc, #316]	; (80042a8 <HAL_GPIO_Init+0x338>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d01f      	beq.n	80041ae <HAL_GPIO_Init+0x23e>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a4e      	ldr	r2, [pc, #312]	; (80042ac <HAL_GPIO_Init+0x33c>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d019      	beq.n	80041aa <HAL_GPIO_Init+0x23a>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a4d      	ldr	r2, [pc, #308]	; (80042b0 <HAL_GPIO_Init+0x340>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d013      	beq.n	80041a6 <HAL_GPIO_Init+0x236>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a4c      	ldr	r2, [pc, #304]	; (80042b4 <HAL_GPIO_Init+0x344>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d00d      	beq.n	80041a2 <HAL_GPIO_Init+0x232>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a4b      	ldr	r2, [pc, #300]	; (80042b8 <HAL_GPIO_Init+0x348>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d007      	beq.n	800419e <HAL_GPIO_Init+0x22e>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a4a      	ldr	r2, [pc, #296]	; (80042bc <HAL_GPIO_Init+0x34c>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d101      	bne.n	800419a <HAL_GPIO_Init+0x22a>
 8004196:	2306      	movs	r3, #6
 8004198:	e00c      	b.n	80041b4 <HAL_GPIO_Init+0x244>
 800419a:	2307      	movs	r3, #7
 800419c:	e00a      	b.n	80041b4 <HAL_GPIO_Init+0x244>
 800419e:	2305      	movs	r3, #5
 80041a0:	e008      	b.n	80041b4 <HAL_GPIO_Init+0x244>
 80041a2:	2304      	movs	r3, #4
 80041a4:	e006      	b.n	80041b4 <HAL_GPIO_Init+0x244>
 80041a6:	2303      	movs	r3, #3
 80041a8:	e004      	b.n	80041b4 <HAL_GPIO_Init+0x244>
 80041aa:	2302      	movs	r3, #2
 80041ac:	e002      	b.n	80041b4 <HAL_GPIO_Init+0x244>
 80041ae:	2301      	movs	r3, #1
 80041b0:	e000      	b.n	80041b4 <HAL_GPIO_Init+0x244>
 80041b2:	2300      	movs	r3, #0
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	f002 0203 	and.w	r2, r2, #3
 80041ba:	0092      	lsls	r2, r2, #2
 80041bc:	4093      	lsls	r3, r2
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80041c4:	4937      	ldr	r1, [pc, #220]	; (80042a4 <HAL_GPIO_Init+0x334>)
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	089b      	lsrs	r3, r3, #2
 80041ca:	3302      	adds	r3, #2
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041d2:	4b3b      	ldr	r3, [pc, #236]	; (80042c0 <HAL_GPIO_Init+0x350>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	43db      	mvns	r3, r3
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	4013      	ands	r3, r2
 80041e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d003      	beq.n	80041f6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80041f6:	4a32      	ldr	r2, [pc, #200]	; (80042c0 <HAL_GPIO_Init+0x350>)
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80041fc:	4b30      	ldr	r3, [pc, #192]	; (80042c0 <HAL_GPIO_Init+0x350>)
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	43db      	mvns	r3, r3
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	4013      	ands	r3, r2
 800420a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d003      	beq.n	8004220 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	4313      	orrs	r3, r2
 800421e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004220:	4a27      	ldr	r2, [pc, #156]	; (80042c0 <HAL_GPIO_Init+0x350>)
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004226:	4b26      	ldr	r3, [pc, #152]	; (80042c0 <HAL_GPIO_Init+0x350>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	43db      	mvns	r3, r3
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	4013      	ands	r3, r2
 8004234:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d003      	beq.n	800424a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	4313      	orrs	r3, r2
 8004248:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800424a:	4a1d      	ldr	r2, [pc, #116]	; (80042c0 <HAL_GPIO_Init+0x350>)
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004250:	4b1b      	ldr	r3, [pc, #108]	; (80042c0 <HAL_GPIO_Init+0x350>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	43db      	mvns	r3, r3
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	4013      	ands	r3, r2
 800425e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d003      	beq.n	8004274 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	4313      	orrs	r3, r2
 8004272:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004274:	4a12      	ldr	r2, [pc, #72]	; (80042c0 <HAL_GPIO_Init+0x350>)
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	3301      	adds	r3, #1
 800427e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	fa22 f303 	lsr.w	r3, r2, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	f47f ae78 	bne.w	8003f80 <HAL_GPIO_Init+0x10>
  }
}
 8004290:	bf00      	nop
 8004292:	bf00      	nop
 8004294:	371c      	adds	r7, #28
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	40021000 	.word	0x40021000
 80042a4:	40010000 	.word	0x40010000
 80042a8:	48000400 	.word	0x48000400
 80042ac:	48000800 	.word	0x48000800
 80042b0:	48000c00 	.word	0x48000c00
 80042b4:	48001000 	.word	0x48001000
 80042b8:	48001400 	.word	0x48001400
 80042bc:	48001800 	.word	0x48001800
 80042c0:	40010400 	.word	0x40010400

080042c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	460b      	mov	r3, r1
 80042ce:	807b      	strh	r3, [r7, #2]
 80042d0:	4613      	mov	r3, r2
 80042d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042d4:	787b      	ldrb	r3, [r7, #1]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d003      	beq.n	80042e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80042da:	887a      	ldrh	r2, [r7, #2]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80042e0:	e002      	b.n	80042e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80042e2:	887a      	ldrh	r2, [r7, #2]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80042f4:	b480      	push	{r7}
 80042f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80042f8:	4b04      	ldr	r3, [pc, #16]	; (800430c <HAL_PWREx_GetVoltageRange+0x18>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004300:	4618      	mov	r0, r3
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	40007000 	.word	0x40007000

08004310 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800431e:	d130      	bne.n	8004382 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004320:	4b23      	ldr	r3, [pc, #140]	; (80043b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800432c:	d038      	beq.n	80043a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800432e:	4b20      	ldr	r3, [pc, #128]	; (80043b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004336:	4a1e      	ldr	r2, [pc, #120]	; (80043b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004338:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800433c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800433e:	4b1d      	ldr	r3, [pc, #116]	; (80043b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2232      	movs	r2, #50	; 0x32
 8004344:	fb02 f303 	mul.w	r3, r2, r3
 8004348:	4a1b      	ldr	r2, [pc, #108]	; (80043b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800434a:	fba2 2303 	umull	r2, r3, r2, r3
 800434e:	0c9b      	lsrs	r3, r3, #18
 8004350:	3301      	adds	r3, #1
 8004352:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004354:	e002      	b.n	800435c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	3b01      	subs	r3, #1
 800435a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800435c:	4b14      	ldr	r3, [pc, #80]	; (80043b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004368:	d102      	bne.n	8004370 <HAL_PWREx_ControlVoltageScaling+0x60>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1f2      	bne.n	8004356 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004370:	4b0f      	ldr	r3, [pc, #60]	; (80043b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800437c:	d110      	bne.n	80043a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e00f      	b.n	80043a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004382:	4b0b      	ldr	r3, [pc, #44]	; (80043b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800438a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800438e:	d007      	beq.n	80043a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004390:	4b07      	ldr	r3, [pc, #28]	; (80043b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004398:	4a05      	ldr	r2, [pc, #20]	; (80043b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800439a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800439e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3714      	adds	r7, #20
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	40007000 	.word	0x40007000
 80043b4:	20000000 	.word	0x20000000
 80043b8:	431bde83 	.word	0x431bde83

080043bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b088      	sub	sp, #32
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e3d8      	b.n	8004b80 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043ce:	4b97      	ldr	r3, [pc, #604]	; (800462c <HAL_RCC_OscConfig+0x270>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f003 030c 	and.w	r3, r3, #12
 80043d6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043d8:	4b94      	ldr	r3, [pc, #592]	; (800462c <HAL_RCC_OscConfig+0x270>)
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f003 0303 	and.w	r3, r3, #3
 80043e0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0310 	and.w	r3, r3, #16
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f000 80e4 	beq.w	80045b8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d007      	beq.n	8004406 <HAL_RCC_OscConfig+0x4a>
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	2b0c      	cmp	r3, #12
 80043fa:	f040 808b 	bne.w	8004514 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	2b01      	cmp	r3, #1
 8004402:	f040 8087 	bne.w	8004514 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004406:	4b89      	ldr	r3, [pc, #548]	; (800462c <HAL_RCC_OscConfig+0x270>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d005      	beq.n	800441e <HAL_RCC_OscConfig+0x62>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e3b0      	b.n	8004b80 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a1a      	ldr	r2, [r3, #32]
 8004422:	4b82      	ldr	r3, [pc, #520]	; (800462c <HAL_RCC_OscConfig+0x270>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0308 	and.w	r3, r3, #8
 800442a:	2b00      	cmp	r3, #0
 800442c:	d004      	beq.n	8004438 <HAL_RCC_OscConfig+0x7c>
 800442e:	4b7f      	ldr	r3, [pc, #508]	; (800462c <HAL_RCC_OscConfig+0x270>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004436:	e005      	b.n	8004444 <HAL_RCC_OscConfig+0x88>
 8004438:	4b7c      	ldr	r3, [pc, #496]	; (800462c <HAL_RCC_OscConfig+0x270>)
 800443a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800443e:	091b      	lsrs	r3, r3, #4
 8004440:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004444:	4293      	cmp	r3, r2
 8004446:	d223      	bcs.n	8004490 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	4618      	mov	r0, r3
 800444e:	f000 fd43 	bl	8004ed8 <RCC_SetFlashLatencyFromMSIRange>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d001      	beq.n	800445c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e391      	b.n	8004b80 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800445c:	4b73      	ldr	r3, [pc, #460]	; (800462c <HAL_RCC_OscConfig+0x270>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a72      	ldr	r2, [pc, #456]	; (800462c <HAL_RCC_OscConfig+0x270>)
 8004462:	f043 0308 	orr.w	r3, r3, #8
 8004466:	6013      	str	r3, [r2, #0]
 8004468:	4b70      	ldr	r3, [pc, #448]	; (800462c <HAL_RCC_OscConfig+0x270>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a1b      	ldr	r3, [r3, #32]
 8004474:	496d      	ldr	r1, [pc, #436]	; (800462c <HAL_RCC_OscConfig+0x270>)
 8004476:	4313      	orrs	r3, r2
 8004478:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800447a:	4b6c      	ldr	r3, [pc, #432]	; (800462c <HAL_RCC_OscConfig+0x270>)
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	021b      	lsls	r3, r3, #8
 8004488:	4968      	ldr	r1, [pc, #416]	; (800462c <HAL_RCC_OscConfig+0x270>)
 800448a:	4313      	orrs	r3, r2
 800448c:	604b      	str	r3, [r1, #4]
 800448e:	e025      	b.n	80044dc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004490:	4b66      	ldr	r3, [pc, #408]	; (800462c <HAL_RCC_OscConfig+0x270>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a65      	ldr	r2, [pc, #404]	; (800462c <HAL_RCC_OscConfig+0x270>)
 8004496:	f043 0308 	orr.w	r3, r3, #8
 800449a:	6013      	str	r3, [r2, #0]
 800449c:	4b63      	ldr	r3, [pc, #396]	; (800462c <HAL_RCC_OscConfig+0x270>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a1b      	ldr	r3, [r3, #32]
 80044a8:	4960      	ldr	r1, [pc, #384]	; (800462c <HAL_RCC_OscConfig+0x270>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044ae:	4b5f      	ldr	r3, [pc, #380]	; (800462c <HAL_RCC_OscConfig+0x270>)
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	69db      	ldr	r3, [r3, #28]
 80044ba:	021b      	lsls	r3, r3, #8
 80044bc:	495b      	ldr	r1, [pc, #364]	; (800462c <HAL_RCC_OscConfig+0x270>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d109      	bne.n	80044dc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	4618      	mov	r0, r3
 80044ce:	f000 fd03 	bl	8004ed8 <RCC_SetFlashLatencyFromMSIRange>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d001      	beq.n	80044dc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e351      	b.n	8004b80 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044dc:	f000 fc38 	bl	8004d50 <HAL_RCC_GetSysClockFreq>
 80044e0:	4602      	mov	r2, r0
 80044e2:	4b52      	ldr	r3, [pc, #328]	; (800462c <HAL_RCC_OscConfig+0x270>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	091b      	lsrs	r3, r3, #4
 80044e8:	f003 030f 	and.w	r3, r3, #15
 80044ec:	4950      	ldr	r1, [pc, #320]	; (8004630 <HAL_RCC_OscConfig+0x274>)
 80044ee:	5ccb      	ldrb	r3, [r1, r3]
 80044f0:	f003 031f 	and.w	r3, r3, #31
 80044f4:	fa22 f303 	lsr.w	r3, r2, r3
 80044f8:	4a4e      	ldr	r2, [pc, #312]	; (8004634 <HAL_RCC_OscConfig+0x278>)
 80044fa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80044fc:	4b4e      	ldr	r3, [pc, #312]	; (8004638 <HAL_RCC_OscConfig+0x27c>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4618      	mov	r0, r3
 8004502:	f7fd fd3f 	bl	8001f84 <HAL_InitTick>
 8004506:	4603      	mov	r3, r0
 8004508:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800450a:	7bfb      	ldrb	r3, [r7, #15]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d052      	beq.n	80045b6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004510:	7bfb      	ldrb	r3, [r7, #15]
 8004512:	e335      	b.n	8004b80 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d032      	beq.n	8004582 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800451c:	4b43      	ldr	r3, [pc, #268]	; (800462c <HAL_RCC_OscConfig+0x270>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a42      	ldr	r2, [pc, #264]	; (800462c <HAL_RCC_OscConfig+0x270>)
 8004522:	f043 0301 	orr.w	r3, r3, #1
 8004526:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004528:	f7fd fd7c 	bl	8002024 <HAL_GetTick>
 800452c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800452e:	e008      	b.n	8004542 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004530:	f7fd fd78 	bl	8002024 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e31e      	b.n	8004b80 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004542:	4b3a      	ldr	r3, [pc, #232]	; (800462c <HAL_RCC_OscConfig+0x270>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d0f0      	beq.n	8004530 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800454e:	4b37      	ldr	r3, [pc, #220]	; (800462c <HAL_RCC_OscConfig+0x270>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a36      	ldr	r2, [pc, #216]	; (800462c <HAL_RCC_OscConfig+0x270>)
 8004554:	f043 0308 	orr.w	r3, r3, #8
 8004558:	6013      	str	r3, [r2, #0]
 800455a:	4b34      	ldr	r3, [pc, #208]	; (800462c <HAL_RCC_OscConfig+0x270>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a1b      	ldr	r3, [r3, #32]
 8004566:	4931      	ldr	r1, [pc, #196]	; (800462c <HAL_RCC_OscConfig+0x270>)
 8004568:	4313      	orrs	r3, r2
 800456a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800456c:	4b2f      	ldr	r3, [pc, #188]	; (800462c <HAL_RCC_OscConfig+0x270>)
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	69db      	ldr	r3, [r3, #28]
 8004578:	021b      	lsls	r3, r3, #8
 800457a:	492c      	ldr	r1, [pc, #176]	; (800462c <HAL_RCC_OscConfig+0x270>)
 800457c:	4313      	orrs	r3, r2
 800457e:	604b      	str	r3, [r1, #4]
 8004580:	e01a      	b.n	80045b8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004582:	4b2a      	ldr	r3, [pc, #168]	; (800462c <HAL_RCC_OscConfig+0x270>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a29      	ldr	r2, [pc, #164]	; (800462c <HAL_RCC_OscConfig+0x270>)
 8004588:	f023 0301 	bic.w	r3, r3, #1
 800458c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800458e:	f7fd fd49 	bl	8002024 <HAL_GetTick>
 8004592:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004594:	e008      	b.n	80045a8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004596:	f7fd fd45 	bl	8002024 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e2eb      	b.n	8004b80 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80045a8:	4b20      	ldr	r3, [pc, #128]	; (800462c <HAL_RCC_OscConfig+0x270>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1f0      	bne.n	8004596 <HAL_RCC_OscConfig+0x1da>
 80045b4:	e000      	b.n	80045b8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80045b6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0301 	and.w	r3, r3, #1
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d074      	beq.n	80046ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	2b08      	cmp	r3, #8
 80045c8:	d005      	beq.n	80045d6 <HAL_RCC_OscConfig+0x21a>
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	2b0c      	cmp	r3, #12
 80045ce:	d10e      	bne.n	80045ee <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	2b03      	cmp	r3, #3
 80045d4:	d10b      	bne.n	80045ee <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045d6:	4b15      	ldr	r3, [pc, #84]	; (800462c <HAL_RCC_OscConfig+0x270>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d064      	beq.n	80046ac <HAL_RCC_OscConfig+0x2f0>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d160      	bne.n	80046ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e2c8      	b.n	8004b80 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045f6:	d106      	bne.n	8004606 <HAL_RCC_OscConfig+0x24a>
 80045f8:	4b0c      	ldr	r3, [pc, #48]	; (800462c <HAL_RCC_OscConfig+0x270>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a0b      	ldr	r2, [pc, #44]	; (800462c <HAL_RCC_OscConfig+0x270>)
 80045fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004602:	6013      	str	r3, [r2, #0]
 8004604:	e026      	b.n	8004654 <HAL_RCC_OscConfig+0x298>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800460e:	d115      	bne.n	800463c <HAL_RCC_OscConfig+0x280>
 8004610:	4b06      	ldr	r3, [pc, #24]	; (800462c <HAL_RCC_OscConfig+0x270>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a05      	ldr	r2, [pc, #20]	; (800462c <HAL_RCC_OscConfig+0x270>)
 8004616:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800461a:	6013      	str	r3, [r2, #0]
 800461c:	4b03      	ldr	r3, [pc, #12]	; (800462c <HAL_RCC_OscConfig+0x270>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a02      	ldr	r2, [pc, #8]	; (800462c <HAL_RCC_OscConfig+0x270>)
 8004622:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004626:	6013      	str	r3, [r2, #0]
 8004628:	e014      	b.n	8004654 <HAL_RCC_OscConfig+0x298>
 800462a:	bf00      	nop
 800462c:	40021000 	.word	0x40021000
 8004630:	0800cb90 	.word	0x0800cb90
 8004634:	20000000 	.word	0x20000000
 8004638:	2000000c 	.word	0x2000000c
 800463c:	4ba0      	ldr	r3, [pc, #640]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a9f      	ldr	r2, [pc, #636]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 8004642:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004646:	6013      	str	r3, [r2, #0]
 8004648:	4b9d      	ldr	r3, [pc, #628]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a9c      	ldr	r2, [pc, #624]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 800464e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004652:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d013      	beq.n	8004684 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800465c:	f7fd fce2 	bl	8002024 <HAL_GetTick>
 8004660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004662:	e008      	b.n	8004676 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004664:	f7fd fcde 	bl	8002024 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b64      	cmp	r3, #100	; 0x64
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e284      	b.n	8004b80 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004676:	4b92      	ldr	r3, [pc, #584]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d0f0      	beq.n	8004664 <HAL_RCC_OscConfig+0x2a8>
 8004682:	e014      	b.n	80046ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004684:	f7fd fcce 	bl	8002024 <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800468a:	e008      	b.n	800469e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800468c:	f7fd fcca 	bl	8002024 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b64      	cmp	r3, #100	; 0x64
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e270      	b.n	8004b80 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800469e:	4b88      	ldr	r3, [pc, #544]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1f0      	bne.n	800468c <HAL_RCC_OscConfig+0x2d0>
 80046aa:	e000      	b.n	80046ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d060      	beq.n	800477c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	2b04      	cmp	r3, #4
 80046be:	d005      	beq.n	80046cc <HAL_RCC_OscConfig+0x310>
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	2b0c      	cmp	r3, #12
 80046c4:	d119      	bne.n	80046fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d116      	bne.n	80046fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046cc:	4b7c      	ldr	r3, [pc, #496]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d005      	beq.n	80046e4 <HAL_RCC_OscConfig+0x328>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d101      	bne.n	80046e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e24d      	b.n	8004b80 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046e4:	4b76      	ldr	r3, [pc, #472]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	061b      	lsls	r3, r3, #24
 80046f2:	4973      	ldr	r1, [pc, #460]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046f8:	e040      	b.n	800477c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d023      	beq.n	800474a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004702:	4b6f      	ldr	r3, [pc, #444]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a6e      	ldr	r2, [pc, #440]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 8004708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800470c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800470e:	f7fd fc89 	bl	8002024 <HAL_GetTick>
 8004712:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004714:	e008      	b.n	8004728 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004716:	f7fd fc85 	bl	8002024 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	2b02      	cmp	r3, #2
 8004722:	d901      	bls.n	8004728 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e22b      	b.n	8004b80 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004728:	4b65      	ldr	r3, [pc, #404]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004730:	2b00      	cmp	r3, #0
 8004732:	d0f0      	beq.n	8004716 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004734:	4b62      	ldr	r3, [pc, #392]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	061b      	lsls	r3, r3, #24
 8004742:	495f      	ldr	r1, [pc, #380]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 8004744:	4313      	orrs	r3, r2
 8004746:	604b      	str	r3, [r1, #4]
 8004748:	e018      	b.n	800477c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800474a:	4b5d      	ldr	r3, [pc, #372]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a5c      	ldr	r2, [pc, #368]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 8004750:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004754:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004756:	f7fd fc65 	bl	8002024 <HAL_GetTick>
 800475a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800475c:	e008      	b.n	8004770 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800475e:	f7fd fc61 	bl	8002024 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	2b02      	cmp	r3, #2
 800476a:	d901      	bls.n	8004770 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e207      	b.n	8004b80 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004770:	4b53      	ldr	r3, [pc, #332]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1f0      	bne.n	800475e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0308 	and.w	r3, r3, #8
 8004784:	2b00      	cmp	r3, #0
 8004786:	d03c      	beq.n	8004802 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d01c      	beq.n	80047ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004790:	4b4b      	ldr	r3, [pc, #300]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 8004792:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004796:	4a4a      	ldr	r2, [pc, #296]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 8004798:	f043 0301 	orr.w	r3, r3, #1
 800479c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a0:	f7fd fc40 	bl	8002024 <HAL_GetTick>
 80047a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047a6:	e008      	b.n	80047ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047a8:	f7fd fc3c 	bl	8002024 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e1e2      	b.n	8004b80 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047ba:	4b41      	ldr	r3, [pc, #260]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 80047bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047c0:	f003 0302 	and.w	r3, r3, #2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d0ef      	beq.n	80047a8 <HAL_RCC_OscConfig+0x3ec>
 80047c8:	e01b      	b.n	8004802 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047ca:	4b3d      	ldr	r3, [pc, #244]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 80047cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047d0:	4a3b      	ldr	r2, [pc, #236]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 80047d2:	f023 0301 	bic.w	r3, r3, #1
 80047d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047da:	f7fd fc23 	bl	8002024 <HAL_GetTick>
 80047de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047e0:	e008      	b.n	80047f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047e2:	f7fd fc1f 	bl	8002024 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d901      	bls.n	80047f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e1c5      	b.n	8004b80 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047f4:	4b32      	ldr	r3, [pc, #200]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 80047f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1ef      	bne.n	80047e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0304 	and.w	r3, r3, #4
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 80a6 	beq.w	800495c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004810:	2300      	movs	r3, #0
 8004812:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004814:	4b2a      	ldr	r3, [pc, #168]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 8004816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10d      	bne.n	800483c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004820:	4b27      	ldr	r3, [pc, #156]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 8004822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004824:	4a26      	ldr	r2, [pc, #152]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 8004826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800482a:	6593      	str	r3, [r2, #88]	; 0x58
 800482c:	4b24      	ldr	r3, [pc, #144]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 800482e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004834:	60bb      	str	r3, [r7, #8]
 8004836:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004838:	2301      	movs	r3, #1
 800483a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800483c:	4b21      	ldr	r3, [pc, #132]	; (80048c4 <HAL_RCC_OscConfig+0x508>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004844:	2b00      	cmp	r3, #0
 8004846:	d118      	bne.n	800487a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004848:	4b1e      	ldr	r3, [pc, #120]	; (80048c4 <HAL_RCC_OscConfig+0x508>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a1d      	ldr	r2, [pc, #116]	; (80048c4 <HAL_RCC_OscConfig+0x508>)
 800484e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004852:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004854:	f7fd fbe6 	bl	8002024 <HAL_GetTick>
 8004858:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800485a:	e008      	b.n	800486e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800485c:	f7fd fbe2 	bl	8002024 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b02      	cmp	r3, #2
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e188      	b.n	8004b80 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800486e:	4b15      	ldr	r3, [pc, #84]	; (80048c4 <HAL_RCC_OscConfig+0x508>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004876:	2b00      	cmp	r3, #0
 8004878:	d0f0      	beq.n	800485c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d108      	bne.n	8004894 <HAL_RCC_OscConfig+0x4d8>
 8004882:	4b0f      	ldr	r3, [pc, #60]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 8004884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004888:	4a0d      	ldr	r2, [pc, #52]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 800488a:	f043 0301 	orr.w	r3, r3, #1
 800488e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004892:	e029      	b.n	80048e8 <HAL_RCC_OscConfig+0x52c>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	2b05      	cmp	r3, #5
 800489a:	d115      	bne.n	80048c8 <HAL_RCC_OscConfig+0x50c>
 800489c:	4b08      	ldr	r3, [pc, #32]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 800489e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a2:	4a07      	ldr	r2, [pc, #28]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 80048a4:	f043 0304 	orr.w	r3, r3, #4
 80048a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048ac:	4b04      	ldr	r3, [pc, #16]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 80048ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b2:	4a03      	ldr	r2, [pc, #12]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 80048b4:	f043 0301 	orr.w	r3, r3, #1
 80048b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048bc:	e014      	b.n	80048e8 <HAL_RCC_OscConfig+0x52c>
 80048be:	bf00      	nop
 80048c0:	40021000 	.word	0x40021000
 80048c4:	40007000 	.word	0x40007000
 80048c8:	4b91      	ldr	r3, [pc, #580]	; (8004b10 <HAL_RCC_OscConfig+0x754>)
 80048ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ce:	4a90      	ldr	r2, [pc, #576]	; (8004b10 <HAL_RCC_OscConfig+0x754>)
 80048d0:	f023 0301 	bic.w	r3, r3, #1
 80048d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048d8:	4b8d      	ldr	r3, [pc, #564]	; (8004b10 <HAL_RCC_OscConfig+0x754>)
 80048da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048de:	4a8c      	ldr	r2, [pc, #560]	; (8004b10 <HAL_RCC_OscConfig+0x754>)
 80048e0:	f023 0304 	bic.w	r3, r3, #4
 80048e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d016      	beq.n	800491e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f0:	f7fd fb98 	bl	8002024 <HAL_GetTick>
 80048f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048f6:	e00a      	b.n	800490e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048f8:	f7fd fb94 	bl	8002024 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	f241 3288 	movw	r2, #5000	; 0x1388
 8004906:	4293      	cmp	r3, r2
 8004908:	d901      	bls.n	800490e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e138      	b.n	8004b80 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800490e:	4b80      	ldr	r3, [pc, #512]	; (8004b10 <HAL_RCC_OscConfig+0x754>)
 8004910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d0ed      	beq.n	80048f8 <HAL_RCC_OscConfig+0x53c>
 800491c:	e015      	b.n	800494a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800491e:	f7fd fb81 	bl	8002024 <HAL_GetTick>
 8004922:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004924:	e00a      	b.n	800493c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004926:	f7fd fb7d 	bl	8002024 <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	f241 3288 	movw	r2, #5000	; 0x1388
 8004934:	4293      	cmp	r3, r2
 8004936:	d901      	bls.n	800493c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e121      	b.n	8004b80 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800493c:	4b74      	ldr	r3, [pc, #464]	; (8004b10 <HAL_RCC_OscConfig+0x754>)
 800493e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1ed      	bne.n	8004926 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800494a:	7ffb      	ldrb	r3, [r7, #31]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d105      	bne.n	800495c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004950:	4b6f      	ldr	r3, [pc, #444]	; (8004b10 <HAL_RCC_OscConfig+0x754>)
 8004952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004954:	4a6e      	ldr	r2, [pc, #440]	; (8004b10 <HAL_RCC_OscConfig+0x754>)
 8004956:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800495a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004960:	2b00      	cmp	r3, #0
 8004962:	f000 810c 	beq.w	8004b7e <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496a:	2b02      	cmp	r3, #2
 800496c:	f040 80d4 	bne.w	8004b18 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004970:	4b67      	ldr	r3, [pc, #412]	; (8004b10 <HAL_RCC_OscConfig+0x754>)
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	f003 0203 	and.w	r2, r3, #3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004980:	429a      	cmp	r2, r3
 8004982:	d130      	bne.n	80049e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498e:	3b01      	subs	r3, #1
 8004990:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004992:	429a      	cmp	r2, r3
 8004994:	d127      	bne.n	80049e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d11f      	bne.n	80049e6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049b0:	2a07      	cmp	r2, #7
 80049b2:	bf14      	ite	ne
 80049b4:	2201      	movne	r2, #1
 80049b6:	2200      	moveq	r2, #0
 80049b8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d113      	bne.n	80049e6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c8:	085b      	lsrs	r3, r3, #1
 80049ca:	3b01      	subs	r3, #1
 80049cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d109      	bne.n	80049e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049dc:	085b      	lsrs	r3, r3, #1
 80049de:	3b01      	subs	r3, #1
 80049e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d06e      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	2b0c      	cmp	r3, #12
 80049ea:	d069      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80049ec:	4b48      	ldr	r3, [pc, #288]	; (8004b10 <HAL_RCC_OscConfig+0x754>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d105      	bne.n	8004a04 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80049f8:	4b45      	ldr	r3, [pc, #276]	; (8004b10 <HAL_RCC_OscConfig+0x754>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d001      	beq.n	8004a08 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e0bb      	b.n	8004b80 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004a08:	4b41      	ldr	r3, [pc, #260]	; (8004b10 <HAL_RCC_OscConfig+0x754>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a40      	ldr	r2, [pc, #256]	; (8004b10 <HAL_RCC_OscConfig+0x754>)
 8004a0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a12:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a14:	f7fd fb06 	bl	8002024 <HAL_GetTick>
 8004a18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a1c:	f7fd fb02 	bl	8002024 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e0a8      	b.n	8004b80 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a2e:	4b38      	ldr	r3, [pc, #224]	; (8004b10 <HAL_RCC_OscConfig+0x754>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1f0      	bne.n	8004a1c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a3a:	4b35      	ldr	r3, [pc, #212]	; (8004b10 <HAL_RCC_OscConfig+0x754>)
 8004a3c:	68da      	ldr	r2, [r3, #12]
 8004a3e:	4b35      	ldr	r3, [pc, #212]	; (8004b14 <HAL_RCC_OscConfig+0x758>)
 8004a40:	4013      	ands	r3, r2
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004a4a:	3a01      	subs	r2, #1
 8004a4c:	0112      	lsls	r2, r2, #4
 8004a4e:	4311      	orrs	r1, r2
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a54:	0212      	lsls	r2, r2, #8
 8004a56:	4311      	orrs	r1, r2
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a5c:	0852      	lsrs	r2, r2, #1
 8004a5e:	3a01      	subs	r2, #1
 8004a60:	0552      	lsls	r2, r2, #21
 8004a62:	4311      	orrs	r1, r2
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a68:	0852      	lsrs	r2, r2, #1
 8004a6a:	3a01      	subs	r2, #1
 8004a6c:	0652      	lsls	r2, r2, #25
 8004a6e:	4311      	orrs	r1, r2
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a74:	0912      	lsrs	r2, r2, #4
 8004a76:	0452      	lsls	r2, r2, #17
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	4925      	ldr	r1, [pc, #148]	; (8004b10 <HAL_RCC_OscConfig+0x754>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004a80:	4b23      	ldr	r3, [pc, #140]	; (8004b10 <HAL_RCC_OscConfig+0x754>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a22      	ldr	r2, [pc, #136]	; (8004b10 <HAL_RCC_OscConfig+0x754>)
 8004a86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a8a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a8c:	4b20      	ldr	r3, [pc, #128]	; (8004b10 <HAL_RCC_OscConfig+0x754>)
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	4a1f      	ldr	r2, [pc, #124]	; (8004b10 <HAL_RCC_OscConfig+0x754>)
 8004a92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a96:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a98:	f7fd fac4 	bl	8002024 <HAL_GetTick>
 8004a9c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aa0:	f7fd fac0 	bl	8002024 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e066      	b.n	8004b80 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ab2:	4b17      	ldr	r3, [pc, #92]	; (8004b10 <HAL_RCC_OscConfig+0x754>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0f0      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004abe:	e05e      	b.n	8004b7e <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e05d      	b.n	8004b80 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ac4:	4b12      	ldr	r3, [pc, #72]	; (8004b10 <HAL_RCC_OscConfig+0x754>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d156      	bne.n	8004b7e <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004ad0:	4b0f      	ldr	r3, [pc, #60]	; (8004b10 <HAL_RCC_OscConfig+0x754>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a0e      	ldr	r2, [pc, #56]	; (8004b10 <HAL_RCC_OscConfig+0x754>)
 8004ad6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ada:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004adc:	4b0c      	ldr	r3, [pc, #48]	; (8004b10 <HAL_RCC_OscConfig+0x754>)
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	4a0b      	ldr	r2, [pc, #44]	; (8004b10 <HAL_RCC_OscConfig+0x754>)
 8004ae2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ae6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ae8:	f7fd fa9c 	bl	8002024 <HAL_GetTick>
 8004aec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aee:	e008      	b.n	8004b02 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004af0:	f7fd fa98 	bl	8002024 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e03e      	b.n	8004b80 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b02:	4b03      	ldr	r3, [pc, #12]	; (8004b10 <HAL_RCC_OscConfig+0x754>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d0f0      	beq.n	8004af0 <HAL_RCC_OscConfig+0x734>
 8004b0e:	e036      	b.n	8004b7e <HAL_RCC_OscConfig+0x7c2>
 8004b10:	40021000 	.word	0x40021000
 8004b14:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	2b0c      	cmp	r3, #12
 8004b1c:	d02d      	beq.n	8004b7a <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b1e:	4b1a      	ldr	r3, [pc, #104]	; (8004b88 <HAL_RCC_OscConfig+0x7cc>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a19      	ldr	r2, [pc, #100]	; (8004b88 <HAL_RCC_OscConfig+0x7cc>)
 8004b24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b28:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004b2a:	4b17      	ldr	r3, [pc, #92]	; (8004b88 <HAL_RCC_OscConfig+0x7cc>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d105      	bne.n	8004b42 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004b36:	4b14      	ldr	r3, [pc, #80]	; (8004b88 <HAL_RCC_OscConfig+0x7cc>)
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	4a13      	ldr	r2, [pc, #76]	; (8004b88 <HAL_RCC_OscConfig+0x7cc>)
 8004b3c:	f023 0303 	bic.w	r3, r3, #3
 8004b40:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004b42:	4b11      	ldr	r3, [pc, #68]	; (8004b88 <HAL_RCC_OscConfig+0x7cc>)
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	4a10      	ldr	r2, [pc, #64]	; (8004b88 <HAL_RCC_OscConfig+0x7cc>)
 8004b48:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004b4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b50:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b52:	f7fd fa67 	bl	8002024 <HAL_GetTick>
 8004b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b58:	e008      	b.n	8004b6c <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b5a:	f7fd fa63 	bl	8002024 <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d901      	bls.n	8004b6c <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e009      	b.n	8004b80 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b6c:	4b06      	ldr	r3, [pc, #24]	; (8004b88 <HAL_RCC_OscConfig+0x7cc>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1f0      	bne.n	8004b5a <HAL_RCC_OscConfig+0x79e>
 8004b78:	e001      	b.n	8004b7e <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e000      	b.n	8004b80 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3720      	adds	r7, #32
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	40021000 	.word	0x40021000

08004b8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d101      	bne.n	8004ba0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e0c8      	b.n	8004d32 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ba0:	4b66      	ldr	r3, [pc, #408]	; (8004d3c <HAL_RCC_ClockConfig+0x1b0>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0307 	and.w	r3, r3, #7
 8004ba8:	683a      	ldr	r2, [r7, #0]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d910      	bls.n	8004bd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bae:	4b63      	ldr	r3, [pc, #396]	; (8004d3c <HAL_RCC_ClockConfig+0x1b0>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f023 0207 	bic.w	r2, r3, #7
 8004bb6:	4961      	ldr	r1, [pc, #388]	; (8004d3c <HAL_RCC_ClockConfig+0x1b0>)
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bbe:	4b5f      	ldr	r3, [pc, #380]	; (8004d3c <HAL_RCC_ClockConfig+0x1b0>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0307 	and.w	r3, r3, #7
 8004bc6:	683a      	ldr	r2, [r7, #0]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d001      	beq.n	8004bd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e0b0      	b.n	8004d32 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0301 	and.w	r3, r3, #1
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d04c      	beq.n	8004c76 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	2b03      	cmp	r3, #3
 8004be2:	d107      	bne.n	8004bf4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004be4:	4b56      	ldr	r3, [pc, #344]	; (8004d40 <HAL_RCC_ClockConfig+0x1b4>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d121      	bne.n	8004c34 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e09e      	b.n	8004d32 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d107      	bne.n	8004c0c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bfc:	4b50      	ldr	r3, [pc, #320]	; (8004d40 <HAL_RCC_ClockConfig+0x1b4>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d115      	bne.n	8004c34 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e092      	b.n	8004d32 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d107      	bne.n	8004c24 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c14:	4b4a      	ldr	r3, [pc, #296]	; (8004d40 <HAL_RCC_ClockConfig+0x1b4>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d109      	bne.n	8004c34 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e086      	b.n	8004d32 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c24:	4b46      	ldr	r3, [pc, #280]	; (8004d40 <HAL_RCC_ClockConfig+0x1b4>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d101      	bne.n	8004c34 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e07e      	b.n	8004d32 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c34:	4b42      	ldr	r3, [pc, #264]	; (8004d40 <HAL_RCC_ClockConfig+0x1b4>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f023 0203 	bic.w	r2, r3, #3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	493f      	ldr	r1, [pc, #252]	; (8004d40 <HAL_RCC_ClockConfig+0x1b4>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c46:	f7fd f9ed 	bl	8002024 <HAL_GetTick>
 8004c4a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c4c:	e00a      	b.n	8004c64 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c4e:	f7fd f9e9 	bl	8002024 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d901      	bls.n	8004c64 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e066      	b.n	8004d32 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c64:	4b36      	ldr	r3, [pc, #216]	; (8004d40 <HAL_RCC_ClockConfig+0x1b4>)
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f003 020c 	and.w	r2, r3, #12
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d1eb      	bne.n	8004c4e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d008      	beq.n	8004c94 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c82:	4b2f      	ldr	r3, [pc, #188]	; (8004d40 <HAL_RCC_ClockConfig+0x1b4>)
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	492c      	ldr	r1, [pc, #176]	; (8004d40 <HAL_RCC_ClockConfig+0x1b4>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c94:	4b29      	ldr	r3, [pc, #164]	; (8004d3c <HAL_RCC_ClockConfig+0x1b0>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0307 	and.w	r3, r3, #7
 8004c9c:	683a      	ldr	r2, [r7, #0]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d210      	bcs.n	8004cc4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ca2:	4b26      	ldr	r3, [pc, #152]	; (8004d3c <HAL_RCC_ClockConfig+0x1b0>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f023 0207 	bic.w	r2, r3, #7
 8004caa:	4924      	ldr	r1, [pc, #144]	; (8004d3c <HAL_RCC_ClockConfig+0x1b0>)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cb2:	4b22      	ldr	r3, [pc, #136]	; (8004d3c <HAL_RCC_ClockConfig+0x1b0>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0307 	and.w	r3, r3, #7
 8004cba:	683a      	ldr	r2, [r7, #0]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d001      	beq.n	8004cc4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e036      	b.n	8004d32 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0304 	and.w	r3, r3, #4
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d008      	beq.n	8004ce2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cd0:	4b1b      	ldr	r3, [pc, #108]	; (8004d40 <HAL_RCC_ClockConfig+0x1b4>)
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	4918      	ldr	r1, [pc, #96]	; (8004d40 <HAL_RCC_ClockConfig+0x1b4>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0308 	and.w	r3, r3, #8
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d009      	beq.n	8004d02 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cee:	4b14      	ldr	r3, [pc, #80]	; (8004d40 <HAL_RCC_ClockConfig+0x1b4>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	00db      	lsls	r3, r3, #3
 8004cfc:	4910      	ldr	r1, [pc, #64]	; (8004d40 <HAL_RCC_ClockConfig+0x1b4>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d02:	f000 f825 	bl	8004d50 <HAL_RCC_GetSysClockFreq>
 8004d06:	4602      	mov	r2, r0
 8004d08:	4b0d      	ldr	r3, [pc, #52]	; (8004d40 <HAL_RCC_ClockConfig+0x1b4>)
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	091b      	lsrs	r3, r3, #4
 8004d0e:	f003 030f 	and.w	r3, r3, #15
 8004d12:	490c      	ldr	r1, [pc, #48]	; (8004d44 <HAL_RCC_ClockConfig+0x1b8>)
 8004d14:	5ccb      	ldrb	r3, [r1, r3]
 8004d16:	f003 031f 	and.w	r3, r3, #31
 8004d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d1e:	4a0a      	ldr	r2, [pc, #40]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004d20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d22:	4b0a      	ldr	r3, [pc, #40]	; (8004d4c <HAL_RCC_ClockConfig+0x1c0>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7fd f92c 	bl	8001f84 <HAL_InitTick>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	72fb      	strb	r3, [r7, #11]

  return status;
 8004d30:	7afb      	ldrb	r3, [r7, #11]
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	40022000 	.word	0x40022000
 8004d40:	40021000 	.word	0x40021000
 8004d44:	0800cb90 	.word	0x0800cb90
 8004d48:	20000000 	.word	0x20000000
 8004d4c:	2000000c 	.word	0x2000000c

08004d50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b089      	sub	sp, #36	; 0x24
 8004d54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004d56:	2300      	movs	r3, #0
 8004d58:	61fb      	str	r3, [r7, #28]
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d5e:	4b3e      	ldr	r3, [pc, #248]	; (8004e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f003 030c 	and.w	r3, r3, #12
 8004d66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d68:	4b3b      	ldr	r3, [pc, #236]	; (8004e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	f003 0303 	and.w	r3, r3, #3
 8004d70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d005      	beq.n	8004d84 <HAL_RCC_GetSysClockFreq+0x34>
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	2b0c      	cmp	r3, #12
 8004d7c:	d121      	bne.n	8004dc2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d11e      	bne.n	8004dc2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d84:	4b34      	ldr	r3, [pc, #208]	; (8004e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0308 	and.w	r3, r3, #8
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d107      	bne.n	8004da0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d90:	4b31      	ldr	r3, [pc, #196]	; (8004e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d96:	0a1b      	lsrs	r3, r3, #8
 8004d98:	f003 030f 	and.w	r3, r3, #15
 8004d9c:	61fb      	str	r3, [r7, #28]
 8004d9e:	e005      	b.n	8004dac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004da0:	4b2d      	ldr	r3, [pc, #180]	; (8004e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	091b      	lsrs	r3, r3, #4
 8004da6:	f003 030f 	and.w	r3, r3, #15
 8004daa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004dac:	4a2b      	ldr	r2, [pc, #172]	; (8004e5c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004db4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d10d      	bne.n	8004dd8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004dc0:	e00a      	b.n	8004dd8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	2b04      	cmp	r3, #4
 8004dc6:	d102      	bne.n	8004dce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004dc8:	4b25      	ldr	r3, [pc, #148]	; (8004e60 <HAL_RCC_GetSysClockFreq+0x110>)
 8004dca:	61bb      	str	r3, [r7, #24]
 8004dcc:	e004      	b.n	8004dd8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	2b08      	cmp	r3, #8
 8004dd2:	d101      	bne.n	8004dd8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004dd4:	4b23      	ldr	r3, [pc, #140]	; (8004e64 <HAL_RCC_GetSysClockFreq+0x114>)
 8004dd6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	2b0c      	cmp	r3, #12
 8004ddc:	d134      	bne.n	8004e48 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004dde:	4b1e      	ldr	r3, [pc, #120]	; (8004e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	f003 0303 	and.w	r3, r3, #3
 8004de6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d003      	beq.n	8004df6 <HAL_RCC_GetSysClockFreq+0xa6>
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	2b03      	cmp	r3, #3
 8004df2:	d003      	beq.n	8004dfc <HAL_RCC_GetSysClockFreq+0xac>
 8004df4:	e005      	b.n	8004e02 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004df6:	4b1a      	ldr	r3, [pc, #104]	; (8004e60 <HAL_RCC_GetSysClockFreq+0x110>)
 8004df8:	617b      	str	r3, [r7, #20]
      break;
 8004dfa:	e005      	b.n	8004e08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004dfc:	4b19      	ldr	r3, [pc, #100]	; (8004e64 <HAL_RCC_GetSysClockFreq+0x114>)
 8004dfe:	617b      	str	r3, [r7, #20]
      break;
 8004e00:	e002      	b.n	8004e08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	617b      	str	r3, [r7, #20]
      break;
 8004e06:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e08:	4b13      	ldr	r3, [pc, #76]	; (8004e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	091b      	lsrs	r3, r3, #4
 8004e0e:	f003 0307 	and.w	r3, r3, #7
 8004e12:	3301      	adds	r3, #1
 8004e14:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e16:	4b10      	ldr	r3, [pc, #64]	; (8004e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	0a1b      	lsrs	r3, r3, #8
 8004e1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	fb03 f202 	mul.w	r2, r3, r2
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e2c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e2e:	4b0a      	ldr	r3, [pc, #40]	; (8004e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	0e5b      	lsrs	r3, r3, #25
 8004e34:	f003 0303 	and.w	r3, r3, #3
 8004e38:	3301      	adds	r3, #1
 8004e3a:	005b      	lsls	r3, r3, #1
 8004e3c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e46:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004e48:	69bb      	ldr	r3, [r7, #24]
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3724      	adds	r7, #36	; 0x24
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	40021000 	.word	0x40021000
 8004e5c:	0800cba8 	.word	0x0800cba8
 8004e60:	00f42400 	.word	0x00f42400
 8004e64:	007a1200 	.word	0x007a1200

08004e68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e6c:	4b03      	ldr	r3, [pc, #12]	; (8004e7c <HAL_RCC_GetHCLKFreq+0x14>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	20000000 	.word	0x20000000

08004e80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e84:	f7ff fff0 	bl	8004e68 <HAL_RCC_GetHCLKFreq>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	4b06      	ldr	r3, [pc, #24]	; (8004ea4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	0a1b      	lsrs	r3, r3, #8
 8004e90:	f003 0307 	and.w	r3, r3, #7
 8004e94:	4904      	ldr	r1, [pc, #16]	; (8004ea8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e96:	5ccb      	ldrb	r3, [r1, r3]
 8004e98:	f003 031f 	and.w	r3, r3, #31
 8004e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	40021000 	.word	0x40021000
 8004ea8:	0800cba0 	.word	0x0800cba0

08004eac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004eb0:	f7ff ffda 	bl	8004e68 <HAL_RCC_GetHCLKFreq>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	4b06      	ldr	r3, [pc, #24]	; (8004ed0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	0adb      	lsrs	r3, r3, #11
 8004ebc:	f003 0307 	and.w	r3, r3, #7
 8004ec0:	4904      	ldr	r1, [pc, #16]	; (8004ed4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ec2:	5ccb      	ldrb	r3, [r1, r3]
 8004ec4:	f003 031f 	and.w	r3, r3, #31
 8004ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	40021000 	.word	0x40021000
 8004ed4:	0800cba0 	.word	0x0800cba0

08004ed8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b086      	sub	sp, #24
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ee4:	4b2a      	ldr	r3, [pc, #168]	; (8004f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d003      	beq.n	8004ef8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004ef0:	f7ff fa00 	bl	80042f4 <HAL_PWREx_GetVoltageRange>
 8004ef4:	6178      	str	r0, [r7, #20]
 8004ef6:	e014      	b.n	8004f22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ef8:	4b25      	ldr	r3, [pc, #148]	; (8004f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004efc:	4a24      	ldr	r2, [pc, #144]	; (8004f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f02:	6593      	str	r3, [r2, #88]	; 0x58
 8004f04:	4b22      	ldr	r3, [pc, #136]	; (8004f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f0c:	60fb      	str	r3, [r7, #12]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004f10:	f7ff f9f0 	bl	80042f4 <HAL_PWREx_GetVoltageRange>
 8004f14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004f16:	4b1e      	ldr	r3, [pc, #120]	; (8004f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f1a:	4a1d      	ldr	r2, [pc, #116]	; (8004f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f20:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f28:	d10b      	bne.n	8004f42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2b80      	cmp	r3, #128	; 0x80
 8004f2e:	d919      	bls.n	8004f64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2ba0      	cmp	r3, #160	; 0xa0
 8004f34:	d902      	bls.n	8004f3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f36:	2302      	movs	r3, #2
 8004f38:	613b      	str	r3, [r7, #16]
 8004f3a:	e013      	b.n	8004f64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	613b      	str	r3, [r7, #16]
 8004f40:	e010      	b.n	8004f64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2b80      	cmp	r3, #128	; 0x80
 8004f46:	d902      	bls.n	8004f4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004f48:	2303      	movs	r3, #3
 8004f4a:	613b      	str	r3, [r7, #16]
 8004f4c:	e00a      	b.n	8004f64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2b80      	cmp	r3, #128	; 0x80
 8004f52:	d102      	bne.n	8004f5a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f54:	2302      	movs	r3, #2
 8004f56:	613b      	str	r3, [r7, #16]
 8004f58:	e004      	b.n	8004f64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2b70      	cmp	r3, #112	; 0x70
 8004f5e:	d101      	bne.n	8004f64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f60:	2301      	movs	r3, #1
 8004f62:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f64:	4b0b      	ldr	r3, [pc, #44]	; (8004f94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f023 0207 	bic.w	r2, r3, #7
 8004f6c:	4909      	ldr	r1, [pc, #36]	; (8004f94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f74:	4b07      	ldr	r3, [pc, #28]	; (8004f94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0307 	and.w	r3, r3, #7
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d001      	beq.n	8004f86 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e000      	b.n	8004f88 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3718      	adds	r7, #24
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	40021000 	.word	0x40021000
 8004f94:	40022000 	.word	0x40022000

08004f98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d041      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fb8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004fbc:	d02a      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004fbe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004fc2:	d824      	bhi.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004fc4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fc8:	d008      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004fca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fce:	d81e      	bhi.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00a      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004fd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fd8:	d010      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004fda:	e018      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004fdc:	4b86      	ldr	r3, [pc, #536]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	4a85      	ldr	r2, [pc, #532]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fe6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fe8:	e015      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	3304      	adds	r3, #4
 8004fee:	2100      	movs	r1, #0
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f000 fabb 	bl	800556c <RCCEx_PLLSAI1_Config>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ffa:	e00c      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	3320      	adds	r3, #32
 8005000:	2100      	movs	r1, #0
 8005002:	4618      	mov	r0, r3
 8005004:	f000 fba6 	bl	8005754 <RCCEx_PLLSAI2_Config>
 8005008:	4603      	mov	r3, r0
 800500a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800500c:	e003      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	74fb      	strb	r3, [r7, #19]
      break;
 8005012:	e000      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005014:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005016:	7cfb      	ldrb	r3, [r7, #19]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d10b      	bne.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800501c:	4b76      	ldr	r3, [pc, #472]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800501e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005022:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800502a:	4973      	ldr	r1, [pc, #460]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800502c:	4313      	orrs	r3, r2
 800502e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005032:	e001      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005034:	7cfb      	ldrb	r3, [r7, #19]
 8005036:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d041      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005048:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800504c:	d02a      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800504e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005052:	d824      	bhi.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005054:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005058:	d008      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800505a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800505e:	d81e      	bhi.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005060:	2b00      	cmp	r3, #0
 8005062:	d00a      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005064:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005068:	d010      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800506a:	e018      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800506c:	4b62      	ldr	r3, [pc, #392]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	4a61      	ldr	r2, [pc, #388]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005072:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005076:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005078:	e015      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	3304      	adds	r3, #4
 800507e:	2100      	movs	r1, #0
 8005080:	4618      	mov	r0, r3
 8005082:	f000 fa73 	bl	800556c <RCCEx_PLLSAI1_Config>
 8005086:	4603      	mov	r3, r0
 8005088:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800508a:	e00c      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	3320      	adds	r3, #32
 8005090:	2100      	movs	r1, #0
 8005092:	4618      	mov	r0, r3
 8005094:	f000 fb5e 	bl	8005754 <RCCEx_PLLSAI2_Config>
 8005098:	4603      	mov	r3, r0
 800509a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800509c:	e003      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	74fb      	strb	r3, [r7, #19]
      break;
 80050a2:	e000      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80050a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050a6:	7cfb      	ldrb	r3, [r7, #19]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d10b      	bne.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80050ac:	4b52      	ldr	r3, [pc, #328]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050ba:	494f      	ldr	r1, [pc, #316]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80050c2:	e001      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050c4:	7cfb      	ldrb	r3, [r7, #19]
 80050c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f000 80a0 	beq.w	8005216 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050d6:	2300      	movs	r3, #0
 80050d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80050da:	4b47      	ldr	r3, [pc, #284]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d101      	bne.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x152>
 80050e6:	2301      	movs	r3, #1
 80050e8:	e000      	b.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x154>
 80050ea:	2300      	movs	r3, #0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00d      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050f0:	4b41      	ldr	r3, [pc, #260]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f4:	4a40      	ldr	r2, [pc, #256]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050fa:	6593      	str	r3, [r2, #88]	; 0x58
 80050fc:	4b3e      	ldr	r3, [pc, #248]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005104:	60bb      	str	r3, [r7, #8]
 8005106:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005108:	2301      	movs	r3, #1
 800510a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800510c:	4b3b      	ldr	r3, [pc, #236]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a3a      	ldr	r2, [pc, #232]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005116:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005118:	f7fc ff84 	bl	8002024 <HAL_GetTick>
 800511c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800511e:	e009      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005120:	f7fc ff80 	bl	8002024 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	2b02      	cmp	r3, #2
 800512c:	d902      	bls.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	74fb      	strb	r3, [r7, #19]
        break;
 8005132:	e005      	b.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005134:	4b31      	ldr	r3, [pc, #196]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800513c:	2b00      	cmp	r3, #0
 800513e:	d0ef      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005140:	7cfb      	ldrb	r3, [r7, #19]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d15c      	bne.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005146:	4b2c      	ldr	r3, [pc, #176]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800514c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005150:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d01f      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	429a      	cmp	r2, r3
 8005162:	d019      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005164:	4b24      	ldr	r3, [pc, #144]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800516a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800516e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005170:	4b21      	ldr	r3, [pc, #132]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005176:	4a20      	ldr	r2, [pc, #128]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800517c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005180:	4b1d      	ldr	r3, [pc, #116]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005186:	4a1c      	ldr	r2, [pc, #112]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005188:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800518c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005190:	4a19      	ldr	r2, [pc, #100]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d016      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a2:	f7fc ff3f 	bl	8002024 <HAL_GetTick>
 80051a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051a8:	e00b      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051aa:	f7fc ff3b 	bl	8002024 <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d902      	bls.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	74fb      	strb	r3, [r7, #19]
            break;
 80051c0:	e006      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051c2:	4b0d      	ldr	r3, [pc, #52]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051c8:	f003 0302 	and.w	r3, r3, #2
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d0ec      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80051d0:	7cfb      	ldrb	r3, [r7, #19]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10c      	bne.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051d6:	4b08      	ldr	r3, [pc, #32]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051e6:	4904      	ldr	r1, [pc, #16]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80051ee:	e009      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80051f0:	7cfb      	ldrb	r3, [r7, #19]
 80051f2:	74bb      	strb	r3, [r7, #18]
 80051f4:	e006      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80051f6:	bf00      	nop
 80051f8:	40021000 	.word	0x40021000
 80051fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005200:	7cfb      	ldrb	r3, [r7, #19]
 8005202:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005204:	7c7b      	ldrb	r3, [r7, #17]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d105      	bne.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800520a:	4b9e      	ldr	r3, [pc, #632]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800520c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800520e:	4a9d      	ldr	r2, [pc, #628]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005210:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005214:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00a      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005222:	4b98      	ldr	r3, [pc, #608]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005228:	f023 0203 	bic.w	r2, r3, #3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005230:	4994      	ldr	r1, [pc, #592]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005232:	4313      	orrs	r3, r2
 8005234:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0302 	and.w	r3, r3, #2
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00a      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005244:	4b8f      	ldr	r3, [pc, #572]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800524a:	f023 020c 	bic.w	r2, r3, #12
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005252:	498c      	ldr	r1, [pc, #560]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005254:	4313      	orrs	r3, r2
 8005256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0304 	and.w	r3, r3, #4
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00a      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005266:	4b87      	ldr	r3, [pc, #540]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800526c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005274:	4983      	ldr	r1, [pc, #524]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005276:	4313      	orrs	r3, r2
 8005278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0308 	and.w	r3, r3, #8
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00a      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005288:	4b7e      	ldr	r3, [pc, #504]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800528a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800528e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005296:	497b      	ldr	r1, [pc, #492]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005298:	4313      	orrs	r3, r2
 800529a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0310 	and.w	r3, r3, #16
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00a      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80052aa:	4b76      	ldr	r3, [pc, #472]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052b8:	4972      	ldr	r1, [pc, #456]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0320 	and.w	r3, r3, #32
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00a      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052cc:	4b6d      	ldr	r3, [pc, #436]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052da:	496a      	ldr	r1, [pc, #424]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00a      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052ee:	4b65      	ldr	r3, [pc, #404]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052fc:	4961      	ldr	r1, [pc, #388]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00a      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005310:	4b5c      	ldr	r3, [pc, #368]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005316:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800531e:	4959      	ldr	r1, [pc, #356]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005320:	4313      	orrs	r3, r2
 8005322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00a      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005332:	4b54      	ldr	r3, [pc, #336]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005338:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005340:	4950      	ldr	r1, [pc, #320]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005342:	4313      	orrs	r3, r2
 8005344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00a      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005354:	4b4b      	ldr	r3, [pc, #300]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800535a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005362:	4948      	ldr	r1, [pc, #288]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005364:	4313      	orrs	r3, r2
 8005366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00a      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005376:	4b43      	ldr	r3, [pc, #268]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800537c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005384:	493f      	ldr	r1, [pc, #252]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005386:	4313      	orrs	r3, r2
 8005388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d028      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005398:	4b3a      	ldr	r3, [pc, #232]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800539a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800539e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053a6:	4937      	ldr	r1, [pc, #220]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053b6:	d106      	bne.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053b8:	4b32      	ldr	r3, [pc, #200]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	4a31      	ldr	r2, [pc, #196]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053c2:	60d3      	str	r3, [r2, #12]
 80053c4:	e011      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053ce:	d10c      	bne.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	3304      	adds	r3, #4
 80053d4:	2101      	movs	r1, #1
 80053d6:	4618      	mov	r0, r3
 80053d8:	f000 f8c8 	bl	800556c <RCCEx_PLLSAI1_Config>
 80053dc:	4603      	mov	r3, r0
 80053de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80053e0:	7cfb      	ldrb	r3, [r7, #19]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d001      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80053e6:	7cfb      	ldrb	r3, [r7, #19]
 80053e8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d028      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80053f6:	4b23      	ldr	r3, [pc, #140]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005404:	491f      	ldr	r1, [pc, #124]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005406:	4313      	orrs	r3, r2
 8005408:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005410:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005414:	d106      	bne.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005416:	4b1b      	ldr	r3, [pc, #108]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	4a1a      	ldr	r2, [pc, #104]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800541c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005420:	60d3      	str	r3, [r2, #12]
 8005422:	e011      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005428:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800542c:	d10c      	bne.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	3304      	adds	r3, #4
 8005432:	2101      	movs	r1, #1
 8005434:	4618      	mov	r0, r3
 8005436:	f000 f899 	bl	800556c <RCCEx_PLLSAI1_Config>
 800543a:	4603      	mov	r3, r0
 800543c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800543e:	7cfb      	ldrb	r3, [r7, #19]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d001      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005444:	7cfb      	ldrb	r3, [r7, #19]
 8005446:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d02b      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005454:	4b0b      	ldr	r3, [pc, #44]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800545a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005462:	4908      	ldr	r1, [pc, #32]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005464:	4313      	orrs	r3, r2
 8005466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800546e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005472:	d109      	bne.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005474:	4b03      	ldr	r3, [pc, #12]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	4a02      	ldr	r2, [pc, #8]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800547a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800547e:	60d3      	str	r3, [r2, #12]
 8005480:	e014      	b.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005482:	bf00      	nop
 8005484:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800548c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005490:	d10c      	bne.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	3304      	adds	r3, #4
 8005496:	2101      	movs	r1, #1
 8005498:	4618      	mov	r0, r3
 800549a:	f000 f867 	bl	800556c <RCCEx_PLLSAI1_Config>
 800549e:	4603      	mov	r3, r0
 80054a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054a2:	7cfb      	ldrb	r3, [r7, #19]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d001      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80054a8:	7cfb      	ldrb	r3, [r7, #19]
 80054aa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d02f      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054b8:	4b2b      	ldr	r3, [pc, #172]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054c6:	4928      	ldr	r1, [pc, #160]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054d6:	d10d      	bne.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	3304      	adds	r3, #4
 80054dc:	2102      	movs	r1, #2
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 f844 	bl	800556c <RCCEx_PLLSAI1_Config>
 80054e4:	4603      	mov	r3, r0
 80054e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054e8:	7cfb      	ldrb	r3, [r7, #19]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d014      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80054ee:	7cfb      	ldrb	r3, [r7, #19]
 80054f0:	74bb      	strb	r3, [r7, #18]
 80054f2:	e011      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054fc:	d10c      	bne.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	3320      	adds	r3, #32
 8005502:	2102      	movs	r1, #2
 8005504:	4618      	mov	r0, r3
 8005506:	f000 f925 	bl	8005754 <RCCEx_PLLSAI2_Config>
 800550a:	4603      	mov	r3, r0
 800550c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800550e:	7cfb      	ldrb	r3, [r7, #19]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d001      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005514:	7cfb      	ldrb	r3, [r7, #19]
 8005516:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00a      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005524:	4b10      	ldr	r3, [pc, #64]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800552a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005532:	490d      	ldr	r1, [pc, #52]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005534:	4313      	orrs	r3, r2
 8005536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00b      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005546:	4b08      	ldr	r3, [pc, #32]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800554c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005556:	4904      	ldr	r1, [pc, #16]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005558:	4313      	orrs	r3, r2
 800555a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800555e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005560:	4618      	mov	r0, r3
 8005562:	3718      	adds	r7, #24
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	40021000 	.word	0x40021000

0800556c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005576:	2300      	movs	r3, #0
 8005578:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800557a:	4b75      	ldr	r3, [pc, #468]	; (8005750 <RCCEx_PLLSAI1_Config+0x1e4>)
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	f003 0303 	and.w	r3, r3, #3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d018      	beq.n	80055b8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005586:	4b72      	ldr	r3, [pc, #456]	; (8005750 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	f003 0203 	and.w	r2, r3, #3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	429a      	cmp	r2, r3
 8005594:	d10d      	bne.n	80055b2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
       ||
 800559a:	2b00      	cmp	r3, #0
 800559c:	d009      	beq.n	80055b2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800559e:	4b6c      	ldr	r3, [pc, #432]	; (8005750 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	091b      	lsrs	r3, r3, #4
 80055a4:	f003 0307 	and.w	r3, r3, #7
 80055a8:	1c5a      	adds	r2, r3, #1
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
       ||
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d047      	beq.n	8005642 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	73fb      	strb	r3, [r7, #15]
 80055b6:	e044      	b.n	8005642 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2b03      	cmp	r3, #3
 80055be:	d018      	beq.n	80055f2 <RCCEx_PLLSAI1_Config+0x86>
 80055c0:	2b03      	cmp	r3, #3
 80055c2:	d825      	bhi.n	8005610 <RCCEx_PLLSAI1_Config+0xa4>
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d002      	beq.n	80055ce <RCCEx_PLLSAI1_Config+0x62>
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d009      	beq.n	80055e0 <RCCEx_PLLSAI1_Config+0x74>
 80055cc:	e020      	b.n	8005610 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80055ce:	4b60      	ldr	r3, [pc, #384]	; (8005750 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0302 	and.w	r3, r3, #2
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d11d      	bne.n	8005616 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055de:	e01a      	b.n	8005616 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80055e0:	4b5b      	ldr	r3, [pc, #364]	; (8005750 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d116      	bne.n	800561a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055f0:	e013      	b.n	800561a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80055f2:	4b57      	ldr	r3, [pc, #348]	; (8005750 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10f      	bne.n	800561e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80055fe:	4b54      	ldr	r3, [pc, #336]	; (8005750 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d109      	bne.n	800561e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800560e:	e006      	b.n	800561e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	73fb      	strb	r3, [r7, #15]
      break;
 8005614:	e004      	b.n	8005620 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005616:	bf00      	nop
 8005618:	e002      	b.n	8005620 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800561a:	bf00      	nop
 800561c:	e000      	b.n	8005620 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800561e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005620:	7bfb      	ldrb	r3, [r7, #15]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d10d      	bne.n	8005642 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005626:	4b4a      	ldr	r3, [pc, #296]	; (8005750 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6819      	ldr	r1, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	3b01      	subs	r3, #1
 8005638:	011b      	lsls	r3, r3, #4
 800563a:	430b      	orrs	r3, r1
 800563c:	4944      	ldr	r1, [pc, #272]	; (8005750 <RCCEx_PLLSAI1_Config+0x1e4>)
 800563e:	4313      	orrs	r3, r2
 8005640:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005642:	7bfb      	ldrb	r3, [r7, #15]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d17d      	bne.n	8005744 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005648:	4b41      	ldr	r3, [pc, #260]	; (8005750 <RCCEx_PLLSAI1_Config+0x1e4>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a40      	ldr	r2, [pc, #256]	; (8005750 <RCCEx_PLLSAI1_Config+0x1e4>)
 800564e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005652:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005654:	f7fc fce6 	bl	8002024 <HAL_GetTick>
 8005658:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800565a:	e009      	b.n	8005670 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800565c:	f7fc fce2 	bl	8002024 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b02      	cmp	r3, #2
 8005668:	d902      	bls.n	8005670 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	73fb      	strb	r3, [r7, #15]
        break;
 800566e:	e005      	b.n	800567c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005670:	4b37      	ldr	r3, [pc, #220]	; (8005750 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d1ef      	bne.n	800565c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800567c:	7bfb      	ldrb	r3, [r7, #15]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d160      	bne.n	8005744 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d111      	bne.n	80056ac <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005688:	4b31      	ldr	r3, [pc, #196]	; (8005750 <RCCEx_PLLSAI1_Config+0x1e4>)
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	6892      	ldr	r2, [r2, #8]
 8005698:	0211      	lsls	r1, r2, #8
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	68d2      	ldr	r2, [r2, #12]
 800569e:	0912      	lsrs	r2, r2, #4
 80056a0:	0452      	lsls	r2, r2, #17
 80056a2:	430a      	orrs	r2, r1
 80056a4:	492a      	ldr	r1, [pc, #168]	; (8005750 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	610b      	str	r3, [r1, #16]
 80056aa:	e027      	b.n	80056fc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d112      	bne.n	80056d8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056b2:	4b27      	ldr	r3, [pc, #156]	; (8005750 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80056ba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	6892      	ldr	r2, [r2, #8]
 80056c2:	0211      	lsls	r1, r2, #8
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	6912      	ldr	r2, [r2, #16]
 80056c8:	0852      	lsrs	r2, r2, #1
 80056ca:	3a01      	subs	r2, #1
 80056cc:	0552      	lsls	r2, r2, #21
 80056ce:	430a      	orrs	r2, r1
 80056d0:	491f      	ldr	r1, [pc, #124]	; (8005750 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	610b      	str	r3, [r1, #16]
 80056d6:	e011      	b.n	80056fc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056d8:	4b1d      	ldr	r3, [pc, #116]	; (8005750 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80056e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	6892      	ldr	r2, [r2, #8]
 80056e8:	0211      	lsls	r1, r2, #8
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	6952      	ldr	r2, [r2, #20]
 80056ee:	0852      	lsrs	r2, r2, #1
 80056f0:	3a01      	subs	r2, #1
 80056f2:	0652      	lsls	r2, r2, #25
 80056f4:	430a      	orrs	r2, r1
 80056f6:	4916      	ldr	r1, [pc, #88]	; (8005750 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056f8:	4313      	orrs	r3, r2
 80056fa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80056fc:	4b14      	ldr	r3, [pc, #80]	; (8005750 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a13      	ldr	r2, [pc, #76]	; (8005750 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005702:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005706:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005708:	f7fc fc8c 	bl	8002024 <HAL_GetTick>
 800570c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800570e:	e009      	b.n	8005724 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005710:	f7fc fc88 	bl	8002024 <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	2b02      	cmp	r3, #2
 800571c:	d902      	bls.n	8005724 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	73fb      	strb	r3, [r7, #15]
          break;
 8005722:	e005      	b.n	8005730 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005724:	4b0a      	ldr	r3, [pc, #40]	; (8005750 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d0ef      	beq.n	8005710 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005730:	7bfb      	ldrb	r3, [r7, #15]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d106      	bne.n	8005744 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005736:	4b06      	ldr	r3, [pc, #24]	; (8005750 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005738:	691a      	ldr	r2, [r3, #16]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	4904      	ldr	r1, [pc, #16]	; (8005750 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005740:	4313      	orrs	r3, r2
 8005742:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005744:	7bfb      	ldrb	r3, [r7, #15]
}
 8005746:	4618      	mov	r0, r3
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	40021000 	.word	0x40021000

08005754 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800575e:	2300      	movs	r3, #0
 8005760:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005762:	4b6a      	ldr	r3, [pc, #424]	; (800590c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	f003 0303 	and.w	r3, r3, #3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d018      	beq.n	80057a0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800576e:	4b67      	ldr	r3, [pc, #412]	; (800590c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	f003 0203 	and.w	r2, r3, #3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	429a      	cmp	r2, r3
 800577c:	d10d      	bne.n	800579a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
       ||
 8005782:	2b00      	cmp	r3, #0
 8005784:	d009      	beq.n	800579a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005786:	4b61      	ldr	r3, [pc, #388]	; (800590c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	091b      	lsrs	r3, r3, #4
 800578c:	f003 0307 	and.w	r3, r3, #7
 8005790:	1c5a      	adds	r2, r3, #1
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
       ||
 8005796:	429a      	cmp	r2, r3
 8005798:	d047      	beq.n	800582a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	73fb      	strb	r3, [r7, #15]
 800579e:	e044      	b.n	800582a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2b03      	cmp	r3, #3
 80057a6:	d018      	beq.n	80057da <RCCEx_PLLSAI2_Config+0x86>
 80057a8:	2b03      	cmp	r3, #3
 80057aa:	d825      	bhi.n	80057f8 <RCCEx_PLLSAI2_Config+0xa4>
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d002      	beq.n	80057b6 <RCCEx_PLLSAI2_Config+0x62>
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d009      	beq.n	80057c8 <RCCEx_PLLSAI2_Config+0x74>
 80057b4:	e020      	b.n	80057f8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80057b6:	4b55      	ldr	r3, [pc, #340]	; (800590c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0302 	and.w	r3, r3, #2
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d11d      	bne.n	80057fe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057c6:	e01a      	b.n	80057fe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80057c8:	4b50      	ldr	r3, [pc, #320]	; (800590c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d116      	bne.n	8005802 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057d8:	e013      	b.n	8005802 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80057da:	4b4c      	ldr	r3, [pc, #304]	; (800590c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d10f      	bne.n	8005806 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80057e6:	4b49      	ldr	r3, [pc, #292]	; (800590c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d109      	bne.n	8005806 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80057f6:	e006      	b.n	8005806 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	73fb      	strb	r3, [r7, #15]
      break;
 80057fc:	e004      	b.n	8005808 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80057fe:	bf00      	nop
 8005800:	e002      	b.n	8005808 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005802:	bf00      	nop
 8005804:	e000      	b.n	8005808 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005806:	bf00      	nop
    }

    if(status == HAL_OK)
 8005808:	7bfb      	ldrb	r3, [r7, #15]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d10d      	bne.n	800582a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800580e:	4b3f      	ldr	r3, [pc, #252]	; (800590c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6819      	ldr	r1, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	3b01      	subs	r3, #1
 8005820:	011b      	lsls	r3, r3, #4
 8005822:	430b      	orrs	r3, r1
 8005824:	4939      	ldr	r1, [pc, #228]	; (800590c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005826:	4313      	orrs	r3, r2
 8005828:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800582a:	7bfb      	ldrb	r3, [r7, #15]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d167      	bne.n	8005900 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005830:	4b36      	ldr	r3, [pc, #216]	; (800590c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a35      	ldr	r2, [pc, #212]	; (800590c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005836:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800583a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800583c:	f7fc fbf2 	bl	8002024 <HAL_GetTick>
 8005840:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005842:	e009      	b.n	8005858 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005844:	f7fc fbee 	bl	8002024 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	2b02      	cmp	r3, #2
 8005850:	d902      	bls.n	8005858 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	73fb      	strb	r3, [r7, #15]
        break;
 8005856:	e005      	b.n	8005864 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005858:	4b2c      	ldr	r3, [pc, #176]	; (800590c <RCCEx_PLLSAI2_Config+0x1b8>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1ef      	bne.n	8005844 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005864:	7bfb      	ldrb	r3, [r7, #15]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d14a      	bne.n	8005900 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d111      	bne.n	8005894 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005870:	4b26      	ldr	r3, [pc, #152]	; (800590c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005872:	695b      	ldr	r3, [r3, #20]
 8005874:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	6892      	ldr	r2, [r2, #8]
 8005880:	0211      	lsls	r1, r2, #8
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	68d2      	ldr	r2, [r2, #12]
 8005886:	0912      	lsrs	r2, r2, #4
 8005888:	0452      	lsls	r2, r2, #17
 800588a:	430a      	orrs	r2, r1
 800588c:	491f      	ldr	r1, [pc, #124]	; (800590c <RCCEx_PLLSAI2_Config+0x1b8>)
 800588e:	4313      	orrs	r3, r2
 8005890:	614b      	str	r3, [r1, #20]
 8005892:	e011      	b.n	80058b8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005894:	4b1d      	ldr	r3, [pc, #116]	; (800590c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005896:	695b      	ldr	r3, [r3, #20]
 8005898:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800589c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	6892      	ldr	r2, [r2, #8]
 80058a4:	0211      	lsls	r1, r2, #8
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	6912      	ldr	r2, [r2, #16]
 80058aa:	0852      	lsrs	r2, r2, #1
 80058ac:	3a01      	subs	r2, #1
 80058ae:	0652      	lsls	r2, r2, #25
 80058b0:	430a      	orrs	r2, r1
 80058b2:	4916      	ldr	r1, [pc, #88]	; (800590c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80058b8:	4b14      	ldr	r3, [pc, #80]	; (800590c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a13      	ldr	r2, [pc, #76]	; (800590c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058c4:	f7fc fbae 	bl	8002024 <HAL_GetTick>
 80058c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80058ca:	e009      	b.n	80058e0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80058cc:	f7fc fbaa 	bl	8002024 <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d902      	bls.n	80058e0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	73fb      	strb	r3, [r7, #15]
          break;
 80058de:	e005      	b.n	80058ec <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80058e0:	4b0a      	ldr	r3, [pc, #40]	; (800590c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d0ef      	beq.n	80058cc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80058ec:	7bfb      	ldrb	r3, [r7, #15]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d106      	bne.n	8005900 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80058f2:	4b06      	ldr	r3, [pc, #24]	; (800590c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058f4:	695a      	ldr	r2, [r3, #20]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	4904      	ldr	r1, [pc, #16]	; (800590c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005900:	7bfb      	ldrb	r3, [r7, #15]
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	40021000 	.word	0x40021000

08005910 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e049      	b.n	80059b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005928:	b2db      	uxtb	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d106      	bne.n	800593c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f7fc f82e 	bl	8001998 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2202      	movs	r2, #2
 8005940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	3304      	adds	r3, #4
 800594c:	4619      	mov	r1, r3
 800594e:	4610      	mov	r0, r2
 8005950:	f000 fccc 	bl	80062ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3708      	adds	r7, #8
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}

080059be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80059be:	b580      	push	{r7, lr}
 80059c0:	b082      	sub	sp, #8
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d101      	bne.n	80059d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e049      	b.n	8005a64 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d106      	bne.n	80059ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 f841 	bl	8005a6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2202      	movs	r2, #2
 80059ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	3304      	adds	r3, #4
 80059fa:	4619      	mov	r1, r3
 80059fc:	4610      	mov	r0, r2
 80059fe:	f000 fc75 	bl	80062ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2201      	movs	r2, #1
 8005a06:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2201      	movs	r2, #1
 8005a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2201      	movs	r2, #1
 8005a46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3708      	adds	r7, #8
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d109      	bne.n	8005aa4 <HAL_TIM_PWM_Start+0x24>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	bf14      	ite	ne
 8005a9c:	2301      	movne	r3, #1
 8005a9e:	2300      	moveq	r3, #0
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	e03c      	b.n	8005b1e <HAL_TIM_PWM_Start+0x9e>
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	2b04      	cmp	r3, #4
 8005aa8:	d109      	bne.n	8005abe <HAL_TIM_PWM_Start+0x3e>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	bf14      	ite	ne
 8005ab6:	2301      	movne	r3, #1
 8005ab8:	2300      	moveq	r3, #0
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	e02f      	b.n	8005b1e <HAL_TIM_PWM_Start+0x9e>
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	2b08      	cmp	r3, #8
 8005ac2:	d109      	bne.n	8005ad8 <HAL_TIM_PWM_Start+0x58>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	bf14      	ite	ne
 8005ad0:	2301      	movne	r3, #1
 8005ad2:	2300      	moveq	r3, #0
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	e022      	b.n	8005b1e <HAL_TIM_PWM_Start+0x9e>
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	2b0c      	cmp	r3, #12
 8005adc:	d109      	bne.n	8005af2 <HAL_TIM_PWM_Start+0x72>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	bf14      	ite	ne
 8005aea:	2301      	movne	r3, #1
 8005aec:	2300      	moveq	r3, #0
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	e015      	b.n	8005b1e <HAL_TIM_PWM_Start+0x9e>
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	2b10      	cmp	r3, #16
 8005af6:	d109      	bne.n	8005b0c <HAL_TIM_PWM_Start+0x8c>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	bf14      	ite	ne
 8005b04:	2301      	movne	r3, #1
 8005b06:	2300      	moveq	r3, #0
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	e008      	b.n	8005b1e <HAL_TIM_PWM_Start+0x9e>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	bf14      	ite	ne
 8005b18:	2301      	movne	r3, #1
 8005b1a:	2300      	moveq	r3, #0
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d001      	beq.n	8005b26 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e09c      	b.n	8005c60 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d104      	bne.n	8005b36 <HAL_TIM_PWM_Start+0xb6>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2202      	movs	r2, #2
 8005b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b34:	e023      	b.n	8005b7e <HAL_TIM_PWM_Start+0xfe>
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	2b04      	cmp	r3, #4
 8005b3a:	d104      	bne.n	8005b46 <HAL_TIM_PWM_Start+0xc6>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2202      	movs	r2, #2
 8005b40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b44:	e01b      	b.n	8005b7e <HAL_TIM_PWM_Start+0xfe>
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	2b08      	cmp	r3, #8
 8005b4a:	d104      	bne.n	8005b56 <HAL_TIM_PWM_Start+0xd6>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2202      	movs	r2, #2
 8005b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b54:	e013      	b.n	8005b7e <HAL_TIM_PWM_Start+0xfe>
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	2b0c      	cmp	r3, #12
 8005b5a:	d104      	bne.n	8005b66 <HAL_TIM_PWM_Start+0xe6>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2202      	movs	r2, #2
 8005b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b64:	e00b      	b.n	8005b7e <HAL_TIM_PWM_Start+0xfe>
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	2b10      	cmp	r3, #16
 8005b6a:	d104      	bne.n	8005b76 <HAL_TIM_PWM_Start+0xf6>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2202      	movs	r2, #2
 8005b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b74:	e003      	b.n	8005b7e <HAL_TIM_PWM_Start+0xfe>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2202      	movs	r2, #2
 8005b7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2201      	movs	r2, #1
 8005b84:	6839      	ldr	r1, [r7, #0]
 8005b86:	4618      	mov	r0, r3
 8005b88:	f000 ffba 	bl	8006b00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a35      	ldr	r2, [pc, #212]	; (8005c68 <HAL_TIM_PWM_Start+0x1e8>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d013      	beq.n	8005bbe <HAL_TIM_PWM_Start+0x13e>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a34      	ldr	r2, [pc, #208]	; (8005c6c <HAL_TIM_PWM_Start+0x1ec>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d00e      	beq.n	8005bbe <HAL_TIM_PWM_Start+0x13e>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a32      	ldr	r2, [pc, #200]	; (8005c70 <HAL_TIM_PWM_Start+0x1f0>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d009      	beq.n	8005bbe <HAL_TIM_PWM_Start+0x13e>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a31      	ldr	r2, [pc, #196]	; (8005c74 <HAL_TIM_PWM_Start+0x1f4>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d004      	beq.n	8005bbe <HAL_TIM_PWM_Start+0x13e>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a2f      	ldr	r2, [pc, #188]	; (8005c78 <HAL_TIM_PWM_Start+0x1f8>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d101      	bne.n	8005bc2 <HAL_TIM_PWM_Start+0x142>
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e000      	b.n	8005bc4 <HAL_TIM_PWM_Start+0x144>
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d007      	beq.n	8005bd8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005bd6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a22      	ldr	r2, [pc, #136]	; (8005c68 <HAL_TIM_PWM_Start+0x1e8>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d01d      	beq.n	8005c1e <HAL_TIM_PWM_Start+0x19e>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bea:	d018      	beq.n	8005c1e <HAL_TIM_PWM_Start+0x19e>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a22      	ldr	r2, [pc, #136]	; (8005c7c <HAL_TIM_PWM_Start+0x1fc>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d013      	beq.n	8005c1e <HAL_TIM_PWM_Start+0x19e>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a21      	ldr	r2, [pc, #132]	; (8005c80 <HAL_TIM_PWM_Start+0x200>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d00e      	beq.n	8005c1e <HAL_TIM_PWM_Start+0x19e>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a1f      	ldr	r2, [pc, #124]	; (8005c84 <HAL_TIM_PWM_Start+0x204>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d009      	beq.n	8005c1e <HAL_TIM_PWM_Start+0x19e>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a17      	ldr	r2, [pc, #92]	; (8005c6c <HAL_TIM_PWM_Start+0x1ec>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d004      	beq.n	8005c1e <HAL_TIM_PWM_Start+0x19e>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a15      	ldr	r2, [pc, #84]	; (8005c70 <HAL_TIM_PWM_Start+0x1f0>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d115      	bne.n	8005c4a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	689a      	ldr	r2, [r3, #8]
 8005c24:	4b18      	ldr	r3, [pc, #96]	; (8005c88 <HAL_TIM_PWM_Start+0x208>)
 8005c26:	4013      	ands	r3, r2
 8005c28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2b06      	cmp	r3, #6
 8005c2e:	d015      	beq.n	8005c5c <HAL_TIM_PWM_Start+0x1dc>
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c36:	d011      	beq.n	8005c5c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f042 0201 	orr.w	r2, r2, #1
 8005c46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c48:	e008      	b.n	8005c5c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f042 0201 	orr.w	r2, r2, #1
 8005c58:	601a      	str	r2, [r3, #0]
 8005c5a:	e000      	b.n	8005c5e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c5c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3710      	adds	r7, #16
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	40012c00 	.word	0x40012c00
 8005c6c:	40013400 	.word	0x40013400
 8005c70:	40014000 	.word	0x40014000
 8005c74:	40014400 	.word	0x40014400
 8005c78:	40014800 	.word	0x40014800
 8005c7c:	40000400 	.word	0x40000400
 8005c80:	40000800 	.word	0x40000800
 8005c84:	40000c00 	.word	0x40000c00
 8005c88:	00010007 	.word	0x00010007

08005c8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	f003 0302 	and.w	r3, r3, #2
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d122      	bne.n	8005ce8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	f003 0302 	and.w	r3, r3, #2
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d11b      	bne.n	8005ce8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f06f 0202 	mvn.w	r2, #2
 8005cb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	f003 0303 	and.w	r3, r3, #3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d003      	beq.n	8005cd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 faed 	bl	80062ae <HAL_TIM_IC_CaptureCallback>
 8005cd4:	e005      	b.n	8005ce2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 fadf 	bl	800629a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 faf0 	bl	80062c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	f003 0304 	and.w	r3, r3, #4
 8005cf2:	2b04      	cmp	r3, #4
 8005cf4:	d122      	bne.n	8005d3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	f003 0304 	and.w	r3, r3, #4
 8005d00:	2b04      	cmp	r3, #4
 8005d02:	d11b      	bne.n	8005d3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f06f 0204 	mvn.w	r2, #4
 8005d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2202      	movs	r2, #2
 8005d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d003      	beq.n	8005d2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 fac3 	bl	80062ae <HAL_TIM_IC_CaptureCallback>
 8005d28:	e005      	b.n	8005d36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 fab5 	bl	800629a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 fac6 	bl	80062c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	f003 0308 	and.w	r3, r3, #8
 8005d46:	2b08      	cmp	r3, #8
 8005d48:	d122      	bne.n	8005d90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	f003 0308 	and.w	r3, r3, #8
 8005d54:	2b08      	cmp	r3, #8
 8005d56:	d11b      	bne.n	8005d90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f06f 0208 	mvn.w	r2, #8
 8005d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2204      	movs	r2, #4
 8005d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	69db      	ldr	r3, [r3, #28]
 8005d6e:	f003 0303 	and.w	r3, r3, #3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d003      	beq.n	8005d7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 fa99 	bl	80062ae <HAL_TIM_IC_CaptureCallback>
 8005d7c:	e005      	b.n	8005d8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 fa8b 	bl	800629a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 fa9c 	bl	80062c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	f003 0310 	and.w	r3, r3, #16
 8005d9a:	2b10      	cmp	r3, #16
 8005d9c:	d122      	bne.n	8005de4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	f003 0310 	and.w	r3, r3, #16
 8005da8:	2b10      	cmp	r3, #16
 8005daa:	d11b      	bne.n	8005de4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f06f 0210 	mvn.w	r2, #16
 8005db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2208      	movs	r2, #8
 8005dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	69db      	ldr	r3, [r3, #28]
 8005dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d003      	beq.n	8005dd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 fa6f 	bl	80062ae <HAL_TIM_IC_CaptureCallback>
 8005dd0:	e005      	b.n	8005dde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 fa61 	bl	800629a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 fa72 	bl	80062c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	f003 0301 	and.w	r3, r3, #1
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d10e      	bne.n	8005e10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	f003 0301 	and.w	r3, r3, #1
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d107      	bne.n	8005e10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f06f 0201 	mvn.w	r2, #1
 8005e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 fa3b 	bl	8006286 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e1a:	2b80      	cmp	r3, #128	; 0x80
 8005e1c:	d10e      	bne.n	8005e3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e28:	2b80      	cmp	r3, #128	; 0x80
 8005e2a:	d107      	bne.n	8005e3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 ff1a 	bl	8006c70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e4a:	d10e      	bne.n	8005e6a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e56:	2b80      	cmp	r3, #128	; 0x80
 8005e58:	d107      	bne.n	8005e6a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005e62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 ff0d 	bl	8006c84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e74:	2b40      	cmp	r3, #64	; 0x40
 8005e76:	d10e      	bne.n	8005e96 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e82:	2b40      	cmp	r3, #64	; 0x40
 8005e84:	d107      	bne.n	8005e96 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 fa20 	bl	80062d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	f003 0320 	and.w	r3, r3, #32
 8005ea0:	2b20      	cmp	r3, #32
 8005ea2:	d10e      	bne.n	8005ec2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	f003 0320 	and.w	r3, r3, #32
 8005eae:	2b20      	cmp	r3, #32
 8005eb0:	d107      	bne.n	8005ec2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f06f 0220 	mvn.w	r2, #32
 8005eba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 fecd 	bl	8006c5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ec2:	bf00      	nop
 8005ec4:	3708      	adds	r7, #8
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
	...

08005ecc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b086      	sub	sp, #24
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d101      	bne.n	8005eea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005ee6:	2302      	movs	r3, #2
 8005ee8:	e0ff      	b.n	80060ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2201      	movs	r2, #1
 8005eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2b14      	cmp	r3, #20
 8005ef6:	f200 80f0 	bhi.w	80060da <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005efa:	a201      	add	r2, pc, #4	; (adr r2, 8005f00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f00:	08005f55 	.word	0x08005f55
 8005f04:	080060db 	.word	0x080060db
 8005f08:	080060db 	.word	0x080060db
 8005f0c:	080060db 	.word	0x080060db
 8005f10:	08005f95 	.word	0x08005f95
 8005f14:	080060db 	.word	0x080060db
 8005f18:	080060db 	.word	0x080060db
 8005f1c:	080060db 	.word	0x080060db
 8005f20:	08005fd7 	.word	0x08005fd7
 8005f24:	080060db 	.word	0x080060db
 8005f28:	080060db 	.word	0x080060db
 8005f2c:	080060db 	.word	0x080060db
 8005f30:	08006017 	.word	0x08006017
 8005f34:	080060db 	.word	0x080060db
 8005f38:	080060db 	.word	0x080060db
 8005f3c:	080060db 	.word	0x080060db
 8005f40:	08006059 	.word	0x08006059
 8005f44:	080060db 	.word	0x080060db
 8005f48:	080060db 	.word	0x080060db
 8005f4c:	080060db 	.word	0x080060db
 8005f50:	08006099 	.word	0x08006099
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68b9      	ldr	r1, [r7, #8]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f000 fa60 	bl	8006420 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	699a      	ldr	r2, [r3, #24]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f042 0208 	orr.w	r2, r2, #8
 8005f6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	699a      	ldr	r2, [r3, #24]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f022 0204 	bic.w	r2, r2, #4
 8005f7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	6999      	ldr	r1, [r3, #24]
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	691a      	ldr	r2, [r3, #16]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	619a      	str	r2, [r3, #24]
      break;
 8005f92:	e0a5      	b.n	80060e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68b9      	ldr	r1, [r7, #8]
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f000 fad0 	bl	8006540 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	699a      	ldr	r2, [r3, #24]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	699a      	ldr	r2, [r3, #24]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	6999      	ldr	r1, [r3, #24]
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	021a      	lsls	r2, r3, #8
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	430a      	orrs	r2, r1
 8005fd2:	619a      	str	r2, [r3, #24]
      break;
 8005fd4:	e084      	b.n	80060e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68b9      	ldr	r1, [r7, #8]
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f000 fb39 	bl	8006654 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	69da      	ldr	r2, [r3, #28]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f042 0208 	orr.w	r2, r2, #8
 8005ff0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	69da      	ldr	r2, [r3, #28]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f022 0204 	bic.w	r2, r2, #4
 8006000:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	69d9      	ldr	r1, [r3, #28]
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	691a      	ldr	r2, [r3, #16]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	430a      	orrs	r2, r1
 8006012:	61da      	str	r2, [r3, #28]
      break;
 8006014:	e064      	b.n	80060e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68b9      	ldr	r1, [r7, #8]
 800601c:	4618      	mov	r0, r3
 800601e:	f000 fba1 	bl	8006764 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	69da      	ldr	r2, [r3, #28]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006030:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	69da      	ldr	r2, [r3, #28]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006040:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	69d9      	ldr	r1, [r3, #28]
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	021a      	lsls	r2, r3, #8
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	430a      	orrs	r2, r1
 8006054:	61da      	str	r2, [r3, #28]
      break;
 8006056:	e043      	b.n	80060e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68b9      	ldr	r1, [r7, #8]
 800605e:	4618      	mov	r0, r3
 8006060:	f000 fbea 	bl	8006838 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f042 0208 	orr.w	r2, r2, #8
 8006072:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f022 0204 	bic.w	r2, r2, #4
 8006082:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	691a      	ldr	r2, [r3, #16]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	430a      	orrs	r2, r1
 8006094:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006096:	e023      	b.n	80060e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68b9      	ldr	r1, [r7, #8]
 800609e:	4618      	mov	r0, r3
 80060a0:	f000 fc2e 	bl	8006900 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	021a      	lsls	r2, r3, #8
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	430a      	orrs	r2, r1
 80060d6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80060d8:	e002      	b.n	80060e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	75fb      	strb	r3, [r7, #23]
      break;
 80060de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3718      	adds	r7, #24
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop

080060f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060fe:	2300      	movs	r3, #0
 8006100:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006108:	2b01      	cmp	r3, #1
 800610a:	d101      	bne.n	8006110 <HAL_TIM_ConfigClockSource+0x1c>
 800610c:	2302      	movs	r3, #2
 800610e:	e0b6      	b.n	800627e <HAL_TIM_ConfigClockSource+0x18a>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2202      	movs	r2, #2
 800611c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800612e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006132:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800613a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68ba      	ldr	r2, [r7, #8]
 8006142:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800614c:	d03e      	beq.n	80061cc <HAL_TIM_ConfigClockSource+0xd8>
 800614e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006152:	f200 8087 	bhi.w	8006264 <HAL_TIM_ConfigClockSource+0x170>
 8006156:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800615a:	f000 8086 	beq.w	800626a <HAL_TIM_ConfigClockSource+0x176>
 800615e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006162:	d87f      	bhi.n	8006264 <HAL_TIM_ConfigClockSource+0x170>
 8006164:	2b70      	cmp	r3, #112	; 0x70
 8006166:	d01a      	beq.n	800619e <HAL_TIM_ConfigClockSource+0xaa>
 8006168:	2b70      	cmp	r3, #112	; 0x70
 800616a:	d87b      	bhi.n	8006264 <HAL_TIM_ConfigClockSource+0x170>
 800616c:	2b60      	cmp	r3, #96	; 0x60
 800616e:	d050      	beq.n	8006212 <HAL_TIM_ConfigClockSource+0x11e>
 8006170:	2b60      	cmp	r3, #96	; 0x60
 8006172:	d877      	bhi.n	8006264 <HAL_TIM_ConfigClockSource+0x170>
 8006174:	2b50      	cmp	r3, #80	; 0x50
 8006176:	d03c      	beq.n	80061f2 <HAL_TIM_ConfigClockSource+0xfe>
 8006178:	2b50      	cmp	r3, #80	; 0x50
 800617a:	d873      	bhi.n	8006264 <HAL_TIM_ConfigClockSource+0x170>
 800617c:	2b40      	cmp	r3, #64	; 0x40
 800617e:	d058      	beq.n	8006232 <HAL_TIM_ConfigClockSource+0x13e>
 8006180:	2b40      	cmp	r3, #64	; 0x40
 8006182:	d86f      	bhi.n	8006264 <HAL_TIM_ConfigClockSource+0x170>
 8006184:	2b30      	cmp	r3, #48	; 0x30
 8006186:	d064      	beq.n	8006252 <HAL_TIM_ConfigClockSource+0x15e>
 8006188:	2b30      	cmp	r3, #48	; 0x30
 800618a:	d86b      	bhi.n	8006264 <HAL_TIM_ConfigClockSource+0x170>
 800618c:	2b20      	cmp	r3, #32
 800618e:	d060      	beq.n	8006252 <HAL_TIM_ConfigClockSource+0x15e>
 8006190:	2b20      	cmp	r3, #32
 8006192:	d867      	bhi.n	8006264 <HAL_TIM_ConfigClockSource+0x170>
 8006194:	2b00      	cmp	r3, #0
 8006196:	d05c      	beq.n	8006252 <HAL_TIM_ConfigClockSource+0x15e>
 8006198:	2b10      	cmp	r3, #16
 800619a:	d05a      	beq.n	8006252 <HAL_TIM_ConfigClockSource+0x15e>
 800619c:	e062      	b.n	8006264 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6818      	ldr	r0, [r3, #0]
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	6899      	ldr	r1, [r3, #8]
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	685a      	ldr	r2, [r3, #4]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	f000 fc87 	bl	8006ac0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80061c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68ba      	ldr	r2, [r7, #8]
 80061c8:	609a      	str	r2, [r3, #8]
      break;
 80061ca:	e04f      	b.n	800626c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6818      	ldr	r0, [r3, #0]
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	6899      	ldr	r1, [r3, #8]
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	685a      	ldr	r2, [r3, #4]
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	f000 fc70 	bl	8006ac0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	689a      	ldr	r2, [r3, #8]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061ee:	609a      	str	r2, [r3, #8]
      break;
 80061f0:	e03c      	b.n	800626c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6818      	ldr	r0, [r3, #0]
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	6859      	ldr	r1, [r3, #4]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	461a      	mov	r2, r3
 8006200:	f000 fbe4 	bl	80069cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2150      	movs	r1, #80	; 0x50
 800620a:	4618      	mov	r0, r3
 800620c:	f000 fc3d 	bl	8006a8a <TIM_ITRx_SetConfig>
      break;
 8006210:	e02c      	b.n	800626c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6818      	ldr	r0, [r3, #0]
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	6859      	ldr	r1, [r3, #4]
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	461a      	mov	r2, r3
 8006220:	f000 fc03 	bl	8006a2a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2160      	movs	r1, #96	; 0x60
 800622a:	4618      	mov	r0, r3
 800622c:	f000 fc2d 	bl	8006a8a <TIM_ITRx_SetConfig>
      break;
 8006230:	e01c      	b.n	800626c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6818      	ldr	r0, [r3, #0]
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	6859      	ldr	r1, [r3, #4]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	461a      	mov	r2, r3
 8006240:	f000 fbc4 	bl	80069cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2140      	movs	r1, #64	; 0x40
 800624a:	4618      	mov	r0, r3
 800624c:	f000 fc1d 	bl	8006a8a <TIM_ITRx_SetConfig>
      break;
 8006250:	e00c      	b.n	800626c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4619      	mov	r1, r3
 800625c:	4610      	mov	r0, r2
 800625e:	f000 fc14 	bl	8006a8a <TIM_ITRx_SetConfig>
      break;
 8006262:	e003      	b.n	800626c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	73fb      	strb	r3, [r7, #15]
      break;
 8006268:	e000      	b.n	800626c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800626a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800627c:	7bfb      	ldrb	r3, [r7, #15]
}
 800627e:	4618      	mov	r0, r3
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}

08006286 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006286:	b480      	push	{r7}
 8006288:	b083      	sub	sp, #12
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800628e:	bf00      	nop
 8006290:	370c      	adds	r7, #12
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr

0800629a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800629a:	b480      	push	{r7}
 800629c:	b083      	sub	sp, #12
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062a2:	bf00      	nop
 80062a4:	370c      	adds	r7, #12
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr

080062ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062ae:	b480      	push	{r7}
 80062b0:	b083      	sub	sp, #12
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062b6:	bf00      	nop
 80062b8:	370c      	adds	r7, #12
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr

080062c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062c2:	b480      	push	{r7}
 80062c4:	b083      	sub	sp, #12
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062ca:	bf00      	nop
 80062cc:	370c      	adds	r7, #12
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr

080062d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062d6:	b480      	push	{r7}
 80062d8:	b083      	sub	sp, #12
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062de:	bf00      	nop
 80062e0:	370c      	adds	r7, #12
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr
	...

080062ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a40      	ldr	r2, [pc, #256]	; (8006400 <TIM_Base_SetConfig+0x114>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d013      	beq.n	800632c <TIM_Base_SetConfig+0x40>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800630a:	d00f      	beq.n	800632c <TIM_Base_SetConfig+0x40>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a3d      	ldr	r2, [pc, #244]	; (8006404 <TIM_Base_SetConfig+0x118>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d00b      	beq.n	800632c <TIM_Base_SetConfig+0x40>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a3c      	ldr	r2, [pc, #240]	; (8006408 <TIM_Base_SetConfig+0x11c>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d007      	beq.n	800632c <TIM_Base_SetConfig+0x40>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a3b      	ldr	r2, [pc, #236]	; (800640c <TIM_Base_SetConfig+0x120>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d003      	beq.n	800632c <TIM_Base_SetConfig+0x40>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a3a      	ldr	r2, [pc, #232]	; (8006410 <TIM_Base_SetConfig+0x124>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d108      	bne.n	800633e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006332:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	4313      	orrs	r3, r2
 800633c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a2f      	ldr	r2, [pc, #188]	; (8006400 <TIM_Base_SetConfig+0x114>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d01f      	beq.n	8006386 <TIM_Base_SetConfig+0x9a>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800634c:	d01b      	beq.n	8006386 <TIM_Base_SetConfig+0x9a>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a2c      	ldr	r2, [pc, #176]	; (8006404 <TIM_Base_SetConfig+0x118>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d017      	beq.n	8006386 <TIM_Base_SetConfig+0x9a>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a2b      	ldr	r2, [pc, #172]	; (8006408 <TIM_Base_SetConfig+0x11c>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d013      	beq.n	8006386 <TIM_Base_SetConfig+0x9a>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a2a      	ldr	r2, [pc, #168]	; (800640c <TIM_Base_SetConfig+0x120>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d00f      	beq.n	8006386 <TIM_Base_SetConfig+0x9a>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a29      	ldr	r2, [pc, #164]	; (8006410 <TIM_Base_SetConfig+0x124>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d00b      	beq.n	8006386 <TIM_Base_SetConfig+0x9a>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a28      	ldr	r2, [pc, #160]	; (8006414 <TIM_Base_SetConfig+0x128>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d007      	beq.n	8006386 <TIM_Base_SetConfig+0x9a>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a27      	ldr	r2, [pc, #156]	; (8006418 <TIM_Base_SetConfig+0x12c>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d003      	beq.n	8006386 <TIM_Base_SetConfig+0x9a>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a26      	ldr	r2, [pc, #152]	; (800641c <TIM_Base_SetConfig+0x130>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d108      	bne.n	8006398 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800638c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	4313      	orrs	r3, r2
 8006396:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	689a      	ldr	r2, [r3, #8]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a10      	ldr	r2, [pc, #64]	; (8006400 <TIM_Base_SetConfig+0x114>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d00f      	beq.n	80063e4 <TIM_Base_SetConfig+0xf8>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a12      	ldr	r2, [pc, #72]	; (8006410 <TIM_Base_SetConfig+0x124>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d00b      	beq.n	80063e4 <TIM_Base_SetConfig+0xf8>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a11      	ldr	r2, [pc, #68]	; (8006414 <TIM_Base_SetConfig+0x128>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d007      	beq.n	80063e4 <TIM_Base_SetConfig+0xf8>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a10      	ldr	r2, [pc, #64]	; (8006418 <TIM_Base_SetConfig+0x12c>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d003      	beq.n	80063e4 <TIM_Base_SetConfig+0xf8>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a0f      	ldr	r2, [pc, #60]	; (800641c <TIM_Base_SetConfig+0x130>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d103      	bne.n	80063ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	691a      	ldr	r2, [r3, #16]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	615a      	str	r2, [r3, #20]
}
 80063f2:	bf00      	nop
 80063f4:	3714      	adds	r7, #20
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	40012c00 	.word	0x40012c00
 8006404:	40000400 	.word	0x40000400
 8006408:	40000800 	.word	0x40000800
 800640c:	40000c00 	.word	0x40000c00
 8006410:	40013400 	.word	0x40013400
 8006414:	40014000 	.word	0x40014000
 8006418:	40014400 	.word	0x40014400
 800641c:	40014800 	.word	0x40014800

08006420 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006420:	b480      	push	{r7}
 8006422:	b087      	sub	sp, #28
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a1b      	ldr	r3, [r3, #32]
 800642e:	f023 0201 	bic.w	r2, r3, #1
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a1b      	ldr	r3, [r3, #32]
 800643a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	699b      	ldr	r3, [r3, #24]
 8006446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800644e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f023 0303 	bic.w	r3, r3, #3
 800645a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	4313      	orrs	r3, r2
 8006464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	f023 0302 	bic.w	r3, r3, #2
 800646c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	697a      	ldr	r2, [r7, #20]
 8006474:	4313      	orrs	r3, r2
 8006476:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a2c      	ldr	r2, [pc, #176]	; (800652c <TIM_OC1_SetConfig+0x10c>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d00f      	beq.n	80064a0 <TIM_OC1_SetConfig+0x80>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a2b      	ldr	r2, [pc, #172]	; (8006530 <TIM_OC1_SetConfig+0x110>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d00b      	beq.n	80064a0 <TIM_OC1_SetConfig+0x80>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a2a      	ldr	r2, [pc, #168]	; (8006534 <TIM_OC1_SetConfig+0x114>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d007      	beq.n	80064a0 <TIM_OC1_SetConfig+0x80>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a29      	ldr	r2, [pc, #164]	; (8006538 <TIM_OC1_SetConfig+0x118>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d003      	beq.n	80064a0 <TIM_OC1_SetConfig+0x80>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a28      	ldr	r2, [pc, #160]	; (800653c <TIM_OC1_SetConfig+0x11c>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d10c      	bne.n	80064ba <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	f023 0308 	bic.w	r3, r3, #8
 80064a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	697a      	ldr	r2, [r7, #20]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f023 0304 	bic.w	r3, r3, #4
 80064b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a1b      	ldr	r2, [pc, #108]	; (800652c <TIM_OC1_SetConfig+0x10c>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d00f      	beq.n	80064e2 <TIM_OC1_SetConfig+0xc2>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a1a      	ldr	r2, [pc, #104]	; (8006530 <TIM_OC1_SetConfig+0x110>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d00b      	beq.n	80064e2 <TIM_OC1_SetConfig+0xc2>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a19      	ldr	r2, [pc, #100]	; (8006534 <TIM_OC1_SetConfig+0x114>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d007      	beq.n	80064e2 <TIM_OC1_SetConfig+0xc2>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a18      	ldr	r2, [pc, #96]	; (8006538 <TIM_OC1_SetConfig+0x118>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d003      	beq.n	80064e2 <TIM_OC1_SetConfig+0xc2>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a17      	ldr	r2, [pc, #92]	; (800653c <TIM_OC1_SetConfig+0x11c>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d111      	bne.n	8006506 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	695b      	ldr	r3, [r3, #20]
 80064f6:	693a      	ldr	r2, [r7, #16]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	699b      	ldr	r3, [r3, #24]
 8006500:	693a      	ldr	r2, [r7, #16]
 8006502:	4313      	orrs	r3, r2
 8006504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	685a      	ldr	r2, [r3, #4]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	697a      	ldr	r2, [r7, #20]
 800651e:	621a      	str	r2, [r3, #32]
}
 8006520:	bf00      	nop
 8006522:	371c      	adds	r7, #28
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr
 800652c:	40012c00 	.word	0x40012c00
 8006530:	40013400 	.word	0x40013400
 8006534:	40014000 	.word	0x40014000
 8006538:	40014400 	.word	0x40014400
 800653c:	40014800 	.word	0x40014800

08006540 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006540:	b480      	push	{r7}
 8006542:	b087      	sub	sp, #28
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a1b      	ldr	r3, [r3, #32]
 800654e:	f023 0210 	bic.w	r2, r3, #16
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a1b      	ldr	r3, [r3, #32]
 800655a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	699b      	ldr	r3, [r3, #24]
 8006566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800656e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800657a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	021b      	lsls	r3, r3, #8
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	4313      	orrs	r3, r2
 8006586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	f023 0320 	bic.w	r3, r3, #32
 800658e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	011b      	lsls	r3, r3, #4
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	4313      	orrs	r3, r2
 800659a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a28      	ldr	r2, [pc, #160]	; (8006640 <TIM_OC2_SetConfig+0x100>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d003      	beq.n	80065ac <TIM_OC2_SetConfig+0x6c>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a27      	ldr	r2, [pc, #156]	; (8006644 <TIM_OC2_SetConfig+0x104>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d10d      	bne.n	80065c8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	011b      	lsls	r3, r3, #4
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	4313      	orrs	r3, r2
 80065be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a1d      	ldr	r2, [pc, #116]	; (8006640 <TIM_OC2_SetConfig+0x100>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d00f      	beq.n	80065f0 <TIM_OC2_SetConfig+0xb0>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a1c      	ldr	r2, [pc, #112]	; (8006644 <TIM_OC2_SetConfig+0x104>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d00b      	beq.n	80065f0 <TIM_OC2_SetConfig+0xb0>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a1b      	ldr	r2, [pc, #108]	; (8006648 <TIM_OC2_SetConfig+0x108>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d007      	beq.n	80065f0 <TIM_OC2_SetConfig+0xb0>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a1a      	ldr	r2, [pc, #104]	; (800664c <TIM_OC2_SetConfig+0x10c>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d003      	beq.n	80065f0 <TIM_OC2_SetConfig+0xb0>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a19      	ldr	r2, [pc, #100]	; (8006650 <TIM_OC2_SetConfig+0x110>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d113      	bne.n	8006618 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	695b      	ldr	r3, [r3, #20]
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	693a      	ldr	r2, [r7, #16]
 8006608:	4313      	orrs	r3, r2
 800660a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	693a      	ldr	r2, [r7, #16]
 8006614:	4313      	orrs	r3, r2
 8006616:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	693a      	ldr	r2, [r7, #16]
 800661c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	685a      	ldr	r2, [r3, #4]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	697a      	ldr	r2, [r7, #20]
 8006630:	621a      	str	r2, [r3, #32]
}
 8006632:	bf00      	nop
 8006634:	371c      	adds	r7, #28
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	40012c00 	.word	0x40012c00
 8006644:	40013400 	.word	0x40013400
 8006648:	40014000 	.word	0x40014000
 800664c:	40014400 	.word	0x40014400
 8006650:	40014800 	.word	0x40014800

08006654 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006654:	b480      	push	{r7}
 8006656:	b087      	sub	sp, #28
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6a1b      	ldr	r3, [r3, #32]
 800666e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	69db      	ldr	r3, [r3, #28]
 800667a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f023 0303 	bic.w	r3, r3, #3
 800668e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	4313      	orrs	r3, r2
 8006698:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	021b      	lsls	r3, r3, #8
 80066a8:	697a      	ldr	r2, [r7, #20]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a27      	ldr	r2, [pc, #156]	; (8006750 <TIM_OC3_SetConfig+0xfc>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d003      	beq.n	80066be <TIM_OC3_SetConfig+0x6a>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a26      	ldr	r2, [pc, #152]	; (8006754 <TIM_OC3_SetConfig+0x100>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d10d      	bne.n	80066da <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	021b      	lsls	r3, r3, #8
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a1c      	ldr	r2, [pc, #112]	; (8006750 <TIM_OC3_SetConfig+0xfc>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d00f      	beq.n	8006702 <TIM_OC3_SetConfig+0xae>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a1b      	ldr	r2, [pc, #108]	; (8006754 <TIM_OC3_SetConfig+0x100>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d00b      	beq.n	8006702 <TIM_OC3_SetConfig+0xae>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4a1a      	ldr	r2, [pc, #104]	; (8006758 <TIM_OC3_SetConfig+0x104>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d007      	beq.n	8006702 <TIM_OC3_SetConfig+0xae>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a19      	ldr	r2, [pc, #100]	; (800675c <TIM_OC3_SetConfig+0x108>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d003      	beq.n	8006702 <TIM_OC3_SetConfig+0xae>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a18      	ldr	r2, [pc, #96]	; (8006760 <TIM_OC3_SetConfig+0x10c>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d113      	bne.n	800672a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006708:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006710:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	695b      	ldr	r3, [r3, #20]
 8006716:	011b      	lsls	r3, r3, #4
 8006718:	693a      	ldr	r2, [r7, #16]
 800671a:	4313      	orrs	r3, r2
 800671c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	699b      	ldr	r3, [r3, #24]
 8006722:	011b      	lsls	r3, r3, #4
 8006724:	693a      	ldr	r2, [r7, #16]
 8006726:	4313      	orrs	r3, r2
 8006728:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	685a      	ldr	r2, [r3, #4]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	621a      	str	r2, [r3, #32]
}
 8006744:	bf00      	nop
 8006746:	371c      	adds	r7, #28
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr
 8006750:	40012c00 	.word	0x40012c00
 8006754:	40013400 	.word	0x40013400
 8006758:	40014000 	.word	0x40014000
 800675c:	40014400 	.word	0x40014400
 8006760:	40014800 	.word	0x40014800

08006764 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006764:	b480      	push	{r7}
 8006766:	b087      	sub	sp, #28
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a1b      	ldr	r3, [r3, #32]
 8006772:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a1b      	ldr	r3, [r3, #32]
 800677e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	69db      	ldr	r3, [r3, #28]
 800678a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800679e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	021b      	lsls	r3, r3, #8
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	031b      	lsls	r3, r3, #12
 80067ba:	693a      	ldr	r2, [r7, #16]
 80067bc:	4313      	orrs	r3, r2
 80067be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a18      	ldr	r2, [pc, #96]	; (8006824 <TIM_OC4_SetConfig+0xc0>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d00f      	beq.n	80067e8 <TIM_OC4_SetConfig+0x84>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a17      	ldr	r2, [pc, #92]	; (8006828 <TIM_OC4_SetConfig+0xc4>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d00b      	beq.n	80067e8 <TIM_OC4_SetConfig+0x84>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a16      	ldr	r2, [pc, #88]	; (800682c <TIM_OC4_SetConfig+0xc8>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d007      	beq.n	80067e8 <TIM_OC4_SetConfig+0x84>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a15      	ldr	r2, [pc, #84]	; (8006830 <TIM_OC4_SetConfig+0xcc>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d003      	beq.n	80067e8 <TIM_OC4_SetConfig+0x84>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a14      	ldr	r2, [pc, #80]	; (8006834 <TIM_OC4_SetConfig+0xd0>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d109      	bne.n	80067fc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	695b      	ldr	r3, [r3, #20]
 80067f4:	019b      	lsls	r3, r3, #6
 80067f6:	697a      	ldr	r2, [r7, #20]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	697a      	ldr	r2, [r7, #20]
 8006800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	685a      	ldr	r2, [r3, #4]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	693a      	ldr	r2, [r7, #16]
 8006814:	621a      	str	r2, [r3, #32]
}
 8006816:	bf00      	nop
 8006818:	371c      	adds	r7, #28
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	40012c00 	.word	0x40012c00
 8006828:	40013400 	.word	0x40013400
 800682c:	40014000 	.word	0x40014000
 8006830:	40014400 	.word	0x40014400
 8006834:	40014800 	.word	0x40014800

08006838 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006838:	b480      	push	{r7}
 800683a:	b087      	sub	sp, #28
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a1b      	ldr	r3, [r3, #32]
 8006846:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a1b      	ldr	r3, [r3, #32]
 8006852:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800685e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800686a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	4313      	orrs	r3, r2
 8006874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800687c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	041b      	lsls	r3, r3, #16
 8006884:	693a      	ldr	r2, [r7, #16]
 8006886:	4313      	orrs	r3, r2
 8006888:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a17      	ldr	r2, [pc, #92]	; (80068ec <TIM_OC5_SetConfig+0xb4>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d00f      	beq.n	80068b2 <TIM_OC5_SetConfig+0x7a>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a16      	ldr	r2, [pc, #88]	; (80068f0 <TIM_OC5_SetConfig+0xb8>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d00b      	beq.n	80068b2 <TIM_OC5_SetConfig+0x7a>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a15      	ldr	r2, [pc, #84]	; (80068f4 <TIM_OC5_SetConfig+0xbc>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d007      	beq.n	80068b2 <TIM_OC5_SetConfig+0x7a>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a14      	ldr	r2, [pc, #80]	; (80068f8 <TIM_OC5_SetConfig+0xc0>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d003      	beq.n	80068b2 <TIM_OC5_SetConfig+0x7a>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a13      	ldr	r2, [pc, #76]	; (80068fc <TIM_OC5_SetConfig+0xc4>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d109      	bne.n	80068c6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	695b      	ldr	r3, [r3, #20]
 80068be:	021b      	lsls	r3, r3, #8
 80068c0:	697a      	ldr	r2, [r7, #20]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	697a      	ldr	r2, [r7, #20]
 80068ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	685a      	ldr	r2, [r3, #4]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	693a      	ldr	r2, [r7, #16]
 80068de:	621a      	str	r2, [r3, #32]
}
 80068e0:	bf00      	nop
 80068e2:	371c      	adds	r7, #28
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr
 80068ec:	40012c00 	.word	0x40012c00
 80068f0:	40013400 	.word	0x40013400
 80068f4:	40014000 	.word	0x40014000
 80068f8:	40014400 	.word	0x40014400
 80068fc:	40014800 	.word	0x40014800

08006900 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006900:	b480      	push	{r7}
 8006902:	b087      	sub	sp, #28
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a1b      	ldr	r3, [r3, #32]
 800690e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a1b      	ldr	r3, [r3, #32]
 800691a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800692e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006932:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	021b      	lsls	r3, r3, #8
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	4313      	orrs	r3, r2
 800693e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006946:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	051b      	lsls	r3, r3, #20
 800694e:	693a      	ldr	r2, [r7, #16]
 8006950:	4313      	orrs	r3, r2
 8006952:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a18      	ldr	r2, [pc, #96]	; (80069b8 <TIM_OC6_SetConfig+0xb8>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d00f      	beq.n	800697c <TIM_OC6_SetConfig+0x7c>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4a17      	ldr	r2, [pc, #92]	; (80069bc <TIM_OC6_SetConfig+0xbc>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d00b      	beq.n	800697c <TIM_OC6_SetConfig+0x7c>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4a16      	ldr	r2, [pc, #88]	; (80069c0 <TIM_OC6_SetConfig+0xc0>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d007      	beq.n	800697c <TIM_OC6_SetConfig+0x7c>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4a15      	ldr	r2, [pc, #84]	; (80069c4 <TIM_OC6_SetConfig+0xc4>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d003      	beq.n	800697c <TIM_OC6_SetConfig+0x7c>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a14      	ldr	r2, [pc, #80]	; (80069c8 <TIM_OC6_SetConfig+0xc8>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d109      	bne.n	8006990 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006982:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	695b      	ldr	r3, [r3, #20]
 8006988:	029b      	lsls	r3, r3, #10
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	4313      	orrs	r3, r2
 800698e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	697a      	ldr	r2, [r7, #20]
 8006994:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	685a      	ldr	r2, [r3, #4]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	693a      	ldr	r2, [r7, #16]
 80069a8:	621a      	str	r2, [r3, #32]
}
 80069aa:	bf00      	nop
 80069ac:	371c      	adds	r7, #28
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	40012c00 	.word	0x40012c00
 80069bc:	40013400 	.word	0x40013400
 80069c0:	40014000 	.word	0x40014000
 80069c4:	40014400 	.word	0x40014400
 80069c8:	40014800 	.word	0x40014800

080069cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b087      	sub	sp, #28
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6a1b      	ldr	r3, [r3, #32]
 80069dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	f023 0201 	bic.w	r2, r3, #1
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	699b      	ldr	r3, [r3, #24]
 80069ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	011b      	lsls	r3, r3, #4
 80069fc:	693a      	ldr	r2, [r7, #16]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	f023 030a 	bic.w	r3, r3, #10
 8006a08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a0a:	697a      	ldr	r2, [r7, #20]
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	693a      	ldr	r2, [r7, #16]
 8006a16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	697a      	ldr	r2, [r7, #20]
 8006a1c:	621a      	str	r2, [r3, #32]
}
 8006a1e:	bf00      	nop
 8006a20:	371c      	adds	r7, #28
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr

08006a2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a2a:	b480      	push	{r7}
 8006a2c:	b087      	sub	sp, #28
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	60f8      	str	r0, [r7, #12]
 8006a32:	60b9      	str	r1, [r7, #8]
 8006a34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	f023 0210 	bic.w	r2, r3, #16
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	699b      	ldr	r3, [r3, #24]
 8006a46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6a1b      	ldr	r3, [r3, #32]
 8006a4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	031b      	lsls	r3, r3, #12
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	011b      	lsls	r3, r3, #4
 8006a6c:	693a      	ldr	r2, [r7, #16]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	697a      	ldr	r2, [r7, #20]
 8006a76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	693a      	ldr	r2, [r7, #16]
 8006a7c:	621a      	str	r2, [r3, #32]
}
 8006a7e:	bf00      	nop
 8006a80:	371c      	adds	r7, #28
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr

08006a8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a8a:	b480      	push	{r7}
 8006a8c:	b085      	sub	sp, #20
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
 8006a92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aa0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006aa2:	683a      	ldr	r2, [r7, #0]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	f043 0307 	orr.w	r3, r3, #7
 8006aac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	609a      	str	r2, [r3, #8]
}
 8006ab4:	bf00      	nop
 8006ab6:	3714      	adds	r7, #20
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b087      	sub	sp, #28
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	607a      	str	r2, [r7, #4]
 8006acc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ada:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	021a      	lsls	r2, r3, #8
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	431a      	orrs	r2, r3
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	697a      	ldr	r2, [r7, #20]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	697a      	ldr	r2, [r7, #20]
 8006af2:	609a      	str	r2, [r3, #8]
}
 8006af4:	bf00      	nop
 8006af6:	371c      	adds	r7, #28
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b087      	sub	sp, #28
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	f003 031f 	and.w	r3, r3, #31
 8006b12:	2201      	movs	r2, #1
 8006b14:	fa02 f303 	lsl.w	r3, r2, r3
 8006b18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6a1a      	ldr	r2, [r3, #32]
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	43db      	mvns	r3, r3
 8006b22:	401a      	ands	r2, r3
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6a1a      	ldr	r2, [r3, #32]
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	f003 031f 	and.w	r3, r3, #31
 8006b32:	6879      	ldr	r1, [r7, #4]
 8006b34:	fa01 f303 	lsl.w	r3, r1, r3
 8006b38:	431a      	orrs	r2, r3
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	621a      	str	r2, [r3, #32]
}
 8006b3e:	bf00      	nop
 8006b40:	371c      	adds	r7, #28
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
	...

08006b4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d101      	bne.n	8006b64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b60:	2302      	movs	r3, #2
 8006b62:	e068      	b.n	8006c36 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2202      	movs	r2, #2
 8006b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a2e      	ldr	r2, [pc, #184]	; (8006c44 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d004      	beq.n	8006b98 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a2d      	ldr	r2, [pc, #180]	; (8006c48 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d108      	bne.n	8006baa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006b9e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bb0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a1e      	ldr	r2, [pc, #120]	; (8006c44 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d01d      	beq.n	8006c0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bd6:	d018      	beq.n	8006c0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a1b      	ldr	r2, [pc, #108]	; (8006c4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d013      	beq.n	8006c0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a1a      	ldr	r2, [pc, #104]	; (8006c50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d00e      	beq.n	8006c0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a18      	ldr	r2, [pc, #96]	; (8006c54 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d009      	beq.n	8006c0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a13      	ldr	r2, [pc, #76]	; (8006c48 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d004      	beq.n	8006c0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a14      	ldr	r2, [pc, #80]	; (8006c58 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d10c      	bne.n	8006c24 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	68ba      	ldr	r2, [r7, #8]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68ba      	ldr	r2, [r7, #8]
 8006c22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c34:	2300      	movs	r3, #0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3714      	adds	r7, #20
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	40012c00 	.word	0x40012c00
 8006c48:	40013400 	.word	0x40013400
 8006c4c:	40000400 	.word	0x40000400
 8006c50:	40000800 	.word	0x40000800
 8006c54:	40000c00 	.word	0x40000c00
 8006c58:	40014000 	.word	0x40014000

08006c5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c64:	bf00      	nop
 8006c66:	370c      	adds	r7, #12
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c78:	bf00      	nop
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006c8c:	bf00      	nop
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b082      	sub	sp, #8
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d101      	bne.n	8006caa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e040      	b.n	8006d2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d106      	bne.n	8006cc0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f7fa fec8 	bl	8001a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2224      	movs	r2, #36	; 0x24
 8006cc4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f022 0201 	bic.w	r2, r2, #1
 8006cd4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 fc94 	bl	8007604 <UART_SetConfig>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d101      	bne.n	8006ce6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e022      	b.n	8006d2c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d002      	beq.n	8006cf4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 ff40 	bl	8007b74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	685a      	ldr	r2, [r3, #4]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	689a      	ldr	r2, [r3, #8]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f042 0201 	orr.w	r2, r2, #1
 8006d22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 ffc7 	bl	8007cb8 <UART_CheckIdleState>
 8006d2a:	4603      	mov	r3, r0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3708      	adds	r7, #8
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b08a      	sub	sp, #40	; 0x28
 8006d38:	af02      	add	r7, sp, #8
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	603b      	str	r3, [r7, #0]
 8006d40:	4613      	mov	r3, r2
 8006d42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d48:	2b20      	cmp	r3, #32
 8006d4a:	f040 8082 	bne.w	8006e52 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d002      	beq.n	8006d5a <HAL_UART_Transmit+0x26>
 8006d54:	88fb      	ldrh	r3, [r7, #6]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d101      	bne.n	8006d5e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e07a      	b.n	8006e54 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d101      	bne.n	8006d6c <HAL_UART_Transmit+0x38>
 8006d68:	2302      	movs	r3, #2
 8006d6a:	e073      	b.n	8006e54 <HAL_UART_Transmit+0x120>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2221      	movs	r2, #33	; 0x21
 8006d80:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d82:	f7fb f94f 	bl	8002024 <HAL_GetTick>
 8006d86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	88fa      	ldrh	r2, [r7, #6]
 8006d8c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	88fa      	ldrh	r2, [r7, #6]
 8006d94:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006da0:	d108      	bne.n	8006db4 <HAL_UART_Transmit+0x80>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d104      	bne.n	8006db4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006daa:	2300      	movs	r3, #0
 8006dac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	61bb      	str	r3, [r7, #24]
 8006db2:	e003      	b.n	8006dbc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006db8:	2300      	movs	r3, #0
 8006dba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006dc4:	e02d      	b.n	8006e22 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	9300      	str	r3, [sp, #0]
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	2180      	movs	r1, #128	; 0x80
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	f000 ffba 	bl	8007d4a <UART_WaitOnFlagUntilTimeout>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d001      	beq.n	8006de0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006ddc:	2303      	movs	r3, #3
 8006dde:	e039      	b.n	8006e54 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d10b      	bne.n	8006dfe <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	881a      	ldrh	r2, [r3, #0]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006df2:	b292      	uxth	r2, r2
 8006df4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	3302      	adds	r3, #2
 8006dfa:	61bb      	str	r3, [r7, #24]
 8006dfc:	e008      	b.n	8006e10 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	781a      	ldrb	r2, [r3, #0]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	b292      	uxth	r2, r2
 8006e08:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1cb      	bne.n	8006dc6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	9300      	str	r3, [sp, #0]
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	2200      	movs	r2, #0
 8006e36:	2140      	movs	r1, #64	; 0x40
 8006e38:	68f8      	ldr	r0, [r7, #12]
 8006e3a:	f000 ff86 	bl	8007d4a <UART_WaitOnFlagUntilTimeout>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d001      	beq.n	8006e48 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006e44:	2303      	movs	r3, #3
 8006e46:	e005      	b.n	8006e54 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2220      	movs	r2, #32
 8006e4c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	e000      	b.n	8006e54 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006e52:	2302      	movs	r3, #2
  }
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3720      	adds	r7, #32
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b08a      	sub	sp, #40	; 0x28
 8006e60:	af02      	add	r7, sp, #8
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	603b      	str	r3, [r7, #0]
 8006e68:	4613      	mov	r3, r2
 8006e6a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e70:	2b20      	cmp	r3, #32
 8006e72:	f040 80bf 	bne.w	8006ff4 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d002      	beq.n	8006e82 <HAL_UART_Receive+0x26>
 8006e7c:	88fb      	ldrh	r3, [r7, #6]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d101      	bne.n	8006e86 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	e0b7      	b.n	8006ff6 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d101      	bne.n	8006e94 <HAL_UART_Receive+0x38>
 8006e90:	2302      	movs	r3, #2
 8006e92:	e0b0      	b.n	8006ff6 <HAL_UART_Receive+0x19a>
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2201      	movs	r2, #1
 8006e98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2222      	movs	r2, #34	; 0x22
 8006ea8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2200      	movs	r2, #0
 8006eae:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006eb0:	f7fb f8b8 	bl	8002024 <HAL_GetTick>
 8006eb4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	88fa      	ldrh	r2, [r7, #6]
 8006eba:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	88fa      	ldrh	r2, [r7, #6]
 8006ec2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ece:	d10e      	bne.n	8006eee <HAL_UART_Receive+0x92>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d105      	bne.n	8006ee4 <HAL_UART_Receive+0x88>
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006ede:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ee2:	e02d      	b.n	8006f40 <HAL_UART_Receive+0xe4>
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	22ff      	movs	r2, #255	; 0xff
 8006ee8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006eec:	e028      	b.n	8006f40 <HAL_UART_Receive+0xe4>
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d10d      	bne.n	8006f12 <HAL_UART_Receive+0xb6>
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d104      	bne.n	8006f08 <HAL_UART_Receive+0xac>
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	22ff      	movs	r2, #255	; 0xff
 8006f02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f06:	e01b      	b.n	8006f40 <HAL_UART_Receive+0xe4>
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	227f      	movs	r2, #127	; 0x7f
 8006f0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f10:	e016      	b.n	8006f40 <HAL_UART_Receive+0xe4>
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f1a:	d10d      	bne.n	8006f38 <HAL_UART_Receive+0xdc>
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d104      	bne.n	8006f2e <HAL_UART_Receive+0xd2>
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	227f      	movs	r2, #127	; 0x7f
 8006f28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f2c:	e008      	b.n	8006f40 <HAL_UART_Receive+0xe4>
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	223f      	movs	r2, #63	; 0x3f
 8006f32:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f36:	e003      	b.n	8006f40 <HAL_UART_Receive+0xe4>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006f46:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f50:	d108      	bne.n	8006f64 <HAL_UART_Receive+0x108>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d104      	bne.n	8006f64 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	61bb      	str	r3, [r7, #24]
 8006f62:	e003      	b.n	8006f6c <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006f74:	e033      	b.n	8006fde <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	9300      	str	r3, [sp, #0]
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	2120      	movs	r1, #32
 8006f80:	68f8      	ldr	r0, [r7, #12]
 8006f82:	f000 fee2 	bl	8007d4a <UART_WaitOnFlagUntilTimeout>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d001      	beq.n	8006f90 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	e032      	b.n	8006ff6 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d10c      	bne.n	8006fb0 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006f9c:	b29a      	uxth	r2, r3
 8006f9e:	8a7b      	ldrh	r3, [r7, #18]
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006fa8:	69bb      	ldr	r3, [r7, #24]
 8006faa:	3302      	adds	r3, #2
 8006fac:	61bb      	str	r3, [r7, #24]
 8006fae:	e00d      	b.n	8006fcc <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	b2da      	uxtb	r2, r3
 8006fba:	8a7b      	ldrh	r3, [r7, #18]
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	b2da      	uxtb	r2, r3
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	3301      	adds	r3, #1
 8006fca:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	3b01      	subs	r3, #1
 8006fd6:	b29a      	uxth	r2, r3
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d1c5      	bne.n	8006f76 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2220      	movs	r2, #32
 8006fee:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	e000      	b.n	8006ff6 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8006ff4:	2302      	movs	r3, #2
  }
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3720      	adds	r7, #32
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
	...

08007000 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b0ba      	sub	sp, #232	; 0xe8
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	69db      	ldr	r3, [r3, #28]
 800700e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007026:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800702a:	f640 030f 	movw	r3, #2063	; 0x80f
 800702e:	4013      	ands	r3, r2
 8007030:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007034:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007038:	2b00      	cmp	r3, #0
 800703a:	d115      	bne.n	8007068 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800703c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007040:	f003 0320 	and.w	r3, r3, #32
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00f      	beq.n	8007068 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800704c:	f003 0320 	and.w	r3, r3, #32
 8007050:	2b00      	cmp	r3, #0
 8007052:	d009      	beq.n	8007068 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007058:	2b00      	cmp	r3, #0
 800705a:	f000 82a6 	beq.w	80075aa <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	4798      	blx	r3
      }
      return;
 8007066:	e2a0      	b.n	80075aa <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007068:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800706c:	2b00      	cmp	r3, #0
 800706e:	f000 8117 	beq.w	80072a0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007072:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007076:	f003 0301 	and.w	r3, r3, #1
 800707a:	2b00      	cmp	r3, #0
 800707c:	d106      	bne.n	800708c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800707e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007082:	4b85      	ldr	r3, [pc, #532]	; (8007298 <HAL_UART_IRQHandler+0x298>)
 8007084:	4013      	ands	r3, r2
 8007086:	2b00      	cmp	r3, #0
 8007088:	f000 810a 	beq.w	80072a0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800708c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007090:	f003 0301 	and.w	r3, r3, #1
 8007094:	2b00      	cmp	r3, #0
 8007096:	d011      	beq.n	80070bc <HAL_UART_IRQHandler+0xbc>
 8007098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800709c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d00b      	beq.n	80070bc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2201      	movs	r2, #1
 80070aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070b2:	f043 0201 	orr.w	r2, r3, #1
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070c0:	f003 0302 	and.w	r3, r3, #2
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d011      	beq.n	80070ec <HAL_UART_IRQHandler+0xec>
 80070c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070cc:	f003 0301 	and.w	r3, r3, #1
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d00b      	beq.n	80070ec <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	2202      	movs	r2, #2
 80070da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070e2:	f043 0204 	orr.w	r2, r3, #4
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070f0:	f003 0304 	and.w	r3, r3, #4
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d011      	beq.n	800711c <HAL_UART_IRQHandler+0x11c>
 80070f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070fc:	f003 0301 	and.w	r3, r3, #1
 8007100:	2b00      	cmp	r3, #0
 8007102:	d00b      	beq.n	800711c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2204      	movs	r2, #4
 800710a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007112:	f043 0202 	orr.w	r2, r3, #2
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800711c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007120:	f003 0308 	and.w	r3, r3, #8
 8007124:	2b00      	cmp	r3, #0
 8007126:	d017      	beq.n	8007158 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800712c:	f003 0320 	and.w	r3, r3, #32
 8007130:	2b00      	cmp	r3, #0
 8007132:	d105      	bne.n	8007140 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007134:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007138:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800713c:	2b00      	cmp	r3, #0
 800713e:	d00b      	beq.n	8007158 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2208      	movs	r2, #8
 8007146:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800714e:	f043 0208 	orr.w	r2, r3, #8
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800715c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007160:	2b00      	cmp	r3, #0
 8007162:	d012      	beq.n	800718a <HAL_UART_IRQHandler+0x18a>
 8007164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007168:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00c      	beq.n	800718a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007178:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007180:	f043 0220 	orr.w	r2, r3, #32
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007190:	2b00      	cmp	r3, #0
 8007192:	f000 820c 	beq.w	80075ae <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800719a:	f003 0320 	and.w	r3, r3, #32
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00d      	beq.n	80071be <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80071a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071a6:	f003 0320 	and.w	r3, r3, #32
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d007      	beq.n	80071be <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d003      	beq.n	80071be <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d2:	2b40      	cmp	r3, #64	; 0x40
 80071d4:	d005      	beq.n	80071e2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80071d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d04f      	beq.n	8007282 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 fe75 	bl	8007ed2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f2:	2b40      	cmp	r3, #64	; 0x40
 80071f4:	d141      	bne.n	800727a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	3308      	adds	r3, #8
 80071fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007200:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007204:	e853 3f00 	ldrex	r3, [r3]
 8007208:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800720c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007210:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007214:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	3308      	adds	r3, #8
 800721e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007222:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007226:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800722a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800722e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007232:	e841 2300 	strex	r3, r2, [r1]
 8007236:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800723a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800723e:	2b00      	cmp	r3, #0
 8007240:	d1d9      	bne.n	80071f6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007246:	2b00      	cmp	r3, #0
 8007248:	d013      	beq.n	8007272 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800724e:	4a13      	ldr	r2, [pc, #76]	; (800729c <HAL_UART_IRQHandler+0x29c>)
 8007250:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007256:	4618      	mov	r0, r3
 8007258:	f7fc fd9a 	bl	8003d90 <HAL_DMA_Abort_IT>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d017      	beq.n	8007292 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800726c:	4610      	mov	r0, r2
 800726e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007270:	e00f      	b.n	8007292 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 f9b0 	bl	80075d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007278:	e00b      	b.n	8007292 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 f9ac 	bl	80075d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007280:	e007      	b.n	8007292 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 f9a8 	bl	80075d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007290:	e18d      	b.n	80075ae <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007292:	bf00      	nop
    return;
 8007294:	e18b      	b.n	80075ae <HAL_UART_IRQHandler+0x5ae>
 8007296:	bf00      	nop
 8007298:	04000120 	.word	0x04000120
 800729c:	08007f99 	.word	0x08007f99

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	f040 8146 	bne.w	8007536 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80072aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072ae:	f003 0310 	and.w	r3, r3, #16
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	f000 813f 	beq.w	8007536 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80072b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072bc:	f003 0310 	and.w	r3, r3, #16
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	f000 8138 	beq.w	8007536 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2210      	movs	r2, #16
 80072cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d8:	2b40      	cmp	r3, #64	; 0x40
 80072da:	f040 80b4 	bne.w	8007446 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80072ea:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	f000 815f 	beq.w	80075b2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80072fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80072fe:	429a      	cmp	r2, r3
 8007300:	f080 8157 	bcs.w	80075b2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800730a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 0320 	and.w	r3, r3, #32
 800731a:	2b00      	cmp	r3, #0
 800731c:	f040 8085 	bne.w	800742a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007328:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800732c:	e853 3f00 	ldrex	r3, [r3]
 8007330:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007334:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007338:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800733c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	461a      	mov	r2, r3
 8007346:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800734a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800734e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007352:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007356:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800735a:	e841 2300 	strex	r3, r2, [r1]
 800735e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007362:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1da      	bne.n	8007320 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	3308      	adds	r3, #8
 8007370:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007372:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007374:	e853 3f00 	ldrex	r3, [r3]
 8007378:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800737a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800737c:	f023 0301 	bic.w	r3, r3, #1
 8007380:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	3308      	adds	r3, #8
 800738a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800738e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007392:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007394:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007396:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800739a:	e841 2300 	strex	r3, r2, [r1]
 800739e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80073a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d1e1      	bne.n	800736a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	3308      	adds	r3, #8
 80073ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073b0:	e853 3f00 	ldrex	r3, [r3]
 80073b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80073b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	3308      	adds	r3, #8
 80073c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80073ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80073cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80073d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80073d2:	e841 2300 	strex	r3, r2, [r1]
 80073d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80073d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1e3      	bne.n	80073a6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2220      	movs	r2, #32
 80073e2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073f2:	e853 3f00 	ldrex	r3, [r3]
 80073f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80073f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073fa:	f023 0310 	bic.w	r3, r3, #16
 80073fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	461a      	mov	r2, r3
 8007408:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800740c:	65bb      	str	r3, [r7, #88]	; 0x58
 800740e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007410:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007412:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007414:	e841 2300 	strex	r3, r2, [r1]
 8007418:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800741a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800741c:	2b00      	cmp	r3, #0
 800741e:	d1e4      	bne.n	80073ea <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007424:	4618      	mov	r0, r3
 8007426:	f7fc fc75 	bl	8003d14 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007436:	b29b      	uxth	r3, r3
 8007438:	1ad3      	subs	r3, r2, r3
 800743a:	b29b      	uxth	r3, r3
 800743c:	4619      	mov	r1, r3
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 f8d4 	bl	80075ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007444:	e0b5      	b.n	80075b2 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007452:	b29b      	uxth	r3, r3
 8007454:	1ad3      	subs	r3, r2, r3
 8007456:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007460:	b29b      	uxth	r3, r3
 8007462:	2b00      	cmp	r3, #0
 8007464:	f000 80a7 	beq.w	80075b6 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8007468:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800746c:	2b00      	cmp	r3, #0
 800746e:	f000 80a2 	beq.w	80075b6 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800747a:	e853 3f00 	ldrex	r3, [r3]
 800747e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007482:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007486:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	461a      	mov	r2, r3
 8007490:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007494:	647b      	str	r3, [r7, #68]	; 0x44
 8007496:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007498:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800749a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800749c:	e841 2300 	strex	r3, r2, [r1]
 80074a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d1e4      	bne.n	8007472 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	3308      	adds	r3, #8
 80074ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b2:	e853 3f00 	ldrex	r3, [r3]
 80074b6:	623b      	str	r3, [r7, #32]
   return(result);
 80074b8:	6a3b      	ldr	r3, [r7, #32]
 80074ba:	f023 0301 	bic.w	r3, r3, #1
 80074be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	3308      	adds	r3, #8
 80074c8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80074cc:	633a      	str	r2, [r7, #48]	; 0x30
 80074ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074d4:	e841 2300 	strex	r3, r2, [r1]
 80074d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d1e3      	bne.n	80074a8 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2220      	movs	r2, #32
 80074e4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	e853 3f00 	ldrex	r3, [r3]
 80074fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f023 0310 	bic.w	r3, r3, #16
 8007506:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	461a      	mov	r2, r3
 8007510:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007514:	61fb      	str	r3, [r7, #28]
 8007516:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007518:	69b9      	ldr	r1, [r7, #24]
 800751a:	69fa      	ldr	r2, [r7, #28]
 800751c:	e841 2300 	strex	r3, r2, [r1]
 8007520:	617b      	str	r3, [r7, #20]
   return(result);
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d1e4      	bne.n	80074f2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007528:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800752c:	4619      	mov	r1, r3
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 f85c 	bl	80075ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007534:	e03f      	b.n	80075b6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800753a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00e      	beq.n	8007560 <HAL_UART_IRQHandler+0x560>
 8007542:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800754a:	2b00      	cmp	r3, #0
 800754c:	d008      	beq.n	8007560 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007556:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 fd5d 	bl	8008018 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800755e:	e02d      	b.n	80075bc <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007568:	2b00      	cmp	r3, #0
 800756a:	d00e      	beq.n	800758a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800756c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007574:	2b00      	cmp	r3, #0
 8007576:	d008      	beq.n	800758a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800757c:	2b00      	cmp	r3, #0
 800757e:	d01c      	beq.n	80075ba <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	4798      	blx	r3
    }
    return;
 8007588:	e017      	b.n	80075ba <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800758a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800758e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007592:	2b00      	cmp	r3, #0
 8007594:	d012      	beq.n	80075bc <HAL_UART_IRQHandler+0x5bc>
 8007596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800759a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00c      	beq.n	80075bc <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 fd0e 	bl	8007fc4 <UART_EndTransmit_IT>
    return;
 80075a8:	e008      	b.n	80075bc <HAL_UART_IRQHandler+0x5bc>
      return;
 80075aa:	bf00      	nop
 80075ac:	e006      	b.n	80075bc <HAL_UART_IRQHandler+0x5bc>
    return;
 80075ae:	bf00      	nop
 80075b0:	e004      	b.n	80075bc <HAL_UART_IRQHandler+0x5bc>
      return;
 80075b2:	bf00      	nop
 80075b4:	e002      	b.n	80075bc <HAL_UART_IRQHandler+0x5bc>
      return;
 80075b6:	bf00      	nop
 80075b8:	e000      	b.n	80075bc <HAL_UART_IRQHandler+0x5bc>
    return;
 80075ba:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80075bc:	37e8      	adds	r7, #232	; 0xe8
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop

080075c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80075cc:	bf00      	nop
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80075e0:	bf00      	nop
 80075e2:	370c      	adds	r7, #12
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b083      	sub	sp, #12
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	460b      	mov	r3, r1
 80075f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80075f8:	bf00      	nop
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007604:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007608:	b08a      	sub	sp, #40	; 0x28
 800760a:	af00      	add	r7, sp, #0
 800760c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800760e:	2300      	movs	r3, #0
 8007610:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	689a      	ldr	r2, [r3, #8]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	691b      	ldr	r3, [r3, #16]
 800761c:	431a      	orrs	r2, r3
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	695b      	ldr	r3, [r3, #20]
 8007622:	431a      	orrs	r2, r3
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	69db      	ldr	r3, [r3, #28]
 8007628:	4313      	orrs	r3, r2
 800762a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	4ba4      	ldr	r3, [pc, #656]	; (80078c4 <UART_SetConfig+0x2c0>)
 8007634:	4013      	ands	r3, r2
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	6812      	ldr	r2, [r2, #0]
 800763a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800763c:	430b      	orrs	r3, r1
 800763e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	68da      	ldr	r2, [r3, #12]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	430a      	orrs	r2, r1
 8007654:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	699b      	ldr	r3, [r3, #24]
 800765a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a99      	ldr	r2, [pc, #612]	; (80078c8 <UART_SetConfig+0x2c4>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d004      	beq.n	8007670 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6a1b      	ldr	r3, [r3, #32]
 800766a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800766c:	4313      	orrs	r3, r2
 800766e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007680:	430a      	orrs	r2, r1
 8007682:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a90      	ldr	r2, [pc, #576]	; (80078cc <UART_SetConfig+0x2c8>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d126      	bne.n	80076dc <UART_SetConfig+0xd8>
 800768e:	4b90      	ldr	r3, [pc, #576]	; (80078d0 <UART_SetConfig+0x2cc>)
 8007690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007694:	f003 0303 	and.w	r3, r3, #3
 8007698:	2b03      	cmp	r3, #3
 800769a:	d81b      	bhi.n	80076d4 <UART_SetConfig+0xd0>
 800769c:	a201      	add	r2, pc, #4	; (adr r2, 80076a4 <UART_SetConfig+0xa0>)
 800769e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076a2:	bf00      	nop
 80076a4:	080076b5 	.word	0x080076b5
 80076a8:	080076c5 	.word	0x080076c5
 80076ac:	080076bd 	.word	0x080076bd
 80076b0:	080076cd 	.word	0x080076cd
 80076b4:	2301      	movs	r3, #1
 80076b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076ba:	e116      	b.n	80078ea <UART_SetConfig+0x2e6>
 80076bc:	2302      	movs	r3, #2
 80076be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076c2:	e112      	b.n	80078ea <UART_SetConfig+0x2e6>
 80076c4:	2304      	movs	r3, #4
 80076c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076ca:	e10e      	b.n	80078ea <UART_SetConfig+0x2e6>
 80076cc:	2308      	movs	r3, #8
 80076ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076d2:	e10a      	b.n	80078ea <UART_SetConfig+0x2e6>
 80076d4:	2310      	movs	r3, #16
 80076d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076da:	e106      	b.n	80078ea <UART_SetConfig+0x2e6>
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a7c      	ldr	r2, [pc, #496]	; (80078d4 <UART_SetConfig+0x2d0>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d138      	bne.n	8007758 <UART_SetConfig+0x154>
 80076e6:	4b7a      	ldr	r3, [pc, #488]	; (80078d0 <UART_SetConfig+0x2cc>)
 80076e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ec:	f003 030c 	and.w	r3, r3, #12
 80076f0:	2b0c      	cmp	r3, #12
 80076f2:	d82d      	bhi.n	8007750 <UART_SetConfig+0x14c>
 80076f4:	a201      	add	r2, pc, #4	; (adr r2, 80076fc <UART_SetConfig+0xf8>)
 80076f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fa:	bf00      	nop
 80076fc:	08007731 	.word	0x08007731
 8007700:	08007751 	.word	0x08007751
 8007704:	08007751 	.word	0x08007751
 8007708:	08007751 	.word	0x08007751
 800770c:	08007741 	.word	0x08007741
 8007710:	08007751 	.word	0x08007751
 8007714:	08007751 	.word	0x08007751
 8007718:	08007751 	.word	0x08007751
 800771c:	08007739 	.word	0x08007739
 8007720:	08007751 	.word	0x08007751
 8007724:	08007751 	.word	0x08007751
 8007728:	08007751 	.word	0x08007751
 800772c:	08007749 	.word	0x08007749
 8007730:	2300      	movs	r3, #0
 8007732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007736:	e0d8      	b.n	80078ea <UART_SetConfig+0x2e6>
 8007738:	2302      	movs	r3, #2
 800773a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800773e:	e0d4      	b.n	80078ea <UART_SetConfig+0x2e6>
 8007740:	2304      	movs	r3, #4
 8007742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007746:	e0d0      	b.n	80078ea <UART_SetConfig+0x2e6>
 8007748:	2308      	movs	r3, #8
 800774a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800774e:	e0cc      	b.n	80078ea <UART_SetConfig+0x2e6>
 8007750:	2310      	movs	r3, #16
 8007752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007756:	e0c8      	b.n	80078ea <UART_SetConfig+0x2e6>
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a5e      	ldr	r2, [pc, #376]	; (80078d8 <UART_SetConfig+0x2d4>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d125      	bne.n	80077ae <UART_SetConfig+0x1aa>
 8007762:	4b5b      	ldr	r3, [pc, #364]	; (80078d0 <UART_SetConfig+0x2cc>)
 8007764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007768:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800776c:	2b30      	cmp	r3, #48	; 0x30
 800776e:	d016      	beq.n	800779e <UART_SetConfig+0x19a>
 8007770:	2b30      	cmp	r3, #48	; 0x30
 8007772:	d818      	bhi.n	80077a6 <UART_SetConfig+0x1a2>
 8007774:	2b20      	cmp	r3, #32
 8007776:	d00a      	beq.n	800778e <UART_SetConfig+0x18a>
 8007778:	2b20      	cmp	r3, #32
 800777a:	d814      	bhi.n	80077a6 <UART_SetConfig+0x1a2>
 800777c:	2b00      	cmp	r3, #0
 800777e:	d002      	beq.n	8007786 <UART_SetConfig+0x182>
 8007780:	2b10      	cmp	r3, #16
 8007782:	d008      	beq.n	8007796 <UART_SetConfig+0x192>
 8007784:	e00f      	b.n	80077a6 <UART_SetConfig+0x1a2>
 8007786:	2300      	movs	r3, #0
 8007788:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800778c:	e0ad      	b.n	80078ea <UART_SetConfig+0x2e6>
 800778e:	2302      	movs	r3, #2
 8007790:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007794:	e0a9      	b.n	80078ea <UART_SetConfig+0x2e6>
 8007796:	2304      	movs	r3, #4
 8007798:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800779c:	e0a5      	b.n	80078ea <UART_SetConfig+0x2e6>
 800779e:	2308      	movs	r3, #8
 80077a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077a4:	e0a1      	b.n	80078ea <UART_SetConfig+0x2e6>
 80077a6:	2310      	movs	r3, #16
 80077a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077ac:	e09d      	b.n	80078ea <UART_SetConfig+0x2e6>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a4a      	ldr	r2, [pc, #296]	; (80078dc <UART_SetConfig+0x2d8>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d125      	bne.n	8007804 <UART_SetConfig+0x200>
 80077b8:	4b45      	ldr	r3, [pc, #276]	; (80078d0 <UART_SetConfig+0x2cc>)
 80077ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80077c2:	2bc0      	cmp	r3, #192	; 0xc0
 80077c4:	d016      	beq.n	80077f4 <UART_SetConfig+0x1f0>
 80077c6:	2bc0      	cmp	r3, #192	; 0xc0
 80077c8:	d818      	bhi.n	80077fc <UART_SetConfig+0x1f8>
 80077ca:	2b80      	cmp	r3, #128	; 0x80
 80077cc:	d00a      	beq.n	80077e4 <UART_SetConfig+0x1e0>
 80077ce:	2b80      	cmp	r3, #128	; 0x80
 80077d0:	d814      	bhi.n	80077fc <UART_SetConfig+0x1f8>
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d002      	beq.n	80077dc <UART_SetConfig+0x1d8>
 80077d6:	2b40      	cmp	r3, #64	; 0x40
 80077d8:	d008      	beq.n	80077ec <UART_SetConfig+0x1e8>
 80077da:	e00f      	b.n	80077fc <UART_SetConfig+0x1f8>
 80077dc:	2300      	movs	r3, #0
 80077de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077e2:	e082      	b.n	80078ea <UART_SetConfig+0x2e6>
 80077e4:	2302      	movs	r3, #2
 80077e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077ea:	e07e      	b.n	80078ea <UART_SetConfig+0x2e6>
 80077ec:	2304      	movs	r3, #4
 80077ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077f2:	e07a      	b.n	80078ea <UART_SetConfig+0x2e6>
 80077f4:	2308      	movs	r3, #8
 80077f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077fa:	e076      	b.n	80078ea <UART_SetConfig+0x2e6>
 80077fc:	2310      	movs	r3, #16
 80077fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007802:	e072      	b.n	80078ea <UART_SetConfig+0x2e6>
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a35      	ldr	r2, [pc, #212]	; (80078e0 <UART_SetConfig+0x2dc>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d12a      	bne.n	8007864 <UART_SetConfig+0x260>
 800780e:	4b30      	ldr	r3, [pc, #192]	; (80078d0 <UART_SetConfig+0x2cc>)
 8007810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007814:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007818:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800781c:	d01a      	beq.n	8007854 <UART_SetConfig+0x250>
 800781e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007822:	d81b      	bhi.n	800785c <UART_SetConfig+0x258>
 8007824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007828:	d00c      	beq.n	8007844 <UART_SetConfig+0x240>
 800782a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800782e:	d815      	bhi.n	800785c <UART_SetConfig+0x258>
 8007830:	2b00      	cmp	r3, #0
 8007832:	d003      	beq.n	800783c <UART_SetConfig+0x238>
 8007834:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007838:	d008      	beq.n	800784c <UART_SetConfig+0x248>
 800783a:	e00f      	b.n	800785c <UART_SetConfig+0x258>
 800783c:	2300      	movs	r3, #0
 800783e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007842:	e052      	b.n	80078ea <UART_SetConfig+0x2e6>
 8007844:	2302      	movs	r3, #2
 8007846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800784a:	e04e      	b.n	80078ea <UART_SetConfig+0x2e6>
 800784c:	2304      	movs	r3, #4
 800784e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007852:	e04a      	b.n	80078ea <UART_SetConfig+0x2e6>
 8007854:	2308      	movs	r3, #8
 8007856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800785a:	e046      	b.n	80078ea <UART_SetConfig+0x2e6>
 800785c:	2310      	movs	r3, #16
 800785e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007862:	e042      	b.n	80078ea <UART_SetConfig+0x2e6>
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a17      	ldr	r2, [pc, #92]	; (80078c8 <UART_SetConfig+0x2c4>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d13a      	bne.n	80078e4 <UART_SetConfig+0x2e0>
 800786e:	4b18      	ldr	r3, [pc, #96]	; (80078d0 <UART_SetConfig+0x2cc>)
 8007870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007874:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007878:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800787c:	d01a      	beq.n	80078b4 <UART_SetConfig+0x2b0>
 800787e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007882:	d81b      	bhi.n	80078bc <UART_SetConfig+0x2b8>
 8007884:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007888:	d00c      	beq.n	80078a4 <UART_SetConfig+0x2a0>
 800788a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800788e:	d815      	bhi.n	80078bc <UART_SetConfig+0x2b8>
 8007890:	2b00      	cmp	r3, #0
 8007892:	d003      	beq.n	800789c <UART_SetConfig+0x298>
 8007894:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007898:	d008      	beq.n	80078ac <UART_SetConfig+0x2a8>
 800789a:	e00f      	b.n	80078bc <UART_SetConfig+0x2b8>
 800789c:	2300      	movs	r3, #0
 800789e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078a2:	e022      	b.n	80078ea <UART_SetConfig+0x2e6>
 80078a4:	2302      	movs	r3, #2
 80078a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078aa:	e01e      	b.n	80078ea <UART_SetConfig+0x2e6>
 80078ac:	2304      	movs	r3, #4
 80078ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078b2:	e01a      	b.n	80078ea <UART_SetConfig+0x2e6>
 80078b4:	2308      	movs	r3, #8
 80078b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078ba:	e016      	b.n	80078ea <UART_SetConfig+0x2e6>
 80078bc:	2310      	movs	r3, #16
 80078be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078c2:	e012      	b.n	80078ea <UART_SetConfig+0x2e6>
 80078c4:	efff69f3 	.word	0xefff69f3
 80078c8:	40008000 	.word	0x40008000
 80078cc:	40013800 	.word	0x40013800
 80078d0:	40021000 	.word	0x40021000
 80078d4:	40004400 	.word	0x40004400
 80078d8:	40004800 	.word	0x40004800
 80078dc:	40004c00 	.word	0x40004c00
 80078e0:	40005000 	.word	0x40005000
 80078e4:	2310      	movs	r3, #16
 80078e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a9f      	ldr	r2, [pc, #636]	; (8007b6c <UART_SetConfig+0x568>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d17a      	bne.n	80079ea <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80078f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078f8:	2b08      	cmp	r3, #8
 80078fa:	d824      	bhi.n	8007946 <UART_SetConfig+0x342>
 80078fc:	a201      	add	r2, pc, #4	; (adr r2, 8007904 <UART_SetConfig+0x300>)
 80078fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007902:	bf00      	nop
 8007904:	08007929 	.word	0x08007929
 8007908:	08007947 	.word	0x08007947
 800790c:	08007931 	.word	0x08007931
 8007910:	08007947 	.word	0x08007947
 8007914:	08007937 	.word	0x08007937
 8007918:	08007947 	.word	0x08007947
 800791c:	08007947 	.word	0x08007947
 8007920:	08007947 	.word	0x08007947
 8007924:	0800793f 	.word	0x0800793f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007928:	f7fd faaa 	bl	8004e80 <HAL_RCC_GetPCLK1Freq>
 800792c:	61f8      	str	r0, [r7, #28]
        break;
 800792e:	e010      	b.n	8007952 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007930:	4b8f      	ldr	r3, [pc, #572]	; (8007b70 <UART_SetConfig+0x56c>)
 8007932:	61fb      	str	r3, [r7, #28]
        break;
 8007934:	e00d      	b.n	8007952 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007936:	f7fd fa0b 	bl	8004d50 <HAL_RCC_GetSysClockFreq>
 800793a:	61f8      	str	r0, [r7, #28]
        break;
 800793c:	e009      	b.n	8007952 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800793e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007942:	61fb      	str	r3, [r7, #28]
        break;
 8007944:	e005      	b.n	8007952 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007946:	2300      	movs	r3, #0
 8007948:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007950:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	2b00      	cmp	r3, #0
 8007956:	f000 80fb 	beq.w	8007b50 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	685a      	ldr	r2, [r3, #4]
 800795e:	4613      	mov	r3, r2
 8007960:	005b      	lsls	r3, r3, #1
 8007962:	4413      	add	r3, r2
 8007964:	69fa      	ldr	r2, [r7, #28]
 8007966:	429a      	cmp	r2, r3
 8007968:	d305      	bcc.n	8007976 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007970:	69fa      	ldr	r2, [r7, #28]
 8007972:	429a      	cmp	r2, r3
 8007974:	d903      	bls.n	800797e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800797c:	e0e8      	b.n	8007b50 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	2200      	movs	r2, #0
 8007982:	461c      	mov	r4, r3
 8007984:	4615      	mov	r5, r2
 8007986:	f04f 0200 	mov.w	r2, #0
 800798a:	f04f 0300 	mov.w	r3, #0
 800798e:	022b      	lsls	r3, r5, #8
 8007990:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007994:	0222      	lsls	r2, r4, #8
 8007996:	68f9      	ldr	r1, [r7, #12]
 8007998:	6849      	ldr	r1, [r1, #4]
 800799a:	0849      	lsrs	r1, r1, #1
 800799c:	2000      	movs	r0, #0
 800799e:	4688      	mov	r8, r1
 80079a0:	4681      	mov	r9, r0
 80079a2:	eb12 0a08 	adds.w	sl, r2, r8
 80079a6:	eb43 0b09 	adc.w	fp, r3, r9
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	603b      	str	r3, [r7, #0]
 80079b2:	607a      	str	r2, [r7, #4]
 80079b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079b8:	4650      	mov	r0, sl
 80079ba:	4659      	mov	r1, fp
 80079bc:	f7f9 f964 	bl	8000c88 <__aeabi_uldivmod>
 80079c0:	4602      	mov	r2, r0
 80079c2:	460b      	mov	r3, r1
 80079c4:	4613      	mov	r3, r2
 80079c6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079ce:	d308      	bcc.n	80079e2 <UART_SetConfig+0x3de>
 80079d0:	69bb      	ldr	r3, [r7, #24]
 80079d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079d6:	d204      	bcs.n	80079e2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	69ba      	ldr	r2, [r7, #24]
 80079de:	60da      	str	r2, [r3, #12]
 80079e0:	e0b6      	b.n	8007b50 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80079e8:	e0b2      	b.n	8007b50 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	69db      	ldr	r3, [r3, #28]
 80079ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079f2:	d15e      	bne.n	8007ab2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80079f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80079f8:	2b08      	cmp	r3, #8
 80079fa:	d828      	bhi.n	8007a4e <UART_SetConfig+0x44a>
 80079fc:	a201      	add	r2, pc, #4	; (adr r2, 8007a04 <UART_SetConfig+0x400>)
 80079fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a02:	bf00      	nop
 8007a04:	08007a29 	.word	0x08007a29
 8007a08:	08007a31 	.word	0x08007a31
 8007a0c:	08007a39 	.word	0x08007a39
 8007a10:	08007a4f 	.word	0x08007a4f
 8007a14:	08007a3f 	.word	0x08007a3f
 8007a18:	08007a4f 	.word	0x08007a4f
 8007a1c:	08007a4f 	.word	0x08007a4f
 8007a20:	08007a4f 	.word	0x08007a4f
 8007a24:	08007a47 	.word	0x08007a47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a28:	f7fd fa2a 	bl	8004e80 <HAL_RCC_GetPCLK1Freq>
 8007a2c:	61f8      	str	r0, [r7, #28]
        break;
 8007a2e:	e014      	b.n	8007a5a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a30:	f7fd fa3c 	bl	8004eac <HAL_RCC_GetPCLK2Freq>
 8007a34:	61f8      	str	r0, [r7, #28]
        break;
 8007a36:	e010      	b.n	8007a5a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a38:	4b4d      	ldr	r3, [pc, #308]	; (8007b70 <UART_SetConfig+0x56c>)
 8007a3a:	61fb      	str	r3, [r7, #28]
        break;
 8007a3c:	e00d      	b.n	8007a5a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a3e:	f7fd f987 	bl	8004d50 <HAL_RCC_GetSysClockFreq>
 8007a42:	61f8      	str	r0, [r7, #28]
        break;
 8007a44:	e009      	b.n	8007a5a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a4a:	61fb      	str	r3, [r7, #28]
        break;
 8007a4c:	e005      	b.n	8007a5a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007a58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a5a:	69fb      	ldr	r3, [r7, #28]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d077      	beq.n	8007b50 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007a60:	69fb      	ldr	r3, [r7, #28]
 8007a62:	005a      	lsls	r2, r3, #1
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	085b      	lsrs	r3, r3, #1
 8007a6a:	441a      	add	r2, r3
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a74:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a76:	69bb      	ldr	r3, [r7, #24]
 8007a78:	2b0f      	cmp	r3, #15
 8007a7a:	d916      	bls.n	8007aaa <UART_SetConfig+0x4a6>
 8007a7c:	69bb      	ldr	r3, [r7, #24]
 8007a7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a82:	d212      	bcs.n	8007aaa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	f023 030f 	bic.w	r3, r3, #15
 8007a8c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a8e:	69bb      	ldr	r3, [r7, #24]
 8007a90:	085b      	lsrs	r3, r3, #1
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	f003 0307 	and.w	r3, r3, #7
 8007a98:	b29a      	uxth	r2, r3
 8007a9a:	8afb      	ldrh	r3, [r7, #22]
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	8afa      	ldrh	r2, [r7, #22]
 8007aa6:	60da      	str	r2, [r3, #12]
 8007aa8:	e052      	b.n	8007b50 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007ab0:	e04e      	b.n	8007b50 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ab2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ab6:	2b08      	cmp	r3, #8
 8007ab8:	d827      	bhi.n	8007b0a <UART_SetConfig+0x506>
 8007aba:	a201      	add	r2, pc, #4	; (adr r2, 8007ac0 <UART_SetConfig+0x4bc>)
 8007abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac0:	08007ae5 	.word	0x08007ae5
 8007ac4:	08007aed 	.word	0x08007aed
 8007ac8:	08007af5 	.word	0x08007af5
 8007acc:	08007b0b 	.word	0x08007b0b
 8007ad0:	08007afb 	.word	0x08007afb
 8007ad4:	08007b0b 	.word	0x08007b0b
 8007ad8:	08007b0b 	.word	0x08007b0b
 8007adc:	08007b0b 	.word	0x08007b0b
 8007ae0:	08007b03 	.word	0x08007b03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ae4:	f7fd f9cc 	bl	8004e80 <HAL_RCC_GetPCLK1Freq>
 8007ae8:	61f8      	str	r0, [r7, #28]
        break;
 8007aea:	e014      	b.n	8007b16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007aec:	f7fd f9de 	bl	8004eac <HAL_RCC_GetPCLK2Freq>
 8007af0:	61f8      	str	r0, [r7, #28]
        break;
 8007af2:	e010      	b.n	8007b16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007af4:	4b1e      	ldr	r3, [pc, #120]	; (8007b70 <UART_SetConfig+0x56c>)
 8007af6:	61fb      	str	r3, [r7, #28]
        break;
 8007af8:	e00d      	b.n	8007b16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007afa:	f7fd f929 	bl	8004d50 <HAL_RCC_GetSysClockFreq>
 8007afe:	61f8      	str	r0, [r7, #28]
        break;
 8007b00:	e009      	b.n	8007b16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b06:	61fb      	str	r3, [r7, #28]
        break;
 8007b08:	e005      	b.n	8007b16 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007b14:	bf00      	nop
    }

    if (pclk != 0U)
 8007b16:	69fb      	ldr	r3, [r7, #28]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d019      	beq.n	8007b50 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	085a      	lsrs	r2, r3, #1
 8007b22:	69fb      	ldr	r3, [r7, #28]
 8007b24:	441a      	add	r2, r3
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b2e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b30:	69bb      	ldr	r3, [r7, #24]
 8007b32:	2b0f      	cmp	r3, #15
 8007b34:	d909      	bls.n	8007b4a <UART_SetConfig+0x546>
 8007b36:	69bb      	ldr	r3, [r7, #24]
 8007b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b3c:	d205      	bcs.n	8007b4a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b3e:	69bb      	ldr	r3, [r7, #24]
 8007b40:	b29a      	uxth	r2, r3
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	60da      	str	r2, [r3, #12]
 8007b48:	e002      	b.n	8007b50 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2200      	movs	r2, #0
 8007b54:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007b5c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3728      	adds	r7, #40	; 0x28
 8007b64:	46bd      	mov	sp, r7
 8007b66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b6a:	bf00      	nop
 8007b6c:	40008000 	.word	0x40008000
 8007b70:	00f42400 	.word	0x00f42400

08007b74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b80:	f003 0301 	and.w	r3, r3, #1
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d00a      	beq.n	8007b9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	430a      	orrs	r2, r1
 8007b9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba2:	f003 0302 	and.w	r3, r3, #2
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d00a      	beq.n	8007bc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	430a      	orrs	r2, r1
 8007bbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc4:	f003 0304 	and.w	r3, r3, #4
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00a      	beq.n	8007be2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	430a      	orrs	r2, r1
 8007be0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be6:	f003 0308 	and.w	r3, r3, #8
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00a      	beq.n	8007c04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	430a      	orrs	r2, r1
 8007c02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c08:	f003 0310 	and.w	r3, r3, #16
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d00a      	beq.n	8007c26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	430a      	orrs	r2, r1
 8007c24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2a:	f003 0320 	and.w	r3, r3, #32
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00a      	beq.n	8007c48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	430a      	orrs	r2, r1
 8007c46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d01a      	beq.n	8007c8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	430a      	orrs	r2, r1
 8007c68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c72:	d10a      	bne.n	8007c8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	430a      	orrs	r2, r1
 8007c88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d00a      	beq.n	8007cac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	430a      	orrs	r2, r1
 8007caa:	605a      	str	r2, [r3, #4]
  }
}
 8007cac:	bf00      	nop
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b086      	sub	sp, #24
 8007cbc:	af02      	add	r7, sp, #8
 8007cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007cc8:	f7fa f9ac 	bl	8002024 <HAL_GetTick>
 8007ccc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f003 0308 	and.w	r3, r3, #8
 8007cd8:	2b08      	cmp	r3, #8
 8007cda:	d10e      	bne.n	8007cfa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ce0:	9300      	str	r3, [sp, #0]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 f82d 	bl	8007d4a <UART_WaitOnFlagUntilTimeout>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d001      	beq.n	8007cfa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cf6:	2303      	movs	r3, #3
 8007cf8:	e023      	b.n	8007d42 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 0304 	and.w	r3, r3, #4
 8007d04:	2b04      	cmp	r3, #4
 8007d06:	d10e      	bne.n	8007d26 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d0c:	9300      	str	r3, [sp, #0]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2200      	movs	r2, #0
 8007d12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 f817 	bl	8007d4a <UART_WaitOnFlagUntilTimeout>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d001      	beq.n	8007d26 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d22:	2303      	movs	r3, #3
 8007d24:	e00d      	b.n	8007d42 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2220      	movs	r2, #32
 8007d2a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2220      	movs	r2, #32
 8007d30:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007d40:	2300      	movs	r3, #0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3710      	adds	r7, #16
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}

08007d4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d4a:	b580      	push	{r7, lr}
 8007d4c:	b09c      	sub	sp, #112	; 0x70
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	60f8      	str	r0, [r7, #12]
 8007d52:	60b9      	str	r1, [r7, #8]
 8007d54:	603b      	str	r3, [r7, #0]
 8007d56:	4613      	mov	r3, r2
 8007d58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d5a:	e0a5      	b.n	8007ea8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d62:	f000 80a1 	beq.w	8007ea8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d66:	f7fa f95d 	bl	8002024 <HAL_GetTick>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	1ad3      	subs	r3, r2, r3
 8007d70:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d302      	bcc.n	8007d7c <UART_WaitOnFlagUntilTimeout+0x32>
 8007d76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d13e      	bne.n	8007dfa <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d84:	e853 3f00 	ldrex	r3, [r3]
 8007d88:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007d8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d90:	667b      	str	r3, [r7, #100]	; 0x64
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	461a      	mov	r2, r3
 8007d98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d9c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007da0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007da2:	e841 2300 	strex	r3, r2, [r1]
 8007da6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007da8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d1e6      	bne.n	8007d7c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	3308      	adds	r3, #8
 8007db4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007db8:	e853 3f00 	ldrex	r3, [r3]
 8007dbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc0:	f023 0301 	bic.w	r3, r3, #1
 8007dc4:	663b      	str	r3, [r7, #96]	; 0x60
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	3308      	adds	r3, #8
 8007dcc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007dce:	64ba      	str	r2, [r7, #72]	; 0x48
 8007dd0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007dd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007dd6:	e841 2300 	strex	r3, r2, [r1]
 8007dda:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007ddc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d1e5      	bne.n	8007dae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2220      	movs	r2, #32
 8007de6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2220      	movs	r2, #32
 8007dec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007df6:	2303      	movs	r3, #3
 8007df8:	e067      	b.n	8007eca <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f003 0304 	and.w	r3, r3, #4
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d04f      	beq.n	8007ea8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	69db      	ldr	r3, [r3, #28]
 8007e0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e16:	d147      	bne.n	8007ea8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e20:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e2a:	e853 3f00 	ldrex	r3, [r3]
 8007e2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e32:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007e36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e40:	637b      	str	r3, [r7, #52]	; 0x34
 8007e42:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e48:	e841 2300 	strex	r3, r2, [r1]
 8007e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1e6      	bne.n	8007e22 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	3308      	adds	r3, #8
 8007e5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	e853 3f00 	ldrex	r3, [r3]
 8007e62:	613b      	str	r3, [r7, #16]
   return(result);
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	f023 0301 	bic.w	r3, r3, #1
 8007e6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	3308      	adds	r3, #8
 8007e72:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007e74:	623a      	str	r2, [r7, #32]
 8007e76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e78:	69f9      	ldr	r1, [r7, #28]
 8007e7a:	6a3a      	ldr	r2, [r7, #32]
 8007e7c:	e841 2300 	strex	r3, r2, [r1]
 8007e80:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e82:	69bb      	ldr	r3, [r7, #24]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d1e5      	bne.n	8007e54 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2220      	movs	r2, #32
 8007e8c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2220      	movs	r2, #32
 8007e92:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2220      	movs	r2, #32
 8007e98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007ea4:	2303      	movs	r3, #3
 8007ea6:	e010      	b.n	8007eca <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	69da      	ldr	r2, [r3, #28]
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	4013      	ands	r3, r2
 8007eb2:	68ba      	ldr	r2, [r7, #8]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	bf0c      	ite	eq
 8007eb8:	2301      	moveq	r3, #1
 8007eba:	2300      	movne	r3, #0
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	79fb      	ldrb	r3, [r7, #7]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	f43f af4a 	beq.w	8007d5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ec8:	2300      	movs	r3, #0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3770      	adds	r7, #112	; 0x70
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}

08007ed2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ed2:	b480      	push	{r7}
 8007ed4:	b095      	sub	sp, #84	; 0x54
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ee2:	e853 3f00 	ldrex	r3, [r3]
 8007ee6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007eee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ef8:	643b      	str	r3, [r7, #64]	; 0x40
 8007efa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007efc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007efe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f00:	e841 2300 	strex	r3, r2, [r1]
 8007f04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d1e6      	bne.n	8007eda <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	3308      	adds	r3, #8
 8007f12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f14:	6a3b      	ldr	r3, [r7, #32]
 8007f16:	e853 3f00 	ldrex	r3, [r3]
 8007f1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f1c:	69fb      	ldr	r3, [r7, #28]
 8007f1e:	f023 0301 	bic.w	r3, r3, #1
 8007f22:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	3308      	adds	r3, #8
 8007f2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f34:	e841 2300 	strex	r3, r2, [r1]
 8007f38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d1e5      	bne.n	8007f0c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d118      	bne.n	8007f7a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	e853 3f00 	ldrex	r3, [r3]
 8007f54:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	f023 0310 	bic.w	r3, r3, #16
 8007f5c:	647b      	str	r3, [r7, #68]	; 0x44
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	461a      	mov	r2, r3
 8007f64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f66:	61bb      	str	r3, [r7, #24]
 8007f68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6a:	6979      	ldr	r1, [r7, #20]
 8007f6c:	69ba      	ldr	r2, [r7, #24]
 8007f6e:	e841 2300 	strex	r3, r2, [r1]
 8007f72:	613b      	str	r3, [r7, #16]
   return(result);
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d1e6      	bne.n	8007f48 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2220      	movs	r2, #32
 8007f7e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007f8c:	bf00      	nop
 8007f8e:	3754      	adds	r7, #84	; 0x54
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr

08007f98 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007fb6:	68f8      	ldr	r0, [r7, #12]
 8007fb8:	f7ff fb0e 	bl	80075d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fbc:	bf00      	nop
 8007fbe:	3710      	adds	r7, #16
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b088      	sub	sp, #32
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	e853 3f00 	ldrex	r3, [r3]
 8007fd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fe0:	61fb      	str	r3, [r7, #28]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	61bb      	str	r3, [r7, #24]
 8007fec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fee:	6979      	ldr	r1, [r7, #20]
 8007ff0:	69ba      	ldr	r2, [r7, #24]
 8007ff2:	e841 2300 	strex	r3, r2, [r1]
 8007ff6:	613b      	str	r3, [r7, #16]
   return(result);
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d1e6      	bne.n	8007fcc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2220      	movs	r2, #32
 8008002:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f7ff fada 	bl	80075c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008010:	bf00      	nop
 8008012:	3720      	adds	r7, #32
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008020:	bf00      	nop
 8008022:	370c      	adds	r7, #12
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <__errno>:
 800802c:	4b01      	ldr	r3, [pc, #4]	; (8008034 <__errno+0x8>)
 800802e:	6818      	ldr	r0, [r3, #0]
 8008030:	4770      	bx	lr
 8008032:	bf00      	nop
 8008034:	20000014 	.word	0x20000014

08008038 <__libc_init_array>:
 8008038:	b570      	push	{r4, r5, r6, lr}
 800803a:	4d0d      	ldr	r5, [pc, #52]	; (8008070 <__libc_init_array+0x38>)
 800803c:	4c0d      	ldr	r4, [pc, #52]	; (8008074 <__libc_init_array+0x3c>)
 800803e:	1b64      	subs	r4, r4, r5
 8008040:	10a4      	asrs	r4, r4, #2
 8008042:	2600      	movs	r6, #0
 8008044:	42a6      	cmp	r6, r4
 8008046:	d109      	bne.n	800805c <__libc_init_array+0x24>
 8008048:	4d0b      	ldr	r5, [pc, #44]	; (8008078 <__libc_init_array+0x40>)
 800804a:	4c0c      	ldr	r4, [pc, #48]	; (800807c <__libc_init_array+0x44>)
 800804c:	f004 fd1a 	bl	800ca84 <_init>
 8008050:	1b64      	subs	r4, r4, r5
 8008052:	10a4      	asrs	r4, r4, #2
 8008054:	2600      	movs	r6, #0
 8008056:	42a6      	cmp	r6, r4
 8008058:	d105      	bne.n	8008066 <__libc_init_array+0x2e>
 800805a:	bd70      	pop	{r4, r5, r6, pc}
 800805c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008060:	4798      	blx	r3
 8008062:	3601      	adds	r6, #1
 8008064:	e7ee      	b.n	8008044 <__libc_init_array+0xc>
 8008066:	f855 3b04 	ldr.w	r3, [r5], #4
 800806a:	4798      	blx	r3
 800806c:	3601      	adds	r6, #1
 800806e:	e7f2      	b.n	8008056 <__libc_init_array+0x1e>
 8008070:	0800d08c 	.word	0x0800d08c
 8008074:	0800d08c 	.word	0x0800d08c
 8008078:	0800d08c 	.word	0x0800d08c
 800807c:	0800d090 	.word	0x0800d090

08008080 <memcpy>:
 8008080:	440a      	add	r2, r1
 8008082:	4291      	cmp	r1, r2
 8008084:	f100 33ff 	add.w	r3, r0, #4294967295
 8008088:	d100      	bne.n	800808c <memcpy+0xc>
 800808a:	4770      	bx	lr
 800808c:	b510      	push	{r4, lr}
 800808e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008092:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008096:	4291      	cmp	r1, r2
 8008098:	d1f9      	bne.n	800808e <memcpy+0xe>
 800809a:	bd10      	pop	{r4, pc}

0800809c <memset>:
 800809c:	4402      	add	r2, r0
 800809e:	4603      	mov	r3, r0
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d100      	bne.n	80080a6 <memset+0xa>
 80080a4:	4770      	bx	lr
 80080a6:	f803 1b01 	strb.w	r1, [r3], #1
 80080aa:	e7f9      	b.n	80080a0 <memset+0x4>

080080ac <__cvt>:
 80080ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080b0:	ec55 4b10 	vmov	r4, r5, d0
 80080b4:	2d00      	cmp	r5, #0
 80080b6:	460e      	mov	r6, r1
 80080b8:	4619      	mov	r1, r3
 80080ba:	462b      	mov	r3, r5
 80080bc:	bfbb      	ittet	lt
 80080be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80080c2:	461d      	movlt	r5, r3
 80080c4:	2300      	movge	r3, #0
 80080c6:	232d      	movlt	r3, #45	; 0x2d
 80080c8:	700b      	strb	r3, [r1, #0]
 80080ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80080d0:	4691      	mov	r9, r2
 80080d2:	f023 0820 	bic.w	r8, r3, #32
 80080d6:	bfbc      	itt	lt
 80080d8:	4622      	movlt	r2, r4
 80080da:	4614      	movlt	r4, r2
 80080dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80080e0:	d005      	beq.n	80080ee <__cvt+0x42>
 80080e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80080e6:	d100      	bne.n	80080ea <__cvt+0x3e>
 80080e8:	3601      	adds	r6, #1
 80080ea:	2102      	movs	r1, #2
 80080ec:	e000      	b.n	80080f0 <__cvt+0x44>
 80080ee:	2103      	movs	r1, #3
 80080f0:	ab03      	add	r3, sp, #12
 80080f2:	9301      	str	r3, [sp, #4]
 80080f4:	ab02      	add	r3, sp, #8
 80080f6:	9300      	str	r3, [sp, #0]
 80080f8:	ec45 4b10 	vmov	d0, r4, r5
 80080fc:	4653      	mov	r3, sl
 80080fe:	4632      	mov	r2, r6
 8008100:	f001 fefa 	bl	8009ef8 <_dtoa_r>
 8008104:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008108:	4607      	mov	r7, r0
 800810a:	d102      	bne.n	8008112 <__cvt+0x66>
 800810c:	f019 0f01 	tst.w	r9, #1
 8008110:	d022      	beq.n	8008158 <__cvt+0xac>
 8008112:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008116:	eb07 0906 	add.w	r9, r7, r6
 800811a:	d110      	bne.n	800813e <__cvt+0x92>
 800811c:	783b      	ldrb	r3, [r7, #0]
 800811e:	2b30      	cmp	r3, #48	; 0x30
 8008120:	d10a      	bne.n	8008138 <__cvt+0x8c>
 8008122:	2200      	movs	r2, #0
 8008124:	2300      	movs	r3, #0
 8008126:	4620      	mov	r0, r4
 8008128:	4629      	mov	r1, r5
 800812a:	f7f8 fccd 	bl	8000ac8 <__aeabi_dcmpeq>
 800812e:	b918      	cbnz	r0, 8008138 <__cvt+0x8c>
 8008130:	f1c6 0601 	rsb	r6, r6, #1
 8008134:	f8ca 6000 	str.w	r6, [sl]
 8008138:	f8da 3000 	ldr.w	r3, [sl]
 800813c:	4499      	add	r9, r3
 800813e:	2200      	movs	r2, #0
 8008140:	2300      	movs	r3, #0
 8008142:	4620      	mov	r0, r4
 8008144:	4629      	mov	r1, r5
 8008146:	f7f8 fcbf 	bl	8000ac8 <__aeabi_dcmpeq>
 800814a:	b108      	cbz	r0, 8008150 <__cvt+0xa4>
 800814c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008150:	2230      	movs	r2, #48	; 0x30
 8008152:	9b03      	ldr	r3, [sp, #12]
 8008154:	454b      	cmp	r3, r9
 8008156:	d307      	bcc.n	8008168 <__cvt+0xbc>
 8008158:	9b03      	ldr	r3, [sp, #12]
 800815a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800815c:	1bdb      	subs	r3, r3, r7
 800815e:	4638      	mov	r0, r7
 8008160:	6013      	str	r3, [r2, #0]
 8008162:	b004      	add	sp, #16
 8008164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008168:	1c59      	adds	r1, r3, #1
 800816a:	9103      	str	r1, [sp, #12]
 800816c:	701a      	strb	r2, [r3, #0]
 800816e:	e7f0      	b.n	8008152 <__cvt+0xa6>

08008170 <__exponent>:
 8008170:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008172:	4603      	mov	r3, r0
 8008174:	2900      	cmp	r1, #0
 8008176:	bfb8      	it	lt
 8008178:	4249      	neglt	r1, r1
 800817a:	f803 2b02 	strb.w	r2, [r3], #2
 800817e:	bfb4      	ite	lt
 8008180:	222d      	movlt	r2, #45	; 0x2d
 8008182:	222b      	movge	r2, #43	; 0x2b
 8008184:	2909      	cmp	r1, #9
 8008186:	7042      	strb	r2, [r0, #1]
 8008188:	dd2a      	ble.n	80081e0 <__exponent+0x70>
 800818a:	f10d 0407 	add.w	r4, sp, #7
 800818e:	46a4      	mov	ip, r4
 8008190:	270a      	movs	r7, #10
 8008192:	46a6      	mov	lr, r4
 8008194:	460a      	mov	r2, r1
 8008196:	fb91 f6f7 	sdiv	r6, r1, r7
 800819a:	fb07 1516 	mls	r5, r7, r6, r1
 800819e:	3530      	adds	r5, #48	; 0x30
 80081a0:	2a63      	cmp	r2, #99	; 0x63
 80081a2:	f104 34ff 	add.w	r4, r4, #4294967295
 80081a6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80081aa:	4631      	mov	r1, r6
 80081ac:	dcf1      	bgt.n	8008192 <__exponent+0x22>
 80081ae:	3130      	adds	r1, #48	; 0x30
 80081b0:	f1ae 0502 	sub.w	r5, lr, #2
 80081b4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80081b8:	1c44      	adds	r4, r0, #1
 80081ba:	4629      	mov	r1, r5
 80081bc:	4561      	cmp	r1, ip
 80081be:	d30a      	bcc.n	80081d6 <__exponent+0x66>
 80081c0:	f10d 0209 	add.w	r2, sp, #9
 80081c4:	eba2 020e 	sub.w	r2, r2, lr
 80081c8:	4565      	cmp	r5, ip
 80081ca:	bf88      	it	hi
 80081cc:	2200      	movhi	r2, #0
 80081ce:	4413      	add	r3, r2
 80081d0:	1a18      	subs	r0, r3, r0
 80081d2:	b003      	add	sp, #12
 80081d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081da:	f804 2f01 	strb.w	r2, [r4, #1]!
 80081de:	e7ed      	b.n	80081bc <__exponent+0x4c>
 80081e0:	2330      	movs	r3, #48	; 0x30
 80081e2:	3130      	adds	r1, #48	; 0x30
 80081e4:	7083      	strb	r3, [r0, #2]
 80081e6:	70c1      	strb	r1, [r0, #3]
 80081e8:	1d03      	adds	r3, r0, #4
 80081ea:	e7f1      	b.n	80081d0 <__exponent+0x60>

080081ec <_printf_float>:
 80081ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f0:	ed2d 8b02 	vpush	{d8}
 80081f4:	b08d      	sub	sp, #52	; 0x34
 80081f6:	460c      	mov	r4, r1
 80081f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80081fc:	4616      	mov	r6, r2
 80081fe:	461f      	mov	r7, r3
 8008200:	4605      	mov	r5, r0
 8008202:	f003 f98d 	bl	800b520 <_localeconv_r>
 8008206:	f8d0 a000 	ldr.w	sl, [r0]
 800820a:	4650      	mov	r0, sl
 800820c:	f7f7 ffe0 	bl	80001d0 <strlen>
 8008210:	2300      	movs	r3, #0
 8008212:	930a      	str	r3, [sp, #40]	; 0x28
 8008214:	6823      	ldr	r3, [r4, #0]
 8008216:	9305      	str	r3, [sp, #20]
 8008218:	f8d8 3000 	ldr.w	r3, [r8]
 800821c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008220:	3307      	adds	r3, #7
 8008222:	f023 0307 	bic.w	r3, r3, #7
 8008226:	f103 0208 	add.w	r2, r3, #8
 800822a:	f8c8 2000 	str.w	r2, [r8]
 800822e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008232:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008236:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800823a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800823e:	9307      	str	r3, [sp, #28]
 8008240:	f8cd 8018 	str.w	r8, [sp, #24]
 8008244:	ee08 0a10 	vmov	s16, r0
 8008248:	4b9f      	ldr	r3, [pc, #636]	; (80084c8 <_printf_float+0x2dc>)
 800824a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800824e:	f04f 32ff 	mov.w	r2, #4294967295
 8008252:	f7f8 fc6b 	bl	8000b2c <__aeabi_dcmpun>
 8008256:	bb88      	cbnz	r0, 80082bc <_printf_float+0xd0>
 8008258:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800825c:	4b9a      	ldr	r3, [pc, #616]	; (80084c8 <_printf_float+0x2dc>)
 800825e:	f04f 32ff 	mov.w	r2, #4294967295
 8008262:	f7f8 fc45 	bl	8000af0 <__aeabi_dcmple>
 8008266:	bb48      	cbnz	r0, 80082bc <_printf_float+0xd0>
 8008268:	2200      	movs	r2, #0
 800826a:	2300      	movs	r3, #0
 800826c:	4640      	mov	r0, r8
 800826e:	4649      	mov	r1, r9
 8008270:	f7f8 fc34 	bl	8000adc <__aeabi_dcmplt>
 8008274:	b110      	cbz	r0, 800827c <_printf_float+0x90>
 8008276:	232d      	movs	r3, #45	; 0x2d
 8008278:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800827c:	4b93      	ldr	r3, [pc, #588]	; (80084cc <_printf_float+0x2e0>)
 800827e:	4894      	ldr	r0, [pc, #592]	; (80084d0 <_printf_float+0x2e4>)
 8008280:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008284:	bf94      	ite	ls
 8008286:	4698      	movls	r8, r3
 8008288:	4680      	movhi	r8, r0
 800828a:	2303      	movs	r3, #3
 800828c:	6123      	str	r3, [r4, #16]
 800828e:	9b05      	ldr	r3, [sp, #20]
 8008290:	f023 0204 	bic.w	r2, r3, #4
 8008294:	6022      	str	r2, [r4, #0]
 8008296:	f04f 0900 	mov.w	r9, #0
 800829a:	9700      	str	r7, [sp, #0]
 800829c:	4633      	mov	r3, r6
 800829e:	aa0b      	add	r2, sp, #44	; 0x2c
 80082a0:	4621      	mov	r1, r4
 80082a2:	4628      	mov	r0, r5
 80082a4:	f000 f9d8 	bl	8008658 <_printf_common>
 80082a8:	3001      	adds	r0, #1
 80082aa:	f040 8090 	bne.w	80083ce <_printf_float+0x1e2>
 80082ae:	f04f 30ff 	mov.w	r0, #4294967295
 80082b2:	b00d      	add	sp, #52	; 0x34
 80082b4:	ecbd 8b02 	vpop	{d8}
 80082b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082bc:	4642      	mov	r2, r8
 80082be:	464b      	mov	r3, r9
 80082c0:	4640      	mov	r0, r8
 80082c2:	4649      	mov	r1, r9
 80082c4:	f7f8 fc32 	bl	8000b2c <__aeabi_dcmpun>
 80082c8:	b140      	cbz	r0, 80082dc <_printf_float+0xf0>
 80082ca:	464b      	mov	r3, r9
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	bfbc      	itt	lt
 80082d0:	232d      	movlt	r3, #45	; 0x2d
 80082d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80082d6:	487f      	ldr	r0, [pc, #508]	; (80084d4 <_printf_float+0x2e8>)
 80082d8:	4b7f      	ldr	r3, [pc, #508]	; (80084d8 <_printf_float+0x2ec>)
 80082da:	e7d1      	b.n	8008280 <_printf_float+0x94>
 80082dc:	6863      	ldr	r3, [r4, #4]
 80082de:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80082e2:	9206      	str	r2, [sp, #24]
 80082e4:	1c5a      	adds	r2, r3, #1
 80082e6:	d13f      	bne.n	8008368 <_printf_float+0x17c>
 80082e8:	2306      	movs	r3, #6
 80082ea:	6063      	str	r3, [r4, #4]
 80082ec:	9b05      	ldr	r3, [sp, #20]
 80082ee:	6861      	ldr	r1, [r4, #4]
 80082f0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80082f4:	2300      	movs	r3, #0
 80082f6:	9303      	str	r3, [sp, #12]
 80082f8:	ab0a      	add	r3, sp, #40	; 0x28
 80082fa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80082fe:	ab09      	add	r3, sp, #36	; 0x24
 8008300:	ec49 8b10 	vmov	d0, r8, r9
 8008304:	9300      	str	r3, [sp, #0]
 8008306:	6022      	str	r2, [r4, #0]
 8008308:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800830c:	4628      	mov	r0, r5
 800830e:	f7ff fecd 	bl	80080ac <__cvt>
 8008312:	9b06      	ldr	r3, [sp, #24]
 8008314:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008316:	2b47      	cmp	r3, #71	; 0x47
 8008318:	4680      	mov	r8, r0
 800831a:	d108      	bne.n	800832e <_printf_float+0x142>
 800831c:	1cc8      	adds	r0, r1, #3
 800831e:	db02      	blt.n	8008326 <_printf_float+0x13a>
 8008320:	6863      	ldr	r3, [r4, #4]
 8008322:	4299      	cmp	r1, r3
 8008324:	dd41      	ble.n	80083aa <_printf_float+0x1be>
 8008326:	f1ab 0b02 	sub.w	fp, fp, #2
 800832a:	fa5f fb8b 	uxtb.w	fp, fp
 800832e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008332:	d820      	bhi.n	8008376 <_printf_float+0x18a>
 8008334:	3901      	subs	r1, #1
 8008336:	465a      	mov	r2, fp
 8008338:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800833c:	9109      	str	r1, [sp, #36]	; 0x24
 800833e:	f7ff ff17 	bl	8008170 <__exponent>
 8008342:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008344:	1813      	adds	r3, r2, r0
 8008346:	2a01      	cmp	r2, #1
 8008348:	4681      	mov	r9, r0
 800834a:	6123      	str	r3, [r4, #16]
 800834c:	dc02      	bgt.n	8008354 <_printf_float+0x168>
 800834e:	6822      	ldr	r2, [r4, #0]
 8008350:	07d2      	lsls	r2, r2, #31
 8008352:	d501      	bpl.n	8008358 <_printf_float+0x16c>
 8008354:	3301      	adds	r3, #1
 8008356:	6123      	str	r3, [r4, #16]
 8008358:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800835c:	2b00      	cmp	r3, #0
 800835e:	d09c      	beq.n	800829a <_printf_float+0xae>
 8008360:	232d      	movs	r3, #45	; 0x2d
 8008362:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008366:	e798      	b.n	800829a <_printf_float+0xae>
 8008368:	9a06      	ldr	r2, [sp, #24]
 800836a:	2a47      	cmp	r2, #71	; 0x47
 800836c:	d1be      	bne.n	80082ec <_printf_float+0x100>
 800836e:	2b00      	cmp	r3, #0
 8008370:	d1bc      	bne.n	80082ec <_printf_float+0x100>
 8008372:	2301      	movs	r3, #1
 8008374:	e7b9      	b.n	80082ea <_printf_float+0xfe>
 8008376:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800837a:	d118      	bne.n	80083ae <_printf_float+0x1c2>
 800837c:	2900      	cmp	r1, #0
 800837e:	6863      	ldr	r3, [r4, #4]
 8008380:	dd0b      	ble.n	800839a <_printf_float+0x1ae>
 8008382:	6121      	str	r1, [r4, #16]
 8008384:	b913      	cbnz	r3, 800838c <_printf_float+0x1a0>
 8008386:	6822      	ldr	r2, [r4, #0]
 8008388:	07d0      	lsls	r0, r2, #31
 800838a:	d502      	bpl.n	8008392 <_printf_float+0x1a6>
 800838c:	3301      	adds	r3, #1
 800838e:	440b      	add	r3, r1
 8008390:	6123      	str	r3, [r4, #16]
 8008392:	65a1      	str	r1, [r4, #88]	; 0x58
 8008394:	f04f 0900 	mov.w	r9, #0
 8008398:	e7de      	b.n	8008358 <_printf_float+0x16c>
 800839a:	b913      	cbnz	r3, 80083a2 <_printf_float+0x1b6>
 800839c:	6822      	ldr	r2, [r4, #0]
 800839e:	07d2      	lsls	r2, r2, #31
 80083a0:	d501      	bpl.n	80083a6 <_printf_float+0x1ba>
 80083a2:	3302      	adds	r3, #2
 80083a4:	e7f4      	b.n	8008390 <_printf_float+0x1a4>
 80083a6:	2301      	movs	r3, #1
 80083a8:	e7f2      	b.n	8008390 <_printf_float+0x1a4>
 80083aa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80083ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083b0:	4299      	cmp	r1, r3
 80083b2:	db05      	blt.n	80083c0 <_printf_float+0x1d4>
 80083b4:	6823      	ldr	r3, [r4, #0]
 80083b6:	6121      	str	r1, [r4, #16]
 80083b8:	07d8      	lsls	r0, r3, #31
 80083ba:	d5ea      	bpl.n	8008392 <_printf_float+0x1a6>
 80083bc:	1c4b      	adds	r3, r1, #1
 80083be:	e7e7      	b.n	8008390 <_printf_float+0x1a4>
 80083c0:	2900      	cmp	r1, #0
 80083c2:	bfd4      	ite	le
 80083c4:	f1c1 0202 	rsble	r2, r1, #2
 80083c8:	2201      	movgt	r2, #1
 80083ca:	4413      	add	r3, r2
 80083cc:	e7e0      	b.n	8008390 <_printf_float+0x1a4>
 80083ce:	6823      	ldr	r3, [r4, #0]
 80083d0:	055a      	lsls	r2, r3, #21
 80083d2:	d407      	bmi.n	80083e4 <_printf_float+0x1f8>
 80083d4:	6923      	ldr	r3, [r4, #16]
 80083d6:	4642      	mov	r2, r8
 80083d8:	4631      	mov	r1, r6
 80083da:	4628      	mov	r0, r5
 80083dc:	47b8      	blx	r7
 80083de:	3001      	adds	r0, #1
 80083e0:	d12c      	bne.n	800843c <_printf_float+0x250>
 80083e2:	e764      	b.n	80082ae <_printf_float+0xc2>
 80083e4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80083e8:	f240 80e0 	bls.w	80085ac <_printf_float+0x3c0>
 80083ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80083f0:	2200      	movs	r2, #0
 80083f2:	2300      	movs	r3, #0
 80083f4:	f7f8 fb68 	bl	8000ac8 <__aeabi_dcmpeq>
 80083f8:	2800      	cmp	r0, #0
 80083fa:	d034      	beq.n	8008466 <_printf_float+0x27a>
 80083fc:	4a37      	ldr	r2, [pc, #220]	; (80084dc <_printf_float+0x2f0>)
 80083fe:	2301      	movs	r3, #1
 8008400:	4631      	mov	r1, r6
 8008402:	4628      	mov	r0, r5
 8008404:	47b8      	blx	r7
 8008406:	3001      	adds	r0, #1
 8008408:	f43f af51 	beq.w	80082ae <_printf_float+0xc2>
 800840c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008410:	429a      	cmp	r2, r3
 8008412:	db02      	blt.n	800841a <_printf_float+0x22e>
 8008414:	6823      	ldr	r3, [r4, #0]
 8008416:	07d8      	lsls	r0, r3, #31
 8008418:	d510      	bpl.n	800843c <_printf_float+0x250>
 800841a:	ee18 3a10 	vmov	r3, s16
 800841e:	4652      	mov	r2, sl
 8008420:	4631      	mov	r1, r6
 8008422:	4628      	mov	r0, r5
 8008424:	47b8      	blx	r7
 8008426:	3001      	adds	r0, #1
 8008428:	f43f af41 	beq.w	80082ae <_printf_float+0xc2>
 800842c:	f04f 0800 	mov.w	r8, #0
 8008430:	f104 091a 	add.w	r9, r4, #26
 8008434:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008436:	3b01      	subs	r3, #1
 8008438:	4543      	cmp	r3, r8
 800843a:	dc09      	bgt.n	8008450 <_printf_float+0x264>
 800843c:	6823      	ldr	r3, [r4, #0]
 800843e:	079b      	lsls	r3, r3, #30
 8008440:	f100 8105 	bmi.w	800864e <_printf_float+0x462>
 8008444:	68e0      	ldr	r0, [r4, #12]
 8008446:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008448:	4298      	cmp	r0, r3
 800844a:	bfb8      	it	lt
 800844c:	4618      	movlt	r0, r3
 800844e:	e730      	b.n	80082b2 <_printf_float+0xc6>
 8008450:	2301      	movs	r3, #1
 8008452:	464a      	mov	r2, r9
 8008454:	4631      	mov	r1, r6
 8008456:	4628      	mov	r0, r5
 8008458:	47b8      	blx	r7
 800845a:	3001      	adds	r0, #1
 800845c:	f43f af27 	beq.w	80082ae <_printf_float+0xc2>
 8008460:	f108 0801 	add.w	r8, r8, #1
 8008464:	e7e6      	b.n	8008434 <_printf_float+0x248>
 8008466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008468:	2b00      	cmp	r3, #0
 800846a:	dc39      	bgt.n	80084e0 <_printf_float+0x2f4>
 800846c:	4a1b      	ldr	r2, [pc, #108]	; (80084dc <_printf_float+0x2f0>)
 800846e:	2301      	movs	r3, #1
 8008470:	4631      	mov	r1, r6
 8008472:	4628      	mov	r0, r5
 8008474:	47b8      	blx	r7
 8008476:	3001      	adds	r0, #1
 8008478:	f43f af19 	beq.w	80082ae <_printf_float+0xc2>
 800847c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008480:	4313      	orrs	r3, r2
 8008482:	d102      	bne.n	800848a <_printf_float+0x29e>
 8008484:	6823      	ldr	r3, [r4, #0]
 8008486:	07d9      	lsls	r1, r3, #31
 8008488:	d5d8      	bpl.n	800843c <_printf_float+0x250>
 800848a:	ee18 3a10 	vmov	r3, s16
 800848e:	4652      	mov	r2, sl
 8008490:	4631      	mov	r1, r6
 8008492:	4628      	mov	r0, r5
 8008494:	47b8      	blx	r7
 8008496:	3001      	adds	r0, #1
 8008498:	f43f af09 	beq.w	80082ae <_printf_float+0xc2>
 800849c:	f04f 0900 	mov.w	r9, #0
 80084a0:	f104 0a1a 	add.w	sl, r4, #26
 80084a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084a6:	425b      	negs	r3, r3
 80084a8:	454b      	cmp	r3, r9
 80084aa:	dc01      	bgt.n	80084b0 <_printf_float+0x2c4>
 80084ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084ae:	e792      	b.n	80083d6 <_printf_float+0x1ea>
 80084b0:	2301      	movs	r3, #1
 80084b2:	4652      	mov	r2, sl
 80084b4:	4631      	mov	r1, r6
 80084b6:	4628      	mov	r0, r5
 80084b8:	47b8      	blx	r7
 80084ba:	3001      	adds	r0, #1
 80084bc:	f43f aef7 	beq.w	80082ae <_printf_float+0xc2>
 80084c0:	f109 0901 	add.w	r9, r9, #1
 80084c4:	e7ee      	b.n	80084a4 <_printf_float+0x2b8>
 80084c6:	bf00      	nop
 80084c8:	7fefffff 	.word	0x7fefffff
 80084cc:	0800cbdc 	.word	0x0800cbdc
 80084d0:	0800cbe0 	.word	0x0800cbe0
 80084d4:	0800cbe8 	.word	0x0800cbe8
 80084d8:	0800cbe4 	.word	0x0800cbe4
 80084dc:	0800cbec 	.word	0x0800cbec
 80084e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80084e4:	429a      	cmp	r2, r3
 80084e6:	bfa8      	it	ge
 80084e8:	461a      	movge	r2, r3
 80084ea:	2a00      	cmp	r2, #0
 80084ec:	4691      	mov	r9, r2
 80084ee:	dc37      	bgt.n	8008560 <_printf_float+0x374>
 80084f0:	f04f 0b00 	mov.w	fp, #0
 80084f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80084f8:	f104 021a 	add.w	r2, r4, #26
 80084fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80084fe:	9305      	str	r3, [sp, #20]
 8008500:	eba3 0309 	sub.w	r3, r3, r9
 8008504:	455b      	cmp	r3, fp
 8008506:	dc33      	bgt.n	8008570 <_printf_float+0x384>
 8008508:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800850c:	429a      	cmp	r2, r3
 800850e:	db3b      	blt.n	8008588 <_printf_float+0x39c>
 8008510:	6823      	ldr	r3, [r4, #0]
 8008512:	07da      	lsls	r2, r3, #31
 8008514:	d438      	bmi.n	8008588 <_printf_float+0x39c>
 8008516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008518:	9a05      	ldr	r2, [sp, #20]
 800851a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800851c:	1a9a      	subs	r2, r3, r2
 800851e:	eba3 0901 	sub.w	r9, r3, r1
 8008522:	4591      	cmp	r9, r2
 8008524:	bfa8      	it	ge
 8008526:	4691      	movge	r9, r2
 8008528:	f1b9 0f00 	cmp.w	r9, #0
 800852c:	dc35      	bgt.n	800859a <_printf_float+0x3ae>
 800852e:	f04f 0800 	mov.w	r8, #0
 8008532:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008536:	f104 0a1a 	add.w	sl, r4, #26
 800853a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800853e:	1a9b      	subs	r3, r3, r2
 8008540:	eba3 0309 	sub.w	r3, r3, r9
 8008544:	4543      	cmp	r3, r8
 8008546:	f77f af79 	ble.w	800843c <_printf_float+0x250>
 800854a:	2301      	movs	r3, #1
 800854c:	4652      	mov	r2, sl
 800854e:	4631      	mov	r1, r6
 8008550:	4628      	mov	r0, r5
 8008552:	47b8      	blx	r7
 8008554:	3001      	adds	r0, #1
 8008556:	f43f aeaa 	beq.w	80082ae <_printf_float+0xc2>
 800855a:	f108 0801 	add.w	r8, r8, #1
 800855e:	e7ec      	b.n	800853a <_printf_float+0x34e>
 8008560:	4613      	mov	r3, r2
 8008562:	4631      	mov	r1, r6
 8008564:	4642      	mov	r2, r8
 8008566:	4628      	mov	r0, r5
 8008568:	47b8      	blx	r7
 800856a:	3001      	adds	r0, #1
 800856c:	d1c0      	bne.n	80084f0 <_printf_float+0x304>
 800856e:	e69e      	b.n	80082ae <_printf_float+0xc2>
 8008570:	2301      	movs	r3, #1
 8008572:	4631      	mov	r1, r6
 8008574:	4628      	mov	r0, r5
 8008576:	9205      	str	r2, [sp, #20]
 8008578:	47b8      	blx	r7
 800857a:	3001      	adds	r0, #1
 800857c:	f43f ae97 	beq.w	80082ae <_printf_float+0xc2>
 8008580:	9a05      	ldr	r2, [sp, #20]
 8008582:	f10b 0b01 	add.w	fp, fp, #1
 8008586:	e7b9      	b.n	80084fc <_printf_float+0x310>
 8008588:	ee18 3a10 	vmov	r3, s16
 800858c:	4652      	mov	r2, sl
 800858e:	4631      	mov	r1, r6
 8008590:	4628      	mov	r0, r5
 8008592:	47b8      	blx	r7
 8008594:	3001      	adds	r0, #1
 8008596:	d1be      	bne.n	8008516 <_printf_float+0x32a>
 8008598:	e689      	b.n	80082ae <_printf_float+0xc2>
 800859a:	9a05      	ldr	r2, [sp, #20]
 800859c:	464b      	mov	r3, r9
 800859e:	4442      	add	r2, r8
 80085a0:	4631      	mov	r1, r6
 80085a2:	4628      	mov	r0, r5
 80085a4:	47b8      	blx	r7
 80085a6:	3001      	adds	r0, #1
 80085a8:	d1c1      	bne.n	800852e <_printf_float+0x342>
 80085aa:	e680      	b.n	80082ae <_printf_float+0xc2>
 80085ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085ae:	2a01      	cmp	r2, #1
 80085b0:	dc01      	bgt.n	80085b6 <_printf_float+0x3ca>
 80085b2:	07db      	lsls	r3, r3, #31
 80085b4:	d538      	bpl.n	8008628 <_printf_float+0x43c>
 80085b6:	2301      	movs	r3, #1
 80085b8:	4642      	mov	r2, r8
 80085ba:	4631      	mov	r1, r6
 80085bc:	4628      	mov	r0, r5
 80085be:	47b8      	blx	r7
 80085c0:	3001      	adds	r0, #1
 80085c2:	f43f ae74 	beq.w	80082ae <_printf_float+0xc2>
 80085c6:	ee18 3a10 	vmov	r3, s16
 80085ca:	4652      	mov	r2, sl
 80085cc:	4631      	mov	r1, r6
 80085ce:	4628      	mov	r0, r5
 80085d0:	47b8      	blx	r7
 80085d2:	3001      	adds	r0, #1
 80085d4:	f43f ae6b 	beq.w	80082ae <_printf_float+0xc2>
 80085d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80085dc:	2200      	movs	r2, #0
 80085de:	2300      	movs	r3, #0
 80085e0:	f7f8 fa72 	bl	8000ac8 <__aeabi_dcmpeq>
 80085e4:	b9d8      	cbnz	r0, 800861e <_printf_float+0x432>
 80085e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085e8:	f108 0201 	add.w	r2, r8, #1
 80085ec:	3b01      	subs	r3, #1
 80085ee:	4631      	mov	r1, r6
 80085f0:	4628      	mov	r0, r5
 80085f2:	47b8      	blx	r7
 80085f4:	3001      	adds	r0, #1
 80085f6:	d10e      	bne.n	8008616 <_printf_float+0x42a>
 80085f8:	e659      	b.n	80082ae <_printf_float+0xc2>
 80085fa:	2301      	movs	r3, #1
 80085fc:	4652      	mov	r2, sl
 80085fe:	4631      	mov	r1, r6
 8008600:	4628      	mov	r0, r5
 8008602:	47b8      	blx	r7
 8008604:	3001      	adds	r0, #1
 8008606:	f43f ae52 	beq.w	80082ae <_printf_float+0xc2>
 800860a:	f108 0801 	add.w	r8, r8, #1
 800860e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008610:	3b01      	subs	r3, #1
 8008612:	4543      	cmp	r3, r8
 8008614:	dcf1      	bgt.n	80085fa <_printf_float+0x40e>
 8008616:	464b      	mov	r3, r9
 8008618:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800861c:	e6dc      	b.n	80083d8 <_printf_float+0x1ec>
 800861e:	f04f 0800 	mov.w	r8, #0
 8008622:	f104 0a1a 	add.w	sl, r4, #26
 8008626:	e7f2      	b.n	800860e <_printf_float+0x422>
 8008628:	2301      	movs	r3, #1
 800862a:	4642      	mov	r2, r8
 800862c:	e7df      	b.n	80085ee <_printf_float+0x402>
 800862e:	2301      	movs	r3, #1
 8008630:	464a      	mov	r2, r9
 8008632:	4631      	mov	r1, r6
 8008634:	4628      	mov	r0, r5
 8008636:	47b8      	blx	r7
 8008638:	3001      	adds	r0, #1
 800863a:	f43f ae38 	beq.w	80082ae <_printf_float+0xc2>
 800863e:	f108 0801 	add.w	r8, r8, #1
 8008642:	68e3      	ldr	r3, [r4, #12]
 8008644:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008646:	1a5b      	subs	r3, r3, r1
 8008648:	4543      	cmp	r3, r8
 800864a:	dcf0      	bgt.n	800862e <_printf_float+0x442>
 800864c:	e6fa      	b.n	8008444 <_printf_float+0x258>
 800864e:	f04f 0800 	mov.w	r8, #0
 8008652:	f104 0919 	add.w	r9, r4, #25
 8008656:	e7f4      	b.n	8008642 <_printf_float+0x456>

08008658 <_printf_common>:
 8008658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800865c:	4616      	mov	r6, r2
 800865e:	4699      	mov	r9, r3
 8008660:	688a      	ldr	r2, [r1, #8]
 8008662:	690b      	ldr	r3, [r1, #16]
 8008664:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008668:	4293      	cmp	r3, r2
 800866a:	bfb8      	it	lt
 800866c:	4613      	movlt	r3, r2
 800866e:	6033      	str	r3, [r6, #0]
 8008670:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008674:	4607      	mov	r7, r0
 8008676:	460c      	mov	r4, r1
 8008678:	b10a      	cbz	r2, 800867e <_printf_common+0x26>
 800867a:	3301      	adds	r3, #1
 800867c:	6033      	str	r3, [r6, #0]
 800867e:	6823      	ldr	r3, [r4, #0]
 8008680:	0699      	lsls	r1, r3, #26
 8008682:	bf42      	ittt	mi
 8008684:	6833      	ldrmi	r3, [r6, #0]
 8008686:	3302      	addmi	r3, #2
 8008688:	6033      	strmi	r3, [r6, #0]
 800868a:	6825      	ldr	r5, [r4, #0]
 800868c:	f015 0506 	ands.w	r5, r5, #6
 8008690:	d106      	bne.n	80086a0 <_printf_common+0x48>
 8008692:	f104 0a19 	add.w	sl, r4, #25
 8008696:	68e3      	ldr	r3, [r4, #12]
 8008698:	6832      	ldr	r2, [r6, #0]
 800869a:	1a9b      	subs	r3, r3, r2
 800869c:	42ab      	cmp	r3, r5
 800869e:	dc26      	bgt.n	80086ee <_printf_common+0x96>
 80086a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80086a4:	1e13      	subs	r3, r2, #0
 80086a6:	6822      	ldr	r2, [r4, #0]
 80086a8:	bf18      	it	ne
 80086aa:	2301      	movne	r3, #1
 80086ac:	0692      	lsls	r2, r2, #26
 80086ae:	d42b      	bmi.n	8008708 <_printf_common+0xb0>
 80086b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086b4:	4649      	mov	r1, r9
 80086b6:	4638      	mov	r0, r7
 80086b8:	47c0      	blx	r8
 80086ba:	3001      	adds	r0, #1
 80086bc:	d01e      	beq.n	80086fc <_printf_common+0xa4>
 80086be:	6823      	ldr	r3, [r4, #0]
 80086c0:	68e5      	ldr	r5, [r4, #12]
 80086c2:	6832      	ldr	r2, [r6, #0]
 80086c4:	f003 0306 	and.w	r3, r3, #6
 80086c8:	2b04      	cmp	r3, #4
 80086ca:	bf08      	it	eq
 80086cc:	1aad      	subeq	r5, r5, r2
 80086ce:	68a3      	ldr	r3, [r4, #8]
 80086d0:	6922      	ldr	r2, [r4, #16]
 80086d2:	bf0c      	ite	eq
 80086d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086d8:	2500      	movne	r5, #0
 80086da:	4293      	cmp	r3, r2
 80086dc:	bfc4      	itt	gt
 80086de:	1a9b      	subgt	r3, r3, r2
 80086e0:	18ed      	addgt	r5, r5, r3
 80086e2:	2600      	movs	r6, #0
 80086e4:	341a      	adds	r4, #26
 80086e6:	42b5      	cmp	r5, r6
 80086e8:	d11a      	bne.n	8008720 <_printf_common+0xc8>
 80086ea:	2000      	movs	r0, #0
 80086ec:	e008      	b.n	8008700 <_printf_common+0xa8>
 80086ee:	2301      	movs	r3, #1
 80086f0:	4652      	mov	r2, sl
 80086f2:	4649      	mov	r1, r9
 80086f4:	4638      	mov	r0, r7
 80086f6:	47c0      	blx	r8
 80086f8:	3001      	adds	r0, #1
 80086fa:	d103      	bne.n	8008704 <_printf_common+0xac>
 80086fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008704:	3501      	adds	r5, #1
 8008706:	e7c6      	b.n	8008696 <_printf_common+0x3e>
 8008708:	18e1      	adds	r1, r4, r3
 800870a:	1c5a      	adds	r2, r3, #1
 800870c:	2030      	movs	r0, #48	; 0x30
 800870e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008712:	4422      	add	r2, r4
 8008714:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008718:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800871c:	3302      	adds	r3, #2
 800871e:	e7c7      	b.n	80086b0 <_printf_common+0x58>
 8008720:	2301      	movs	r3, #1
 8008722:	4622      	mov	r2, r4
 8008724:	4649      	mov	r1, r9
 8008726:	4638      	mov	r0, r7
 8008728:	47c0      	blx	r8
 800872a:	3001      	adds	r0, #1
 800872c:	d0e6      	beq.n	80086fc <_printf_common+0xa4>
 800872e:	3601      	adds	r6, #1
 8008730:	e7d9      	b.n	80086e6 <_printf_common+0x8e>
	...

08008734 <_printf_i>:
 8008734:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008738:	7e0f      	ldrb	r7, [r1, #24]
 800873a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800873c:	2f78      	cmp	r7, #120	; 0x78
 800873e:	4691      	mov	r9, r2
 8008740:	4680      	mov	r8, r0
 8008742:	460c      	mov	r4, r1
 8008744:	469a      	mov	sl, r3
 8008746:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800874a:	d807      	bhi.n	800875c <_printf_i+0x28>
 800874c:	2f62      	cmp	r7, #98	; 0x62
 800874e:	d80a      	bhi.n	8008766 <_printf_i+0x32>
 8008750:	2f00      	cmp	r7, #0
 8008752:	f000 80d8 	beq.w	8008906 <_printf_i+0x1d2>
 8008756:	2f58      	cmp	r7, #88	; 0x58
 8008758:	f000 80a3 	beq.w	80088a2 <_printf_i+0x16e>
 800875c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008760:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008764:	e03a      	b.n	80087dc <_printf_i+0xa8>
 8008766:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800876a:	2b15      	cmp	r3, #21
 800876c:	d8f6      	bhi.n	800875c <_printf_i+0x28>
 800876e:	a101      	add	r1, pc, #4	; (adr r1, 8008774 <_printf_i+0x40>)
 8008770:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008774:	080087cd 	.word	0x080087cd
 8008778:	080087e1 	.word	0x080087e1
 800877c:	0800875d 	.word	0x0800875d
 8008780:	0800875d 	.word	0x0800875d
 8008784:	0800875d 	.word	0x0800875d
 8008788:	0800875d 	.word	0x0800875d
 800878c:	080087e1 	.word	0x080087e1
 8008790:	0800875d 	.word	0x0800875d
 8008794:	0800875d 	.word	0x0800875d
 8008798:	0800875d 	.word	0x0800875d
 800879c:	0800875d 	.word	0x0800875d
 80087a0:	080088ed 	.word	0x080088ed
 80087a4:	08008811 	.word	0x08008811
 80087a8:	080088cf 	.word	0x080088cf
 80087ac:	0800875d 	.word	0x0800875d
 80087b0:	0800875d 	.word	0x0800875d
 80087b4:	0800890f 	.word	0x0800890f
 80087b8:	0800875d 	.word	0x0800875d
 80087bc:	08008811 	.word	0x08008811
 80087c0:	0800875d 	.word	0x0800875d
 80087c4:	0800875d 	.word	0x0800875d
 80087c8:	080088d7 	.word	0x080088d7
 80087cc:	682b      	ldr	r3, [r5, #0]
 80087ce:	1d1a      	adds	r2, r3, #4
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	602a      	str	r2, [r5, #0]
 80087d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087dc:	2301      	movs	r3, #1
 80087de:	e0a3      	b.n	8008928 <_printf_i+0x1f4>
 80087e0:	6820      	ldr	r0, [r4, #0]
 80087e2:	6829      	ldr	r1, [r5, #0]
 80087e4:	0606      	lsls	r6, r0, #24
 80087e6:	f101 0304 	add.w	r3, r1, #4
 80087ea:	d50a      	bpl.n	8008802 <_printf_i+0xce>
 80087ec:	680e      	ldr	r6, [r1, #0]
 80087ee:	602b      	str	r3, [r5, #0]
 80087f0:	2e00      	cmp	r6, #0
 80087f2:	da03      	bge.n	80087fc <_printf_i+0xc8>
 80087f4:	232d      	movs	r3, #45	; 0x2d
 80087f6:	4276      	negs	r6, r6
 80087f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087fc:	485e      	ldr	r0, [pc, #376]	; (8008978 <_printf_i+0x244>)
 80087fe:	230a      	movs	r3, #10
 8008800:	e019      	b.n	8008836 <_printf_i+0x102>
 8008802:	680e      	ldr	r6, [r1, #0]
 8008804:	602b      	str	r3, [r5, #0]
 8008806:	f010 0f40 	tst.w	r0, #64	; 0x40
 800880a:	bf18      	it	ne
 800880c:	b236      	sxthne	r6, r6
 800880e:	e7ef      	b.n	80087f0 <_printf_i+0xbc>
 8008810:	682b      	ldr	r3, [r5, #0]
 8008812:	6820      	ldr	r0, [r4, #0]
 8008814:	1d19      	adds	r1, r3, #4
 8008816:	6029      	str	r1, [r5, #0]
 8008818:	0601      	lsls	r1, r0, #24
 800881a:	d501      	bpl.n	8008820 <_printf_i+0xec>
 800881c:	681e      	ldr	r6, [r3, #0]
 800881e:	e002      	b.n	8008826 <_printf_i+0xf2>
 8008820:	0646      	lsls	r6, r0, #25
 8008822:	d5fb      	bpl.n	800881c <_printf_i+0xe8>
 8008824:	881e      	ldrh	r6, [r3, #0]
 8008826:	4854      	ldr	r0, [pc, #336]	; (8008978 <_printf_i+0x244>)
 8008828:	2f6f      	cmp	r7, #111	; 0x6f
 800882a:	bf0c      	ite	eq
 800882c:	2308      	moveq	r3, #8
 800882e:	230a      	movne	r3, #10
 8008830:	2100      	movs	r1, #0
 8008832:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008836:	6865      	ldr	r5, [r4, #4]
 8008838:	60a5      	str	r5, [r4, #8]
 800883a:	2d00      	cmp	r5, #0
 800883c:	bfa2      	ittt	ge
 800883e:	6821      	ldrge	r1, [r4, #0]
 8008840:	f021 0104 	bicge.w	r1, r1, #4
 8008844:	6021      	strge	r1, [r4, #0]
 8008846:	b90e      	cbnz	r6, 800884c <_printf_i+0x118>
 8008848:	2d00      	cmp	r5, #0
 800884a:	d04d      	beq.n	80088e8 <_printf_i+0x1b4>
 800884c:	4615      	mov	r5, r2
 800884e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008852:	fb03 6711 	mls	r7, r3, r1, r6
 8008856:	5dc7      	ldrb	r7, [r0, r7]
 8008858:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800885c:	4637      	mov	r7, r6
 800885e:	42bb      	cmp	r3, r7
 8008860:	460e      	mov	r6, r1
 8008862:	d9f4      	bls.n	800884e <_printf_i+0x11a>
 8008864:	2b08      	cmp	r3, #8
 8008866:	d10b      	bne.n	8008880 <_printf_i+0x14c>
 8008868:	6823      	ldr	r3, [r4, #0]
 800886a:	07de      	lsls	r6, r3, #31
 800886c:	d508      	bpl.n	8008880 <_printf_i+0x14c>
 800886e:	6923      	ldr	r3, [r4, #16]
 8008870:	6861      	ldr	r1, [r4, #4]
 8008872:	4299      	cmp	r1, r3
 8008874:	bfde      	ittt	le
 8008876:	2330      	movle	r3, #48	; 0x30
 8008878:	f805 3c01 	strble.w	r3, [r5, #-1]
 800887c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008880:	1b52      	subs	r2, r2, r5
 8008882:	6122      	str	r2, [r4, #16]
 8008884:	f8cd a000 	str.w	sl, [sp]
 8008888:	464b      	mov	r3, r9
 800888a:	aa03      	add	r2, sp, #12
 800888c:	4621      	mov	r1, r4
 800888e:	4640      	mov	r0, r8
 8008890:	f7ff fee2 	bl	8008658 <_printf_common>
 8008894:	3001      	adds	r0, #1
 8008896:	d14c      	bne.n	8008932 <_printf_i+0x1fe>
 8008898:	f04f 30ff 	mov.w	r0, #4294967295
 800889c:	b004      	add	sp, #16
 800889e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088a2:	4835      	ldr	r0, [pc, #212]	; (8008978 <_printf_i+0x244>)
 80088a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80088a8:	6829      	ldr	r1, [r5, #0]
 80088aa:	6823      	ldr	r3, [r4, #0]
 80088ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80088b0:	6029      	str	r1, [r5, #0]
 80088b2:	061d      	lsls	r5, r3, #24
 80088b4:	d514      	bpl.n	80088e0 <_printf_i+0x1ac>
 80088b6:	07df      	lsls	r7, r3, #31
 80088b8:	bf44      	itt	mi
 80088ba:	f043 0320 	orrmi.w	r3, r3, #32
 80088be:	6023      	strmi	r3, [r4, #0]
 80088c0:	b91e      	cbnz	r6, 80088ca <_printf_i+0x196>
 80088c2:	6823      	ldr	r3, [r4, #0]
 80088c4:	f023 0320 	bic.w	r3, r3, #32
 80088c8:	6023      	str	r3, [r4, #0]
 80088ca:	2310      	movs	r3, #16
 80088cc:	e7b0      	b.n	8008830 <_printf_i+0xfc>
 80088ce:	6823      	ldr	r3, [r4, #0]
 80088d0:	f043 0320 	orr.w	r3, r3, #32
 80088d4:	6023      	str	r3, [r4, #0]
 80088d6:	2378      	movs	r3, #120	; 0x78
 80088d8:	4828      	ldr	r0, [pc, #160]	; (800897c <_printf_i+0x248>)
 80088da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80088de:	e7e3      	b.n	80088a8 <_printf_i+0x174>
 80088e0:	0659      	lsls	r1, r3, #25
 80088e2:	bf48      	it	mi
 80088e4:	b2b6      	uxthmi	r6, r6
 80088e6:	e7e6      	b.n	80088b6 <_printf_i+0x182>
 80088e8:	4615      	mov	r5, r2
 80088ea:	e7bb      	b.n	8008864 <_printf_i+0x130>
 80088ec:	682b      	ldr	r3, [r5, #0]
 80088ee:	6826      	ldr	r6, [r4, #0]
 80088f0:	6961      	ldr	r1, [r4, #20]
 80088f2:	1d18      	adds	r0, r3, #4
 80088f4:	6028      	str	r0, [r5, #0]
 80088f6:	0635      	lsls	r5, r6, #24
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	d501      	bpl.n	8008900 <_printf_i+0x1cc>
 80088fc:	6019      	str	r1, [r3, #0]
 80088fe:	e002      	b.n	8008906 <_printf_i+0x1d2>
 8008900:	0670      	lsls	r0, r6, #25
 8008902:	d5fb      	bpl.n	80088fc <_printf_i+0x1c8>
 8008904:	8019      	strh	r1, [r3, #0]
 8008906:	2300      	movs	r3, #0
 8008908:	6123      	str	r3, [r4, #16]
 800890a:	4615      	mov	r5, r2
 800890c:	e7ba      	b.n	8008884 <_printf_i+0x150>
 800890e:	682b      	ldr	r3, [r5, #0]
 8008910:	1d1a      	adds	r2, r3, #4
 8008912:	602a      	str	r2, [r5, #0]
 8008914:	681d      	ldr	r5, [r3, #0]
 8008916:	6862      	ldr	r2, [r4, #4]
 8008918:	2100      	movs	r1, #0
 800891a:	4628      	mov	r0, r5
 800891c:	f7f7 fc60 	bl	80001e0 <memchr>
 8008920:	b108      	cbz	r0, 8008926 <_printf_i+0x1f2>
 8008922:	1b40      	subs	r0, r0, r5
 8008924:	6060      	str	r0, [r4, #4]
 8008926:	6863      	ldr	r3, [r4, #4]
 8008928:	6123      	str	r3, [r4, #16]
 800892a:	2300      	movs	r3, #0
 800892c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008930:	e7a8      	b.n	8008884 <_printf_i+0x150>
 8008932:	6923      	ldr	r3, [r4, #16]
 8008934:	462a      	mov	r2, r5
 8008936:	4649      	mov	r1, r9
 8008938:	4640      	mov	r0, r8
 800893a:	47d0      	blx	sl
 800893c:	3001      	adds	r0, #1
 800893e:	d0ab      	beq.n	8008898 <_printf_i+0x164>
 8008940:	6823      	ldr	r3, [r4, #0]
 8008942:	079b      	lsls	r3, r3, #30
 8008944:	d413      	bmi.n	800896e <_printf_i+0x23a>
 8008946:	68e0      	ldr	r0, [r4, #12]
 8008948:	9b03      	ldr	r3, [sp, #12]
 800894a:	4298      	cmp	r0, r3
 800894c:	bfb8      	it	lt
 800894e:	4618      	movlt	r0, r3
 8008950:	e7a4      	b.n	800889c <_printf_i+0x168>
 8008952:	2301      	movs	r3, #1
 8008954:	4632      	mov	r2, r6
 8008956:	4649      	mov	r1, r9
 8008958:	4640      	mov	r0, r8
 800895a:	47d0      	blx	sl
 800895c:	3001      	adds	r0, #1
 800895e:	d09b      	beq.n	8008898 <_printf_i+0x164>
 8008960:	3501      	adds	r5, #1
 8008962:	68e3      	ldr	r3, [r4, #12]
 8008964:	9903      	ldr	r1, [sp, #12]
 8008966:	1a5b      	subs	r3, r3, r1
 8008968:	42ab      	cmp	r3, r5
 800896a:	dcf2      	bgt.n	8008952 <_printf_i+0x21e>
 800896c:	e7eb      	b.n	8008946 <_printf_i+0x212>
 800896e:	2500      	movs	r5, #0
 8008970:	f104 0619 	add.w	r6, r4, #25
 8008974:	e7f5      	b.n	8008962 <_printf_i+0x22e>
 8008976:	bf00      	nop
 8008978:	0800cbee 	.word	0x0800cbee
 800897c:	0800cbff 	.word	0x0800cbff

08008980 <_scanf_float>:
 8008980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008984:	b087      	sub	sp, #28
 8008986:	4617      	mov	r7, r2
 8008988:	9303      	str	r3, [sp, #12]
 800898a:	688b      	ldr	r3, [r1, #8]
 800898c:	1e5a      	subs	r2, r3, #1
 800898e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008992:	bf83      	ittte	hi
 8008994:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008998:	195b      	addhi	r3, r3, r5
 800899a:	9302      	strhi	r3, [sp, #8]
 800899c:	2300      	movls	r3, #0
 800899e:	bf86      	itte	hi
 80089a0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80089a4:	608b      	strhi	r3, [r1, #8]
 80089a6:	9302      	strls	r3, [sp, #8]
 80089a8:	680b      	ldr	r3, [r1, #0]
 80089aa:	468b      	mov	fp, r1
 80089ac:	2500      	movs	r5, #0
 80089ae:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80089b2:	f84b 3b1c 	str.w	r3, [fp], #28
 80089b6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80089ba:	4680      	mov	r8, r0
 80089bc:	460c      	mov	r4, r1
 80089be:	465e      	mov	r6, fp
 80089c0:	46aa      	mov	sl, r5
 80089c2:	46a9      	mov	r9, r5
 80089c4:	9501      	str	r5, [sp, #4]
 80089c6:	68a2      	ldr	r2, [r4, #8]
 80089c8:	b152      	cbz	r2, 80089e0 <_scanf_float+0x60>
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	2b4e      	cmp	r3, #78	; 0x4e
 80089d0:	d864      	bhi.n	8008a9c <_scanf_float+0x11c>
 80089d2:	2b40      	cmp	r3, #64	; 0x40
 80089d4:	d83c      	bhi.n	8008a50 <_scanf_float+0xd0>
 80089d6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80089da:	b2c8      	uxtb	r0, r1
 80089dc:	280e      	cmp	r0, #14
 80089de:	d93a      	bls.n	8008a56 <_scanf_float+0xd6>
 80089e0:	f1b9 0f00 	cmp.w	r9, #0
 80089e4:	d003      	beq.n	80089ee <_scanf_float+0x6e>
 80089e6:	6823      	ldr	r3, [r4, #0]
 80089e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089ec:	6023      	str	r3, [r4, #0]
 80089ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80089f2:	f1ba 0f01 	cmp.w	sl, #1
 80089f6:	f200 8113 	bhi.w	8008c20 <_scanf_float+0x2a0>
 80089fa:	455e      	cmp	r6, fp
 80089fc:	f200 8105 	bhi.w	8008c0a <_scanf_float+0x28a>
 8008a00:	2501      	movs	r5, #1
 8008a02:	4628      	mov	r0, r5
 8008a04:	b007      	add	sp, #28
 8008a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a0a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008a0e:	2a0d      	cmp	r2, #13
 8008a10:	d8e6      	bhi.n	80089e0 <_scanf_float+0x60>
 8008a12:	a101      	add	r1, pc, #4	; (adr r1, 8008a18 <_scanf_float+0x98>)
 8008a14:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008a18:	08008b57 	.word	0x08008b57
 8008a1c:	080089e1 	.word	0x080089e1
 8008a20:	080089e1 	.word	0x080089e1
 8008a24:	080089e1 	.word	0x080089e1
 8008a28:	08008bb7 	.word	0x08008bb7
 8008a2c:	08008b8f 	.word	0x08008b8f
 8008a30:	080089e1 	.word	0x080089e1
 8008a34:	080089e1 	.word	0x080089e1
 8008a38:	08008b65 	.word	0x08008b65
 8008a3c:	080089e1 	.word	0x080089e1
 8008a40:	080089e1 	.word	0x080089e1
 8008a44:	080089e1 	.word	0x080089e1
 8008a48:	080089e1 	.word	0x080089e1
 8008a4c:	08008b1d 	.word	0x08008b1d
 8008a50:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008a54:	e7db      	b.n	8008a0e <_scanf_float+0x8e>
 8008a56:	290e      	cmp	r1, #14
 8008a58:	d8c2      	bhi.n	80089e0 <_scanf_float+0x60>
 8008a5a:	a001      	add	r0, pc, #4	; (adr r0, 8008a60 <_scanf_float+0xe0>)
 8008a5c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008a60:	08008b0f 	.word	0x08008b0f
 8008a64:	080089e1 	.word	0x080089e1
 8008a68:	08008b0f 	.word	0x08008b0f
 8008a6c:	08008ba3 	.word	0x08008ba3
 8008a70:	080089e1 	.word	0x080089e1
 8008a74:	08008abd 	.word	0x08008abd
 8008a78:	08008af9 	.word	0x08008af9
 8008a7c:	08008af9 	.word	0x08008af9
 8008a80:	08008af9 	.word	0x08008af9
 8008a84:	08008af9 	.word	0x08008af9
 8008a88:	08008af9 	.word	0x08008af9
 8008a8c:	08008af9 	.word	0x08008af9
 8008a90:	08008af9 	.word	0x08008af9
 8008a94:	08008af9 	.word	0x08008af9
 8008a98:	08008af9 	.word	0x08008af9
 8008a9c:	2b6e      	cmp	r3, #110	; 0x6e
 8008a9e:	d809      	bhi.n	8008ab4 <_scanf_float+0x134>
 8008aa0:	2b60      	cmp	r3, #96	; 0x60
 8008aa2:	d8b2      	bhi.n	8008a0a <_scanf_float+0x8a>
 8008aa4:	2b54      	cmp	r3, #84	; 0x54
 8008aa6:	d077      	beq.n	8008b98 <_scanf_float+0x218>
 8008aa8:	2b59      	cmp	r3, #89	; 0x59
 8008aaa:	d199      	bne.n	80089e0 <_scanf_float+0x60>
 8008aac:	2d07      	cmp	r5, #7
 8008aae:	d197      	bne.n	80089e0 <_scanf_float+0x60>
 8008ab0:	2508      	movs	r5, #8
 8008ab2:	e029      	b.n	8008b08 <_scanf_float+0x188>
 8008ab4:	2b74      	cmp	r3, #116	; 0x74
 8008ab6:	d06f      	beq.n	8008b98 <_scanf_float+0x218>
 8008ab8:	2b79      	cmp	r3, #121	; 0x79
 8008aba:	e7f6      	b.n	8008aaa <_scanf_float+0x12a>
 8008abc:	6821      	ldr	r1, [r4, #0]
 8008abe:	05c8      	lsls	r0, r1, #23
 8008ac0:	d51a      	bpl.n	8008af8 <_scanf_float+0x178>
 8008ac2:	9b02      	ldr	r3, [sp, #8]
 8008ac4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008ac8:	6021      	str	r1, [r4, #0]
 8008aca:	f109 0901 	add.w	r9, r9, #1
 8008ace:	b11b      	cbz	r3, 8008ad8 <_scanf_float+0x158>
 8008ad0:	3b01      	subs	r3, #1
 8008ad2:	3201      	adds	r2, #1
 8008ad4:	9302      	str	r3, [sp, #8]
 8008ad6:	60a2      	str	r2, [r4, #8]
 8008ad8:	68a3      	ldr	r3, [r4, #8]
 8008ada:	3b01      	subs	r3, #1
 8008adc:	60a3      	str	r3, [r4, #8]
 8008ade:	6923      	ldr	r3, [r4, #16]
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	6123      	str	r3, [r4, #16]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	3b01      	subs	r3, #1
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	607b      	str	r3, [r7, #4]
 8008aec:	f340 8084 	ble.w	8008bf8 <_scanf_float+0x278>
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	3301      	adds	r3, #1
 8008af4:	603b      	str	r3, [r7, #0]
 8008af6:	e766      	b.n	80089c6 <_scanf_float+0x46>
 8008af8:	eb1a 0f05 	cmn.w	sl, r5
 8008afc:	f47f af70 	bne.w	80089e0 <_scanf_float+0x60>
 8008b00:	6822      	ldr	r2, [r4, #0]
 8008b02:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008b06:	6022      	str	r2, [r4, #0]
 8008b08:	f806 3b01 	strb.w	r3, [r6], #1
 8008b0c:	e7e4      	b.n	8008ad8 <_scanf_float+0x158>
 8008b0e:	6822      	ldr	r2, [r4, #0]
 8008b10:	0610      	lsls	r0, r2, #24
 8008b12:	f57f af65 	bpl.w	80089e0 <_scanf_float+0x60>
 8008b16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b1a:	e7f4      	b.n	8008b06 <_scanf_float+0x186>
 8008b1c:	f1ba 0f00 	cmp.w	sl, #0
 8008b20:	d10e      	bne.n	8008b40 <_scanf_float+0x1c0>
 8008b22:	f1b9 0f00 	cmp.w	r9, #0
 8008b26:	d10e      	bne.n	8008b46 <_scanf_float+0x1c6>
 8008b28:	6822      	ldr	r2, [r4, #0]
 8008b2a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008b2e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008b32:	d108      	bne.n	8008b46 <_scanf_float+0x1c6>
 8008b34:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008b38:	6022      	str	r2, [r4, #0]
 8008b3a:	f04f 0a01 	mov.w	sl, #1
 8008b3e:	e7e3      	b.n	8008b08 <_scanf_float+0x188>
 8008b40:	f1ba 0f02 	cmp.w	sl, #2
 8008b44:	d055      	beq.n	8008bf2 <_scanf_float+0x272>
 8008b46:	2d01      	cmp	r5, #1
 8008b48:	d002      	beq.n	8008b50 <_scanf_float+0x1d0>
 8008b4a:	2d04      	cmp	r5, #4
 8008b4c:	f47f af48 	bne.w	80089e0 <_scanf_float+0x60>
 8008b50:	3501      	adds	r5, #1
 8008b52:	b2ed      	uxtb	r5, r5
 8008b54:	e7d8      	b.n	8008b08 <_scanf_float+0x188>
 8008b56:	f1ba 0f01 	cmp.w	sl, #1
 8008b5a:	f47f af41 	bne.w	80089e0 <_scanf_float+0x60>
 8008b5e:	f04f 0a02 	mov.w	sl, #2
 8008b62:	e7d1      	b.n	8008b08 <_scanf_float+0x188>
 8008b64:	b97d      	cbnz	r5, 8008b86 <_scanf_float+0x206>
 8008b66:	f1b9 0f00 	cmp.w	r9, #0
 8008b6a:	f47f af3c 	bne.w	80089e6 <_scanf_float+0x66>
 8008b6e:	6822      	ldr	r2, [r4, #0]
 8008b70:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008b74:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008b78:	f47f af39 	bne.w	80089ee <_scanf_float+0x6e>
 8008b7c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008b80:	6022      	str	r2, [r4, #0]
 8008b82:	2501      	movs	r5, #1
 8008b84:	e7c0      	b.n	8008b08 <_scanf_float+0x188>
 8008b86:	2d03      	cmp	r5, #3
 8008b88:	d0e2      	beq.n	8008b50 <_scanf_float+0x1d0>
 8008b8a:	2d05      	cmp	r5, #5
 8008b8c:	e7de      	b.n	8008b4c <_scanf_float+0x1cc>
 8008b8e:	2d02      	cmp	r5, #2
 8008b90:	f47f af26 	bne.w	80089e0 <_scanf_float+0x60>
 8008b94:	2503      	movs	r5, #3
 8008b96:	e7b7      	b.n	8008b08 <_scanf_float+0x188>
 8008b98:	2d06      	cmp	r5, #6
 8008b9a:	f47f af21 	bne.w	80089e0 <_scanf_float+0x60>
 8008b9e:	2507      	movs	r5, #7
 8008ba0:	e7b2      	b.n	8008b08 <_scanf_float+0x188>
 8008ba2:	6822      	ldr	r2, [r4, #0]
 8008ba4:	0591      	lsls	r1, r2, #22
 8008ba6:	f57f af1b 	bpl.w	80089e0 <_scanf_float+0x60>
 8008baa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008bae:	6022      	str	r2, [r4, #0]
 8008bb0:	f8cd 9004 	str.w	r9, [sp, #4]
 8008bb4:	e7a8      	b.n	8008b08 <_scanf_float+0x188>
 8008bb6:	6822      	ldr	r2, [r4, #0]
 8008bb8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008bbc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008bc0:	d006      	beq.n	8008bd0 <_scanf_float+0x250>
 8008bc2:	0550      	lsls	r0, r2, #21
 8008bc4:	f57f af0c 	bpl.w	80089e0 <_scanf_float+0x60>
 8008bc8:	f1b9 0f00 	cmp.w	r9, #0
 8008bcc:	f43f af0f 	beq.w	80089ee <_scanf_float+0x6e>
 8008bd0:	0591      	lsls	r1, r2, #22
 8008bd2:	bf58      	it	pl
 8008bd4:	9901      	ldrpl	r1, [sp, #4]
 8008bd6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008bda:	bf58      	it	pl
 8008bdc:	eba9 0101 	subpl.w	r1, r9, r1
 8008be0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008be4:	bf58      	it	pl
 8008be6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008bea:	6022      	str	r2, [r4, #0]
 8008bec:	f04f 0900 	mov.w	r9, #0
 8008bf0:	e78a      	b.n	8008b08 <_scanf_float+0x188>
 8008bf2:	f04f 0a03 	mov.w	sl, #3
 8008bf6:	e787      	b.n	8008b08 <_scanf_float+0x188>
 8008bf8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008bfc:	4639      	mov	r1, r7
 8008bfe:	4640      	mov	r0, r8
 8008c00:	4798      	blx	r3
 8008c02:	2800      	cmp	r0, #0
 8008c04:	f43f aedf 	beq.w	80089c6 <_scanf_float+0x46>
 8008c08:	e6ea      	b.n	80089e0 <_scanf_float+0x60>
 8008c0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c0e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008c12:	463a      	mov	r2, r7
 8008c14:	4640      	mov	r0, r8
 8008c16:	4798      	blx	r3
 8008c18:	6923      	ldr	r3, [r4, #16]
 8008c1a:	3b01      	subs	r3, #1
 8008c1c:	6123      	str	r3, [r4, #16]
 8008c1e:	e6ec      	b.n	80089fa <_scanf_float+0x7a>
 8008c20:	1e6b      	subs	r3, r5, #1
 8008c22:	2b06      	cmp	r3, #6
 8008c24:	d825      	bhi.n	8008c72 <_scanf_float+0x2f2>
 8008c26:	2d02      	cmp	r5, #2
 8008c28:	d836      	bhi.n	8008c98 <_scanf_float+0x318>
 8008c2a:	455e      	cmp	r6, fp
 8008c2c:	f67f aee8 	bls.w	8008a00 <_scanf_float+0x80>
 8008c30:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c34:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008c38:	463a      	mov	r2, r7
 8008c3a:	4640      	mov	r0, r8
 8008c3c:	4798      	blx	r3
 8008c3e:	6923      	ldr	r3, [r4, #16]
 8008c40:	3b01      	subs	r3, #1
 8008c42:	6123      	str	r3, [r4, #16]
 8008c44:	e7f1      	b.n	8008c2a <_scanf_float+0x2aa>
 8008c46:	9802      	ldr	r0, [sp, #8]
 8008c48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c4c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008c50:	9002      	str	r0, [sp, #8]
 8008c52:	463a      	mov	r2, r7
 8008c54:	4640      	mov	r0, r8
 8008c56:	4798      	blx	r3
 8008c58:	6923      	ldr	r3, [r4, #16]
 8008c5a:	3b01      	subs	r3, #1
 8008c5c:	6123      	str	r3, [r4, #16]
 8008c5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c62:	fa5f fa8a 	uxtb.w	sl, sl
 8008c66:	f1ba 0f02 	cmp.w	sl, #2
 8008c6a:	d1ec      	bne.n	8008c46 <_scanf_float+0x2c6>
 8008c6c:	3d03      	subs	r5, #3
 8008c6e:	b2ed      	uxtb	r5, r5
 8008c70:	1b76      	subs	r6, r6, r5
 8008c72:	6823      	ldr	r3, [r4, #0]
 8008c74:	05da      	lsls	r2, r3, #23
 8008c76:	d52f      	bpl.n	8008cd8 <_scanf_float+0x358>
 8008c78:	055b      	lsls	r3, r3, #21
 8008c7a:	d510      	bpl.n	8008c9e <_scanf_float+0x31e>
 8008c7c:	455e      	cmp	r6, fp
 8008c7e:	f67f aebf 	bls.w	8008a00 <_scanf_float+0x80>
 8008c82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c86:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008c8a:	463a      	mov	r2, r7
 8008c8c:	4640      	mov	r0, r8
 8008c8e:	4798      	blx	r3
 8008c90:	6923      	ldr	r3, [r4, #16]
 8008c92:	3b01      	subs	r3, #1
 8008c94:	6123      	str	r3, [r4, #16]
 8008c96:	e7f1      	b.n	8008c7c <_scanf_float+0x2fc>
 8008c98:	46aa      	mov	sl, r5
 8008c9a:	9602      	str	r6, [sp, #8]
 8008c9c:	e7df      	b.n	8008c5e <_scanf_float+0x2de>
 8008c9e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008ca2:	6923      	ldr	r3, [r4, #16]
 8008ca4:	2965      	cmp	r1, #101	; 0x65
 8008ca6:	f103 33ff 	add.w	r3, r3, #4294967295
 8008caa:	f106 35ff 	add.w	r5, r6, #4294967295
 8008cae:	6123      	str	r3, [r4, #16]
 8008cb0:	d00c      	beq.n	8008ccc <_scanf_float+0x34c>
 8008cb2:	2945      	cmp	r1, #69	; 0x45
 8008cb4:	d00a      	beq.n	8008ccc <_scanf_float+0x34c>
 8008cb6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008cba:	463a      	mov	r2, r7
 8008cbc:	4640      	mov	r0, r8
 8008cbe:	4798      	blx	r3
 8008cc0:	6923      	ldr	r3, [r4, #16]
 8008cc2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008cc6:	3b01      	subs	r3, #1
 8008cc8:	1eb5      	subs	r5, r6, #2
 8008cca:	6123      	str	r3, [r4, #16]
 8008ccc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008cd0:	463a      	mov	r2, r7
 8008cd2:	4640      	mov	r0, r8
 8008cd4:	4798      	blx	r3
 8008cd6:	462e      	mov	r6, r5
 8008cd8:	6825      	ldr	r5, [r4, #0]
 8008cda:	f015 0510 	ands.w	r5, r5, #16
 8008cde:	d159      	bne.n	8008d94 <_scanf_float+0x414>
 8008ce0:	7035      	strb	r5, [r6, #0]
 8008ce2:	6823      	ldr	r3, [r4, #0]
 8008ce4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008ce8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cec:	d11b      	bne.n	8008d26 <_scanf_float+0x3a6>
 8008cee:	9b01      	ldr	r3, [sp, #4]
 8008cf0:	454b      	cmp	r3, r9
 8008cf2:	eba3 0209 	sub.w	r2, r3, r9
 8008cf6:	d123      	bne.n	8008d40 <_scanf_float+0x3c0>
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	4659      	mov	r1, fp
 8008cfc:	4640      	mov	r0, r8
 8008cfe:	f000 ff25 	bl	8009b4c <_strtod_r>
 8008d02:	6822      	ldr	r2, [r4, #0]
 8008d04:	9b03      	ldr	r3, [sp, #12]
 8008d06:	f012 0f02 	tst.w	r2, #2
 8008d0a:	ec57 6b10 	vmov	r6, r7, d0
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	d021      	beq.n	8008d56 <_scanf_float+0x3d6>
 8008d12:	9903      	ldr	r1, [sp, #12]
 8008d14:	1d1a      	adds	r2, r3, #4
 8008d16:	600a      	str	r2, [r1, #0]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	e9c3 6700 	strd	r6, r7, [r3]
 8008d1e:	68e3      	ldr	r3, [r4, #12]
 8008d20:	3301      	adds	r3, #1
 8008d22:	60e3      	str	r3, [r4, #12]
 8008d24:	e66d      	b.n	8008a02 <_scanf_float+0x82>
 8008d26:	9b04      	ldr	r3, [sp, #16]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d0e5      	beq.n	8008cf8 <_scanf_float+0x378>
 8008d2c:	9905      	ldr	r1, [sp, #20]
 8008d2e:	230a      	movs	r3, #10
 8008d30:	462a      	mov	r2, r5
 8008d32:	3101      	adds	r1, #1
 8008d34:	4640      	mov	r0, r8
 8008d36:	f000 ff91 	bl	8009c5c <_strtol_r>
 8008d3a:	9b04      	ldr	r3, [sp, #16]
 8008d3c:	9e05      	ldr	r6, [sp, #20]
 8008d3e:	1ac2      	subs	r2, r0, r3
 8008d40:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008d44:	429e      	cmp	r6, r3
 8008d46:	bf28      	it	cs
 8008d48:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008d4c:	4912      	ldr	r1, [pc, #72]	; (8008d98 <_scanf_float+0x418>)
 8008d4e:	4630      	mov	r0, r6
 8008d50:	f000 f8ba 	bl	8008ec8 <siprintf>
 8008d54:	e7d0      	b.n	8008cf8 <_scanf_float+0x378>
 8008d56:	9903      	ldr	r1, [sp, #12]
 8008d58:	f012 0f04 	tst.w	r2, #4
 8008d5c:	f103 0204 	add.w	r2, r3, #4
 8008d60:	600a      	str	r2, [r1, #0]
 8008d62:	d1d9      	bne.n	8008d18 <_scanf_float+0x398>
 8008d64:	f8d3 8000 	ldr.w	r8, [r3]
 8008d68:	ee10 2a10 	vmov	r2, s0
 8008d6c:	ee10 0a10 	vmov	r0, s0
 8008d70:	463b      	mov	r3, r7
 8008d72:	4639      	mov	r1, r7
 8008d74:	f7f7 feda 	bl	8000b2c <__aeabi_dcmpun>
 8008d78:	b128      	cbz	r0, 8008d86 <_scanf_float+0x406>
 8008d7a:	4808      	ldr	r0, [pc, #32]	; (8008d9c <_scanf_float+0x41c>)
 8008d7c:	f000 f89e 	bl	8008ebc <nanf>
 8008d80:	ed88 0a00 	vstr	s0, [r8]
 8008d84:	e7cb      	b.n	8008d1e <_scanf_float+0x39e>
 8008d86:	4630      	mov	r0, r6
 8008d88:	4639      	mov	r1, r7
 8008d8a:	f7f7 ff2d 	bl	8000be8 <__aeabi_d2f>
 8008d8e:	f8c8 0000 	str.w	r0, [r8]
 8008d92:	e7c4      	b.n	8008d1e <_scanf_float+0x39e>
 8008d94:	2500      	movs	r5, #0
 8008d96:	e634      	b.n	8008a02 <_scanf_float+0x82>
 8008d98:	0800cc10 	.word	0x0800cc10
 8008d9c:	0800d080 	.word	0x0800d080

08008da0 <iprintf>:
 8008da0:	b40f      	push	{r0, r1, r2, r3}
 8008da2:	4b0a      	ldr	r3, [pc, #40]	; (8008dcc <iprintf+0x2c>)
 8008da4:	b513      	push	{r0, r1, r4, lr}
 8008da6:	681c      	ldr	r4, [r3, #0]
 8008da8:	b124      	cbz	r4, 8008db4 <iprintf+0x14>
 8008daa:	69a3      	ldr	r3, [r4, #24]
 8008dac:	b913      	cbnz	r3, 8008db4 <iprintf+0x14>
 8008dae:	4620      	mov	r0, r4
 8008db0:	f001 ffaa 	bl	800ad08 <__sinit>
 8008db4:	ab05      	add	r3, sp, #20
 8008db6:	9a04      	ldr	r2, [sp, #16]
 8008db8:	68a1      	ldr	r1, [r4, #8]
 8008dba:	9301      	str	r3, [sp, #4]
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	f003 fb73 	bl	800c4a8 <_vfiprintf_r>
 8008dc2:	b002      	add	sp, #8
 8008dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dc8:	b004      	add	sp, #16
 8008dca:	4770      	bx	lr
 8008dcc:	20000014 	.word	0x20000014

08008dd0 <_puts_r>:
 8008dd0:	b570      	push	{r4, r5, r6, lr}
 8008dd2:	460e      	mov	r6, r1
 8008dd4:	4605      	mov	r5, r0
 8008dd6:	b118      	cbz	r0, 8008de0 <_puts_r+0x10>
 8008dd8:	6983      	ldr	r3, [r0, #24]
 8008dda:	b90b      	cbnz	r3, 8008de0 <_puts_r+0x10>
 8008ddc:	f001 ff94 	bl	800ad08 <__sinit>
 8008de0:	69ab      	ldr	r3, [r5, #24]
 8008de2:	68ac      	ldr	r4, [r5, #8]
 8008de4:	b913      	cbnz	r3, 8008dec <_puts_r+0x1c>
 8008de6:	4628      	mov	r0, r5
 8008de8:	f001 ff8e 	bl	800ad08 <__sinit>
 8008dec:	4b2c      	ldr	r3, [pc, #176]	; (8008ea0 <_puts_r+0xd0>)
 8008dee:	429c      	cmp	r4, r3
 8008df0:	d120      	bne.n	8008e34 <_puts_r+0x64>
 8008df2:	686c      	ldr	r4, [r5, #4]
 8008df4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008df6:	07db      	lsls	r3, r3, #31
 8008df8:	d405      	bmi.n	8008e06 <_puts_r+0x36>
 8008dfa:	89a3      	ldrh	r3, [r4, #12]
 8008dfc:	0598      	lsls	r0, r3, #22
 8008dfe:	d402      	bmi.n	8008e06 <_puts_r+0x36>
 8008e00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e02:	f002 fb92 	bl	800b52a <__retarget_lock_acquire_recursive>
 8008e06:	89a3      	ldrh	r3, [r4, #12]
 8008e08:	0719      	lsls	r1, r3, #28
 8008e0a:	d51d      	bpl.n	8008e48 <_puts_r+0x78>
 8008e0c:	6923      	ldr	r3, [r4, #16]
 8008e0e:	b1db      	cbz	r3, 8008e48 <_puts_r+0x78>
 8008e10:	3e01      	subs	r6, #1
 8008e12:	68a3      	ldr	r3, [r4, #8]
 8008e14:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008e18:	3b01      	subs	r3, #1
 8008e1a:	60a3      	str	r3, [r4, #8]
 8008e1c:	bb39      	cbnz	r1, 8008e6e <_puts_r+0x9e>
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	da38      	bge.n	8008e94 <_puts_r+0xc4>
 8008e22:	4622      	mov	r2, r4
 8008e24:	210a      	movs	r1, #10
 8008e26:	4628      	mov	r0, r5
 8008e28:	f000 ff1a 	bl	8009c60 <__swbuf_r>
 8008e2c:	3001      	adds	r0, #1
 8008e2e:	d011      	beq.n	8008e54 <_puts_r+0x84>
 8008e30:	250a      	movs	r5, #10
 8008e32:	e011      	b.n	8008e58 <_puts_r+0x88>
 8008e34:	4b1b      	ldr	r3, [pc, #108]	; (8008ea4 <_puts_r+0xd4>)
 8008e36:	429c      	cmp	r4, r3
 8008e38:	d101      	bne.n	8008e3e <_puts_r+0x6e>
 8008e3a:	68ac      	ldr	r4, [r5, #8]
 8008e3c:	e7da      	b.n	8008df4 <_puts_r+0x24>
 8008e3e:	4b1a      	ldr	r3, [pc, #104]	; (8008ea8 <_puts_r+0xd8>)
 8008e40:	429c      	cmp	r4, r3
 8008e42:	bf08      	it	eq
 8008e44:	68ec      	ldreq	r4, [r5, #12]
 8008e46:	e7d5      	b.n	8008df4 <_puts_r+0x24>
 8008e48:	4621      	mov	r1, r4
 8008e4a:	4628      	mov	r0, r5
 8008e4c:	f000 ff5a 	bl	8009d04 <__swsetup_r>
 8008e50:	2800      	cmp	r0, #0
 8008e52:	d0dd      	beq.n	8008e10 <_puts_r+0x40>
 8008e54:	f04f 35ff 	mov.w	r5, #4294967295
 8008e58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e5a:	07da      	lsls	r2, r3, #31
 8008e5c:	d405      	bmi.n	8008e6a <_puts_r+0x9a>
 8008e5e:	89a3      	ldrh	r3, [r4, #12]
 8008e60:	059b      	lsls	r3, r3, #22
 8008e62:	d402      	bmi.n	8008e6a <_puts_r+0x9a>
 8008e64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e66:	f002 fb61 	bl	800b52c <__retarget_lock_release_recursive>
 8008e6a:	4628      	mov	r0, r5
 8008e6c:	bd70      	pop	{r4, r5, r6, pc}
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	da04      	bge.n	8008e7c <_puts_r+0xac>
 8008e72:	69a2      	ldr	r2, [r4, #24]
 8008e74:	429a      	cmp	r2, r3
 8008e76:	dc06      	bgt.n	8008e86 <_puts_r+0xb6>
 8008e78:	290a      	cmp	r1, #10
 8008e7a:	d004      	beq.n	8008e86 <_puts_r+0xb6>
 8008e7c:	6823      	ldr	r3, [r4, #0]
 8008e7e:	1c5a      	adds	r2, r3, #1
 8008e80:	6022      	str	r2, [r4, #0]
 8008e82:	7019      	strb	r1, [r3, #0]
 8008e84:	e7c5      	b.n	8008e12 <_puts_r+0x42>
 8008e86:	4622      	mov	r2, r4
 8008e88:	4628      	mov	r0, r5
 8008e8a:	f000 fee9 	bl	8009c60 <__swbuf_r>
 8008e8e:	3001      	adds	r0, #1
 8008e90:	d1bf      	bne.n	8008e12 <_puts_r+0x42>
 8008e92:	e7df      	b.n	8008e54 <_puts_r+0x84>
 8008e94:	6823      	ldr	r3, [r4, #0]
 8008e96:	250a      	movs	r5, #10
 8008e98:	1c5a      	adds	r2, r3, #1
 8008e9a:	6022      	str	r2, [r4, #0]
 8008e9c:	701d      	strb	r5, [r3, #0]
 8008e9e:	e7db      	b.n	8008e58 <_puts_r+0x88>
 8008ea0:	0800ce1c 	.word	0x0800ce1c
 8008ea4:	0800ce3c 	.word	0x0800ce3c
 8008ea8:	0800cdfc 	.word	0x0800cdfc

08008eac <puts>:
 8008eac:	4b02      	ldr	r3, [pc, #8]	; (8008eb8 <puts+0xc>)
 8008eae:	4601      	mov	r1, r0
 8008eb0:	6818      	ldr	r0, [r3, #0]
 8008eb2:	f7ff bf8d 	b.w	8008dd0 <_puts_r>
 8008eb6:	bf00      	nop
 8008eb8:	20000014 	.word	0x20000014

08008ebc <nanf>:
 8008ebc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008ec4 <nanf+0x8>
 8008ec0:	4770      	bx	lr
 8008ec2:	bf00      	nop
 8008ec4:	7fc00000 	.word	0x7fc00000

08008ec8 <siprintf>:
 8008ec8:	b40e      	push	{r1, r2, r3}
 8008eca:	b500      	push	{lr}
 8008ecc:	b09c      	sub	sp, #112	; 0x70
 8008ece:	ab1d      	add	r3, sp, #116	; 0x74
 8008ed0:	9002      	str	r0, [sp, #8]
 8008ed2:	9006      	str	r0, [sp, #24]
 8008ed4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008ed8:	4809      	ldr	r0, [pc, #36]	; (8008f00 <siprintf+0x38>)
 8008eda:	9107      	str	r1, [sp, #28]
 8008edc:	9104      	str	r1, [sp, #16]
 8008ede:	4909      	ldr	r1, [pc, #36]	; (8008f04 <siprintf+0x3c>)
 8008ee0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ee4:	9105      	str	r1, [sp, #20]
 8008ee6:	6800      	ldr	r0, [r0, #0]
 8008ee8:	9301      	str	r3, [sp, #4]
 8008eea:	a902      	add	r1, sp, #8
 8008eec:	f003 f9b2 	bl	800c254 <_svfiprintf_r>
 8008ef0:	9b02      	ldr	r3, [sp, #8]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	701a      	strb	r2, [r3, #0]
 8008ef6:	b01c      	add	sp, #112	; 0x70
 8008ef8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008efc:	b003      	add	sp, #12
 8008efe:	4770      	bx	lr
 8008f00:	20000014 	.word	0x20000014
 8008f04:	ffff0208 	.word	0xffff0208

08008f08 <sulp>:
 8008f08:	b570      	push	{r4, r5, r6, lr}
 8008f0a:	4604      	mov	r4, r0
 8008f0c:	460d      	mov	r5, r1
 8008f0e:	ec45 4b10 	vmov	d0, r4, r5
 8008f12:	4616      	mov	r6, r2
 8008f14:	f002 fefc 	bl	800bd10 <__ulp>
 8008f18:	ec51 0b10 	vmov	r0, r1, d0
 8008f1c:	b17e      	cbz	r6, 8008f3e <sulp+0x36>
 8008f1e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008f22:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	dd09      	ble.n	8008f3e <sulp+0x36>
 8008f2a:	051b      	lsls	r3, r3, #20
 8008f2c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008f30:	2400      	movs	r4, #0
 8008f32:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008f36:	4622      	mov	r2, r4
 8008f38:	462b      	mov	r3, r5
 8008f3a:	f7f7 fb5d 	bl	80005f8 <__aeabi_dmul>
 8008f3e:	bd70      	pop	{r4, r5, r6, pc}

08008f40 <_strtod_l>:
 8008f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f44:	ed2d 8b02 	vpush	{d8}
 8008f48:	b09d      	sub	sp, #116	; 0x74
 8008f4a:	461f      	mov	r7, r3
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	9318      	str	r3, [sp, #96]	; 0x60
 8008f50:	4ba2      	ldr	r3, [pc, #648]	; (80091dc <_strtod_l+0x29c>)
 8008f52:	9213      	str	r2, [sp, #76]	; 0x4c
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	9305      	str	r3, [sp, #20]
 8008f58:	4604      	mov	r4, r0
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	4688      	mov	r8, r1
 8008f5e:	f7f7 f937 	bl	80001d0 <strlen>
 8008f62:	f04f 0a00 	mov.w	sl, #0
 8008f66:	4605      	mov	r5, r0
 8008f68:	f04f 0b00 	mov.w	fp, #0
 8008f6c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008f70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008f72:	781a      	ldrb	r2, [r3, #0]
 8008f74:	2a2b      	cmp	r2, #43	; 0x2b
 8008f76:	d04e      	beq.n	8009016 <_strtod_l+0xd6>
 8008f78:	d83b      	bhi.n	8008ff2 <_strtod_l+0xb2>
 8008f7a:	2a0d      	cmp	r2, #13
 8008f7c:	d834      	bhi.n	8008fe8 <_strtod_l+0xa8>
 8008f7e:	2a08      	cmp	r2, #8
 8008f80:	d834      	bhi.n	8008fec <_strtod_l+0xac>
 8008f82:	2a00      	cmp	r2, #0
 8008f84:	d03e      	beq.n	8009004 <_strtod_l+0xc4>
 8008f86:	2300      	movs	r3, #0
 8008f88:	930a      	str	r3, [sp, #40]	; 0x28
 8008f8a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008f8c:	7833      	ldrb	r3, [r6, #0]
 8008f8e:	2b30      	cmp	r3, #48	; 0x30
 8008f90:	f040 80b0 	bne.w	80090f4 <_strtod_l+0x1b4>
 8008f94:	7873      	ldrb	r3, [r6, #1]
 8008f96:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008f9a:	2b58      	cmp	r3, #88	; 0x58
 8008f9c:	d168      	bne.n	8009070 <_strtod_l+0x130>
 8008f9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fa0:	9301      	str	r3, [sp, #4]
 8008fa2:	ab18      	add	r3, sp, #96	; 0x60
 8008fa4:	9702      	str	r7, [sp, #8]
 8008fa6:	9300      	str	r3, [sp, #0]
 8008fa8:	4a8d      	ldr	r2, [pc, #564]	; (80091e0 <_strtod_l+0x2a0>)
 8008faa:	ab19      	add	r3, sp, #100	; 0x64
 8008fac:	a917      	add	r1, sp, #92	; 0x5c
 8008fae:	4620      	mov	r0, r4
 8008fb0:	f001 ffae 	bl	800af10 <__gethex>
 8008fb4:	f010 0707 	ands.w	r7, r0, #7
 8008fb8:	4605      	mov	r5, r0
 8008fba:	d005      	beq.n	8008fc8 <_strtod_l+0x88>
 8008fbc:	2f06      	cmp	r7, #6
 8008fbe:	d12c      	bne.n	800901a <_strtod_l+0xda>
 8008fc0:	3601      	adds	r6, #1
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	9617      	str	r6, [sp, #92]	; 0x5c
 8008fc6:	930a      	str	r3, [sp, #40]	; 0x28
 8008fc8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	f040 8590 	bne.w	8009af0 <_strtod_l+0xbb0>
 8008fd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fd2:	b1eb      	cbz	r3, 8009010 <_strtod_l+0xd0>
 8008fd4:	4652      	mov	r2, sl
 8008fd6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008fda:	ec43 2b10 	vmov	d0, r2, r3
 8008fde:	b01d      	add	sp, #116	; 0x74
 8008fe0:	ecbd 8b02 	vpop	{d8}
 8008fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fe8:	2a20      	cmp	r2, #32
 8008fea:	d1cc      	bne.n	8008f86 <_strtod_l+0x46>
 8008fec:	3301      	adds	r3, #1
 8008fee:	9317      	str	r3, [sp, #92]	; 0x5c
 8008ff0:	e7be      	b.n	8008f70 <_strtod_l+0x30>
 8008ff2:	2a2d      	cmp	r2, #45	; 0x2d
 8008ff4:	d1c7      	bne.n	8008f86 <_strtod_l+0x46>
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	920a      	str	r2, [sp, #40]	; 0x28
 8008ffa:	1c5a      	adds	r2, r3, #1
 8008ffc:	9217      	str	r2, [sp, #92]	; 0x5c
 8008ffe:	785b      	ldrb	r3, [r3, #1]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d1c2      	bne.n	8008f8a <_strtod_l+0x4a>
 8009004:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009006:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800900a:	2b00      	cmp	r3, #0
 800900c:	f040 856e 	bne.w	8009aec <_strtod_l+0xbac>
 8009010:	4652      	mov	r2, sl
 8009012:	465b      	mov	r3, fp
 8009014:	e7e1      	b.n	8008fda <_strtod_l+0x9a>
 8009016:	2200      	movs	r2, #0
 8009018:	e7ee      	b.n	8008ff8 <_strtod_l+0xb8>
 800901a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800901c:	b13a      	cbz	r2, 800902e <_strtod_l+0xee>
 800901e:	2135      	movs	r1, #53	; 0x35
 8009020:	a81a      	add	r0, sp, #104	; 0x68
 8009022:	f002 ff80 	bl	800bf26 <__copybits>
 8009026:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009028:	4620      	mov	r0, r4
 800902a:	f002 fb3f 	bl	800b6ac <_Bfree>
 800902e:	3f01      	subs	r7, #1
 8009030:	2f04      	cmp	r7, #4
 8009032:	d806      	bhi.n	8009042 <_strtod_l+0x102>
 8009034:	e8df f007 	tbb	[pc, r7]
 8009038:	1714030a 	.word	0x1714030a
 800903c:	0a          	.byte	0x0a
 800903d:	00          	.byte	0x00
 800903e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009042:	0728      	lsls	r0, r5, #28
 8009044:	d5c0      	bpl.n	8008fc8 <_strtod_l+0x88>
 8009046:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800904a:	e7bd      	b.n	8008fc8 <_strtod_l+0x88>
 800904c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009050:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009052:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009056:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800905a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800905e:	e7f0      	b.n	8009042 <_strtod_l+0x102>
 8009060:	f8df b180 	ldr.w	fp, [pc, #384]	; 80091e4 <_strtod_l+0x2a4>
 8009064:	e7ed      	b.n	8009042 <_strtod_l+0x102>
 8009066:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800906a:	f04f 3aff 	mov.w	sl, #4294967295
 800906e:	e7e8      	b.n	8009042 <_strtod_l+0x102>
 8009070:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009072:	1c5a      	adds	r2, r3, #1
 8009074:	9217      	str	r2, [sp, #92]	; 0x5c
 8009076:	785b      	ldrb	r3, [r3, #1]
 8009078:	2b30      	cmp	r3, #48	; 0x30
 800907a:	d0f9      	beq.n	8009070 <_strtod_l+0x130>
 800907c:	2b00      	cmp	r3, #0
 800907e:	d0a3      	beq.n	8008fc8 <_strtod_l+0x88>
 8009080:	2301      	movs	r3, #1
 8009082:	f04f 0900 	mov.w	r9, #0
 8009086:	9304      	str	r3, [sp, #16]
 8009088:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800908a:	9308      	str	r3, [sp, #32]
 800908c:	f8cd 901c 	str.w	r9, [sp, #28]
 8009090:	464f      	mov	r7, r9
 8009092:	220a      	movs	r2, #10
 8009094:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009096:	7806      	ldrb	r6, [r0, #0]
 8009098:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800909c:	b2d9      	uxtb	r1, r3
 800909e:	2909      	cmp	r1, #9
 80090a0:	d92a      	bls.n	80090f8 <_strtod_l+0x1b8>
 80090a2:	9905      	ldr	r1, [sp, #20]
 80090a4:	462a      	mov	r2, r5
 80090a6:	f003 fb8a 	bl	800c7be <strncmp>
 80090aa:	b398      	cbz	r0, 8009114 <_strtod_l+0x1d4>
 80090ac:	2000      	movs	r0, #0
 80090ae:	4632      	mov	r2, r6
 80090b0:	463d      	mov	r5, r7
 80090b2:	9005      	str	r0, [sp, #20]
 80090b4:	4603      	mov	r3, r0
 80090b6:	2a65      	cmp	r2, #101	; 0x65
 80090b8:	d001      	beq.n	80090be <_strtod_l+0x17e>
 80090ba:	2a45      	cmp	r2, #69	; 0x45
 80090bc:	d118      	bne.n	80090f0 <_strtod_l+0x1b0>
 80090be:	b91d      	cbnz	r5, 80090c8 <_strtod_l+0x188>
 80090c0:	9a04      	ldr	r2, [sp, #16]
 80090c2:	4302      	orrs	r2, r0
 80090c4:	d09e      	beq.n	8009004 <_strtod_l+0xc4>
 80090c6:	2500      	movs	r5, #0
 80090c8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80090cc:	f108 0201 	add.w	r2, r8, #1
 80090d0:	9217      	str	r2, [sp, #92]	; 0x5c
 80090d2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80090d6:	2a2b      	cmp	r2, #43	; 0x2b
 80090d8:	d075      	beq.n	80091c6 <_strtod_l+0x286>
 80090da:	2a2d      	cmp	r2, #45	; 0x2d
 80090dc:	d07b      	beq.n	80091d6 <_strtod_l+0x296>
 80090de:	f04f 0c00 	mov.w	ip, #0
 80090e2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80090e6:	2909      	cmp	r1, #9
 80090e8:	f240 8082 	bls.w	80091f0 <_strtod_l+0x2b0>
 80090ec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80090f0:	2600      	movs	r6, #0
 80090f2:	e09d      	b.n	8009230 <_strtod_l+0x2f0>
 80090f4:	2300      	movs	r3, #0
 80090f6:	e7c4      	b.n	8009082 <_strtod_l+0x142>
 80090f8:	2f08      	cmp	r7, #8
 80090fa:	bfd8      	it	le
 80090fc:	9907      	ldrle	r1, [sp, #28]
 80090fe:	f100 0001 	add.w	r0, r0, #1
 8009102:	bfda      	itte	le
 8009104:	fb02 3301 	mlale	r3, r2, r1, r3
 8009108:	9307      	strle	r3, [sp, #28]
 800910a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800910e:	3701      	adds	r7, #1
 8009110:	9017      	str	r0, [sp, #92]	; 0x5c
 8009112:	e7bf      	b.n	8009094 <_strtod_l+0x154>
 8009114:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009116:	195a      	adds	r2, r3, r5
 8009118:	9217      	str	r2, [sp, #92]	; 0x5c
 800911a:	5d5a      	ldrb	r2, [r3, r5]
 800911c:	2f00      	cmp	r7, #0
 800911e:	d037      	beq.n	8009190 <_strtod_l+0x250>
 8009120:	9005      	str	r0, [sp, #20]
 8009122:	463d      	mov	r5, r7
 8009124:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009128:	2b09      	cmp	r3, #9
 800912a:	d912      	bls.n	8009152 <_strtod_l+0x212>
 800912c:	2301      	movs	r3, #1
 800912e:	e7c2      	b.n	80090b6 <_strtod_l+0x176>
 8009130:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009132:	1c5a      	adds	r2, r3, #1
 8009134:	9217      	str	r2, [sp, #92]	; 0x5c
 8009136:	785a      	ldrb	r2, [r3, #1]
 8009138:	3001      	adds	r0, #1
 800913a:	2a30      	cmp	r2, #48	; 0x30
 800913c:	d0f8      	beq.n	8009130 <_strtod_l+0x1f0>
 800913e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009142:	2b08      	cmp	r3, #8
 8009144:	f200 84d9 	bhi.w	8009afa <_strtod_l+0xbba>
 8009148:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800914a:	9005      	str	r0, [sp, #20]
 800914c:	2000      	movs	r0, #0
 800914e:	9308      	str	r3, [sp, #32]
 8009150:	4605      	mov	r5, r0
 8009152:	3a30      	subs	r2, #48	; 0x30
 8009154:	f100 0301 	add.w	r3, r0, #1
 8009158:	d014      	beq.n	8009184 <_strtod_l+0x244>
 800915a:	9905      	ldr	r1, [sp, #20]
 800915c:	4419      	add	r1, r3
 800915e:	9105      	str	r1, [sp, #20]
 8009160:	462b      	mov	r3, r5
 8009162:	eb00 0e05 	add.w	lr, r0, r5
 8009166:	210a      	movs	r1, #10
 8009168:	4573      	cmp	r3, lr
 800916a:	d113      	bne.n	8009194 <_strtod_l+0x254>
 800916c:	182b      	adds	r3, r5, r0
 800916e:	2b08      	cmp	r3, #8
 8009170:	f105 0501 	add.w	r5, r5, #1
 8009174:	4405      	add	r5, r0
 8009176:	dc1c      	bgt.n	80091b2 <_strtod_l+0x272>
 8009178:	9907      	ldr	r1, [sp, #28]
 800917a:	230a      	movs	r3, #10
 800917c:	fb03 2301 	mla	r3, r3, r1, r2
 8009180:	9307      	str	r3, [sp, #28]
 8009182:	2300      	movs	r3, #0
 8009184:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009186:	1c51      	adds	r1, r2, #1
 8009188:	9117      	str	r1, [sp, #92]	; 0x5c
 800918a:	7852      	ldrb	r2, [r2, #1]
 800918c:	4618      	mov	r0, r3
 800918e:	e7c9      	b.n	8009124 <_strtod_l+0x1e4>
 8009190:	4638      	mov	r0, r7
 8009192:	e7d2      	b.n	800913a <_strtod_l+0x1fa>
 8009194:	2b08      	cmp	r3, #8
 8009196:	dc04      	bgt.n	80091a2 <_strtod_l+0x262>
 8009198:	9e07      	ldr	r6, [sp, #28]
 800919a:	434e      	muls	r6, r1
 800919c:	9607      	str	r6, [sp, #28]
 800919e:	3301      	adds	r3, #1
 80091a0:	e7e2      	b.n	8009168 <_strtod_l+0x228>
 80091a2:	f103 0c01 	add.w	ip, r3, #1
 80091a6:	f1bc 0f10 	cmp.w	ip, #16
 80091aa:	bfd8      	it	le
 80091ac:	fb01 f909 	mulle.w	r9, r1, r9
 80091b0:	e7f5      	b.n	800919e <_strtod_l+0x25e>
 80091b2:	2d10      	cmp	r5, #16
 80091b4:	bfdc      	itt	le
 80091b6:	230a      	movle	r3, #10
 80091b8:	fb03 2909 	mlale	r9, r3, r9, r2
 80091bc:	e7e1      	b.n	8009182 <_strtod_l+0x242>
 80091be:	2300      	movs	r3, #0
 80091c0:	9305      	str	r3, [sp, #20]
 80091c2:	2301      	movs	r3, #1
 80091c4:	e77c      	b.n	80090c0 <_strtod_l+0x180>
 80091c6:	f04f 0c00 	mov.w	ip, #0
 80091ca:	f108 0202 	add.w	r2, r8, #2
 80091ce:	9217      	str	r2, [sp, #92]	; 0x5c
 80091d0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80091d4:	e785      	b.n	80090e2 <_strtod_l+0x1a2>
 80091d6:	f04f 0c01 	mov.w	ip, #1
 80091da:	e7f6      	b.n	80091ca <_strtod_l+0x28a>
 80091dc:	0800cec4 	.word	0x0800cec4
 80091e0:	0800cc18 	.word	0x0800cc18
 80091e4:	7ff00000 	.word	0x7ff00000
 80091e8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80091ea:	1c51      	adds	r1, r2, #1
 80091ec:	9117      	str	r1, [sp, #92]	; 0x5c
 80091ee:	7852      	ldrb	r2, [r2, #1]
 80091f0:	2a30      	cmp	r2, #48	; 0x30
 80091f2:	d0f9      	beq.n	80091e8 <_strtod_l+0x2a8>
 80091f4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80091f8:	2908      	cmp	r1, #8
 80091fa:	f63f af79 	bhi.w	80090f0 <_strtod_l+0x1b0>
 80091fe:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009202:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009204:	9206      	str	r2, [sp, #24]
 8009206:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009208:	1c51      	adds	r1, r2, #1
 800920a:	9117      	str	r1, [sp, #92]	; 0x5c
 800920c:	7852      	ldrb	r2, [r2, #1]
 800920e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009212:	2e09      	cmp	r6, #9
 8009214:	d937      	bls.n	8009286 <_strtod_l+0x346>
 8009216:	9e06      	ldr	r6, [sp, #24]
 8009218:	1b89      	subs	r1, r1, r6
 800921a:	2908      	cmp	r1, #8
 800921c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009220:	dc02      	bgt.n	8009228 <_strtod_l+0x2e8>
 8009222:	4576      	cmp	r6, lr
 8009224:	bfa8      	it	ge
 8009226:	4676      	movge	r6, lr
 8009228:	f1bc 0f00 	cmp.w	ip, #0
 800922c:	d000      	beq.n	8009230 <_strtod_l+0x2f0>
 800922e:	4276      	negs	r6, r6
 8009230:	2d00      	cmp	r5, #0
 8009232:	d14d      	bne.n	80092d0 <_strtod_l+0x390>
 8009234:	9904      	ldr	r1, [sp, #16]
 8009236:	4301      	orrs	r1, r0
 8009238:	f47f aec6 	bne.w	8008fc8 <_strtod_l+0x88>
 800923c:	2b00      	cmp	r3, #0
 800923e:	f47f aee1 	bne.w	8009004 <_strtod_l+0xc4>
 8009242:	2a69      	cmp	r2, #105	; 0x69
 8009244:	d027      	beq.n	8009296 <_strtod_l+0x356>
 8009246:	dc24      	bgt.n	8009292 <_strtod_l+0x352>
 8009248:	2a49      	cmp	r2, #73	; 0x49
 800924a:	d024      	beq.n	8009296 <_strtod_l+0x356>
 800924c:	2a4e      	cmp	r2, #78	; 0x4e
 800924e:	f47f aed9 	bne.w	8009004 <_strtod_l+0xc4>
 8009252:	499f      	ldr	r1, [pc, #636]	; (80094d0 <_strtod_l+0x590>)
 8009254:	a817      	add	r0, sp, #92	; 0x5c
 8009256:	f002 f8b3 	bl	800b3c0 <__match>
 800925a:	2800      	cmp	r0, #0
 800925c:	f43f aed2 	beq.w	8009004 <_strtod_l+0xc4>
 8009260:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	2b28      	cmp	r3, #40	; 0x28
 8009266:	d12d      	bne.n	80092c4 <_strtod_l+0x384>
 8009268:	499a      	ldr	r1, [pc, #616]	; (80094d4 <_strtod_l+0x594>)
 800926a:	aa1a      	add	r2, sp, #104	; 0x68
 800926c:	a817      	add	r0, sp, #92	; 0x5c
 800926e:	f002 f8bb 	bl	800b3e8 <__hexnan>
 8009272:	2805      	cmp	r0, #5
 8009274:	d126      	bne.n	80092c4 <_strtod_l+0x384>
 8009276:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009278:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800927c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009280:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009284:	e6a0      	b.n	8008fc8 <_strtod_l+0x88>
 8009286:	210a      	movs	r1, #10
 8009288:	fb01 2e0e 	mla	lr, r1, lr, r2
 800928c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009290:	e7b9      	b.n	8009206 <_strtod_l+0x2c6>
 8009292:	2a6e      	cmp	r2, #110	; 0x6e
 8009294:	e7db      	b.n	800924e <_strtod_l+0x30e>
 8009296:	4990      	ldr	r1, [pc, #576]	; (80094d8 <_strtod_l+0x598>)
 8009298:	a817      	add	r0, sp, #92	; 0x5c
 800929a:	f002 f891 	bl	800b3c0 <__match>
 800929e:	2800      	cmp	r0, #0
 80092a0:	f43f aeb0 	beq.w	8009004 <_strtod_l+0xc4>
 80092a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80092a6:	498d      	ldr	r1, [pc, #564]	; (80094dc <_strtod_l+0x59c>)
 80092a8:	3b01      	subs	r3, #1
 80092aa:	a817      	add	r0, sp, #92	; 0x5c
 80092ac:	9317      	str	r3, [sp, #92]	; 0x5c
 80092ae:	f002 f887 	bl	800b3c0 <__match>
 80092b2:	b910      	cbnz	r0, 80092ba <_strtod_l+0x37a>
 80092b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80092b6:	3301      	adds	r3, #1
 80092b8:	9317      	str	r3, [sp, #92]	; 0x5c
 80092ba:	f8df b230 	ldr.w	fp, [pc, #560]	; 80094ec <_strtod_l+0x5ac>
 80092be:	f04f 0a00 	mov.w	sl, #0
 80092c2:	e681      	b.n	8008fc8 <_strtod_l+0x88>
 80092c4:	4886      	ldr	r0, [pc, #536]	; (80094e0 <_strtod_l+0x5a0>)
 80092c6:	f003 fa1f 	bl	800c708 <nan>
 80092ca:	ec5b ab10 	vmov	sl, fp, d0
 80092ce:	e67b      	b.n	8008fc8 <_strtod_l+0x88>
 80092d0:	9b05      	ldr	r3, [sp, #20]
 80092d2:	9807      	ldr	r0, [sp, #28]
 80092d4:	1af3      	subs	r3, r6, r3
 80092d6:	2f00      	cmp	r7, #0
 80092d8:	bf08      	it	eq
 80092da:	462f      	moveq	r7, r5
 80092dc:	2d10      	cmp	r5, #16
 80092de:	9306      	str	r3, [sp, #24]
 80092e0:	46a8      	mov	r8, r5
 80092e2:	bfa8      	it	ge
 80092e4:	f04f 0810 	movge.w	r8, #16
 80092e8:	f7f7 f90c 	bl	8000504 <__aeabi_ui2d>
 80092ec:	2d09      	cmp	r5, #9
 80092ee:	4682      	mov	sl, r0
 80092f0:	468b      	mov	fp, r1
 80092f2:	dd13      	ble.n	800931c <_strtod_l+0x3dc>
 80092f4:	4b7b      	ldr	r3, [pc, #492]	; (80094e4 <_strtod_l+0x5a4>)
 80092f6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80092fa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80092fe:	f7f7 f97b 	bl	80005f8 <__aeabi_dmul>
 8009302:	4682      	mov	sl, r0
 8009304:	4648      	mov	r0, r9
 8009306:	468b      	mov	fp, r1
 8009308:	f7f7 f8fc 	bl	8000504 <__aeabi_ui2d>
 800930c:	4602      	mov	r2, r0
 800930e:	460b      	mov	r3, r1
 8009310:	4650      	mov	r0, sl
 8009312:	4659      	mov	r1, fp
 8009314:	f7f6 ffba 	bl	800028c <__adddf3>
 8009318:	4682      	mov	sl, r0
 800931a:	468b      	mov	fp, r1
 800931c:	2d0f      	cmp	r5, #15
 800931e:	dc38      	bgt.n	8009392 <_strtod_l+0x452>
 8009320:	9b06      	ldr	r3, [sp, #24]
 8009322:	2b00      	cmp	r3, #0
 8009324:	f43f ae50 	beq.w	8008fc8 <_strtod_l+0x88>
 8009328:	dd24      	ble.n	8009374 <_strtod_l+0x434>
 800932a:	2b16      	cmp	r3, #22
 800932c:	dc0b      	bgt.n	8009346 <_strtod_l+0x406>
 800932e:	496d      	ldr	r1, [pc, #436]	; (80094e4 <_strtod_l+0x5a4>)
 8009330:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009334:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009338:	4652      	mov	r2, sl
 800933a:	465b      	mov	r3, fp
 800933c:	f7f7 f95c 	bl	80005f8 <__aeabi_dmul>
 8009340:	4682      	mov	sl, r0
 8009342:	468b      	mov	fp, r1
 8009344:	e640      	b.n	8008fc8 <_strtod_l+0x88>
 8009346:	9a06      	ldr	r2, [sp, #24]
 8009348:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800934c:	4293      	cmp	r3, r2
 800934e:	db20      	blt.n	8009392 <_strtod_l+0x452>
 8009350:	4c64      	ldr	r4, [pc, #400]	; (80094e4 <_strtod_l+0x5a4>)
 8009352:	f1c5 050f 	rsb	r5, r5, #15
 8009356:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800935a:	4652      	mov	r2, sl
 800935c:	465b      	mov	r3, fp
 800935e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009362:	f7f7 f949 	bl	80005f8 <__aeabi_dmul>
 8009366:	9b06      	ldr	r3, [sp, #24]
 8009368:	1b5d      	subs	r5, r3, r5
 800936a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800936e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009372:	e7e3      	b.n	800933c <_strtod_l+0x3fc>
 8009374:	9b06      	ldr	r3, [sp, #24]
 8009376:	3316      	adds	r3, #22
 8009378:	db0b      	blt.n	8009392 <_strtod_l+0x452>
 800937a:	9b05      	ldr	r3, [sp, #20]
 800937c:	1b9e      	subs	r6, r3, r6
 800937e:	4b59      	ldr	r3, [pc, #356]	; (80094e4 <_strtod_l+0x5a4>)
 8009380:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009384:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009388:	4650      	mov	r0, sl
 800938a:	4659      	mov	r1, fp
 800938c:	f7f7 fa5e 	bl	800084c <__aeabi_ddiv>
 8009390:	e7d6      	b.n	8009340 <_strtod_l+0x400>
 8009392:	9b06      	ldr	r3, [sp, #24]
 8009394:	eba5 0808 	sub.w	r8, r5, r8
 8009398:	4498      	add	r8, r3
 800939a:	f1b8 0f00 	cmp.w	r8, #0
 800939e:	dd74      	ble.n	800948a <_strtod_l+0x54a>
 80093a0:	f018 030f 	ands.w	r3, r8, #15
 80093a4:	d00a      	beq.n	80093bc <_strtod_l+0x47c>
 80093a6:	494f      	ldr	r1, [pc, #316]	; (80094e4 <_strtod_l+0x5a4>)
 80093a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80093ac:	4652      	mov	r2, sl
 80093ae:	465b      	mov	r3, fp
 80093b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093b4:	f7f7 f920 	bl	80005f8 <__aeabi_dmul>
 80093b8:	4682      	mov	sl, r0
 80093ba:	468b      	mov	fp, r1
 80093bc:	f038 080f 	bics.w	r8, r8, #15
 80093c0:	d04f      	beq.n	8009462 <_strtod_l+0x522>
 80093c2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80093c6:	dd22      	ble.n	800940e <_strtod_l+0x4ce>
 80093c8:	2500      	movs	r5, #0
 80093ca:	462e      	mov	r6, r5
 80093cc:	9507      	str	r5, [sp, #28]
 80093ce:	9505      	str	r5, [sp, #20]
 80093d0:	2322      	movs	r3, #34	; 0x22
 80093d2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80094ec <_strtod_l+0x5ac>
 80093d6:	6023      	str	r3, [r4, #0]
 80093d8:	f04f 0a00 	mov.w	sl, #0
 80093dc:	9b07      	ldr	r3, [sp, #28]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	f43f adf2 	beq.w	8008fc8 <_strtod_l+0x88>
 80093e4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80093e6:	4620      	mov	r0, r4
 80093e8:	f002 f960 	bl	800b6ac <_Bfree>
 80093ec:	9905      	ldr	r1, [sp, #20]
 80093ee:	4620      	mov	r0, r4
 80093f0:	f002 f95c 	bl	800b6ac <_Bfree>
 80093f4:	4631      	mov	r1, r6
 80093f6:	4620      	mov	r0, r4
 80093f8:	f002 f958 	bl	800b6ac <_Bfree>
 80093fc:	9907      	ldr	r1, [sp, #28]
 80093fe:	4620      	mov	r0, r4
 8009400:	f002 f954 	bl	800b6ac <_Bfree>
 8009404:	4629      	mov	r1, r5
 8009406:	4620      	mov	r0, r4
 8009408:	f002 f950 	bl	800b6ac <_Bfree>
 800940c:	e5dc      	b.n	8008fc8 <_strtod_l+0x88>
 800940e:	4b36      	ldr	r3, [pc, #216]	; (80094e8 <_strtod_l+0x5a8>)
 8009410:	9304      	str	r3, [sp, #16]
 8009412:	2300      	movs	r3, #0
 8009414:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009418:	4650      	mov	r0, sl
 800941a:	4659      	mov	r1, fp
 800941c:	4699      	mov	r9, r3
 800941e:	f1b8 0f01 	cmp.w	r8, #1
 8009422:	dc21      	bgt.n	8009468 <_strtod_l+0x528>
 8009424:	b10b      	cbz	r3, 800942a <_strtod_l+0x4ea>
 8009426:	4682      	mov	sl, r0
 8009428:	468b      	mov	fp, r1
 800942a:	4b2f      	ldr	r3, [pc, #188]	; (80094e8 <_strtod_l+0x5a8>)
 800942c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009430:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009434:	4652      	mov	r2, sl
 8009436:	465b      	mov	r3, fp
 8009438:	e9d9 0100 	ldrd	r0, r1, [r9]
 800943c:	f7f7 f8dc 	bl	80005f8 <__aeabi_dmul>
 8009440:	4b2a      	ldr	r3, [pc, #168]	; (80094ec <_strtod_l+0x5ac>)
 8009442:	460a      	mov	r2, r1
 8009444:	400b      	ands	r3, r1
 8009446:	492a      	ldr	r1, [pc, #168]	; (80094f0 <_strtod_l+0x5b0>)
 8009448:	428b      	cmp	r3, r1
 800944a:	4682      	mov	sl, r0
 800944c:	d8bc      	bhi.n	80093c8 <_strtod_l+0x488>
 800944e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009452:	428b      	cmp	r3, r1
 8009454:	bf86      	itte	hi
 8009456:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80094f4 <_strtod_l+0x5b4>
 800945a:	f04f 3aff 	movhi.w	sl, #4294967295
 800945e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009462:	2300      	movs	r3, #0
 8009464:	9304      	str	r3, [sp, #16]
 8009466:	e084      	b.n	8009572 <_strtod_l+0x632>
 8009468:	f018 0f01 	tst.w	r8, #1
 800946c:	d005      	beq.n	800947a <_strtod_l+0x53a>
 800946e:	9b04      	ldr	r3, [sp, #16]
 8009470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009474:	f7f7 f8c0 	bl	80005f8 <__aeabi_dmul>
 8009478:	2301      	movs	r3, #1
 800947a:	9a04      	ldr	r2, [sp, #16]
 800947c:	3208      	adds	r2, #8
 800947e:	f109 0901 	add.w	r9, r9, #1
 8009482:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009486:	9204      	str	r2, [sp, #16]
 8009488:	e7c9      	b.n	800941e <_strtod_l+0x4de>
 800948a:	d0ea      	beq.n	8009462 <_strtod_l+0x522>
 800948c:	f1c8 0800 	rsb	r8, r8, #0
 8009490:	f018 020f 	ands.w	r2, r8, #15
 8009494:	d00a      	beq.n	80094ac <_strtod_l+0x56c>
 8009496:	4b13      	ldr	r3, [pc, #76]	; (80094e4 <_strtod_l+0x5a4>)
 8009498:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800949c:	4650      	mov	r0, sl
 800949e:	4659      	mov	r1, fp
 80094a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a4:	f7f7 f9d2 	bl	800084c <__aeabi_ddiv>
 80094a8:	4682      	mov	sl, r0
 80094aa:	468b      	mov	fp, r1
 80094ac:	ea5f 1828 	movs.w	r8, r8, asr #4
 80094b0:	d0d7      	beq.n	8009462 <_strtod_l+0x522>
 80094b2:	f1b8 0f1f 	cmp.w	r8, #31
 80094b6:	dd1f      	ble.n	80094f8 <_strtod_l+0x5b8>
 80094b8:	2500      	movs	r5, #0
 80094ba:	462e      	mov	r6, r5
 80094bc:	9507      	str	r5, [sp, #28]
 80094be:	9505      	str	r5, [sp, #20]
 80094c0:	2322      	movs	r3, #34	; 0x22
 80094c2:	f04f 0a00 	mov.w	sl, #0
 80094c6:	f04f 0b00 	mov.w	fp, #0
 80094ca:	6023      	str	r3, [r4, #0]
 80094cc:	e786      	b.n	80093dc <_strtod_l+0x49c>
 80094ce:	bf00      	nop
 80094d0:	0800cbe9 	.word	0x0800cbe9
 80094d4:	0800cc2c 	.word	0x0800cc2c
 80094d8:	0800cbe1 	.word	0x0800cbe1
 80094dc:	0800cd6c 	.word	0x0800cd6c
 80094e0:	0800d080 	.word	0x0800d080
 80094e4:	0800cf60 	.word	0x0800cf60
 80094e8:	0800cf38 	.word	0x0800cf38
 80094ec:	7ff00000 	.word	0x7ff00000
 80094f0:	7ca00000 	.word	0x7ca00000
 80094f4:	7fefffff 	.word	0x7fefffff
 80094f8:	f018 0310 	ands.w	r3, r8, #16
 80094fc:	bf18      	it	ne
 80094fe:	236a      	movne	r3, #106	; 0x6a
 8009500:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80098b0 <_strtod_l+0x970>
 8009504:	9304      	str	r3, [sp, #16]
 8009506:	4650      	mov	r0, sl
 8009508:	4659      	mov	r1, fp
 800950a:	2300      	movs	r3, #0
 800950c:	f018 0f01 	tst.w	r8, #1
 8009510:	d004      	beq.n	800951c <_strtod_l+0x5dc>
 8009512:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009516:	f7f7 f86f 	bl	80005f8 <__aeabi_dmul>
 800951a:	2301      	movs	r3, #1
 800951c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009520:	f109 0908 	add.w	r9, r9, #8
 8009524:	d1f2      	bne.n	800950c <_strtod_l+0x5cc>
 8009526:	b10b      	cbz	r3, 800952c <_strtod_l+0x5ec>
 8009528:	4682      	mov	sl, r0
 800952a:	468b      	mov	fp, r1
 800952c:	9b04      	ldr	r3, [sp, #16]
 800952e:	b1c3      	cbz	r3, 8009562 <_strtod_l+0x622>
 8009530:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009534:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009538:	2b00      	cmp	r3, #0
 800953a:	4659      	mov	r1, fp
 800953c:	dd11      	ble.n	8009562 <_strtod_l+0x622>
 800953e:	2b1f      	cmp	r3, #31
 8009540:	f340 8124 	ble.w	800978c <_strtod_l+0x84c>
 8009544:	2b34      	cmp	r3, #52	; 0x34
 8009546:	bfde      	ittt	le
 8009548:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800954c:	f04f 33ff 	movle.w	r3, #4294967295
 8009550:	fa03 f202 	lslle.w	r2, r3, r2
 8009554:	f04f 0a00 	mov.w	sl, #0
 8009558:	bfcc      	ite	gt
 800955a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800955e:	ea02 0b01 	andle.w	fp, r2, r1
 8009562:	2200      	movs	r2, #0
 8009564:	2300      	movs	r3, #0
 8009566:	4650      	mov	r0, sl
 8009568:	4659      	mov	r1, fp
 800956a:	f7f7 faad 	bl	8000ac8 <__aeabi_dcmpeq>
 800956e:	2800      	cmp	r0, #0
 8009570:	d1a2      	bne.n	80094b8 <_strtod_l+0x578>
 8009572:	9b07      	ldr	r3, [sp, #28]
 8009574:	9300      	str	r3, [sp, #0]
 8009576:	9908      	ldr	r1, [sp, #32]
 8009578:	462b      	mov	r3, r5
 800957a:	463a      	mov	r2, r7
 800957c:	4620      	mov	r0, r4
 800957e:	f002 f8fd 	bl	800b77c <__s2b>
 8009582:	9007      	str	r0, [sp, #28]
 8009584:	2800      	cmp	r0, #0
 8009586:	f43f af1f 	beq.w	80093c8 <_strtod_l+0x488>
 800958a:	9b05      	ldr	r3, [sp, #20]
 800958c:	1b9e      	subs	r6, r3, r6
 800958e:	9b06      	ldr	r3, [sp, #24]
 8009590:	2b00      	cmp	r3, #0
 8009592:	bfb4      	ite	lt
 8009594:	4633      	movlt	r3, r6
 8009596:	2300      	movge	r3, #0
 8009598:	930c      	str	r3, [sp, #48]	; 0x30
 800959a:	9b06      	ldr	r3, [sp, #24]
 800959c:	2500      	movs	r5, #0
 800959e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80095a2:	9312      	str	r3, [sp, #72]	; 0x48
 80095a4:	462e      	mov	r6, r5
 80095a6:	9b07      	ldr	r3, [sp, #28]
 80095a8:	4620      	mov	r0, r4
 80095aa:	6859      	ldr	r1, [r3, #4]
 80095ac:	f002 f83e 	bl	800b62c <_Balloc>
 80095b0:	9005      	str	r0, [sp, #20]
 80095b2:	2800      	cmp	r0, #0
 80095b4:	f43f af0c 	beq.w	80093d0 <_strtod_l+0x490>
 80095b8:	9b07      	ldr	r3, [sp, #28]
 80095ba:	691a      	ldr	r2, [r3, #16]
 80095bc:	3202      	adds	r2, #2
 80095be:	f103 010c 	add.w	r1, r3, #12
 80095c2:	0092      	lsls	r2, r2, #2
 80095c4:	300c      	adds	r0, #12
 80095c6:	f7fe fd5b 	bl	8008080 <memcpy>
 80095ca:	ec4b ab10 	vmov	d0, sl, fp
 80095ce:	aa1a      	add	r2, sp, #104	; 0x68
 80095d0:	a919      	add	r1, sp, #100	; 0x64
 80095d2:	4620      	mov	r0, r4
 80095d4:	f002 fc18 	bl	800be08 <__d2b>
 80095d8:	ec4b ab18 	vmov	d8, sl, fp
 80095dc:	9018      	str	r0, [sp, #96]	; 0x60
 80095de:	2800      	cmp	r0, #0
 80095e0:	f43f aef6 	beq.w	80093d0 <_strtod_l+0x490>
 80095e4:	2101      	movs	r1, #1
 80095e6:	4620      	mov	r0, r4
 80095e8:	f002 f962 	bl	800b8b0 <__i2b>
 80095ec:	4606      	mov	r6, r0
 80095ee:	2800      	cmp	r0, #0
 80095f0:	f43f aeee 	beq.w	80093d0 <_strtod_l+0x490>
 80095f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80095f6:	9904      	ldr	r1, [sp, #16]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	bfab      	itete	ge
 80095fc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80095fe:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009600:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009602:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009606:	bfac      	ite	ge
 8009608:	eb03 0902 	addge.w	r9, r3, r2
 800960c:	1ad7      	sublt	r7, r2, r3
 800960e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009610:	eba3 0801 	sub.w	r8, r3, r1
 8009614:	4490      	add	r8, r2
 8009616:	4ba1      	ldr	r3, [pc, #644]	; (800989c <_strtod_l+0x95c>)
 8009618:	f108 38ff 	add.w	r8, r8, #4294967295
 800961c:	4598      	cmp	r8, r3
 800961e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009622:	f280 80c7 	bge.w	80097b4 <_strtod_l+0x874>
 8009626:	eba3 0308 	sub.w	r3, r3, r8
 800962a:	2b1f      	cmp	r3, #31
 800962c:	eba2 0203 	sub.w	r2, r2, r3
 8009630:	f04f 0101 	mov.w	r1, #1
 8009634:	f300 80b1 	bgt.w	800979a <_strtod_l+0x85a>
 8009638:	fa01 f303 	lsl.w	r3, r1, r3
 800963c:	930d      	str	r3, [sp, #52]	; 0x34
 800963e:	2300      	movs	r3, #0
 8009640:	9308      	str	r3, [sp, #32]
 8009642:	eb09 0802 	add.w	r8, r9, r2
 8009646:	9b04      	ldr	r3, [sp, #16]
 8009648:	45c1      	cmp	r9, r8
 800964a:	4417      	add	r7, r2
 800964c:	441f      	add	r7, r3
 800964e:	464b      	mov	r3, r9
 8009650:	bfa8      	it	ge
 8009652:	4643      	movge	r3, r8
 8009654:	42bb      	cmp	r3, r7
 8009656:	bfa8      	it	ge
 8009658:	463b      	movge	r3, r7
 800965a:	2b00      	cmp	r3, #0
 800965c:	bfc2      	ittt	gt
 800965e:	eba8 0803 	subgt.w	r8, r8, r3
 8009662:	1aff      	subgt	r7, r7, r3
 8009664:	eba9 0903 	subgt.w	r9, r9, r3
 8009668:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800966a:	2b00      	cmp	r3, #0
 800966c:	dd17      	ble.n	800969e <_strtod_l+0x75e>
 800966e:	4631      	mov	r1, r6
 8009670:	461a      	mov	r2, r3
 8009672:	4620      	mov	r0, r4
 8009674:	f002 f9dc 	bl	800ba30 <__pow5mult>
 8009678:	4606      	mov	r6, r0
 800967a:	2800      	cmp	r0, #0
 800967c:	f43f aea8 	beq.w	80093d0 <_strtod_l+0x490>
 8009680:	4601      	mov	r1, r0
 8009682:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009684:	4620      	mov	r0, r4
 8009686:	f002 f929 	bl	800b8dc <__multiply>
 800968a:	900b      	str	r0, [sp, #44]	; 0x2c
 800968c:	2800      	cmp	r0, #0
 800968e:	f43f ae9f 	beq.w	80093d0 <_strtod_l+0x490>
 8009692:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009694:	4620      	mov	r0, r4
 8009696:	f002 f809 	bl	800b6ac <_Bfree>
 800969a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800969c:	9318      	str	r3, [sp, #96]	; 0x60
 800969e:	f1b8 0f00 	cmp.w	r8, #0
 80096a2:	f300 808c 	bgt.w	80097be <_strtod_l+0x87e>
 80096a6:	9b06      	ldr	r3, [sp, #24]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	dd08      	ble.n	80096be <_strtod_l+0x77e>
 80096ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80096ae:	9905      	ldr	r1, [sp, #20]
 80096b0:	4620      	mov	r0, r4
 80096b2:	f002 f9bd 	bl	800ba30 <__pow5mult>
 80096b6:	9005      	str	r0, [sp, #20]
 80096b8:	2800      	cmp	r0, #0
 80096ba:	f43f ae89 	beq.w	80093d0 <_strtod_l+0x490>
 80096be:	2f00      	cmp	r7, #0
 80096c0:	dd08      	ble.n	80096d4 <_strtod_l+0x794>
 80096c2:	9905      	ldr	r1, [sp, #20]
 80096c4:	463a      	mov	r2, r7
 80096c6:	4620      	mov	r0, r4
 80096c8:	f002 fa0c 	bl	800bae4 <__lshift>
 80096cc:	9005      	str	r0, [sp, #20]
 80096ce:	2800      	cmp	r0, #0
 80096d0:	f43f ae7e 	beq.w	80093d0 <_strtod_l+0x490>
 80096d4:	f1b9 0f00 	cmp.w	r9, #0
 80096d8:	dd08      	ble.n	80096ec <_strtod_l+0x7ac>
 80096da:	4631      	mov	r1, r6
 80096dc:	464a      	mov	r2, r9
 80096de:	4620      	mov	r0, r4
 80096e0:	f002 fa00 	bl	800bae4 <__lshift>
 80096e4:	4606      	mov	r6, r0
 80096e6:	2800      	cmp	r0, #0
 80096e8:	f43f ae72 	beq.w	80093d0 <_strtod_l+0x490>
 80096ec:	9a05      	ldr	r2, [sp, #20]
 80096ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 80096f0:	4620      	mov	r0, r4
 80096f2:	f002 fa83 	bl	800bbfc <__mdiff>
 80096f6:	4605      	mov	r5, r0
 80096f8:	2800      	cmp	r0, #0
 80096fa:	f43f ae69 	beq.w	80093d0 <_strtod_l+0x490>
 80096fe:	68c3      	ldr	r3, [r0, #12]
 8009700:	930b      	str	r3, [sp, #44]	; 0x2c
 8009702:	2300      	movs	r3, #0
 8009704:	60c3      	str	r3, [r0, #12]
 8009706:	4631      	mov	r1, r6
 8009708:	f002 fa5c 	bl	800bbc4 <__mcmp>
 800970c:	2800      	cmp	r0, #0
 800970e:	da60      	bge.n	80097d2 <_strtod_l+0x892>
 8009710:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009712:	ea53 030a 	orrs.w	r3, r3, sl
 8009716:	f040 8082 	bne.w	800981e <_strtod_l+0x8de>
 800971a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800971e:	2b00      	cmp	r3, #0
 8009720:	d17d      	bne.n	800981e <_strtod_l+0x8de>
 8009722:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009726:	0d1b      	lsrs	r3, r3, #20
 8009728:	051b      	lsls	r3, r3, #20
 800972a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800972e:	d976      	bls.n	800981e <_strtod_l+0x8de>
 8009730:	696b      	ldr	r3, [r5, #20]
 8009732:	b913      	cbnz	r3, 800973a <_strtod_l+0x7fa>
 8009734:	692b      	ldr	r3, [r5, #16]
 8009736:	2b01      	cmp	r3, #1
 8009738:	dd71      	ble.n	800981e <_strtod_l+0x8de>
 800973a:	4629      	mov	r1, r5
 800973c:	2201      	movs	r2, #1
 800973e:	4620      	mov	r0, r4
 8009740:	f002 f9d0 	bl	800bae4 <__lshift>
 8009744:	4631      	mov	r1, r6
 8009746:	4605      	mov	r5, r0
 8009748:	f002 fa3c 	bl	800bbc4 <__mcmp>
 800974c:	2800      	cmp	r0, #0
 800974e:	dd66      	ble.n	800981e <_strtod_l+0x8de>
 8009750:	9904      	ldr	r1, [sp, #16]
 8009752:	4a53      	ldr	r2, [pc, #332]	; (80098a0 <_strtod_l+0x960>)
 8009754:	465b      	mov	r3, fp
 8009756:	2900      	cmp	r1, #0
 8009758:	f000 8081 	beq.w	800985e <_strtod_l+0x91e>
 800975c:	ea02 010b 	and.w	r1, r2, fp
 8009760:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009764:	dc7b      	bgt.n	800985e <_strtod_l+0x91e>
 8009766:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800976a:	f77f aea9 	ble.w	80094c0 <_strtod_l+0x580>
 800976e:	4b4d      	ldr	r3, [pc, #308]	; (80098a4 <_strtod_l+0x964>)
 8009770:	4650      	mov	r0, sl
 8009772:	4659      	mov	r1, fp
 8009774:	2200      	movs	r2, #0
 8009776:	f7f6 ff3f 	bl	80005f8 <__aeabi_dmul>
 800977a:	460b      	mov	r3, r1
 800977c:	4303      	orrs	r3, r0
 800977e:	bf08      	it	eq
 8009780:	2322      	moveq	r3, #34	; 0x22
 8009782:	4682      	mov	sl, r0
 8009784:	468b      	mov	fp, r1
 8009786:	bf08      	it	eq
 8009788:	6023      	streq	r3, [r4, #0]
 800978a:	e62b      	b.n	80093e4 <_strtod_l+0x4a4>
 800978c:	f04f 32ff 	mov.w	r2, #4294967295
 8009790:	fa02 f303 	lsl.w	r3, r2, r3
 8009794:	ea03 0a0a 	and.w	sl, r3, sl
 8009798:	e6e3      	b.n	8009562 <_strtod_l+0x622>
 800979a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800979e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80097a2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80097a6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80097aa:	fa01 f308 	lsl.w	r3, r1, r8
 80097ae:	9308      	str	r3, [sp, #32]
 80097b0:	910d      	str	r1, [sp, #52]	; 0x34
 80097b2:	e746      	b.n	8009642 <_strtod_l+0x702>
 80097b4:	2300      	movs	r3, #0
 80097b6:	9308      	str	r3, [sp, #32]
 80097b8:	2301      	movs	r3, #1
 80097ba:	930d      	str	r3, [sp, #52]	; 0x34
 80097bc:	e741      	b.n	8009642 <_strtod_l+0x702>
 80097be:	9918      	ldr	r1, [sp, #96]	; 0x60
 80097c0:	4642      	mov	r2, r8
 80097c2:	4620      	mov	r0, r4
 80097c4:	f002 f98e 	bl	800bae4 <__lshift>
 80097c8:	9018      	str	r0, [sp, #96]	; 0x60
 80097ca:	2800      	cmp	r0, #0
 80097cc:	f47f af6b 	bne.w	80096a6 <_strtod_l+0x766>
 80097d0:	e5fe      	b.n	80093d0 <_strtod_l+0x490>
 80097d2:	465f      	mov	r7, fp
 80097d4:	d16e      	bne.n	80098b4 <_strtod_l+0x974>
 80097d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80097d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80097dc:	b342      	cbz	r2, 8009830 <_strtod_l+0x8f0>
 80097de:	4a32      	ldr	r2, [pc, #200]	; (80098a8 <_strtod_l+0x968>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d128      	bne.n	8009836 <_strtod_l+0x8f6>
 80097e4:	9b04      	ldr	r3, [sp, #16]
 80097e6:	4651      	mov	r1, sl
 80097e8:	b1eb      	cbz	r3, 8009826 <_strtod_l+0x8e6>
 80097ea:	4b2d      	ldr	r3, [pc, #180]	; (80098a0 <_strtod_l+0x960>)
 80097ec:	403b      	ands	r3, r7
 80097ee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80097f2:	f04f 32ff 	mov.w	r2, #4294967295
 80097f6:	d819      	bhi.n	800982c <_strtod_l+0x8ec>
 80097f8:	0d1b      	lsrs	r3, r3, #20
 80097fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80097fe:	fa02 f303 	lsl.w	r3, r2, r3
 8009802:	4299      	cmp	r1, r3
 8009804:	d117      	bne.n	8009836 <_strtod_l+0x8f6>
 8009806:	4b29      	ldr	r3, [pc, #164]	; (80098ac <_strtod_l+0x96c>)
 8009808:	429f      	cmp	r7, r3
 800980a:	d102      	bne.n	8009812 <_strtod_l+0x8d2>
 800980c:	3101      	adds	r1, #1
 800980e:	f43f addf 	beq.w	80093d0 <_strtod_l+0x490>
 8009812:	4b23      	ldr	r3, [pc, #140]	; (80098a0 <_strtod_l+0x960>)
 8009814:	403b      	ands	r3, r7
 8009816:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800981a:	f04f 0a00 	mov.w	sl, #0
 800981e:	9b04      	ldr	r3, [sp, #16]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d1a4      	bne.n	800976e <_strtod_l+0x82e>
 8009824:	e5de      	b.n	80093e4 <_strtod_l+0x4a4>
 8009826:	f04f 33ff 	mov.w	r3, #4294967295
 800982a:	e7ea      	b.n	8009802 <_strtod_l+0x8c2>
 800982c:	4613      	mov	r3, r2
 800982e:	e7e8      	b.n	8009802 <_strtod_l+0x8c2>
 8009830:	ea53 030a 	orrs.w	r3, r3, sl
 8009834:	d08c      	beq.n	8009750 <_strtod_l+0x810>
 8009836:	9b08      	ldr	r3, [sp, #32]
 8009838:	b1db      	cbz	r3, 8009872 <_strtod_l+0x932>
 800983a:	423b      	tst	r3, r7
 800983c:	d0ef      	beq.n	800981e <_strtod_l+0x8de>
 800983e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009840:	9a04      	ldr	r2, [sp, #16]
 8009842:	4650      	mov	r0, sl
 8009844:	4659      	mov	r1, fp
 8009846:	b1c3      	cbz	r3, 800987a <_strtod_l+0x93a>
 8009848:	f7ff fb5e 	bl	8008f08 <sulp>
 800984c:	4602      	mov	r2, r0
 800984e:	460b      	mov	r3, r1
 8009850:	ec51 0b18 	vmov	r0, r1, d8
 8009854:	f7f6 fd1a 	bl	800028c <__adddf3>
 8009858:	4682      	mov	sl, r0
 800985a:	468b      	mov	fp, r1
 800985c:	e7df      	b.n	800981e <_strtod_l+0x8de>
 800985e:	4013      	ands	r3, r2
 8009860:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009864:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009868:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800986c:	f04f 3aff 	mov.w	sl, #4294967295
 8009870:	e7d5      	b.n	800981e <_strtod_l+0x8de>
 8009872:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009874:	ea13 0f0a 	tst.w	r3, sl
 8009878:	e7e0      	b.n	800983c <_strtod_l+0x8fc>
 800987a:	f7ff fb45 	bl	8008f08 <sulp>
 800987e:	4602      	mov	r2, r0
 8009880:	460b      	mov	r3, r1
 8009882:	ec51 0b18 	vmov	r0, r1, d8
 8009886:	f7f6 fcff 	bl	8000288 <__aeabi_dsub>
 800988a:	2200      	movs	r2, #0
 800988c:	2300      	movs	r3, #0
 800988e:	4682      	mov	sl, r0
 8009890:	468b      	mov	fp, r1
 8009892:	f7f7 f919 	bl	8000ac8 <__aeabi_dcmpeq>
 8009896:	2800      	cmp	r0, #0
 8009898:	d0c1      	beq.n	800981e <_strtod_l+0x8de>
 800989a:	e611      	b.n	80094c0 <_strtod_l+0x580>
 800989c:	fffffc02 	.word	0xfffffc02
 80098a0:	7ff00000 	.word	0x7ff00000
 80098a4:	39500000 	.word	0x39500000
 80098a8:	000fffff 	.word	0x000fffff
 80098ac:	7fefffff 	.word	0x7fefffff
 80098b0:	0800cc40 	.word	0x0800cc40
 80098b4:	4631      	mov	r1, r6
 80098b6:	4628      	mov	r0, r5
 80098b8:	f002 fb02 	bl	800bec0 <__ratio>
 80098bc:	ec59 8b10 	vmov	r8, r9, d0
 80098c0:	ee10 0a10 	vmov	r0, s0
 80098c4:	2200      	movs	r2, #0
 80098c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80098ca:	4649      	mov	r1, r9
 80098cc:	f7f7 f910 	bl	8000af0 <__aeabi_dcmple>
 80098d0:	2800      	cmp	r0, #0
 80098d2:	d07a      	beq.n	80099ca <_strtod_l+0xa8a>
 80098d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d04a      	beq.n	8009970 <_strtod_l+0xa30>
 80098da:	4b95      	ldr	r3, [pc, #596]	; (8009b30 <_strtod_l+0xbf0>)
 80098dc:	2200      	movs	r2, #0
 80098de:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80098e2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009b30 <_strtod_l+0xbf0>
 80098e6:	f04f 0800 	mov.w	r8, #0
 80098ea:	4b92      	ldr	r3, [pc, #584]	; (8009b34 <_strtod_l+0xbf4>)
 80098ec:	403b      	ands	r3, r7
 80098ee:	930d      	str	r3, [sp, #52]	; 0x34
 80098f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80098f2:	4b91      	ldr	r3, [pc, #580]	; (8009b38 <_strtod_l+0xbf8>)
 80098f4:	429a      	cmp	r2, r3
 80098f6:	f040 80b0 	bne.w	8009a5a <_strtod_l+0xb1a>
 80098fa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80098fe:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009902:	ec4b ab10 	vmov	d0, sl, fp
 8009906:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800990a:	f002 fa01 	bl	800bd10 <__ulp>
 800990e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009912:	ec53 2b10 	vmov	r2, r3, d0
 8009916:	f7f6 fe6f 	bl	80005f8 <__aeabi_dmul>
 800991a:	4652      	mov	r2, sl
 800991c:	465b      	mov	r3, fp
 800991e:	f7f6 fcb5 	bl	800028c <__adddf3>
 8009922:	460b      	mov	r3, r1
 8009924:	4983      	ldr	r1, [pc, #524]	; (8009b34 <_strtod_l+0xbf4>)
 8009926:	4a85      	ldr	r2, [pc, #532]	; (8009b3c <_strtod_l+0xbfc>)
 8009928:	4019      	ands	r1, r3
 800992a:	4291      	cmp	r1, r2
 800992c:	4682      	mov	sl, r0
 800992e:	d960      	bls.n	80099f2 <_strtod_l+0xab2>
 8009930:	ee18 3a90 	vmov	r3, s17
 8009934:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009938:	4293      	cmp	r3, r2
 800993a:	d104      	bne.n	8009946 <_strtod_l+0xa06>
 800993c:	ee18 3a10 	vmov	r3, s16
 8009940:	3301      	adds	r3, #1
 8009942:	f43f ad45 	beq.w	80093d0 <_strtod_l+0x490>
 8009946:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009b48 <_strtod_l+0xc08>
 800994a:	f04f 3aff 	mov.w	sl, #4294967295
 800994e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009950:	4620      	mov	r0, r4
 8009952:	f001 feab 	bl	800b6ac <_Bfree>
 8009956:	9905      	ldr	r1, [sp, #20]
 8009958:	4620      	mov	r0, r4
 800995a:	f001 fea7 	bl	800b6ac <_Bfree>
 800995e:	4631      	mov	r1, r6
 8009960:	4620      	mov	r0, r4
 8009962:	f001 fea3 	bl	800b6ac <_Bfree>
 8009966:	4629      	mov	r1, r5
 8009968:	4620      	mov	r0, r4
 800996a:	f001 fe9f 	bl	800b6ac <_Bfree>
 800996e:	e61a      	b.n	80095a6 <_strtod_l+0x666>
 8009970:	f1ba 0f00 	cmp.w	sl, #0
 8009974:	d11b      	bne.n	80099ae <_strtod_l+0xa6e>
 8009976:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800997a:	b9f3      	cbnz	r3, 80099ba <_strtod_l+0xa7a>
 800997c:	4b6c      	ldr	r3, [pc, #432]	; (8009b30 <_strtod_l+0xbf0>)
 800997e:	2200      	movs	r2, #0
 8009980:	4640      	mov	r0, r8
 8009982:	4649      	mov	r1, r9
 8009984:	f7f7 f8aa 	bl	8000adc <__aeabi_dcmplt>
 8009988:	b9d0      	cbnz	r0, 80099c0 <_strtod_l+0xa80>
 800998a:	4640      	mov	r0, r8
 800998c:	4649      	mov	r1, r9
 800998e:	4b6c      	ldr	r3, [pc, #432]	; (8009b40 <_strtod_l+0xc00>)
 8009990:	2200      	movs	r2, #0
 8009992:	f7f6 fe31 	bl	80005f8 <__aeabi_dmul>
 8009996:	4680      	mov	r8, r0
 8009998:	4689      	mov	r9, r1
 800999a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800999e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80099a2:	9315      	str	r3, [sp, #84]	; 0x54
 80099a4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80099a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80099ac:	e79d      	b.n	80098ea <_strtod_l+0x9aa>
 80099ae:	f1ba 0f01 	cmp.w	sl, #1
 80099b2:	d102      	bne.n	80099ba <_strtod_l+0xa7a>
 80099b4:	2f00      	cmp	r7, #0
 80099b6:	f43f ad83 	beq.w	80094c0 <_strtod_l+0x580>
 80099ba:	4b62      	ldr	r3, [pc, #392]	; (8009b44 <_strtod_l+0xc04>)
 80099bc:	2200      	movs	r2, #0
 80099be:	e78e      	b.n	80098de <_strtod_l+0x99e>
 80099c0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009b40 <_strtod_l+0xc00>
 80099c4:	f04f 0800 	mov.w	r8, #0
 80099c8:	e7e7      	b.n	800999a <_strtod_l+0xa5a>
 80099ca:	4b5d      	ldr	r3, [pc, #372]	; (8009b40 <_strtod_l+0xc00>)
 80099cc:	4640      	mov	r0, r8
 80099ce:	4649      	mov	r1, r9
 80099d0:	2200      	movs	r2, #0
 80099d2:	f7f6 fe11 	bl	80005f8 <__aeabi_dmul>
 80099d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099d8:	4680      	mov	r8, r0
 80099da:	4689      	mov	r9, r1
 80099dc:	b933      	cbnz	r3, 80099ec <_strtod_l+0xaac>
 80099de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80099e2:	900e      	str	r0, [sp, #56]	; 0x38
 80099e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80099e6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80099ea:	e7dd      	b.n	80099a8 <_strtod_l+0xa68>
 80099ec:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80099f0:	e7f9      	b.n	80099e6 <_strtod_l+0xaa6>
 80099f2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80099f6:	9b04      	ldr	r3, [sp, #16]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d1a8      	bne.n	800994e <_strtod_l+0xa0e>
 80099fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009a00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a02:	0d1b      	lsrs	r3, r3, #20
 8009a04:	051b      	lsls	r3, r3, #20
 8009a06:	429a      	cmp	r2, r3
 8009a08:	d1a1      	bne.n	800994e <_strtod_l+0xa0e>
 8009a0a:	4640      	mov	r0, r8
 8009a0c:	4649      	mov	r1, r9
 8009a0e:	f7f7 f953 	bl	8000cb8 <__aeabi_d2lz>
 8009a12:	f7f6 fdc3 	bl	800059c <__aeabi_l2d>
 8009a16:	4602      	mov	r2, r0
 8009a18:	460b      	mov	r3, r1
 8009a1a:	4640      	mov	r0, r8
 8009a1c:	4649      	mov	r1, r9
 8009a1e:	f7f6 fc33 	bl	8000288 <__aeabi_dsub>
 8009a22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009a24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a28:	ea43 030a 	orr.w	r3, r3, sl
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	4680      	mov	r8, r0
 8009a30:	4689      	mov	r9, r1
 8009a32:	d055      	beq.n	8009ae0 <_strtod_l+0xba0>
 8009a34:	a336      	add	r3, pc, #216	; (adr r3, 8009b10 <_strtod_l+0xbd0>)
 8009a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3a:	f7f7 f84f 	bl	8000adc <__aeabi_dcmplt>
 8009a3e:	2800      	cmp	r0, #0
 8009a40:	f47f acd0 	bne.w	80093e4 <_strtod_l+0x4a4>
 8009a44:	a334      	add	r3, pc, #208	; (adr r3, 8009b18 <_strtod_l+0xbd8>)
 8009a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a4a:	4640      	mov	r0, r8
 8009a4c:	4649      	mov	r1, r9
 8009a4e:	f7f7 f863 	bl	8000b18 <__aeabi_dcmpgt>
 8009a52:	2800      	cmp	r0, #0
 8009a54:	f43f af7b 	beq.w	800994e <_strtod_l+0xa0e>
 8009a58:	e4c4      	b.n	80093e4 <_strtod_l+0x4a4>
 8009a5a:	9b04      	ldr	r3, [sp, #16]
 8009a5c:	b333      	cbz	r3, 8009aac <_strtod_l+0xb6c>
 8009a5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a60:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009a64:	d822      	bhi.n	8009aac <_strtod_l+0xb6c>
 8009a66:	a32e      	add	r3, pc, #184	; (adr r3, 8009b20 <_strtod_l+0xbe0>)
 8009a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6c:	4640      	mov	r0, r8
 8009a6e:	4649      	mov	r1, r9
 8009a70:	f7f7 f83e 	bl	8000af0 <__aeabi_dcmple>
 8009a74:	b1a0      	cbz	r0, 8009aa0 <_strtod_l+0xb60>
 8009a76:	4649      	mov	r1, r9
 8009a78:	4640      	mov	r0, r8
 8009a7a:	f7f7 f895 	bl	8000ba8 <__aeabi_d2uiz>
 8009a7e:	2801      	cmp	r0, #1
 8009a80:	bf38      	it	cc
 8009a82:	2001      	movcc	r0, #1
 8009a84:	f7f6 fd3e 	bl	8000504 <__aeabi_ui2d>
 8009a88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a8a:	4680      	mov	r8, r0
 8009a8c:	4689      	mov	r9, r1
 8009a8e:	bb23      	cbnz	r3, 8009ada <_strtod_l+0xb9a>
 8009a90:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009a94:	9010      	str	r0, [sp, #64]	; 0x40
 8009a96:	9311      	str	r3, [sp, #68]	; 0x44
 8009a98:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009a9c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009aa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009aa2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009aa4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009aa8:	1a9b      	subs	r3, r3, r2
 8009aaa:	9309      	str	r3, [sp, #36]	; 0x24
 8009aac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009ab0:	eeb0 0a48 	vmov.f32	s0, s16
 8009ab4:	eef0 0a68 	vmov.f32	s1, s17
 8009ab8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009abc:	f002 f928 	bl	800bd10 <__ulp>
 8009ac0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009ac4:	ec53 2b10 	vmov	r2, r3, d0
 8009ac8:	f7f6 fd96 	bl	80005f8 <__aeabi_dmul>
 8009acc:	ec53 2b18 	vmov	r2, r3, d8
 8009ad0:	f7f6 fbdc 	bl	800028c <__adddf3>
 8009ad4:	4682      	mov	sl, r0
 8009ad6:	468b      	mov	fp, r1
 8009ad8:	e78d      	b.n	80099f6 <_strtod_l+0xab6>
 8009ada:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009ade:	e7db      	b.n	8009a98 <_strtod_l+0xb58>
 8009ae0:	a311      	add	r3, pc, #68	; (adr r3, 8009b28 <_strtod_l+0xbe8>)
 8009ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae6:	f7f6 fff9 	bl	8000adc <__aeabi_dcmplt>
 8009aea:	e7b2      	b.n	8009a52 <_strtod_l+0xb12>
 8009aec:	2300      	movs	r3, #0
 8009aee:	930a      	str	r3, [sp, #40]	; 0x28
 8009af0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009af2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009af4:	6013      	str	r3, [r2, #0]
 8009af6:	f7ff ba6b 	b.w	8008fd0 <_strtod_l+0x90>
 8009afa:	2a65      	cmp	r2, #101	; 0x65
 8009afc:	f43f ab5f 	beq.w	80091be <_strtod_l+0x27e>
 8009b00:	2a45      	cmp	r2, #69	; 0x45
 8009b02:	f43f ab5c 	beq.w	80091be <_strtod_l+0x27e>
 8009b06:	2301      	movs	r3, #1
 8009b08:	f7ff bb94 	b.w	8009234 <_strtod_l+0x2f4>
 8009b0c:	f3af 8000 	nop.w
 8009b10:	94a03595 	.word	0x94a03595
 8009b14:	3fdfffff 	.word	0x3fdfffff
 8009b18:	35afe535 	.word	0x35afe535
 8009b1c:	3fe00000 	.word	0x3fe00000
 8009b20:	ffc00000 	.word	0xffc00000
 8009b24:	41dfffff 	.word	0x41dfffff
 8009b28:	94a03595 	.word	0x94a03595
 8009b2c:	3fcfffff 	.word	0x3fcfffff
 8009b30:	3ff00000 	.word	0x3ff00000
 8009b34:	7ff00000 	.word	0x7ff00000
 8009b38:	7fe00000 	.word	0x7fe00000
 8009b3c:	7c9fffff 	.word	0x7c9fffff
 8009b40:	3fe00000 	.word	0x3fe00000
 8009b44:	bff00000 	.word	0xbff00000
 8009b48:	7fefffff 	.word	0x7fefffff

08009b4c <_strtod_r>:
 8009b4c:	4b01      	ldr	r3, [pc, #4]	; (8009b54 <_strtod_r+0x8>)
 8009b4e:	f7ff b9f7 	b.w	8008f40 <_strtod_l>
 8009b52:	bf00      	nop
 8009b54:	2000007c 	.word	0x2000007c

08009b58 <_strtol_l.constprop.0>:
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b5e:	d001      	beq.n	8009b64 <_strtol_l.constprop.0+0xc>
 8009b60:	2b24      	cmp	r3, #36	; 0x24
 8009b62:	d906      	bls.n	8009b72 <_strtol_l.constprop.0+0x1a>
 8009b64:	f7fe fa62 	bl	800802c <__errno>
 8009b68:	2316      	movs	r3, #22
 8009b6a:	6003      	str	r3, [r0, #0]
 8009b6c:	2000      	movs	r0, #0
 8009b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b72:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009c58 <_strtol_l.constprop.0+0x100>
 8009b76:	460d      	mov	r5, r1
 8009b78:	462e      	mov	r6, r5
 8009b7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b7e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009b82:	f017 0708 	ands.w	r7, r7, #8
 8009b86:	d1f7      	bne.n	8009b78 <_strtol_l.constprop.0+0x20>
 8009b88:	2c2d      	cmp	r4, #45	; 0x2d
 8009b8a:	d132      	bne.n	8009bf2 <_strtol_l.constprop.0+0x9a>
 8009b8c:	782c      	ldrb	r4, [r5, #0]
 8009b8e:	2701      	movs	r7, #1
 8009b90:	1cb5      	adds	r5, r6, #2
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d05b      	beq.n	8009c4e <_strtol_l.constprop.0+0xf6>
 8009b96:	2b10      	cmp	r3, #16
 8009b98:	d109      	bne.n	8009bae <_strtol_l.constprop.0+0x56>
 8009b9a:	2c30      	cmp	r4, #48	; 0x30
 8009b9c:	d107      	bne.n	8009bae <_strtol_l.constprop.0+0x56>
 8009b9e:	782c      	ldrb	r4, [r5, #0]
 8009ba0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009ba4:	2c58      	cmp	r4, #88	; 0x58
 8009ba6:	d14d      	bne.n	8009c44 <_strtol_l.constprop.0+0xec>
 8009ba8:	786c      	ldrb	r4, [r5, #1]
 8009baa:	2310      	movs	r3, #16
 8009bac:	3502      	adds	r5, #2
 8009bae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009bb2:	f108 38ff 	add.w	r8, r8, #4294967295
 8009bb6:	f04f 0c00 	mov.w	ip, #0
 8009bba:	fbb8 f9f3 	udiv	r9, r8, r3
 8009bbe:	4666      	mov	r6, ip
 8009bc0:	fb03 8a19 	mls	sl, r3, r9, r8
 8009bc4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009bc8:	f1be 0f09 	cmp.w	lr, #9
 8009bcc:	d816      	bhi.n	8009bfc <_strtol_l.constprop.0+0xa4>
 8009bce:	4674      	mov	r4, lr
 8009bd0:	42a3      	cmp	r3, r4
 8009bd2:	dd24      	ble.n	8009c1e <_strtol_l.constprop.0+0xc6>
 8009bd4:	f1bc 0f00 	cmp.w	ip, #0
 8009bd8:	db1e      	blt.n	8009c18 <_strtol_l.constprop.0+0xc0>
 8009bda:	45b1      	cmp	r9, r6
 8009bdc:	d31c      	bcc.n	8009c18 <_strtol_l.constprop.0+0xc0>
 8009bde:	d101      	bne.n	8009be4 <_strtol_l.constprop.0+0x8c>
 8009be0:	45a2      	cmp	sl, r4
 8009be2:	db19      	blt.n	8009c18 <_strtol_l.constprop.0+0xc0>
 8009be4:	fb06 4603 	mla	r6, r6, r3, r4
 8009be8:	f04f 0c01 	mov.w	ip, #1
 8009bec:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009bf0:	e7e8      	b.n	8009bc4 <_strtol_l.constprop.0+0x6c>
 8009bf2:	2c2b      	cmp	r4, #43	; 0x2b
 8009bf4:	bf04      	itt	eq
 8009bf6:	782c      	ldrbeq	r4, [r5, #0]
 8009bf8:	1cb5      	addeq	r5, r6, #2
 8009bfa:	e7ca      	b.n	8009b92 <_strtol_l.constprop.0+0x3a>
 8009bfc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009c00:	f1be 0f19 	cmp.w	lr, #25
 8009c04:	d801      	bhi.n	8009c0a <_strtol_l.constprop.0+0xb2>
 8009c06:	3c37      	subs	r4, #55	; 0x37
 8009c08:	e7e2      	b.n	8009bd0 <_strtol_l.constprop.0+0x78>
 8009c0a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009c0e:	f1be 0f19 	cmp.w	lr, #25
 8009c12:	d804      	bhi.n	8009c1e <_strtol_l.constprop.0+0xc6>
 8009c14:	3c57      	subs	r4, #87	; 0x57
 8009c16:	e7db      	b.n	8009bd0 <_strtol_l.constprop.0+0x78>
 8009c18:	f04f 3cff 	mov.w	ip, #4294967295
 8009c1c:	e7e6      	b.n	8009bec <_strtol_l.constprop.0+0x94>
 8009c1e:	f1bc 0f00 	cmp.w	ip, #0
 8009c22:	da05      	bge.n	8009c30 <_strtol_l.constprop.0+0xd8>
 8009c24:	2322      	movs	r3, #34	; 0x22
 8009c26:	6003      	str	r3, [r0, #0]
 8009c28:	4646      	mov	r6, r8
 8009c2a:	b942      	cbnz	r2, 8009c3e <_strtol_l.constprop.0+0xe6>
 8009c2c:	4630      	mov	r0, r6
 8009c2e:	e79e      	b.n	8009b6e <_strtol_l.constprop.0+0x16>
 8009c30:	b107      	cbz	r7, 8009c34 <_strtol_l.constprop.0+0xdc>
 8009c32:	4276      	negs	r6, r6
 8009c34:	2a00      	cmp	r2, #0
 8009c36:	d0f9      	beq.n	8009c2c <_strtol_l.constprop.0+0xd4>
 8009c38:	f1bc 0f00 	cmp.w	ip, #0
 8009c3c:	d000      	beq.n	8009c40 <_strtol_l.constprop.0+0xe8>
 8009c3e:	1e69      	subs	r1, r5, #1
 8009c40:	6011      	str	r1, [r2, #0]
 8009c42:	e7f3      	b.n	8009c2c <_strtol_l.constprop.0+0xd4>
 8009c44:	2430      	movs	r4, #48	; 0x30
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d1b1      	bne.n	8009bae <_strtol_l.constprop.0+0x56>
 8009c4a:	2308      	movs	r3, #8
 8009c4c:	e7af      	b.n	8009bae <_strtol_l.constprop.0+0x56>
 8009c4e:	2c30      	cmp	r4, #48	; 0x30
 8009c50:	d0a5      	beq.n	8009b9e <_strtol_l.constprop.0+0x46>
 8009c52:	230a      	movs	r3, #10
 8009c54:	e7ab      	b.n	8009bae <_strtol_l.constprop.0+0x56>
 8009c56:	bf00      	nop
 8009c58:	0800cc69 	.word	0x0800cc69

08009c5c <_strtol_r>:
 8009c5c:	f7ff bf7c 	b.w	8009b58 <_strtol_l.constprop.0>

08009c60 <__swbuf_r>:
 8009c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c62:	460e      	mov	r6, r1
 8009c64:	4614      	mov	r4, r2
 8009c66:	4605      	mov	r5, r0
 8009c68:	b118      	cbz	r0, 8009c72 <__swbuf_r+0x12>
 8009c6a:	6983      	ldr	r3, [r0, #24]
 8009c6c:	b90b      	cbnz	r3, 8009c72 <__swbuf_r+0x12>
 8009c6e:	f001 f84b 	bl	800ad08 <__sinit>
 8009c72:	4b21      	ldr	r3, [pc, #132]	; (8009cf8 <__swbuf_r+0x98>)
 8009c74:	429c      	cmp	r4, r3
 8009c76:	d12b      	bne.n	8009cd0 <__swbuf_r+0x70>
 8009c78:	686c      	ldr	r4, [r5, #4]
 8009c7a:	69a3      	ldr	r3, [r4, #24]
 8009c7c:	60a3      	str	r3, [r4, #8]
 8009c7e:	89a3      	ldrh	r3, [r4, #12]
 8009c80:	071a      	lsls	r2, r3, #28
 8009c82:	d52f      	bpl.n	8009ce4 <__swbuf_r+0x84>
 8009c84:	6923      	ldr	r3, [r4, #16]
 8009c86:	b36b      	cbz	r3, 8009ce4 <__swbuf_r+0x84>
 8009c88:	6923      	ldr	r3, [r4, #16]
 8009c8a:	6820      	ldr	r0, [r4, #0]
 8009c8c:	1ac0      	subs	r0, r0, r3
 8009c8e:	6963      	ldr	r3, [r4, #20]
 8009c90:	b2f6      	uxtb	r6, r6
 8009c92:	4283      	cmp	r3, r0
 8009c94:	4637      	mov	r7, r6
 8009c96:	dc04      	bgt.n	8009ca2 <__swbuf_r+0x42>
 8009c98:	4621      	mov	r1, r4
 8009c9a:	4628      	mov	r0, r5
 8009c9c:	f000 ffa0 	bl	800abe0 <_fflush_r>
 8009ca0:	bb30      	cbnz	r0, 8009cf0 <__swbuf_r+0x90>
 8009ca2:	68a3      	ldr	r3, [r4, #8]
 8009ca4:	3b01      	subs	r3, #1
 8009ca6:	60a3      	str	r3, [r4, #8]
 8009ca8:	6823      	ldr	r3, [r4, #0]
 8009caa:	1c5a      	adds	r2, r3, #1
 8009cac:	6022      	str	r2, [r4, #0]
 8009cae:	701e      	strb	r6, [r3, #0]
 8009cb0:	6963      	ldr	r3, [r4, #20]
 8009cb2:	3001      	adds	r0, #1
 8009cb4:	4283      	cmp	r3, r0
 8009cb6:	d004      	beq.n	8009cc2 <__swbuf_r+0x62>
 8009cb8:	89a3      	ldrh	r3, [r4, #12]
 8009cba:	07db      	lsls	r3, r3, #31
 8009cbc:	d506      	bpl.n	8009ccc <__swbuf_r+0x6c>
 8009cbe:	2e0a      	cmp	r6, #10
 8009cc0:	d104      	bne.n	8009ccc <__swbuf_r+0x6c>
 8009cc2:	4621      	mov	r1, r4
 8009cc4:	4628      	mov	r0, r5
 8009cc6:	f000 ff8b 	bl	800abe0 <_fflush_r>
 8009cca:	b988      	cbnz	r0, 8009cf0 <__swbuf_r+0x90>
 8009ccc:	4638      	mov	r0, r7
 8009cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cd0:	4b0a      	ldr	r3, [pc, #40]	; (8009cfc <__swbuf_r+0x9c>)
 8009cd2:	429c      	cmp	r4, r3
 8009cd4:	d101      	bne.n	8009cda <__swbuf_r+0x7a>
 8009cd6:	68ac      	ldr	r4, [r5, #8]
 8009cd8:	e7cf      	b.n	8009c7a <__swbuf_r+0x1a>
 8009cda:	4b09      	ldr	r3, [pc, #36]	; (8009d00 <__swbuf_r+0xa0>)
 8009cdc:	429c      	cmp	r4, r3
 8009cde:	bf08      	it	eq
 8009ce0:	68ec      	ldreq	r4, [r5, #12]
 8009ce2:	e7ca      	b.n	8009c7a <__swbuf_r+0x1a>
 8009ce4:	4621      	mov	r1, r4
 8009ce6:	4628      	mov	r0, r5
 8009ce8:	f000 f80c 	bl	8009d04 <__swsetup_r>
 8009cec:	2800      	cmp	r0, #0
 8009cee:	d0cb      	beq.n	8009c88 <__swbuf_r+0x28>
 8009cf0:	f04f 37ff 	mov.w	r7, #4294967295
 8009cf4:	e7ea      	b.n	8009ccc <__swbuf_r+0x6c>
 8009cf6:	bf00      	nop
 8009cf8:	0800ce1c 	.word	0x0800ce1c
 8009cfc:	0800ce3c 	.word	0x0800ce3c
 8009d00:	0800cdfc 	.word	0x0800cdfc

08009d04 <__swsetup_r>:
 8009d04:	4b32      	ldr	r3, [pc, #200]	; (8009dd0 <__swsetup_r+0xcc>)
 8009d06:	b570      	push	{r4, r5, r6, lr}
 8009d08:	681d      	ldr	r5, [r3, #0]
 8009d0a:	4606      	mov	r6, r0
 8009d0c:	460c      	mov	r4, r1
 8009d0e:	b125      	cbz	r5, 8009d1a <__swsetup_r+0x16>
 8009d10:	69ab      	ldr	r3, [r5, #24]
 8009d12:	b913      	cbnz	r3, 8009d1a <__swsetup_r+0x16>
 8009d14:	4628      	mov	r0, r5
 8009d16:	f000 fff7 	bl	800ad08 <__sinit>
 8009d1a:	4b2e      	ldr	r3, [pc, #184]	; (8009dd4 <__swsetup_r+0xd0>)
 8009d1c:	429c      	cmp	r4, r3
 8009d1e:	d10f      	bne.n	8009d40 <__swsetup_r+0x3c>
 8009d20:	686c      	ldr	r4, [r5, #4]
 8009d22:	89a3      	ldrh	r3, [r4, #12]
 8009d24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d28:	0719      	lsls	r1, r3, #28
 8009d2a:	d42c      	bmi.n	8009d86 <__swsetup_r+0x82>
 8009d2c:	06dd      	lsls	r5, r3, #27
 8009d2e:	d411      	bmi.n	8009d54 <__swsetup_r+0x50>
 8009d30:	2309      	movs	r3, #9
 8009d32:	6033      	str	r3, [r6, #0]
 8009d34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d38:	81a3      	strh	r3, [r4, #12]
 8009d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d3e:	e03e      	b.n	8009dbe <__swsetup_r+0xba>
 8009d40:	4b25      	ldr	r3, [pc, #148]	; (8009dd8 <__swsetup_r+0xd4>)
 8009d42:	429c      	cmp	r4, r3
 8009d44:	d101      	bne.n	8009d4a <__swsetup_r+0x46>
 8009d46:	68ac      	ldr	r4, [r5, #8]
 8009d48:	e7eb      	b.n	8009d22 <__swsetup_r+0x1e>
 8009d4a:	4b24      	ldr	r3, [pc, #144]	; (8009ddc <__swsetup_r+0xd8>)
 8009d4c:	429c      	cmp	r4, r3
 8009d4e:	bf08      	it	eq
 8009d50:	68ec      	ldreq	r4, [r5, #12]
 8009d52:	e7e6      	b.n	8009d22 <__swsetup_r+0x1e>
 8009d54:	0758      	lsls	r0, r3, #29
 8009d56:	d512      	bpl.n	8009d7e <__swsetup_r+0x7a>
 8009d58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d5a:	b141      	cbz	r1, 8009d6e <__swsetup_r+0x6a>
 8009d5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d60:	4299      	cmp	r1, r3
 8009d62:	d002      	beq.n	8009d6a <__swsetup_r+0x66>
 8009d64:	4630      	mov	r0, r6
 8009d66:	f002 f939 	bl	800bfdc <_free_r>
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	6363      	str	r3, [r4, #52]	; 0x34
 8009d6e:	89a3      	ldrh	r3, [r4, #12]
 8009d70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009d74:	81a3      	strh	r3, [r4, #12]
 8009d76:	2300      	movs	r3, #0
 8009d78:	6063      	str	r3, [r4, #4]
 8009d7a:	6923      	ldr	r3, [r4, #16]
 8009d7c:	6023      	str	r3, [r4, #0]
 8009d7e:	89a3      	ldrh	r3, [r4, #12]
 8009d80:	f043 0308 	orr.w	r3, r3, #8
 8009d84:	81a3      	strh	r3, [r4, #12]
 8009d86:	6923      	ldr	r3, [r4, #16]
 8009d88:	b94b      	cbnz	r3, 8009d9e <__swsetup_r+0x9a>
 8009d8a:	89a3      	ldrh	r3, [r4, #12]
 8009d8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d94:	d003      	beq.n	8009d9e <__swsetup_r+0x9a>
 8009d96:	4621      	mov	r1, r4
 8009d98:	4630      	mov	r0, r6
 8009d9a:	f001 fbed 	bl	800b578 <__smakebuf_r>
 8009d9e:	89a0      	ldrh	r0, [r4, #12]
 8009da0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009da4:	f010 0301 	ands.w	r3, r0, #1
 8009da8:	d00a      	beq.n	8009dc0 <__swsetup_r+0xbc>
 8009daa:	2300      	movs	r3, #0
 8009dac:	60a3      	str	r3, [r4, #8]
 8009dae:	6963      	ldr	r3, [r4, #20]
 8009db0:	425b      	negs	r3, r3
 8009db2:	61a3      	str	r3, [r4, #24]
 8009db4:	6923      	ldr	r3, [r4, #16]
 8009db6:	b943      	cbnz	r3, 8009dca <__swsetup_r+0xc6>
 8009db8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009dbc:	d1ba      	bne.n	8009d34 <__swsetup_r+0x30>
 8009dbe:	bd70      	pop	{r4, r5, r6, pc}
 8009dc0:	0781      	lsls	r1, r0, #30
 8009dc2:	bf58      	it	pl
 8009dc4:	6963      	ldrpl	r3, [r4, #20]
 8009dc6:	60a3      	str	r3, [r4, #8]
 8009dc8:	e7f4      	b.n	8009db4 <__swsetup_r+0xb0>
 8009dca:	2000      	movs	r0, #0
 8009dcc:	e7f7      	b.n	8009dbe <__swsetup_r+0xba>
 8009dce:	bf00      	nop
 8009dd0:	20000014 	.word	0x20000014
 8009dd4:	0800ce1c 	.word	0x0800ce1c
 8009dd8:	0800ce3c 	.word	0x0800ce3c
 8009ddc:	0800cdfc 	.word	0x0800cdfc

08009de0 <quorem>:
 8009de0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009de4:	6903      	ldr	r3, [r0, #16]
 8009de6:	690c      	ldr	r4, [r1, #16]
 8009de8:	42a3      	cmp	r3, r4
 8009dea:	4607      	mov	r7, r0
 8009dec:	f2c0 8081 	blt.w	8009ef2 <quorem+0x112>
 8009df0:	3c01      	subs	r4, #1
 8009df2:	f101 0814 	add.w	r8, r1, #20
 8009df6:	f100 0514 	add.w	r5, r0, #20
 8009dfa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009dfe:	9301      	str	r3, [sp, #4]
 8009e00:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009e04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e08:	3301      	adds	r3, #1
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009e10:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009e14:	fbb2 f6f3 	udiv	r6, r2, r3
 8009e18:	d331      	bcc.n	8009e7e <quorem+0x9e>
 8009e1a:	f04f 0e00 	mov.w	lr, #0
 8009e1e:	4640      	mov	r0, r8
 8009e20:	46ac      	mov	ip, r5
 8009e22:	46f2      	mov	sl, lr
 8009e24:	f850 2b04 	ldr.w	r2, [r0], #4
 8009e28:	b293      	uxth	r3, r2
 8009e2a:	fb06 e303 	mla	r3, r6, r3, lr
 8009e2e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009e32:	b29b      	uxth	r3, r3
 8009e34:	ebaa 0303 	sub.w	r3, sl, r3
 8009e38:	f8dc a000 	ldr.w	sl, [ip]
 8009e3c:	0c12      	lsrs	r2, r2, #16
 8009e3e:	fa13 f38a 	uxtah	r3, r3, sl
 8009e42:	fb06 e202 	mla	r2, r6, r2, lr
 8009e46:	9300      	str	r3, [sp, #0]
 8009e48:	9b00      	ldr	r3, [sp, #0]
 8009e4a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009e4e:	b292      	uxth	r2, r2
 8009e50:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009e54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e58:	f8bd 3000 	ldrh.w	r3, [sp]
 8009e5c:	4581      	cmp	r9, r0
 8009e5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e62:	f84c 3b04 	str.w	r3, [ip], #4
 8009e66:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009e6a:	d2db      	bcs.n	8009e24 <quorem+0x44>
 8009e6c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009e70:	b92b      	cbnz	r3, 8009e7e <quorem+0x9e>
 8009e72:	9b01      	ldr	r3, [sp, #4]
 8009e74:	3b04      	subs	r3, #4
 8009e76:	429d      	cmp	r5, r3
 8009e78:	461a      	mov	r2, r3
 8009e7a:	d32e      	bcc.n	8009eda <quorem+0xfa>
 8009e7c:	613c      	str	r4, [r7, #16]
 8009e7e:	4638      	mov	r0, r7
 8009e80:	f001 fea0 	bl	800bbc4 <__mcmp>
 8009e84:	2800      	cmp	r0, #0
 8009e86:	db24      	blt.n	8009ed2 <quorem+0xf2>
 8009e88:	3601      	adds	r6, #1
 8009e8a:	4628      	mov	r0, r5
 8009e8c:	f04f 0c00 	mov.w	ip, #0
 8009e90:	f858 2b04 	ldr.w	r2, [r8], #4
 8009e94:	f8d0 e000 	ldr.w	lr, [r0]
 8009e98:	b293      	uxth	r3, r2
 8009e9a:	ebac 0303 	sub.w	r3, ip, r3
 8009e9e:	0c12      	lsrs	r2, r2, #16
 8009ea0:	fa13 f38e 	uxtah	r3, r3, lr
 8009ea4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009ea8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009eac:	b29b      	uxth	r3, r3
 8009eae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009eb2:	45c1      	cmp	r9, r8
 8009eb4:	f840 3b04 	str.w	r3, [r0], #4
 8009eb8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009ebc:	d2e8      	bcs.n	8009e90 <quorem+0xb0>
 8009ebe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ec2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ec6:	b922      	cbnz	r2, 8009ed2 <quorem+0xf2>
 8009ec8:	3b04      	subs	r3, #4
 8009eca:	429d      	cmp	r5, r3
 8009ecc:	461a      	mov	r2, r3
 8009ece:	d30a      	bcc.n	8009ee6 <quorem+0x106>
 8009ed0:	613c      	str	r4, [r7, #16]
 8009ed2:	4630      	mov	r0, r6
 8009ed4:	b003      	add	sp, #12
 8009ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eda:	6812      	ldr	r2, [r2, #0]
 8009edc:	3b04      	subs	r3, #4
 8009ede:	2a00      	cmp	r2, #0
 8009ee0:	d1cc      	bne.n	8009e7c <quorem+0x9c>
 8009ee2:	3c01      	subs	r4, #1
 8009ee4:	e7c7      	b.n	8009e76 <quorem+0x96>
 8009ee6:	6812      	ldr	r2, [r2, #0]
 8009ee8:	3b04      	subs	r3, #4
 8009eea:	2a00      	cmp	r2, #0
 8009eec:	d1f0      	bne.n	8009ed0 <quorem+0xf0>
 8009eee:	3c01      	subs	r4, #1
 8009ef0:	e7eb      	b.n	8009eca <quorem+0xea>
 8009ef2:	2000      	movs	r0, #0
 8009ef4:	e7ee      	b.n	8009ed4 <quorem+0xf4>
	...

08009ef8 <_dtoa_r>:
 8009ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009efc:	ed2d 8b04 	vpush	{d8-d9}
 8009f00:	ec57 6b10 	vmov	r6, r7, d0
 8009f04:	b093      	sub	sp, #76	; 0x4c
 8009f06:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009f08:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009f0c:	9106      	str	r1, [sp, #24]
 8009f0e:	ee10 aa10 	vmov	sl, s0
 8009f12:	4604      	mov	r4, r0
 8009f14:	9209      	str	r2, [sp, #36]	; 0x24
 8009f16:	930c      	str	r3, [sp, #48]	; 0x30
 8009f18:	46bb      	mov	fp, r7
 8009f1a:	b975      	cbnz	r5, 8009f3a <_dtoa_r+0x42>
 8009f1c:	2010      	movs	r0, #16
 8009f1e:	f001 fb6b 	bl	800b5f8 <malloc>
 8009f22:	4602      	mov	r2, r0
 8009f24:	6260      	str	r0, [r4, #36]	; 0x24
 8009f26:	b920      	cbnz	r0, 8009f32 <_dtoa_r+0x3a>
 8009f28:	4ba7      	ldr	r3, [pc, #668]	; (800a1c8 <_dtoa_r+0x2d0>)
 8009f2a:	21ea      	movs	r1, #234	; 0xea
 8009f2c:	48a7      	ldr	r0, [pc, #668]	; (800a1cc <_dtoa_r+0x2d4>)
 8009f2e:	f002 fc79 	bl	800c824 <__assert_func>
 8009f32:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009f36:	6005      	str	r5, [r0, #0]
 8009f38:	60c5      	str	r5, [r0, #12]
 8009f3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f3c:	6819      	ldr	r1, [r3, #0]
 8009f3e:	b151      	cbz	r1, 8009f56 <_dtoa_r+0x5e>
 8009f40:	685a      	ldr	r2, [r3, #4]
 8009f42:	604a      	str	r2, [r1, #4]
 8009f44:	2301      	movs	r3, #1
 8009f46:	4093      	lsls	r3, r2
 8009f48:	608b      	str	r3, [r1, #8]
 8009f4a:	4620      	mov	r0, r4
 8009f4c:	f001 fbae 	bl	800b6ac <_Bfree>
 8009f50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f52:	2200      	movs	r2, #0
 8009f54:	601a      	str	r2, [r3, #0]
 8009f56:	1e3b      	subs	r3, r7, #0
 8009f58:	bfaa      	itet	ge
 8009f5a:	2300      	movge	r3, #0
 8009f5c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009f60:	f8c8 3000 	strge.w	r3, [r8]
 8009f64:	4b9a      	ldr	r3, [pc, #616]	; (800a1d0 <_dtoa_r+0x2d8>)
 8009f66:	bfbc      	itt	lt
 8009f68:	2201      	movlt	r2, #1
 8009f6a:	f8c8 2000 	strlt.w	r2, [r8]
 8009f6e:	ea33 030b 	bics.w	r3, r3, fp
 8009f72:	d11b      	bne.n	8009fac <_dtoa_r+0xb4>
 8009f74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f76:	f242 730f 	movw	r3, #9999	; 0x270f
 8009f7a:	6013      	str	r3, [r2, #0]
 8009f7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f80:	4333      	orrs	r3, r6
 8009f82:	f000 8592 	beq.w	800aaaa <_dtoa_r+0xbb2>
 8009f86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f88:	b963      	cbnz	r3, 8009fa4 <_dtoa_r+0xac>
 8009f8a:	4b92      	ldr	r3, [pc, #584]	; (800a1d4 <_dtoa_r+0x2dc>)
 8009f8c:	e022      	b.n	8009fd4 <_dtoa_r+0xdc>
 8009f8e:	4b92      	ldr	r3, [pc, #584]	; (800a1d8 <_dtoa_r+0x2e0>)
 8009f90:	9301      	str	r3, [sp, #4]
 8009f92:	3308      	adds	r3, #8
 8009f94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009f96:	6013      	str	r3, [r2, #0]
 8009f98:	9801      	ldr	r0, [sp, #4]
 8009f9a:	b013      	add	sp, #76	; 0x4c
 8009f9c:	ecbd 8b04 	vpop	{d8-d9}
 8009fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fa4:	4b8b      	ldr	r3, [pc, #556]	; (800a1d4 <_dtoa_r+0x2dc>)
 8009fa6:	9301      	str	r3, [sp, #4]
 8009fa8:	3303      	adds	r3, #3
 8009faa:	e7f3      	b.n	8009f94 <_dtoa_r+0x9c>
 8009fac:	2200      	movs	r2, #0
 8009fae:	2300      	movs	r3, #0
 8009fb0:	4650      	mov	r0, sl
 8009fb2:	4659      	mov	r1, fp
 8009fb4:	f7f6 fd88 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fb8:	ec4b ab19 	vmov	d9, sl, fp
 8009fbc:	4680      	mov	r8, r0
 8009fbe:	b158      	cbz	r0, 8009fd8 <_dtoa_r+0xe0>
 8009fc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	6013      	str	r3, [r2, #0]
 8009fc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	f000 856b 	beq.w	800aaa4 <_dtoa_r+0xbac>
 8009fce:	4883      	ldr	r0, [pc, #524]	; (800a1dc <_dtoa_r+0x2e4>)
 8009fd0:	6018      	str	r0, [r3, #0]
 8009fd2:	1e43      	subs	r3, r0, #1
 8009fd4:	9301      	str	r3, [sp, #4]
 8009fd6:	e7df      	b.n	8009f98 <_dtoa_r+0xa0>
 8009fd8:	ec4b ab10 	vmov	d0, sl, fp
 8009fdc:	aa10      	add	r2, sp, #64	; 0x40
 8009fde:	a911      	add	r1, sp, #68	; 0x44
 8009fe0:	4620      	mov	r0, r4
 8009fe2:	f001 ff11 	bl	800be08 <__d2b>
 8009fe6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009fea:	ee08 0a10 	vmov	s16, r0
 8009fee:	2d00      	cmp	r5, #0
 8009ff0:	f000 8084 	beq.w	800a0fc <_dtoa_r+0x204>
 8009ff4:	ee19 3a90 	vmov	r3, s19
 8009ff8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ffc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a000:	4656      	mov	r6, sl
 800a002:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a006:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a00a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a00e:	4b74      	ldr	r3, [pc, #464]	; (800a1e0 <_dtoa_r+0x2e8>)
 800a010:	2200      	movs	r2, #0
 800a012:	4630      	mov	r0, r6
 800a014:	4639      	mov	r1, r7
 800a016:	f7f6 f937 	bl	8000288 <__aeabi_dsub>
 800a01a:	a365      	add	r3, pc, #404	; (adr r3, 800a1b0 <_dtoa_r+0x2b8>)
 800a01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a020:	f7f6 faea 	bl	80005f8 <__aeabi_dmul>
 800a024:	a364      	add	r3, pc, #400	; (adr r3, 800a1b8 <_dtoa_r+0x2c0>)
 800a026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a02a:	f7f6 f92f 	bl	800028c <__adddf3>
 800a02e:	4606      	mov	r6, r0
 800a030:	4628      	mov	r0, r5
 800a032:	460f      	mov	r7, r1
 800a034:	f7f6 fa76 	bl	8000524 <__aeabi_i2d>
 800a038:	a361      	add	r3, pc, #388	; (adr r3, 800a1c0 <_dtoa_r+0x2c8>)
 800a03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a03e:	f7f6 fadb 	bl	80005f8 <__aeabi_dmul>
 800a042:	4602      	mov	r2, r0
 800a044:	460b      	mov	r3, r1
 800a046:	4630      	mov	r0, r6
 800a048:	4639      	mov	r1, r7
 800a04a:	f7f6 f91f 	bl	800028c <__adddf3>
 800a04e:	4606      	mov	r6, r0
 800a050:	460f      	mov	r7, r1
 800a052:	f7f6 fd81 	bl	8000b58 <__aeabi_d2iz>
 800a056:	2200      	movs	r2, #0
 800a058:	9000      	str	r0, [sp, #0]
 800a05a:	2300      	movs	r3, #0
 800a05c:	4630      	mov	r0, r6
 800a05e:	4639      	mov	r1, r7
 800a060:	f7f6 fd3c 	bl	8000adc <__aeabi_dcmplt>
 800a064:	b150      	cbz	r0, 800a07c <_dtoa_r+0x184>
 800a066:	9800      	ldr	r0, [sp, #0]
 800a068:	f7f6 fa5c 	bl	8000524 <__aeabi_i2d>
 800a06c:	4632      	mov	r2, r6
 800a06e:	463b      	mov	r3, r7
 800a070:	f7f6 fd2a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a074:	b910      	cbnz	r0, 800a07c <_dtoa_r+0x184>
 800a076:	9b00      	ldr	r3, [sp, #0]
 800a078:	3b01      	subs	r3, #1
 800a07a:	9300      	str	r3, [sp, #0]
 800a07c:	9b00      	ldr	r3, [sp, #0]
 800a07e:	2b16      	cmp	r3, #22
 800a080:	d85a      	bhi.n	800a138 <_dtoa_r+0x240>
 800a082:	9a00      	ldr	r2, [sp, #0]
 800a084:	4b57      	ldr	r3, [pc, #348]	; (800a1e4 <_dtoa_r+0x2ec>)
 800a086:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a08e:	ec51 0b19 	vmov	r0, r1, d9
 800a092:	f7f6 fd23 	bl	8000adc <__aeabi_dcmplt>
 800a096:	2800      	cmp	r0, #0
 800a098:	d050      	beq.n	800a13c <_dtoa_r+0x244>
 800a09a:	9b00      	ldr	r3, [sp, #0]
 800a09c:	3b01      	subs	r3, #1
 800a09e:	9300      	str	r3, [sp, #0]
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a0a6:	1b5d      	subs	r5, r3, r5
 800a0a8:	1e6b      	subs	r3, r5, #1
 800a0aa:	9305      	str	r3, [sp, #20]
 800a0ac:	bf45      	ittet	mi
 800a0ae:	f1c5 0301 	rsbmi	r3, r5, #1
 800a0b2:	9304      	strmi	r3, [sp, #16]
 800a0b4:	2300      	movpl	r3, #0
 800a0b6:	2300      	movmi	r3, #0
 800a0b8:	bf4c      	ite	mi
 800a0ba:	9305      	strmi	r3, [sp, #20]
 800a0bc:	9304      	strpl	r3, [sp, #16]
 800a0be:	9b00      	ldr	r3, [sp, #0]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	db3d      	blt.n	800a140 <_dtoa_r+0x248>
 800a0c4:	9b05      	ldr	r3, [sp, #20]
 800a0c6:	9a00      	ldr	r2, [sp, #0]
 800a0c8:	920a      	str	r2, [sp, #40]	; 0x28
 800a0ca:	4413      	add	r3, r2
 800a0cc:	9305      	str	r3, [sp, #20]
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	9307      	str	r3, [sp, #28]
 800a0d2:	9b06      	ldr	r3, [sp, #24]
 800a0d4:	2b09      	cmp	r3, #9
 800a0d6:	f200 8089 	bhi.w	800a1ec <_dtoa_r+0x2f4>
 800a0da:	2b05      	cmp	r3, #5
 800a0dc:	bfc4      	itt	gt
 800a0de:	3b04      	subgt	r3, #4
 800a0e0:	9306      	strgt	r3, [sp, #24]
 800a0e2:	9b06      	ldr	r3, [sp, #24]
 800a0e4:	f1a3 0302 	sub.w	r3, r3, #2
 800a0e8:	bfcc      	ite	gt
 800a0ea:	2500      	movgt	r5, #0
 800a0ec:	2501      	movle	r5, #1
 800a0ee:	2b03      	cmp	r3, #3
 800a0f0:	f200 8087 	bhi.w	800a202 <_dtoa_r+0x30a>
 800a0f4:	e8df f003 	tbb	[pc, r3]
 800a0f8:	59383a2d 	.word	0x59383a2d
 800a0fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a100:	441d      	add	r5, r3
 800a102:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a106:	2b20      	cmp	r3, #32
 800a108:	bfc1      	itttt	gt
 800a10a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a10e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a112:	fa0b f303 	lslgt.w	r3, fp, r3
 800a116:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a11a:	bfda      	itte	le
 800a11c:	f1c3 0320 	rsble	r3, r3, #32
 800a120:	fa06 f003 	lslle.w	r0, r6, r3
 800a124:	4318      	orrgt	r0, r3
 800a126:	f7f6 f9ed 	bl	8000504 <__aeabi_ui2d>
 800a12a:	2301      	movs	r3, #1
 800a12c:	4606      	mov	r6, r0
 800a12e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a132:	3d01      	subs	r5, #1
 800a134:	930e      	str	r3, [sp, #56]	; 0x38
 800a136:	e76a      	b.n	800a00e <_dtoa_r+0x116>
 800a138:	2301      	movs	r3, #1
 800a13a:	e7b2      	b.n	800a0a2 <_dtoa_r+0x1aa>
 800a13c:	900b      	str	r0, [sp, #44]	; 0x2c
 800a13e:	e7b1      	b.n	800a0a4 <_dtoa_r+0x1ac>
 800a140:	9b04      	ldr	r3, [sp, #16]
 800a142:	9a00      	ldr	r2, [sp, #0]
 800a144:	1a9b      	subs	r3, r3, r2
 800a146:	9304      	str	r3, [sp, #16]
 800a148:	4253      	negs	r3, r2
 800a14a:	9307      	str	r3, [sp, #28]
 800a14c:	2300      	movs	r3, #0
 800a14e:	930a      	str	r3, [sp, #40]	; 0x28
 800a150:	e7bf      	b.n	800a0d2 <_dtoa_r+0x1da>
 800a152:	2300      	movs	r3, #0
 800a154:	9308      	str	r3, [sp, #32]
 800a156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a158:	2b00      	cmp	r3, #0
 800a15a:	dc55      	bgt.n	800a208 <_dtoa_r+0x310>
 800a15c:	2301      	movs	r3, #1
 800a15e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a162:	461a      	mov	r2, r3
 800a164:	9209      	str	r2, [sp, #36]	; 0x24
 800a166:	e00c      	b.n	800a182 <_dtoa_r+0x28a>
 800a168:	2301      	movs	r3, #1
 800a16a:	e7f3      	b.n	800a154 <_dtoa_r+0x25c>
 800a16c:	2300      	movs	r3, #0
 800a16e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a170:	9308      	str	r3, [sp, #32]
 800a172:	9b00      	ldr	r3, [sp, #0]
 800a174:	4413      	add	r3, r2
 800a176:	9302      	str	r3, [sp, #8]
 800a178:	3301      	adds	r3, #1
 800a17a:	2b01      	cmp	r3, #1
 800a17c:	9303      	str	r3, [sp, #12]
 800a17e:	bfb8      	it	lt
 800a180:	2301      	movlt	r3, #1
 800a182:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a184:	2200      	movs	r2, #0
 800a186:	6042      	str	r2, [r0, #4]
 800a188:	2204      	movs	r2, #4
 800a18a:	f102 0614 	add.w	r6, r2, #20
 800a18e:	429e      	cmp	r6, r3
 800a190:	6841      	ldr	r1, [r0, #4]
 800a192:	d93d      	bls.n	800a210 <_dtoa_r+0x318>
 800a194:	4620      	mov	r0, r4
 800a196:	f001 fa49 	bl	800b62c <_Balloc>
 800a19a:	9001      	str	r0, [sp, #4]
 800a19c:	2800      	cmp	r0, #0
 800a19e:	d13b      	bne.n	800a218 <_dtoa_r+0x320>
 800a1a0:	4b11      	ldr	r3, [pc, #68]	; (800a1e8 <_dtoa_r+0x2f0>)
 800a1a2:	4602      	mov	r2, r0
 800a1a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a1a8:	e6c0      	b.n	8009f2c <_dtoa_r+0x34>
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	e7df      	b.n	800a16e <_dtoa_r+0x276>
 800a1ae:	bf00      	nop
 800a1b0:	636f4361 	.word	0x636f4361
 800a1b4:	3fd287a7 	.word	0x3fd287a7
 800a1b8:	8b60c8b3 	.word	0x8b60c8b3
 800a1bc:	3fc68a28 	.word	0x3fc68a28
 800a1c0:	509f79fb 	.word	0x509f79fb
 800a1c4:	3fd34413 	.word	0x3fd34413
 800a1c8:	0800cd76 	.word	0x0800cd76
 800a1cc:	0800cd8d 	.word	0x0800cd8d
 800a1d0:	7ff00000 	.word	0x7ff00000
 800a1d4:	0800cd72 	.word	0x0800cd72
 800a1d8:	0800cd69 	.word	0x0800cd69
 800a1dc:	0800cbed 	.word	0x0800cbed
 800a1e0:	3ff80000 	.word	0x3ff80000
 800a1e4:	0800cf60 	.word	0x0800cf60
 800a1e8:	0800cde8 	.word	0x0800cde8
 800a1ec:	2501      	movs	r5, #1
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	9306      	str	r3, [sp, #24]
 800a1f2:	9508      	str	r5, [sp, #32]
 800a1f4:	f04f 33ff 	mov.w	r3, #4294967295
 800a1f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	2312      	movs	r3, #18
 800a200:	e7b0      	b.n	800a164 <_dtoa_r+0x26c>
 800a202:	2301      	movs	r3, #1
 800a204:	9308      	str	r3, [sp, #32]
 800a206:	e7f5      	b.n	800a1f4 <_dtoa_r+0x2fc>
 800a208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a20a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a20e:	e7b8      	b.n	800a182 <_dtoa_r+0x28a>
 800a210:	3101      	adds	r1, #1
 800a212:	6041      	str	r1, [r0, #4]
 800a214:	0052      	lsls	r2, r2, #1
 800a216:	e7b8      	b.n	800a18a <_dtoa_r+0x292>
 800a218:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a21a:	9a01      	ldr	r2, [sp, #4]
 800a21c:	601a      	str	r2, [r3, #0]
 800a21e:	9b03      	ldr	r3, [sp, #12]
 800a220:	2b0e      	cmp	r3, #14
 800a222:	f200 809d 	bhi.w	800a360 <_dtoa_r+0x468>
 800a226:	2d00      	cmp	r5, #0
 800a228:	f000 809a 	beq.w	800a360 <_dtoa_r+0x468>
 800a22c:	9b00      	ldr	r3, [sp, #0]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	dd32      	ble.n	800a298 <_dtoa_r+0x3a0>
 800a232:	4ab7      	ldr	r2, [pc, #732]	; (800a510 <_dtoa_r+0x618>)
 800a234:	f003 030f 	and.w	r3, r3, #15
 800a238:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a23c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a240:	9b00      	ldr	r3, [sp, #0]
 800a242:	05d8      	lsls	r0, r3, #23
 800a244:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a248:	d516      	bpl.n	800a278 <_dtoa_r+0x380>
 800a24a:	4bb2      	ldr	r3, [pc, #712]	; (800a514 <_dtoa_r+0x61c>)
 800a24c:	ec51 0b19 	vmov	r0, r1, d9
 800a250:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a254:	f7f6 fafa 	bl	800084c <__aeabi_ddiv>
 800a258:	f007 070f 	and.w	r7, r7, #15
 800a25c:	4682      	mov	sl, r0
 800a25e:	468b      	mov	fp, r1
 800a260:	2503      	movs	r5, #3
 800a262:	4eac      	ldr	r6, [pc, #688]	; (800a514 <_dtoa_r+0x61c>)
 800a264:	b957      	cbnz	r7, 800a27c <_dtoa_r+0x384>
 800a266:	4642      	mov	r2, r8
 800a268:	464b      	mov	r3, r9
 800a26a:	4650      	mov	r0, sl
 800a26c:	4659      	mov	r1, fp
 800a26e:	f7f6 faed 	bl	800084c <__aeabi_ddiv>
 800a272:	4682      	mov	sl, r0
 800a274:	468b      	mov	fp, r1
 800a276:	e028      	b.n	800a2ca <_dtoa_r+0x3d2>
 800a278:	2502      	movs	r5, #2
 800a27a:	e7f2      	b.n	800a262 <_dtoa_r+0x36a>
 800a27c:	07f9      	lsls	r1, r7, #31
 800a27e:	d508      	bpl.n	800a292 <_dtoa_r+0x39a>
 800a280:	4640      	mov	r0, r8
 800a282:	4649      	mov	r1, r9
 800a284:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a288:	f7f6 f9b6 	bl	80005f8 <__aeabi_dmul>
 800a28c:	3501      	adds	r5, #1
 800a28e:	4680      	mov	r8, r0
 800a290:	4689      	mov	r9, r1
 800a292:	107f      	asrs	r7, r7, #1
 800a294:	3608      	adds	r6, #8
 800a296:	e7e5      	b.n	800a264 <_dtoa_r+0x36c>
 800a298:	f000 809b 	beq.w	800a3d2 <_dtoa_r+0x4da>
 800a29c:	9b00      	ldr	r3, [sp, #0]
 800a29e:	4f9d      	ldr	r7, [pc, #628]	; (800a514 <_dtoa_r+0x61c>)
 800a2a0:	425e      	negs	r6, r3
 800a2a2:	4b9b      	ldr	r3, [pc, #620]	; (800a510 <_dtoa_r+0x618>)
 800a2a4:	f006 020f 	and.w	r2, r6, #15
 800a2a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b0:	ec51 0b19 	vmov	r0, r1, d9
 800a2b4:	f7f6 f9a0 	bl	80005f8 <__aeabi_dmul>
 800a2b8:	1136      	asrs	r6, r6, #4
 800a2ba:	4682      	mov	sl, r0
 800a2bc:	468b      	mov	fp, r1
 800a2be:	2300      	movs	r3, #0
 800a2c0:	2502      	movs	r5, #2
 800a2c2:	2e00      	cmp	r6, #0
 800a2c4:	d17a      	bne.n	800a3bc <_dtoa_r+0x4c4>
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d1d3      	bne.n	800a272 <_dtoa_r+0x37a>
 800a2ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	f000 8082 	beq.w	800a3d6 <_dtoa_r+0x4de>
 800a2d2:	4b91      	ldr	r3, [pc, #580]	; (800a518 <_dtoa_r+0x620>)
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	4650      	mov	r0, sl
 800a2d8:	4659      	mov	r1, fp
 800a2da:	f7f6 fbff 	bl	8000adc <__aeabi_dcmplt>
 800a2de:	2800      	cmp	r0, #0
 800a2e0:	d079      	beq.n	800a3d6 <_dtoa_r+0x4de>
 800a2e2:	9b03      	ldr	r3, [sp, #12]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d076      	beq.n	800a3d6 <_dtoa_r+0x4de>
 800a2e8:	9b02      	ldr	r3, [sp, #8]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	dd36      	ble.n	800a35c <_dtoa_r+0x464>
 800a2ee:	9b00      	ldr	r3, [sp, #0]
 800a2f0:	4650      	mov	r0, sl
 800a2f2:	4659      	mov	r1, fp
 800a2f4:	1e5f      	subs	r7, r3, #1
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	4b88      	ldr	r3, [pc, #544]	; (800a51c <_dtoa_r+0x624>)
 800a2fa:	f7f6 f97d 	bl	80005f8 <__aeabi_dmul>
 800a2fe:	9e02      	ldr	r6, [sp, #8]
 800a300:	4682      	mov	sl, r0
 800a302:	468b      	mov	fp, r1
 800a304:	3501      	adds	r5, #1
 800a306:	4628      	mov	r0, r5
 800a308:	f7f6 f90c 	bl	8000524 <__aeabi_i2d>
 800a30c:	4652      	mov	r2, sl
 800a30e:	465b      	mov	r3, fp
 800a310:	f7f6 f972 	bl	80005f8 <__aeabi_dmul>
 800a314:	4b82      	ldr	r3, [pc, #520]	; (800a520 <_dtoa_r+0x628>)
 800a316:	2200      	movs	r2, #0
 800a318:	f7f5 ffb8 	bl	800028c <__adddf3>
 800a31c:	46d0      	mov	r8, sl
 800a31e:	46d9      	mov	r9, fp
 800a320:	4682      	mov	sl, r0
 800a322:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a326:	2e00      	cmp	r6, #0
 800a328:	d158      	bne.n	800a3dc <_dtoa_r+0x4e4>
 800a32a:	4b7e      	ldr	r3, [pc, #504]	; (800a524 <_dtoa_r+0x62c>)
 800a32c:	2200      	movs	r2, #0
 800a32e:	4640      	mov	r0, r8
 800a330:	4649      	mov	r1, r9
 800a332:	f7f5 ffa9 	bl	8000288 <__aeabi_dsub>
 800a336:	4652      	mov	r2, sl
 800a338:	465b      	mov	r3, fp
 800a33a:	4680      	mov	r8, r0
 800a33c:	4689      	mov	r9, r1
 800a33e:	f7f6 fbeb 	bl	8000b18 <__aeabi_dcmpgt>
 800a342:	2800      	cmp	r0, #0
 800a344:	f040 8295 	bne.w	800a872 <_dtoa_r+0x97a>
 800a348:	4652      	mov	r2, sl
 800a34a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a34e:	4640      	mov	r0, r8
 800a350:	4649      	mov	r1, r9
 800a352:	f7f6 fbc3 	bl	8000adc <__aeabi_dcmplt>
 800a356:	2800      	cmp	r0, #0
 800a358:	f040 8289 	bne.w	800a86e <_dtoa_r+0x976>
 800a35c:	ec5b ab19 	vmov	sl, fp, d9
 800a360:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a362:	2b00      	cmp	r3, #0
 800a364:	f2c0 8148 	blt.w	800a5f8 <_dtoa_r+0x700>
 800a368:	9a00      	ldr	r2, [sp, #0]
 800a36a:	2a0e      	cmp	r2, #14
 800a36c:	f300 8144 	bgt.w	800a5f8 <_dtoa_r+0x700>
 800a370:	4b67      	ldr	r3, [pc, #412]	; (800a510 <_dtoa_r+0x618>)
 800a372:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a376:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a37a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	f280 80d5 	bge.w	800a52c <_dtoa_r+0x634>
 800a382:	9b03      	ldr	r3, [sp, #12]
 800a384:	2b00      	cmp	r3, #0
 800a386:	f300 80d1 	bgt.w	800a52c <_dtoa_r+0x634>
 800a38a:	f040 826f 	bne.w	800a86c <_dtoa_r+0x974>
 800a38e:	4b65      	ldr	r3, [pc, #404]	; (800a524 <_dtoa_r+0x62c>)
 800a390:	2200      	movs	r2, #0
 800a392:	4640      	mov	r0, r8
 800a394:	4649      	mov	r1, r9
 800a396:	f7f6 f92f 	bl	80005f8 <__aeabi_dmul>
 800a39a:	4652      	mov	r2, sl
 800a39c:	465b      	mov	r3, fp
 800a39e:	f7f6 fbb1 	bl	8000b04 <__aeabi_dcmpge>
 800a3a2:	9e03      	ldr	r6, [sp, #12]
 800a3a4:	4637      	mov	r7, r6
 800a3a6:	2800      	cmp	r0, #0
 800a3a8:	f040 8245 	bne.w	800a836 <_dtoa_r+0x93e>
 800a3ac:	9d01      	ldr	r5, [sp, #4]
 800a3ae:	2331      	movs	r3, #49	; 0x31
 800a3b0:	f805 3b01 	strb.w	r3, [r5], #1
 800a3b4:	9b00      	ldr	r3, [sp, #0]
 800a3b6:	3301      	adds	r3, #1
 800a3b8:	9300      	str	r3, [sp, #0]
 800a3ba:	e240      	b.n	800a83e <_dtoa_r+0x946>
 800a3bc:	07f2      	lsls	r2, r6, #31
 800a3be:	d505      	bpl.n	800a3cc <_dtoa_r+0x4d4>
 800a3c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3c4:	f7f6 f918 	bl	80005f8 <__aeabi_dmul>
 800a3c8:	3501      	adds	r5, #1
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	1076      	asrs	r6, r6, #1
 800a3ce:	3708      	adds	r7, #8
 800a3d0:	e777      	b.n	800a2c2 <_dtoa_r+0x3ca>
 800a3d2:	2502      	movs	r5, #2
 800a3d4:	e779      	b.n	800a2ca <_dtoa_r+0x3d2>
 800a3d6:	9f00      	ldr	r7, [sp, #0]
 800a3d8:	9e03      	ldr	r6, [sp, #12]
 800a3da:	e794      	b.n	800a306 <_dtoa_r+0x40e>
 800a3dc:	9901      	ldr	r1, [sp, #4]
 800a3de:	4b4c      	ldr	r3, [pc, #304]	; (800a510 <_dtoa_r+0x618>)
 800a3e0:	4431      	add	r1, r6
 800a3e2:	910d      	str	r1, [sp, #52]	; 0x34
 800a3e4:	9908      	ldr	r1, [sp, #32]
 800a3e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a3ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a3ee:	2900      	cmp	r1, #0
 800a3f0:	d043      	beq.n	800a47a <_dtoa_r+0x582>
 800a3f2:	494d      	ldr	r1, [pc, #308]	; (800a528 <_dtoa_r+0x630>)
 800a3f4:	2000      	movs	r0, #0
 800a3f6:	f7f6 fa29 	bl	800084c <__aeabi_ddiv>
 800a3fa:	4652      	mov	r2, sl
 800a3fc:	465b      	mov	r3, fp
 800a3fe:	f7f5 ff43 	bl	8000288 <__aeabi_dsub>
 800a402:	9d01      	ldr	r5, [sp, #4]
 800a404:	4682      	mov	sl, r0
 800a406:	468b      	mov	fp, r1
 800a408:	4649      	mov	r1, r9
 800a40a:	4640      	mov	r0, r8
 800a40c:	f7f6 fba4 	bl	8000b58 <__aeabi_d2iz>
 800a410:	4606      	mov	r6, r0
 800a412:	f7f6 f887 	bl	8000524 <__aeabi_i2d>
 800a416:	4602      	mov	r2, r0
 800a418:	460b      	mov	r3, r1
 800a41a:	4640      	mov	r0, r8
 800a41c:	4649      	mov	r1, r9
 800a41e:	f7f5 ff33 	bl	8000288 <__aeabi_dsub>
 800a422:	3630      	adds	r6, #48	; 0x30
 800a424:	f805 6b01 	strb.w	r6, [r5], #1
 800a428:	4652      	mov	r2, sl
 800a42a:	465b      	mov	r3, fp
 800a42c:	4680      	mov	r8, r0
 800a42e:	4689      	mov	r9, r1
 800a430:	f7f6 fb54 	bl	8000adc <__aeabi_dcmplt>
 800a434:	2800      	cmp	r0, #0
 800a436:	d163      	bne.n	800a500 <_dtoa_r+0x608>
 800a438:	4642      	mov	r2, r8
 800a43a:	464b      	mov	r3, r9
 800a43c:	4936      	ldr	r1, [pc, #216]	; (800a518 <_dtoa_r+0x620>)
 800a43e:	2000      	movs	r0, #0
 800a440:	f7f5 ff22 	bl	8000288 <__aeabi_dsub>
 800a444:	4652      	mov	r2, sl
 800a446:	465b      	mov	r3, fp
 800a448:	f7f6 fb48 	bl	8000adc <__aeabi_dcmplt>
 800a44c:	2800      	cmp	r0, #0
 800a44e:	f040 80b5 	bne.w	800a5bc <_dtoa_r+0x6c4>
 800a452:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a454:	429d      	cmp	r5, r3
 800a456:	d081      	beq.n	800a35c <_dtoa_r+0x464>
 800a458:	4b30      	ldr	r3, [pc, #192]	; (800a51c <_dtoa_r+0x624>)
 800a45a:	2200      	movs	r2, #0
 800a45c:	4650      	mov	r0, sl
 800a45e:	4659      	mov	r1, fp
 800a460:	f7f6 f8ca 	bl	80005f8 <__aeabi_dmul>
 800a464:	4b2d      	ldr	r3, [pc, #180]	; (800a51c <_dtoa_r+0x624>)
 800a466:	4682      	mov	sl, r0
 800a468:	468b      	mov	fp, r1
 800a46a:	4640      	mov	r0, r8
 800a46c:	4649      	mov	r1, r9
 800a46e:	2200      	movs	r2, #0
 800a470:	f7f6 f8c2 	bl	80005f8 <__aeabi_dmul>
 800a474:	4680      	mov	r8, r0
 800a476:	4689      	mov	r9, r1
 800a478:	e7c6      	b.n	800a408 <_dtoa_r+0x510>
 800a47a:	4650      	mov	r0, sl
 800a47c:	4659      	mov	r1, fp
 800a47e:	f7f6 f8bb 	bl	80005f8 <__aeabi_dmul>
 800a482:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a484:	9d01      	ldr	r5, [sp, #4]
 800a486:	930f      	str	r3, [sp, #60]	; 0x3c
 800a488:	4682      	mov	sl, r0
 800a48a:	468b      	mov	fp, r1
 800a48c:	4649      	mov	r1, r9
 800a48e:	4640      	mov	r0, r8
 800a490:	f7f6 fb62 	bl	8000b58 <__aeabi_d2iz>
 800a494:	4606      	mov	r6, r0
 800a496:	f7f6 f845 	bl	8000524 <__aeabi_i2d>
 800a49a:	3630      	adds	r6, #48	; 0x30
 800a49c:	4602      	mov	r2, r0
 800a49e:	460b      	mov	r3, r1
 800a4a0:	4640      	mov	r0, r8
 800a4a2:	4649      	mov	r1, r9
 800a4a4:	f7f5 fef0 	bl	8000288 <__aeabi_dsub>
 800a4a8:	f805 6b01 	strb.w	r6, [r5], #1
 800a4ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4ae:	429d      	cmp	r5, r3
 800a4b0:	4680      	mov	r8, r0
 800a4b2:	4689      	mov	r9, r1
 800a4b4:	f04f 0200 	mov.w	r2, #0
 800a4b8:	d124      	bne.n	800a504 <_dtoa_r+0x60c>
 800a4ba:	4b1b      	ldr	r3, [pc, #108]	; (800a528 <_dtoa_r+0x630>)
 800a4bc:	4650      	mov	r0, sl
 800a4be:	4659      	mov	r1, fp
 800a4c0:	f7f5 fee4 	bl	800028c <__adddf3>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	460b      	mov	r3, r1
 800a4c8:	4640      	mov	r0, r8
 800a4ca:	4649      	mov	r1, r9
 800a4cc:	f7f6 fb24 	bl	8000b18 <__aeabi_dcmpgt>
 800a4d0:	2800      	cmp	r0, #0
 800a4d2:	d173      	bne.n	800a5bc <_dtoa_r+0x6c4>
 800a4d4:	4652      	mov	r2, sl
 800a4d6:	465b      	mov	r3, fp
 800a4d8:	4913      	ldr	r1, [pc, #76]	; (800a528 <_dtoa_r+0x630>)
 800a4da:	2000      	movs	r0, #0
 800a4dc:	f7f5 fed4 	bl	8000288 <__aeabi_dsub>
 800a4e0:	4602      	mov	r2, r0
 800a4e2:	460b      	mov	r3, r1
 800a4e4:	4640      	mov	r0, r8
 800a4e6:	4649      	mov	r1, r9
 800a4e8:	f7f6 faf8 	bl	8000adc <__aeabi_dcmplt>
 800a4ec:	2800      	cmp	r0, #0
 800a4ee:	f43f af35 	beq.w	800a35c <_dtoa_r+0x464>
 800a4f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a4f4:	1e6b      	subs	r3, r5, #1
 800a4f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a4f8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a4fc:	2b30      	cmp	r3, #48	; 0x30
 800a4fe:	d0f8      	beq.n	800a4f2 <_dtoa_r+0x5fa>
 800a500:	9700      	str	r7, [sp, #0]
 800a502:	e049      	b.n	800a598 <_dtoa_r+0x6a0>
 800a504:	4b05      	ldr	r3, [pc, #20]	; (800a51c <_dtoa_r+0x624>)
 800a506:	f7f6 f877 	bl	80005f8 <__aeabi_dmul>
 800a50a:	4680      	mov	r8, r0
 800a50c:	4689      	mov	r9, r1
 800a50e:	e7bd      	b.n	800a48c <_dtoa_r+0x594>
 800a510:	0800cf60 	.word	0x0800cf60
 800a514:	0800cf38 	.word	0x0800cf38
 800a518:	3ff00000 	.word	0x3ff00000
 800a51c:	40240000 	.word	0x40240000
 800a520:	401c0000 	.word	0x401c0000
 800a524:	40140000 	.word	0x40140000
 800a528:	3fe00000 	.word	0x3fe00000
 800a52c:	9d01      	ldr	r5, [sp, #4]
 800a52e:	4656      	mov	r6, sl
 800a530:	465f      	mov	r7, fp
 800a532:	4642      	mov	r2, r8
 800a534:	464b      	mov	r3, r9
 800a536:	4630      	mov	r0, r6
 800a538:	4639      	mov	r1, r7
 800a53a:	f7f6 f987 	bl	800084c <__aeabi_ddiv>
 800a53e:	f7f6 fb0b 	bl	8000b58 <__aeabi_d2iz>
 800a542:	4682      	mov	sl, r0
 800a544:	f7f5 ffee 	bl	8000524 <__aeabi_i2d>
 800a548:	4642      	mov	r2, r8
 800a54a:	464b      	mov	r3, r9
 800a54c:	f7f6 f854 	bl	80005f8 <__aeabi_dmul>
 800a550:	4602      	mov	r2, r0
 800a552:	460b      	mov	r3, r1
 800a554:	4630      	mov	r0, r6
 800a556:	4639      	mov	r1, r7
 800a558:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a55c:	f7f5 fe94 	bl	8000288 <__aeabi_dsub>
 800a560:	f805 6b01 	strb.w	r6, [r5], #1
 800a564:	9e01      	ldr	r6, [sp, #4]
 800a566:	9f03      	ldr	r7, [sp, #12]
 800a568:	1bae      	subs	r6, r5, r6
 800a56a:	42b7      	cmp	r7, r6
 800a56c:	4602      	mov	r2, r0
 800a56e:	460b      	mov	r3, r1
 800a570:	d135      	bne.n	800a5de <_dtoa_r+0x6e6>
 800a572:	f7f5 fe8b 	bl	800028c <__adddf3>
 800a576:	4642      	mov	r2, r8
 800a578:	464b      	mov	r3, r9
 800a57a:	4606      	mov	r6, r0
 800a57c:	460f      	mov	r7, r1
 800a57e:	f7f6 facb 	bl	8000b18 <__aeabi_dcmpgt>
 800a582:	b9d0      	cbnz	r0, 800a5ba <_dtoa_r+0x6c2>
 800a584:	4642      	mov	r2, r8
 800a586:	464b      	mov	r3, r9
 800a588:	4630      	mov	r0, r6
 800a58a:	4639      	mov	r1, r7
 800a58c:	f7f6 fa9c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a590:	b110      	cbz	r0, 800a598 <_dtoa_r+0x6a0>
 800a592:	f01a 0f01 	tst.w	sl, #1
 800a596:	d110      	bne.n	800a5ba <_dtoa_r+0x6c2>
 800a598:	4620      	mov	r0, r4
 800a59a:	ee18 1a10 	vmov	r1, s16
 800a59e:	f001 f885 	bl	800b6ac <_Bfree>
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	9800      	ldr	r0, [sp, #0]
 800a5a6:	702b      	strb	r3, [r5, #0]
 800a5a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a5aa:	3001      	adds	r0, #1
 800a5ac:	6018      	str	r0, [r3, #0]
 800a5ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	f43f acf1 	beq.w	8009f98 <_dtoa_r+0xa0>
 800a5b6:	601d      	str	r5, [r3, #0]
 800a5b8:	e4ee      	b.n	8009f98 <_dtoa_r+0xa0>
 800a5ba:	9f00      	ldr	r7, [sp, #0]
 800a5bc:	462b      	mov	r3, r5
 800a5be:	461d      	mov	r5, r3
 800a5c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a5c4:	2a39      	cmp	r2, #57	; 0x39
 800a5c6:	d106      	bne.n	800a5d6 <_dtoa_r+0x6de>
 800a5c8:	9a01      	ldr	r2, [sp, #4]
 800a5ca:	429a      	cmp	r2, r3
 800a5cc:	d1f7      	bne.n	800a5be <_dtoa_r+0x6c6>
 800a5ce:	9901      	ldr	r1, [sp, #4]
 800a5d0:	2230      	movs	r2, #48	; 0x30
 800a5d2:	3701      	adds	r7, #1
 800a5d4:	700a      	strb	r2, [r1, #0]
 800a5d6:	781a      	ldrb	r2, [r3, #0]
 800a5d8:	3201      	adds	r2, #1
 800a5da:	701a      	strb	r2, [r3, #0]
 800a5dc:	e790      	b.n	800a500 <_dtoa_r+0x608>
 800a5de:	4ba6      	ldr	r3, [pc, #664]	; (800a878 <_dtoa_r+0x980>)
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	f7f6 f809 	bl	80005f8 <__aeabi_dmul>
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	4606      	mov	r6, r0
 800a5ec:	460f      	mov	r7, r1
 800a5ee:	f7f6 fa6b 	bl	8000ac8 <__aeabi_dcmpeq>
 800a5f2:	2800      	cmp	r0, #0
 800a5f4:	d09d      	beq.n	800a532 <_dtoa_r+0x63a>
 800a5f6:	e7cf      	b.n	800a598 <_dtoa_r+0x6a0>
 800a5f8:	9a08      	ldr	r2, [sp, #32]
 800a5fa:	2a00      	cmp	r2, #0
 800a5fc:	f000 80d7 	beq.w	800a7ae <_dtoa_r+0x8b6>
 800a600:	9a06      	ldr	r2, [sp, #24]
 800a602:	2a01      	cmp	r2, #1
 800a604:	f300 80ba 	bgt.w	800a77c <_dtoa_r+0x884>
 800a608:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a60a:	2a00      	cmp	r2, #0
 800a60c:	f000 80b2 	beq.w	800a774 <_dtoa_r+0x87c>
 800a610:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a614:	9e07      	ldr	r6, [sp, #28]
 800a616:	9d04      	ldr	r5, [sp, #16]
 800a618:	9a04      	ldr	r2, [sp, #16]
 800a61a:	441a      	add	r2, r3
 800a61c:	9204      	str	r2, [sp, #16]
 800a61e:	9a05      	ldr	r2, [sp, #20]
 800a620:	2101      	movs	r1, #1
 800a622:	441a      	add	r2, r3
 800a624:	4620      	mov	r0, r4
 800a626:	9205      	str	r2, [sp, #20]
 800a628:	f001 f942 	bl	800b8b0 <__i2b>
 800a62c:	4607      	mov	r7, r0
 800a62e:	2d00      	cmp	r5, #0
 800a630:	dd0c      	ble.n	800a64c <_dtoa_r+0x754>
 800a632:	9b05      	ldr	r3, [sp, #20]
 800a634:	2b00      	cmp	r3, #0
 800a636:	dd09      	ble.n	800a64c <_dtoa_r+0x754>
 800a638:	42ab      	cmp	r3, r5
 800a63a:	9a04      	ldr	r2, [sp, #16]
 800a63c:	bfa8      	it	ge
 800a63e:	462b      	movge	r3, r5
 800a640:	1ad2      	subs	r2, r2, r3
 800a642:	9204      	str	r2, [sp, #16]
 800a644:	9a05      	ldr	r2, [sp, #20]
 800a646:	1aed      	subs	r5, r5, r3
 800a648:	1ad3      	subs	r3, r2, r3
 800a64a:	9305      	str	r3, [sp, #20]
 800a64c:	9b07      	ldr	r3, [sp, #28]
 800a64e:	b31b      	cbz	r3, 800a698 <_dtoa_r+0x7a0>
 800a650:	9b08      	ldr	r3, [sp, #32]
 800a652:	2b00      	cmp	r3, #0
 800a654:	f000 80af 	beq.w	800a7b6 <_dtoa_r+0x8be>
 800a658:	2e00      	cmp	r6, #0
 800a65a:	dd13      	ble.n	800a684 <_dtoa_r+0x78c>
 800a65c:	4639      	mov	r1, r7
 800a65e:	4632      	mov	r2, r6
 800a660:	4620      	mov	r0, r4
 800a662:	f001 f9e5 	bl	800ba30 <__pow5mult>
 800a666:	ee18 2a10 	vmov	r2, s16
 800a66a:	4601      	mov	r1, r0
 800a66c:	4607      	mov	r7, r0
 800a66e:	4620      	mov	r0, r4
 800a670:	f001 f934 	bl	800b8dc <__multiply>
 800a674:	ee18 1a10 	vmov	r1, s16
 800a678:	4680      	mov	r8, r0
 800a67a:	4620      	mov	r0, r4
 800a67c:	f001 f816 	bl	800b6ac <_Bfree>
 800a680:	ee08 8a10 	vmov	s16, r8
 800a684:	9b07      	ldr	r3, [sp, #28]
 800a686:	1b9a      	subs	r2, r3, r6
 800a688:	d006      	beq.n	800a698 <_dtoa_r+0x7a0>
 800a68a:	ee18 1a10 	vmov	r1, s16
 800a68e:	4620      	mov	r0, r4
 800a690:	f001 f9ce 	bl	800ba30 <__pow5mult>
 800a694:	ee08 0a10 	vmov	s16, r0
 800a698:	2101      	movs	r1, #1
 800a69a:	4620      	mov	r0, r4
 800a69c:	f001 f908 	bl	800b8b0 <__i2b>
 800a6a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	4606      	mov	r6, r0
 800a6a6:	f340 8088 	ble.w	800a7ba <_dtoa_r+0x8c2>
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	4601      	mov	r1, r0
 800a6ae:	4620      	mov	r0, r4
 800a6b0:	f001 f9be 	bl	800ba30 <__pow5mult>
 800a6b4:	9b06      	ldr	r3, [sp, #24]
 800a6b6:	2b01      	cmp	r3, #1
 800a6b8:	4606      	mov	r6, r0
 800a6ba:	f340 8081 	ble.w	800a7c0 <_dtoa_r+0x8c8>
 800a6be:	f04f 0800 	mov.w	r8, #0
 800a6c2:	6933      	ldr	r3, [r6, #16]
 800a6c4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a6c8:	6918      	ldr	r0, [r3, #16]
 800a6ca:	f001 f8a1 	bl	800b810 <__hi0bits>
 800a6ce:	f1c0 0020 	rsb	r0, r0, #32
 800a6d2:	9b05      	ldr	r3, [sp, #20]
 800a6d4:	4418      	add	r0, r3
 800a6d6:	f010 001f 	ands.w	r0, r0, #31
 800a6da:	f000 8092 	beq.w	800a802 <_dtoa_r+0x90a>
 800a6de:	f1c0 0320 	rsb	r3, r0, #32
 800a6e2:	2b04      	cmp	r3, #4
 800a6e4:	f340 808a 	ble.w	800a7fc <_dtoa_r+0x904>
 800a6e8:	f1c0 001c 	rsb	r0, r0, #28
 800a6ec:	9b04      	ldr	r3, [sp, #16]
 800a6ee:	4403      	add	r3, r0
 800a6f0:	9304      	str	r3, [sp, #16]
 800a6f2:	9b05      	ldr	r3, [sp, #20]
 800a6f4:	4403      	add	r3, r0
 800a6f6:	4405      	add	r5, r0
 800a6f8:	9305      	str	r3, [sp, #20]
 800a6fa:	9b04      	ldr	r3, [sp, #16]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	dd07      	ble.n	800a710 <_dtoa_r+0x818>
 800a700:	ee18 1a10 	vmov	r1, s16
 800a704:	461a      	mov	r2, r3
 800a706:	4620      	mov	r0, r4
 800a708:	f001 f9ec 	bl	800bae4 <__lshift>
 800a70c:	ee08 0a10 	vmov	s16, r0
 800a710:	9b05      	ldr	r3, [sp, #20]
 800a712:	2b00      	cmp	r3, #0
 800a714:	dd05      	ble.n	800a722 <_dtoa_r+0x82a>
 800a716:	4631      	mov	r1, r6
 800a718:	461a      	mov	r2, r3
 800a71a:	4620      	mov	r0, r4
 800a71c:	f001 f9e2 	bl	800bae4 <__lshift>
 800a720:	4606      	mov	r6, r0
 800a722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a724:	2b00      	cmp	r3, #0
 800a726:	d06e      	beq.n	800a806 <_dtoa_r+0x90e>
 800a728:	ee18 0a10 	vmov	r0, s16
 800a72c:	4631      	mov	r1, r6
 800a72e:	f001 fa49 	bl	800bbc4 <__mcmp>
 800a732:	2800      	cmp	r0, #0
 800a734:	da67      	bge.n	800a806 <_dtoa_r+0x90e>
 800a736:	9b00      	ldr	r3, [sp, #0]
 800a738:	3b01      	subs	r3, #1
 800a73a:	ee18 1a10 	vmov	r1, s16
 800a73e:	9300      	str	r3, [sp, #0]
 800a740:	220a      	movs	r2, #10
 800a742:	2300      	movs	r3, #0
 800a744:	4620      	mov	r0, r4
 800a746:	f000 ffd3 	bl	800b6f0 <__multadd>
 800a74a:	9b08      	ldr	r3, [sp, #32]
 800a74c:	ee08 0a10 	vmov	s16, r0
 800a750:	2b00      	cmp	r3, #0
 800a752:	f000 81b1 	beq.w	800aab8 <_dtoa_r+0xbc0>
 800a756:	2300      	movs	r3, #0
 800a758:	4639      	mov	r1, r7
 800a75a:	220a      	movs	r2, #10
 800a75c:	4620      	mov	r0, r4
 800a75e:	f000 ffc7 	bl	800b6f0 <__multadd>
 800a762:	9b02      	ldr	r3, [sp, #8]
 800a764:	2b00      	cmp	r3, #0
 800a766:	4607      	mov	r7, r0
 800a768:	f300 808e 	bgt.w	800a888 <_dtoa_r+0x990>
 800a76c:	9b06      	ldr	r3, [sp, #24]
 800a76e:	2b02      	cmp	r3, #2
 800a770:	dc51      	bgt.n	800a816 <_dtoa_r+0x91e>
 800a772:	e089      	b.n	800a888 <_dtoa_r+0x990>
 800a774:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a776:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a77a:	e74b      	b.n	800a614 <_dtoa_r+0x71c>
 800a77c:	9b03      	ldr	r3, [sp, #12]
 800a77e:	1e5e      	subs	r6, r3, #1
 800a780:	9b07      	ldr	r3, [sp, #28]
 800a782:	42b3      	cmp	r3, r6
 800a784:	bfbf      	itttt	lt
 800a786:	9b07      	ldrlt	r3, [sp, #28]
 800a788:	9607      	strlt	r6, [sp, #28]
 800a78a:	1af2      	sublt	r2, r6, r3
 800a78c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a78e:	bfb6      	itet	lt
 800a790:	189b      	addlt	r3, r3, r2
 800a792:	1b9e      	subge	r6, r3, r6
 800a794:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a796:	9b03      	ldr	r3, [sp, #12]
 800a798:	bfb8      	it	lt
 800a79a:	2600      	movlt	r6, #0
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	bfb7      	itett	lt
 800a7a0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a7a4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a7a8:	1a9d      	sublt	r5, r3, r2
 800a7aa:	2300      	movlt	r3, #0
 800a7ac:	e734      	b.n	800a618 <_dtoa_r+0x720>
 800a7ae:	9e07      	ldr	r6, [sp, #28]
 800a7b0:	9d04      	ldr	r5, [sp, #16]
 800a7b2:	9f08      	ldr	r7, [sp, #32]
 800a7b4:	e73b      	b.n	800a62e <_dtoa_r+0x736>
 800a7b6:	9a07      	ldr	r2, [sp, #28]
 800a7b8:	e767      	b.n	800a68a <_dtoa_r+0x792>
 800a7ba:	9b06      	ldr	r3, [sp, #24]
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	dc18      	bgt.n	800a7f2 <_dtoa_r+0x8fa>
 800a7c0:	f1ba 0f00 	cmp.w	sl, #0
 800a7c4:	d115      	bne.n	800a7f2 <_dtoa_r+0x8fa>
 800a7c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a7ca:	b993      	cbnz	r3, 800a7f2 <_dtoa_r+0x8fa>
 800a7cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a7d0:	0d1b      	lsrs	r3, r3, #20
 800a7d2:	051b      	lsls	r3, r3, #20
 800a7d4:	b183      	cbz	r3, 800a7f8 <_dtoa_r+0x900>
 800a7d6:	9b04      	ldr	r3, [sp, #16]
 800a7d8:	3301      	adds	r3, #1
 800a7da:	9304      	str	r3, [sp, #16]
 800a7dc:	9b05      	ldr	r3, [sp, #20]
 800a7de:	3301      	adds	r3, #1
 800a7e0:	9305      	str	r3, [sp, #20]
 800a7e2:	f04f 0801 	mov.w	r8, #1
 800a7e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	f47f af6a 	bne.w	800a6c2 <_dtoa_r+0x7ca>
 800a7ee:	2001      	movs	r0, #1
 800a7f0:	e76f      	b.n	800a6d2 <_dtoa_r+0x7da>
 800a7f2:	f04f 0800 	mov.w	r8, #0
 800a7f6:	e7f6      	b.n	800a7e6 <_dtoa_r+0x8ee>
 800a7f8:	4698      	mov	r8, r3
 800a7fa:	e7f4      	b.n	800a7e6 <_dtoa_r+0x8ee>
 800a7fc:	f43f af7d 	beq.w	800a6fa <_dtoa_r+0x802>
 800a800:	4618      	mov	r0, r3
 800a802:	301c      	adds	r0, #28
 800a804:	e772      	b.n	800a6ec <_dtoa_r+0x7f4>
 800a806:	9b03      	ldr	r3, [sp, #12]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	dc37      	bgt.n	800a87c <_dtoa_r+0x984>
 800a80c:	9b06      	ldr	r3, [sp, #24]
 800a80e:	2b02      	cmp	r3, #2
 800a810:	dd34      	ble.n	800a87c <_dtoa_r+0x984>
 800a812:	9b03      	ldr	r3, [sp, #12]
 800a814:	9302      	str	r3, [sp, #8]
 800a816:	9b02      	ldr	r3, [sp, #8]
 800a818:	b96b      	cbnz	r3, 800a836 <_dtoa_r+0x93e>
 800a81a:	4631      	mov	r1, r6
 800a81c:	2205      	movs	r2, #5
 800a81e:	4620      	mov	r0, r4
 800a820:	f000 ff66 	bl	800b6f0 <__multadd>
 800a824:	4601      	mov	r1, r0
 800a826:	4606      	mov	r6, r0
 800a828:	ee18 0a10 	vmov	r0, s16
 800a82c:	f001 f9ca 	bl	800bbc4 <__mcmp>
 800a830:	2800      	cmp	r0, #0
 800a832:	f73f adbb 	bgt.w	800a3ac <_dtoa_r+0x4b4>
 800a836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a838:	9d01      	ldr	r5, [sp, #4]
 800a83a:	43db      	mvns	r3, r3
 800a83c:	9300      	str	r3, [sp, #0]
 800a83e:	f04f 0800 	mov.w	r8, #0
 800a842:	4631      	mov	r1, r6
 800a844:	4620      	mov	r0, r4
 800a846:	f000 ff31 	bl	800b6ac <_Bfree>
 800a84a:	2f00      	cmp	r7, #0
 800a84c:	f43f aea4 	beq.w	800a598 <_dtoa_r+0x6a0>
 800a850:	f1b8 0f00 	cmp.w	r8, #0
 800a854:	d005      	beq.n	800a862 <_dtoa_r+0x96a>
 800a856:	45b8      	cmp	r8, r7
 800a858:	d003      	beq.n	800a862 <_dtoa_r+0x96a>
 800a85a:	4641      	mov	r1, r8
 800a85c:	4620      	mov	r0, r4
 800a85e:	f000 ff25 	bl	800b6ac <_Bfree>
 800a862:	4639      	mov	r1, r7
 800a864:	4620      	mov	r0, r4
 800a866:	f000 ff21 	bl	800b6ac <_Bfree>
 800a86a:	e695      	b.n	800a598 <_dtoa_r+0x6a0>
 800a86c:	2600      	movs	r6, #0
 800a86e:	4637      	mov	r7, r6
 800a870:	e7e1      	b.n	800a836 <_dtoa_r+0x93e>
 800a872:	9700      	str	r7, [sp, #0]
 800a874:	4637      	mov	r7, r6
 800a876:	e599      	b.n	800a3ac <_dtoa_r+0x4b4>
 800a878:	40240000 	.word	0x40240000
 800a87c:	9b08      	ldr	r3, [sp, #32]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	f000 80ca 	beq.w	800aa18 <_dtoa_r+0xb20>
 800a884:	9b03      	ldr	r3, [sp, #12]
 800a886:	9302      	str	r3, [sp, #8]
 800a888:	2d00      	cmp	r5, #0
 800a88a:	dd05      	ble.n	800a898 <_dtoa_r+0x9a0>
 800a88c:	4639      	mov	r1, r7
 800a88e:	462a      	mov	r2, r5
 800a890:	4620      	mov	r0, r4
 800a892:	f001 f927 	bl	800bae4 <__lshift>
 800a896:	4607      	mov	r7, r0
 800a898:	f1b8 0f00 	cmp.w	r8, #0
 800a89c:	d05b      	beq.n	800a956 <_dtoa_r+0xa5e>
 800a89e:	6879      	ldr	r1, [r7, #4]
 800a8a0:	4620      	mov	r0, r4
 800a8a2:	f000 fec3 	bl	800b62c <_Balloc>
 800a8a6:	4605      	mov	r5, r0
 800a8a8:	b928      	cbnz	r0, 800a8b6 <_dtoa_r+0x9be>
 800a8aa:	4b87      	ldr	r3, [pc, #540]	; (800aac8 <_dtoa_r+0xbd0>)
 800a8ac:	4602      	mov	r2, r0
 800a8ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a8b2:	f7ff bb3b 	b.w	8009f2c <_dtoa_r+0x34>
 800a8b6:	693a      	ldr	r2, [r7, #16]
 800a8b8:	3202      	adds	r2, #2
 800a8ba:	0092      	lsls	r2, r2, #2
 800a8bc:	f107 010c 	add.w	r1, r7, #12
 800a8c0:	300c      	adds	r0, #12
 800a8c2:	f7fd fbdd 	bl	8008080 <memcpy>
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	4629      	mov	r1, r5
 800a8ca:	4620      	mov	r0, r4
 800a8cc:	f001 f90a 	bl	800bae4 <__lshift>
 800a8d0:	9b01      	ldr	r3, [sp, #4]
 800a8d2:	f103 0901 	add.w	r9, r3, #1
 800a8d6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a8da:	4413      	add	r3, r2
 800a8dc:	9305      	str	r3, [sp, #20]
 800a8de:	f00a 0301 	and.w	r3, sl, #1
 800a8e2:	46b8      	mov	r8, r7
 800a8e4:	9304      	str	r3, [sp, #16]
 800a8e6:	4607      	mov	r7, r0
 800a8e8:	4631      	mov	r1, r6
 800a8ea:	ee18 0a10 	vmov	r0, s16
 800a8ee:	f7ff fa77 	bl	8009de0 <quorem>
 800a8f2:	4641      	mov	r1, r8
 800a8f4:	9002      	str	r0, [sp, #8]
 800a8f6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a8fa:	ee18 0a10 	vmov	r0, s16
 800a8fe:	f001 f961 	bl	800bbc4 <__mcmp>
 800a902:	463a      	mov	r2, r7
 800a904:	9003      	str	r0, [sp, #12]
 800a906:	4631      	mov	r1, r6
 800a908:	4620      	mov	r0, r4
 800a90a:	f001 f977 	bl	800bbfc <__mdiff>
 800a90e:	68c2      	ldr	r2, [r0, #12]
 800a910:	f109 3bff 	add.w	fp, r9, #4294967295
 800a914:	4605      	mov	r5, r0
 800a916:	bb02      	cbnz	r2, 800a95a <_dtoa_r+0xa62>
 800a918:	4601      	mov	r1, r0
 800a91a:	ee18 0a10 	vmov	r0, s16
 800a91e:	f001 f951 	bl	800bbc4 <__mcmp>
 800a922:	4602      	mov	r2, r0
 800a924:	4629      	mov	r1, r5
 800a926:	4620      	mov	r0, r4
 800a928:	9207      	str	r2, [sp, #28]
 800a92a:	f000 febf 	bl	800b6ac <_Bfree>
 800a92e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a932:	ea43 0102 	orr.w	r1, r3, r2
 800a936:	9b04      	ldr	r3, [sp, #16]
 800a938:	430b      	orrs	r3, r1
 800a93a:	464d      	mov	r5, r9
 800a93c:	d10f      	bne.n	800a95e <_dtoa_r+0xa66>
 800a93e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a942:	d02a      	beq.n	800a99a <_dtoa_r+0xaa2>
 800a944:	9b03      	ldr	r3, [sp, #12]
 800a946:	2b00      	cmp	r3, #0
 800a948:	dd02      	ble.n	800a950 <_dtoa_r+0xa58>
 800a94a:	9b02      	ldr	r3, [sp, #8]
 800a94c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a950:	f88b a000 	strb.w	sl, [fp]
 800a954:	e775      	b.n	800a842 <_dtoa_r+0x94a>
 800a956:	4638      	mov	r0, r7
 800a958:	e7ba      	b.n	800a8d0 <_dtoa_r+0x9d8>
 800a95a:	2201      	movs	r2, #1
 800a95c:	e7e2      	b.n	800a924 <_dtoa_r+0xa2c>
 800a95e:	9b03      	ldr	r3, [sp, #12]
 800a960:	2b00      	cmp	r3, #0
 800a962:	db04      	blt.n	800a96e <_dtoa_r+0xa76>
 800a964:	9906      	ldr	r1, [sp, #24]
 800a966:	430b      	orrs	r3, r1
 800a968:	9904      	ldr	r1, [sp, #16]
 800a96a:	430b      	orrs	r3, r1
 800a96c:	d122      	bne.n	800a9b4 <_dtoa_r+0xabc>
 800a96e:	2a00      	cmp	r2, #0
 800a970:	ddee      	ble.n	800a950 <_dtoa_r+0xa58>
 800a972:	ee18 1a10 	vmov	r1, s16
 800a976:	2201      	movs	r2, #1
 800a978:	4620      	mov	r0, r4
 800a97a:	f001 f8b3 	bl	800bae4 <__lshift>
 800a97e:	4631      	mov	r1, r6
 800a980:	ee08 0a10 	vmov	s16, r0
 800a984:	f001 f91e 	bl	800bbc4 <__mcmp>
 800a988:	2800      	cmp	r0, #0
 800a98a:	dc03      	bgt.n	800a994 <_dtoa_r+0xa9c>
 800a98c:	d1e0      	bne.n	800a950 <_dtoa_r+0xa58>
 800a98e:	f01a 0f01 	tst.w	sl, #1
 800a992:	d0dd      	beq.n	800a950 <_dtoa_r+0xa58>
 800a994:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a998:	d1d7      	bne.n	800a94a <_dtoa_r+0xa52>
 800a99a:	2339      	movs	r3, #57	; 0x39
 800a99c:	f88b 3000 	strb.w	r3, [fp]
 800a9a0:	462b      	mov	r3, r5
 800a9a2:	461d      	mov	r5, r3
 800a9a4:	3b01      	subs	r3, #1
 800a9a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a9aa:	2a39      	cmp	r2, #57	; 0x39
 800a9ac:	d071      	beq.n	800aa92 <_dtoa_r+0xb9a>
 800a9ae:	3201      	adds	r2, #1
 800a9b0:	701a      	strb	r2, [r3, #0]
 800a9b2:	e746      	b.n	800a842 <_dtoa_r+0x94a>
 800a9b4:	2a00      	cmp	r2, #0
 800a9b6:	dd07      	ble.n	800a9c8 <_dtoa_r+0xad0>
 800a9b8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a9bc:	d0ed      	beq.n	800a99a <_dtoa_r+0xaa2>
 800a9be:	f10a 0301 	add.w	r3, sl, #1
 800a9c2:	f88b 3000 	strb.w	r3, [fp]
 800a9c6:	e73c      	b.n	800a842 <_dtoa_r+0x94a>
 800a9c8:	9b05      	ldr	r3, [sp, #20]
 800a9ca:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a9ce:	4599      	cmp	r9, r3
 800a9d0:	d047      	beq.n	800aa62 <_dtoa_r+0xb6a>
 800a9d2:	ee18 1a10 	vmov	r1, s16
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	220a      	movs	r2, #10
 800a9da:	4620      	mov	r0, r4
 800a9dc:	f000 fe88 	bl	800b6f0 <__multadd>
 800a9e0:	45b8      	cmp	r8, r7
 800a9e2:	ee08 0a10 	vmov	s16, r0
 800a9e6:	f04f 0300 	mov.w	r3, #0
 800a9ea:	f04f 020a 	mov.w	r2, #10
 800a9ee:	4641      	mov	r1, r8
 800a9f0:	4620      	mov	r0, r4
 800a9f2:	d106      	bne.n	800aa02 <_dtoa_r+0xb0a>
 800a9f4:	f000 fe7c 	bl	800b6f0 <__multadd>
 800a9f8:	4680      	mov	r8, r0
 800a9fa:	4607      	mov	r7, r0
 800a9fc:	f109 0901 	add.w	r9, r9, #1
 800aa00:	e772      	b.n	800a8e8 <_dtoa_r+0x9f0>
 800aa02:	f000 fe75 	bl	800b6f0 <__multadd>
 800aa06:	4639      	mov	r1, r7
 800aa08:	4680      	mov	r8, r0
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	220a      	movs	r2, #10
 800aa0e:	4620      	mov	r0, r4
 800aa10:	f000 fe6e 	bl	800b6f0 <__multadd>
 800aa14:	4607      	mov	r7, r0
 800aa16:	e7f1      	b.n	800a9fc <_dtoa_r+0xb04>
 800aa18:	9b03      	ldr	r3, [sp, #12]
 800aa1a:	9302      	str	r3, [sp, #8]
 800aa1c:	9d01      	ldr	r5, [sp, #4]
 800aa1e:	ee18 0a10 	vmov	r0, s16
 800aa22:	4631      	mov	r1, r6
 800aa24:	f7ff f9dc 	bl	8009de0 <quorem>
 800aa28:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800aa2c:	9b01      	ldr	r3, [sp, #4]
 800aa2e:	f805 ab01 	strb.w	sl, [r5], #1
 800aa32:	1aea      	subs	r2, r5, r3
 800aa34:	9b02      	ldr	r3, [sp, #8]
 800aa36:	4293      	cmp	r3, r2
 800aa38:	dd09      	ble.n	800aa4e <_dtoa_r+0xb56>
 800aa3a:	ee18 1a10 	vmov	r1, s16
 800aa3e:	2300      	movs	r3, #0
 800aa40:	220a      	movs	r2, #10
 800aa42:	4620      	mov	r0, r4
 800aa44:	f000 fe54 	bl	800b6f0 <__multadd>
 800aa48:	ee08 0a10 	vmov	s16, r0
 800aa4c:	e7e7      	b.n	800aa1e <_dtoa_r+0xb26>
 800aa4e:	9b02      	ldr	r3, [sp, #8]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	bfc8      	it	gt
 800aa54:	461d      	movgt	r5, r3
 800aa56:	9b01      	ldr	r3, [sp, #4]
 800aa58:	bfd8      	it	le
 800aa5a:	2501      	movle	r5, #1
 800aa5c:	441d      	add	r5, r3
 800aa5e:	f04f 0800 	mov.w	r8, #0
 800aa62:	ee18 1a10 	vmov	r1, s16
 800aa66:	2201      	movs	r2, #1
 800aa68:	4620      	mov	r0, r4
 800aa6a:	f001 f83b 	bl	800bae4 <__lshift>
 800aa6e:	4631      	mov	r1, r6
 800aa70:	ee08 0a10 	vmov	s16, r0
 800aa74:	f001 f8a6 	bl	800bbc4 <__mcmp>
 800aa78:	2800      	cmp	r0, #0
 800aa7a:	dc91      	bgt.n	800a9a0 <_dtoa_r+0xaa8>
 800aa7c:	d102      	bne.n	800aa84 <_dtoa_r+0xb8c>
 800aa7e:	f01a 0f01 	tst.w	sl, #1
 800aa82:	d18d      	bne.n	800a9a0 <_dtoa_r+0xaa8>
 800aa84:	462b      	mov	r3, r5
 800aa86:	461d      	mov	r5, r3
 800aa88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa8c:	2a30      	cmp	r2, #48	; 0x30
 800aa8e:	d0fa      	beq.n	800aa86 <_dtoa_r+0xb8e>
 800aa90:	e6d7      	b.n	800a842 <_dtoa_r+0x94a>
 800aa92:	9a01      	ldr	r2, [sp, #4]
 800aa94:	429a      	cmp	r2, r3
 800aa96:	d184      	bne.n	800a9a2 <_dtoa_r+0xaaa>
 800aa98:	9b00      	ldr	r3, [sp, #0]
 800aa9a:	3301      	adds	r3, #1
 800aa9c:	9300      	str	r3, [sp, #0]
 800aa9e:	2331      	movs	r3, #49	; 0x31
 800aaa0:	7013      	strb	r3, [r2, #0]
 800aaa2:	e6ce      	b.n	800a842 <_dtoa_r+0x94a>
 800aaa4:	4b09      	ldr	r3, [pc, #36]	; (800aacc <_dtoa_r+0xbd4>)
 800aaa6:	f7ff ba95 	b.w	8009fd4 <_dtoa_r+0xdc>
 800aaaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	f47f aa6e 	bne.w	8009f8e <_dtoa_r+0x96>
 800aab2:	4b07      	ldr	r3, [pc, #28]	; (800aad0 <_dtoa_r+0xbd8>)
 800aab4:	f7ff ba8e 	b.w	8009fd4 <_dtoa_r+0xdc>
 800aab8:	9b02      	ldr	r3, [sp, #8]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	dcae      	bgt.n	800aa1c <_dtoa_r+0xb24>
 800aabe:	9b06      	ldr	r3, [sp, #24]
 800aac0:	2b02      	cmp	r3, #2
 800aac2:	f73f aea8 	bgt.w	800a816 <_dtoa_r+0x91e>
 800aac6:	e7a9      	b.n	800aa1c <_dtoa_r+0xb24>
 800aac8:	0800cde8 	.word	0x0800cde8
 800aacc:	0800cbec 	.word	0x0800cbec
 800aad0:	0800cd69 	.word	0x0800cd69

0800aad4 <__sflush_r>:
 800aad4:	898a      	ldrh	r2, [r1, #12]
 800aad6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aada:	4605      	mov	r5, r0
 800aadc:	0710      	lsls	r0, r2, #28
 800aade:	460c      	mov	r4, r1
 800aae0:	d458      	bmi.n	800ab94 <__sflush_r+0xc0>
 800aae2:	684b      	ldr	r3, [r1, #4]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	dc05      	bgt.n	800aaf4 <__sflush_r+0x20>
 800aae8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	dc02      	bgt.n	800aaf4 <__sflush_r+0x20>
 800aaee:	2000      	movs	r0, #0
 800aaf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aaf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aaf6:	2e00      	cmp	r6, #0
 800aaf8:	d0f9      	beq.n	800aaee <__sflush_r+0x1a>
 800aafa:	2300      	movs	r3, #0
 800aafc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ab00:	682f      	ldr	r7, [r5, #0]
 800ab02:	602b      	str	r3, [r5, #0]
 800ab04:	d032      	beq.n	800ab6c <__sflush_r+0x98>
 800ab06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ab08:	89a3      	ldrh	r3, [r4, #12]
 800ab0a:	075a      	lsls	r2, r3, #29
 800ab0c:	d505      	bpl.n	800ab1a <__sflush_r+0x46>
 800ab0e:	6863      	ldr	r3, [r4, #4]
 800ab10:	1ac0      	subs	r0, r0, r3
 800ab12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab14:	b10b      	cbz	r3, 800ab1a <__sflush_r+0x46>
 800ab16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab18:	1ac0      	subs	r0, r0, r3
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	4602      	mov	r2, r0
 800ab1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab20:	6a21      	ldr	r1, [r4, #32]
 800ab22:	4628      	mov	r0, r5
 800ab24:	47b0      	blx	r6
 800ab26:	1c43      	adds	r3, r0, #1
 800ab28:	89a3      	ldrh	r3, [r4, #12]
 800ab2a:	d106      	bne.n	800ab3a <__sflush_r+0x66>
 800ab2c:	6829      	ldr	r1, [r5, #0]
 800ab2e:	291d      	cmp	r1, #29
 800ab30:	d82c      	bhi.n	800ab8c <__sflush_r+0xb8>
 800ab32:	4a2a      	ldr	r2, [pc, #168]	; (800abdc <__sflush_r+0x108>)
 800ab34:	40ca      	lsrs	r2, r1
 800ab36:	07d6      	lsls	r6, r2, #31
 800ab38:	d528      	bpl.n	800ab8c <__sflush_r+0xb8>
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	6062      	str	r2, [r4, #4]
 800ab3e:	04d9      	lsls	r1, r3, #19
 800ab40:	6922      	ldr	r2, [r4, #16]
 800ab42:	6022      	str	r2, [r4, #0]
 800ab44:	d504      	bpl.n	800ab50 <__sflush_r+0x7c>
 800ab46:	1c42      	adds	r2, r0, #1
 800ab48:	d101      	bne.n	800ab4e <__sflush_r+0x7a>
 800ab4a:	682b      	ldr	r3, [r5, #0]
 800ab4c:	b903      	cbnz	r3, 800ab50 <__sflush_r+0x7c>
 800ab4e:	6560      	str	r0, [r4, #84]	; 0x54
 800ab50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab52:	602f      	str	r7, [r5, #0]
 800ab54:	2900      	cmp	r1, #0
 800ab56:	d0ca      	beq.n	800aaee <__sflush_r+0x1a>
 800ab58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab5c:	4299      	cmp	r1, r3
 800ab5e:	d002      	beq.n	800ab66 <__sflush_r+0x92>
 800ab60:	4628      	mov	r0, r5
 800ab62:	f001 fa3b 	bl	800bfdc <_free_r>
 800ab66:	2000      	movs	r0, #0
 800ab68:	6360      	str	r0, [r4, #52]	; 0x34
 800ab6a:	e7c1      	b.n	800aaf0 <__sflush_r+0x1c>
 800ab6c:	6a21      	ldr	r1, [r4, #32]
 800ab6e:	2301      	movs	r3, #1
 800ab70:	4628      	mov	r0, r5
 800ab72:	47b0      	blx	r6
 800ab74:	1c41      	adds	r1, r0, #1
 800ab76:	d1c7      	bne.n	800ab08 <__sflush_r+0x34>
 800ab78:	682b      	ldr	r3, [r5, #0]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d0c4      	beq.n	800ab08 <__sflush_r+0x34>
 800ab7e:	2b1d      	cmp	r3, #29
 800ab80:	d001      	beq.n	800ab86 <__sflush_r+0xb2>
 800ab82:	2b16      	cmp	r3, #22
 800ab84:	d101      	bne.n	800ab8a <__sflush_r+0xb6>
 800ab86:	602f      	str	r7, [r5, #0]
 800ab88:	e7b1      	b.n	800aaee <__sflush_r+0x1a>
 800ab8a:	89a3      	ldrh	r3, [r4, #12]
 800ab8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab90:	81a3      	strh	r3, [r4, #12]
 800ab92:	e7ad      	b.n	800aaf0 <__sflush_r+0x1c>
 800ab94:	690f      	ldr	r7, [r1, #16]
 800ab96:	2f00      	cmp	r7, #0
 800ab98:	d0a9      	beq.n	800aaee <__sflush_r+0x1a>
 800ab9a:	0793      	lsls	r3, r2, #30
 800ab9c:	680e      	ldr	r6, [r1, #0]
 800ab9e:	bf08      	it	eq
 800aba0:	694b      	ldreq	r3, [r1, #20]
 800aba2:	600f      	str	r7, [r1, #0]
 800aba4:	bf18      	it	ne
 800aba6:	2300      	movne	r3, #0
 800aba8:	eba6 0807 	sub.w	r8, r6, r7
 800abac:	608b      	str	r3, [r1, #8]
 800abae:	f1b8 0f00 	cmp.w	r8, #0
 800abb2:	dd9c      	ble.n	800aaee <__sflush_r+0x1a>
 800abb4:	6a21      	ldr	r1, [r4, #32]
 800abb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800abb8:	4643      	mov	r3, r8
 800abba:	463a      	mov	r2, r7
 800abbc:	4628      	mov	r0, r5
 800abbe:	47b0      	blx	r6
 800abc0:	2800      	cmp	r0, #0
 800abc2:	dc06      	bgt.n	800abd2 <__sflush_r+0xfe>
 800abc4:	89a3      	ldrh	r3, [r4, #12]
 800abc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abca:	81a3      	strh	r3, [r4, #12]
 800abcc:	f04f 30ff 	mov.w	r0, #4294967295
 800abd0:	e78e      	b.n	800aaf0 <__sflush_r+0x1c>
 800abd2:	4407      	add	r7, r0
 800abd4:	eba8 0800 	sub.w	r8, r8, r0
 800abd8:	e7e9      	b.n	800abae <__sflush_r+0xda>
 800abda:	bf00      	nop
 800abdc:	20400001 	.word	0x20400001

0800abe0 <_fflush_r>:
 800abe0:	b538      	push	{r3, r4, r5, lr}
 800abe2:	690b      	ldr	r3, [r1, #16]
 800abe4:	4605      	mov	r5, r0
 800abe6:	460c      	mov	r4, r1
 800abe8:	b913      	cbnz	r3, 800abf0 <_fflush_r+0x10>
 800abea:	2500      	movs	r5, #0
 800abec:	4628      	mov	r0, r5
 800abee:	bd38      	pop	{r3, r4, r5, pc}
 800abf0:	b118      	cbz	r0, 800abfa <_fflush_r+0x1a>
 800abf2:	6983      	ldr	r3, [r0, #24]
 800abf4:	b90b      	cbnz	r3, 800abfa <_fflush_r+0x1a>
 800abf6:	f000 f887 	bl	800ad08 <__sinit>
 800abfa:	4b14      	ldr	r3, [pc, #80]	; (800ac4c <_fflush_r+0x6c>)
 800abfc:	429c      	cmp	r4, r3
 800abfe:	d11b      	bne.n	800ac38 <_fflush_r+0x58>
 800ac00:	686c      	ldr	r4, [r5, #4]
 800ac02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d0ef      	beq.n	800abea <_fflush_r+0xa>
 800ac0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ac0c:	07d0      	lsls	r0, r2, #31
 800ac0e:	d404      	bmi.n	800ac1a <_fflush_r+0x3a>
 800ac10:	0599      	lsls	r1, r3, #22
 800ac12:	d402      	bmi.n	800ac1a <_fflush_r+0x3a>
 800ac14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac16:	f000 fc88 	bl	800b52a <__retarget_lock_acquire_recursive>
 800ac1a:	4628      	mov	r0, r5
 800ac1c:	4621      	mov	r1, r4
 800ac1e:	f7ff ff59 	bl	800aad4 <__sflush_r>
 800ac22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac24:	07da      	lsls	r2, r3, #31
 800ac26:	4605      	mov	r5, r0
 800ac28:	d4e0      	bmi.n	800abec <_fflush_r+0xc>
 800ac2a:	89a3      	ldrh	r3, [r4, #12]
 800ac2c:	059b      	lsls	r3, r3, #22
 800ac2e:	d4dd      	bmi.n	800abec <_fflush_r+0xc>
 800ac30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac32:	f000 fc7b 	bl	800b52c <__retarget_lock_release_recursive>
 800ac36:	e7d9      	b.n	800abec <_fflush_r+0xc>
 800ac38:	4b05      	ldr	r3, [pc, #20]	; (800ac50 <_fflush_r+0x70>)
 800ac3a:	429c      	cmp	r4, r3
 800ac3c:	d101      	bne.n	800ac42 <_fflush_r+0x62>
 800ac3e:	68ac      	ldr	r4, [r5, #8]
 800ac40:	e7df      	b.n	800ac02 <_fflush_r+0x22>
 800ac42:	4b04      	ldr	r3, [pc, #16]	; (800ac54 <_fflush_r+0x74>)
 800ac44:	429c      	cmp	r4, r3
 800ac46:	bf08      	it	eq
 800ac48:	68ec      	ldreq	r4, [r5, #12]
 800ac4a:	e7da      	b.n	800ac02 <_fflush_r+0x22>
 800ac4c:	0800ce1c 	.word	0x0800ce1c
 800ac50:	0800ce3c 	.word	0x0800ce3c
 800ac54:	0800cdfc 	.word	0x0800cdfc

0800ac58 <std>:
 800ac58:	2300      	movs	r3, #0
 800ac5a:	b510      	push	{r4, lr}
 800ac5c:	4604      	mov	r4, r0
 800ac5e:	e9c0 3300 	strd	r3, r3, [r0]
 800ac62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac66:	6083      	str	r3, [r0, #8]
 800ac68:	8181      	strh	r1, [r0, #12]
 800ac6a:	6643      	str	r3, [r0, #100]	; 0x64
 800ac6c:	81c2      	strh	r2, [r0, #14]
 800ac6e:	6183      	str	r3, [r0, #24]
 800ac70:	4619      	mov	r1, r3
 800ac72:	2208      	movs	r2, #8
 800ac74:	305c      	adds	r0, #92	; 0x5c
 800ac76:	f7fd fa11 	bl	800809c <memset>
 800ac7a:	4b05      	ldr	r3, [pc, #20]	; (800ac90 <std+0x38>)
 800ac7c:	6263      	str	r3, [r4, #36]	; 0x24
 800ac7e:	4b05      	ldr	r3, [pc, #20]	; (800ac94 <std+0x3c>)
 800ac80:	62a3      	str	r3, [r4, #40]	; 0x28
 800ac82:	4b05      	ldr	r3, [pc, #20]	; (800ac98 <std+0x40>)
 800ac84:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ac86:	4b05      	ldr	r3, [pc, #20]	; (800ac9c <std+0x44>)
 800ac88:	6224      	str	r4, [r4, #32]
 800ac8a:	6323      	str	r3, [r4, #48]	; 0x30
 800ac8c:	bd10      	pop	{r4, pc}
 800ac8e:	bf00      	nop
 800ac90:	0800c739 	.word	0x0800c739
 800ac94:	0800c75b 	.word	0x0800c75b
 800ac98:	0800c793 	.word	0x0800c793
 800ac9c:	0800c7b7 	.word	0x0800c7b7

0800aca0 <_cleanup_r>:
 800aca0:	4901      	ldr	r1, [pc, #4]	; (800aca8 <_cleanup_r+0x8>)
 800aca2:	f000 b8af 	b.w	800ae04 <_fwalk_reent>
 800aca6:	bf00      	nop
 800aca8:	0800abe1 	.word	0x0800abe1

0800acac <__sfmoreglue>:
 800acac:	b570      	push	{r4, r5, r6, lr}
 800acae:	2268      	movs	r2, #104	; 0x68
 800acb0:	1e4d      	subs	r5, r1, #1
 800acb2:	4355      	muls	r5, r2
 800acb4:	460e      	mov	r6, r1
 800acb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800acba:	f001 f9fb 	bl	800c0b4 <_malloc_r>
 800acbe:	4604      	mov	r4, r0
 800acc0:	b140      	cbz	r0, 800acd4 <__sfmoreglue+0x28>
 800acc2:	2100      	movs	r1, #0
 800acc4:	e9c0 1600 	strd	r1, r6, [r0]
 800acc8:	300c      	adds	r0, #12
 800acca:	60a0      	str	r0, [r4, #8]
 800accc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800acd0:	f7fd f9e4 	bl	800809c <memset>
 800acd4:	4620      	mov	r0, r4
 800acd6:	bd70      	pop	{r4, r5, r6, pc}

0800acd8 <__sfp_lock_acquire>:
 800acd8:	4801      	ldr	r0, [pc, #4]	; (800ace0 <__sfp_lock_acquire+0x8>)
 800acda:	f000 bc26 	b.w	800b52a <__retarget_lock_acquire_recursive>
 800acde:	bf00      	nop
 800ace0:	20000421 	.word	0x20000421

0800ace4 <__sfp_lock_release>:
 800ace4:	4801      	ldr	r0, [pc, #4]	; (800acec <__sfp_lock_release+0x8>)
 800ace6:	f000 bc21 	b.w	800b52c <__retarget_lock_release_recursive>
 800acea:	bf00      	nop
 800acec:	20000421 	.word	0x20000421

0800acf0 <__sinit_lock_acquire>:
 800acf0:	4801      	ldr	r0, [pc, #4]	; (800acf8 <__sinit_lock_acquire+0x8>)
 800acf2:	f000 bc1a 	b.w	800b52a <__retarget_lock_acquire_recursive>
 800acf6:	bf00      	nop
 800acf8:	20000422 	.word	0x20000422

0800acfc <__sinit_lock_release>:
 800acfc:	4801      	ldr	r0, [pc, #4]	; (800ad04 <__sinit_lock_release+0x8>)
 800acfe:	f000 bc15 	b.w	800b52c <__retarget_lock_release_recursive>
 800ad02:	bf00      	nop
 800ad04:	20000422 	.word	0x20000422

0800ad08 <__sinit>:
 800ad08:	b510      	push	{r4, lr}
 800ad0a:	4604      	mov	r4, r0
 800ad0c:	f7ff fff0 	bl	800acf0 <__sinit_lock_acquire>
 800ad10:	69a3      	ldr	r3, [r4, #24]
 800ad12:	b11b      	cbz	r3, 800ad1c <__sinit+0x14>
 800ad14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad18:	f7ff bff0 	b.w	800acfc <__sinit_lock_release>
 800ad1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ad20:	6523      	str	r3, [r4, #80]	; 0x50
 800ad22:	4b13      	ldr	r3, [pc, #76]	; (800ad70 <__sinit+0x68>)
 800ad24:	4a13      	ldr	r2, [pc, #76]	; (800ad74 <__sinit+0x6c>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	62a2      	str	r2, [r4, #40]	; 0x28
 800ad2a:	42a3      	cmp	r3, r4
 800ad2c:	bf04      	itt	eq
 800ad2e:	2301      	moveq	r3, #1
 800ad30:	61a3      	streq	r3, [r4, #24]
 800ad32:	4620      	mov	r0, r4
 800ad34:	f000 f820 	bl	800ad78 <__sfp>
 800ad38:	6060      	str	r0, [r4, #4]
 800ad3a:	4620      	mov	r0, r4
 800ad3c:	f000 f81c 	bl	800ad78 <__sfp>
 800ad40:	60a0      	str	r0, [r4, #8]
 800ad42:	4620      	mov	r0, r4
 800ad44:	f000 f818 	bl	800ad78 <__sfp>
 800ad48:	2200      	movs	r2, #0
 800ad4a:	60e0      	str	r0, [r4, #12]
 800ad4c:	2104      	movs	r1, #4
 800ad4e:	6860      	ldr	r0, [r4, #4]
 800ad50:	f7ff ff82 	bl	800ac58 <std>
 800ad54:	68a0      	ldr	r0, [r4, #8]
 800ad56:	2201      	movs	r2, #1
 800ad58:	2109      	movs	r1, #9
 800ad5a:	f7ff ff7d 	bl	800ac58 <std>
 800ad5e:	68e0      	ldr	r0, [r4, #12]
 800ad60:	2202      	movs	r2, #2
 800ad62:	2112      	movs	r1, #18
 800ad64:	f7ff ff78 	bl	800ac58 <std>
 800ad68:	2301      	movs	r3, #1
 800ad6a:	61a3      	str	r3, [r4, #24]
 800ad6c:	e7d2      	b.n	800ad14 <__sinit+0xc>
 800ad6e:	bf00      	nop
 800ad70:	0800cbd8 	.word	0x0800cbd8
 800ad74:	0800aca1 	.word	0x0800aca1

0800ad78 <__sfp>:
 800ad78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad7a:	4607      	mov	r7, r0
 800ad7c:	f7ff ffac 	bl	800acd8 <__sfp_lock_acquire>
 800ad80:	4b1e      	ldr	r3, [pc, #120]	; (800adfc <__sfp+0x84>)
 800ad82:	681e      	ldr	r6, [r3, #0]
 800ad84:	69b3      	ldr	r3, [r6, #24]
 800ad86:	b913      	cbnz	r3, 800ad8e <__sfp+0x16>
 800ad88:	4630      	mov	r0, r6
 800ad8a:	f7ff ffbd 	bl	800ad08 <__sinit>
 800ad8e:	3648      	adds	r6, #72	; 0x48
 800ad90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ad94:	3b01      	subs	r3, #1
 800ad96:	d503      	bpl.n	800ada0 <__sfp+0x28>
 800ad98:	6833      	ldr	r3, [r6, #0]
 800ad9a:	b30b      	cbz	r3, 800ade0 <__sfp+0x68>
 800ad9c:	6836      	ldr	r6, [r6, #0]
 800ad9e:	e7f7      	b.n	800ad90 <__sfp+0x18>
 800ada0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ada4:	b9d5      	cbnz	r5, 800addc <__sfp+0x64>
 800ada6:	4b16      	ldr	r3, [pc, #88]	; (800ae00 <__sfp+0x88>)
 800ada8:	60e3      	str	r3, [r4, #12]
 800adaa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800adae:	6665      	str	r5, [r4, #100]	; 0x64
 800adb0:	f000 fbba 	bl	800b528 <__retarget_lock_init_recursive>
 800adb4:	f7ff ff96 	bl	800ace4 <__sfp_lock_release>
 800adb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800adbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800adc0:	6025      	str	r5, [r4, #0]
 800adc2:	61a5      	str	r5, [r4, #24]
 800adc4:	2208      	movs	r2, #8
 800adc6:	4629      	mov	r1, r5
 800adc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800adcc:	f7fd f966 	bl	800809c <memset>
 800add0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800add4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800add8:	4620      	mov	r0, r4
 800adda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800addc:	3468      	adds	r4, #104	; 0x68
 800adde:	e7d9      	b.n	800ad94 <__sfp+0x1c>
 800ade0:	2104      	movs	r1, #4
 800ade2:	4638      	mov	r0, r7
 800ade4:	f7ff ff62 	bl	800acac <__sfmoreglue>
 800ade8:	4604      	mov	r4, r0
 800adea:	6030      	str	r0, [r6, #0]
 800adec:	2800      	cmp	r0, #0
 800adee:	d1d5      	bne.n	800ad9c <__sfp+0x24>
 800adf0:	f7ff ff78 	bl	800ace4 <__sfp_lock_release>
 800adf4:	230c      	movs	r3, #12
 800adf6:	603b      	str	r3, [r7, #0]
 800adf8:	e7ee      	b.n	800add8 <__sfp+0x60>
 800adfa:	bf00      	nop
 800adfc:	0800cbd8 	.word	0x0800cbd8
 800ae00:	ffff0001 	.word	0xffff0001

0800ae04 <_fwalk_reent>:
 800ae04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae08:	4606      	mov	r6, r0
 800ae0a:	4688      	mov	r8, r1
 800ae0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ae10:	2700      	movs	r7, #0
 800ae12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae16:	f1b9 0901 	subs.w	r9, r9, #1
 800ae1a:	d505      	bpl.n	800ae28 <_fwalk_reent+0x24>
 800ae1c:	6824      	ldr	r4, [r4, #0]
 800ae1e:	2c00      	cmp	r4, #0
 800ae20:	d1f7      	bne.n	800ae12 <_fwalk_reent+0xe>
 800ae22:	4638      	mov	r0, r7
 800ae24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae28:	89ab      	ldrh	r3, [r5, #12]
 800ae2a:	2b01      	cmp	r3, #1
 800ae2c:	d907      	bls.n	800ae3e <_fwalk_reent+0x3a>
 800ae2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae32:	3301      	adds	r3, #1
 800ae34:	d003      	beq.n	800ae3e <_fwalk_reent+0x3a>
 800ae36:	4629      	mov	r1, r5
 800ae38:	4630      	mov	r0, r6
 800ae3a:	47c0      	blx	r8
 800ae3c:	4307      	orrs	r7, r0
 800ae3e:	3568      	adds	r5, #104	; 0x68
 800ae40:	e7e9      	b.n	800ae16 <_fwalk_reent+0x12>

0800ae42 <rshift>:
 800ae42:	6903      	ldr	r3, [r0, #16]
 800ae44:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ae48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae4c:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ae50:	f100 0414 	add.w	r4, r0, #20
 800ae54:	dd45      	ble.n	800aee2 <rshift+0xa0>
 800ae56:	f011 011f 	ands.w	r1, r1, #31
 800ae5a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ae5e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ae62:	d10c      	bne.n	800ae7e <rshift+0x3c>
 800ae64:	f100 0710 	add.w	r7, r0, #16
 800ae68:	4629      	mov	r1, r5
 800ae6a:	42b1      	cmp	r1, r6
 800ae6c:	d334      	bcc.n	800aed8 <rshift+0x96>
 800ae6e:	1a9b      	subs	r3, r3, r2
 800ae70:	009b      	lsls	r3, r3, #2
 800ae72:	1eea      	subs	r2, r5, #3
 800ae74:	4296      	cmp	r6, r2
 800ae76:	bf38      	it	cc
 800ae78:	2300      	movcc	r3, #0
 800ae7a:	4423      	add	r3, r4
 800ae7c:	e015      	b.n	800aeaa <rshift+0x68>
 800ae7e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ae82:	f1c1 0820 	rsb	r8, r1, #32
 800ae86:	40cf      	lsrs	r7, r1
 800ae88:	f105 0e04 	add.w	lr, r5, #4
 800ae8c:	46a1      	mov	r9, r4
 800ae8e:	4576      	cmp	r6, lr
 800ae90:	46f4      	mov	ip, lr
 800ae92:	d815      	bhi.n	800aec0 <rshift+0x7e>
 800ae94:	1a9a      	subs	r2, r3, r2
 800ae96:	0092      	lsls	r2, r2, #2
 800ae98:	3a04      	subs	r2, #4
 800ae9a:	3501      	adds	r5, #1
 800ae9c:	42ae      	cmp	r6, r5
 800ae9e:	bf38      	it	cc
 800aea0:	2200      	movcc	r2, #0
 800aea2:	18a3      	adds	r3, r4, r2
 800aea4:	50a7      	str	r7, [r4, r2]
 800aea6:	b107      	cbz	r7, 800aeaa <rshift+0x68>
 800aea8:	3304      	adds	r3, #4
 800aeaa:	1b1a      	subs	r2, r3, r4
 800aeac:	42a3      	cmp	r3, r4
 800aeae:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800aeb2:	bf08      	it	eq
 800aeb4:	2300      	moveq	r3, #0
 800aeb6:	6102      	str	r2, [r0, #16]
 800aeb8:	bf08      	it	eq
 800aeba:	6143      	streq	r3, [r0, #20]
 800aebc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aec0:	f8dc c000 	ldr.w	ip, [ip]
 800aec4:	fa0c fc08 	lsl.w	ip, ip, r8
 800aec8:	ea4c 0707 	orr.w	r7, ip, r7
 800aecc:	f849 7b04 	str.w	r7, [r9], #4
 800aed0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aed4:	40cf      	lsrs	r7, r1
 800aed6:	e7da      	b.n	800ae8e <rshift+0x4c>
 800aed8:	f851 cb04 	ldr.w	ip, [r1], #4
 800aedc:	f847 cf04 	str.w	ip, [r7, #4]!
 800aee0:	e7c3      	b.n	800ae6a <rshift+0x28>
 800aee2:	4623      	mov	r3, r4
 800aee4:	e7e1      	b.n	800aeaa <rshift+0x68>

0800aee6 <__hexdig_fun>:
 800aee6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800aeea:	2b09      	cmp	r3, #9
 800aeec:	d802      	bhi.n	800aef4 <__hexdig_fun+0xe>
 800aeee:	3820      	subs	r0, #32
 800aef0:	b2c0      	uxtb	r0, r0
 800aef2:	4770      	bx	lr
 800aef4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800aef8:	2b05      	cmp	r3, #5
 800aefa:	d801      	bhi.n	800af00 <__hexdig_fun+0x1a>
 800aefc:	3847      	subs	r0, #71	; 0x47
 800aefe:	e7f7      	b.n	800aef0 <__hexdig_fun+0xa>
 800af00:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800af04:	2b05      	cmp	r3, #5
 800af06:	d801      	bhi.n	800af0c <__hexdig_fun+0x26>
 800af08:	3827      	subs	r0, #39	; 0x27
 800af0a:	e7f1      	b.n	800aef0 <__hexdig_fun+0xa>
 800af0c:	2000      	movs	r0, #0
 800af0e:	4770      	bx	lr

0800af10 <__gethex>:
 800af10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af14:	ed2d 8b02 	vpush	{d8}
 800af18:	b089      	sub	sp, #36	; 0x24
 800af1a:	ee08 0a10 	vmov	s16, r0
 800af1e:	9304      	str	r3, [sp, #16]
 800af20:	4bb4      	ldr	r3, [pc, #720]	; (800b1f4 <__gethex+0x2e4>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	9301      	str	r3, [sp, #4]
 800af26:	4618      	mov	r0, r3
 800af28:	468b      	mov	fp, r1
 800af2a:	4690      	mov	r8, r2
 800af2c:	f7f5 f950 	bl	80001d0 <strlen>
 800af30:	9b01      	ldr	r3, [sp, #4]
 800af32:	f8db 2000 	ldr.w	r2, [fp]
 800af36:	4403      	add	r3, r0
 800af38:	4682      	mov	sl, r0
 800af3a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800af3e:	9305      	str	r3, [sp, #20]
 800af40:	1c93      	adds	r3, r2, #2
 800af42:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800af46:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800af4a:	32fe      	adds	r2, #254	; 0xfe
 800af4c:	18d1      	adds	r1, r2, r3
 800af4e:	461f      	mov	r7, r3
 800af50:	f813 0b01 	ldrb.w	r0, [r3], #1
 800af54:	9100      	str	r1, [sp, #0]
 800af56:	2830      	cmp	r0, #48	; 0x30
 800af58:	d0f8      	beq.n	800af4c <__gethex+0x3c>
 800af5a:	f7ff ffc4 	bl	800aee6 <__hexdig_fun>
 800af5e:	4604      	mov	r4, r0
 800af60:	2800      	cmp	r0, #0
 800af62:	d13a      	bne.n	800afda <__gethex+0xca>
 800af64:	9901      	ldr	r1, [sp, #4]
 800af66:	4652      	mov	r2, sl
 800af68:	4638      	mov	r0, r7
 800af6a:	f001 fc28 	bl	800c7be <strncmp>
 800af6e:	4605      	mov	r5, r0
 800af70:	2800      	cmp	r0, #0
 800af72:	d168      	bne.n	800b046 <__gethex+0x136>
 800af74:	f817 000a 	ldrb.w	r0, [r7, sl]
 800af78:	eb07 060a 	add.w	r6, r7, sl
 800af7c:	f7ff ffb3 	bl	800aee6 <__hexdig_fun>
 800af80:	2800      	cmp	r0, #0
 800af82:	d062      	beq.n	800b04a <__gethex+0x13a>
 800af84:	4633      	mov	r3, r6
 800af86:	7818      	ldrb	r0, [r3, #0]
 800af88:	2830      	cmp	r0, #48	; 0x30
 800af8a:	461f      	mov	r7, r3
 800af8c:	f103 0301 	add.w	r3, r3, #1
 800af90:	d0f9      	beq.n	800af86 <__gethex+0x76>
 800af92:	f7ff ffa8 	bl	800aee6 <__hexdig_fun>
 800af96:	2301      	movs	r3, #1
 800af98:	fab0 f480 	clz	r4, r0
 800af9c:	0964      	lsrs	r4, r4, #5
 800af9e:	4635      	mov	r5, r6
 800afa0:	9300      	str	r3, [sp, #0]
 800afa2:	463a      	mov	r2, r7
 800afa4:	4616      	mov	r6, r2
 800afa6:	3201      	adds	r2, #1
 800afa8:	7830      	ldrb	r0, [r6, #0]
 800afaa:	f7ff ff9c 	bl	800aee6 <__hexdig_fun>
 800afae:	2800      	cmp	r0, #0
 800afb0:	d1f8      	bne.n	800afa4 <__gethex+0x94>
 800afb2:	9901      	ldr	r1, [sp, #4]
 800afb4:	4652      	mov	r2, sl
 800afb6:	4630      	mov	r0, r6
 800afb8:	f001 fc01 	bl	800c7be <strncmp>
 800afbc:	b980      	cbnz	r0, 800afe0 <__gethex+0xd0>
 800afbe:	b94d      	cbnz	r5, 800afd4 <__gethex+0xc4>
 800afc0:	eb06 050a 	add.w	r5, r6, sl
 800afc4:	462a      	mov	r2, r5
 800afc6:	4616      	mov	r6, r2
 800afc8:	3201      	adds	r2, #1
 800afca:	7830      	ldrb	r0, [r6, #0]
 800afcc:	f7ff ff8b 	bl	800aee6 <__hexdig_fun>
 800afd0:	2800      	cmp	r0, #0
 800afd2:	d1f8      	bne.n	800afc6 <__gethex+0xb6>
 800afd4:	1bad      	subs	r5, r5, r6
 800afd6:	00ad      	lsls	r5, r5, #2
 800afd8:	e004      	b.n	800afe4 <__gethex+0xd4>
 800afda:	2400      	movs	r4, #0
 800afdc:	4625      	mov	r5, r4
 800afde:	e7e0      	b.n	800afa2 <__gethex+0x92>
 800afe0:	2d00      	cmp	r5, #0
 800afe2:	d1f7      	bne.n	800afd4 <__gethex+0xc4>
 800afe4:	7833      	ldrb	r3, [r6, #0]
 800afe6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800afea:	2b50      	cmp	r3, #80	; 0x50
 800afec:	d13b      	bne.n	800b066 <__gethex+0x156>
 800afee:	7873      	ldrb	r3, [r6, #1]
 800aff0:	2b2b      	cmp	r3, #43	; 0x2b
 800aff2:	d02c      	beq.n	800b04e <__gethex+0x13e>
 800aff4:	2b2d      	cmp	r3, #45	; 0x2d
 800aff6:	d02e      	beq.n	800b056 <__gethex+0x146>
 800aff8:	1c71      	adds	r1, r6, #1
 800affa:	f04f 0900 	mov.w	r9, #0
 800affe:	7808      	ldrb	r0, [r1, #0]
 800b000:	f7ff ff71 	bl	800aee6 <__hexdig_fun>
 800b004:	1e43      	subs	r3, r0, #1
 800b006:	b2db      	uxtb	r3, r3
 800b008:	2b18      	cmp	r3, #24
 800b00a:	d82c      	bhi.n	800b066 <__gethex+0x156>
 800b00c:	f1a0 0210 	sub.w	r2, r0, #16
 800b010:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b014:	f7ff ff67 	bl	800aee6 <__hexdig_fun>
 800b018:	1e43      	subs	r3, r0, #1
 800b01a:	b2db      	uxtb	r3, r3
 800b01c:	2b18      	cmp	r3, #24
 800b01e:	d91d      	bls.n	800b05c <__gethex+0x14c>
 800b020:	f1b9 0f00 	cmp.w	r9, #0
 800b024:	d000      	beq.n	800b028 <__gethex+0x118>
 800b026:	4252      	negs	r2, r2
 800b028:	4415      	add	r5, r2
 800b02a:	f8cb 1000 	str.w	r1, [fp]
 800b02e:	b1e4      	cbz	r4, 800b06a <__gethex+0x15a>
 800b030:	9b00      	ldr	r3, [sp, #0]
 800b032:	2b00      	cmp	r3, #0
 800b034:	bf14      	ite	ne
 800b036:	2700      	movne	r7, #0
 800b038:	2706      	moveq	r7, #6
 800b03a:	4638      	mov	r0, r7
 800b03c:	b009      	add	sp, #36	; 0x24
 800b03e:	ecbd 8b02 	vpop	{d8}
 800b042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b046:	463e      	mov	r6, r7
 800b048:	4625      	mov	r5, r4
 800b04a:	2401      	movs	r4, #1
 800b04c:	e7ca      	b.n	800afe4 <__gethex+0xd4>
 800b04e:	f04f 0900 	mov.w	r9, #0
 800b052:	1cb1      	adds	r1, r6, #2
 800b054:	e7d3      	b.n	800affe <__gethex+0xee>
 800b056:	f04f 0901 	mov.w	r9, #1
 800b05a:	e7fa      	b.n	800b052 <__gethex+0x142>
 800b05c:	230a      	movs	r3, #10
 800b05e:	fb03 0202 	mla	r2, r3, r2, r0
 800b062:	3a10      	subs	r2, #16
 800b064:	e7d4      	b.n	800b010 <__gethex+0x100>
 800b066:	4631      	mov	r1, r6
 800b068:	e7df      	b.n	800b02a <__gethex+0x11a>
 800b06a:	1bf3      	subs	r3, r6, r7
 800b06c:	3b01      	subs	r3, #1
 800b06e:	4621      	mov	r1, r4
 800b070:	2b07      	cmp	r3, #7
 800b072:	dc0b      	bgt.n	800b08c <__gethex+0x17c>
 800b074:	ee18 0a10 	vmov	r0, s16
 800b078:	f000 fad8 	bl	800b62c <_Balloc>
 800b07c:	4604      	mov	r4, r0
 800b07e:	b940      	cbnz	r0, 800b092 <__gethex+0x182>
 800b080:	4b5d      	ldr	r3, [pc, #372]	; (800b1f8 <__gethex+0x2e8>)
 800b082:	4602      	mov	r2, r0
 800b084:	21de      	movs	r1, #222	; 0xde
 800b086:	485d      	ldr	r0, [pc, #372]	; (800b1fc <__gethex+0x2ec>)
 800b088:	f001 fbcc 	bl	800c824 <__assert_func>
 800b08c:	3101      	adds	r1, #1
 800b08e:	105b      	asrs	r3, r3, #1
 800b090:	e7ee      	b.n	800b070 <__gethex+0x160>
 800b092:	f100 0914 	add.w	r9, r0, #20
 800b096:	f04f 0b00 	mov.w	fp, #0
 800b09a:	f1ca 0301 	rsb	r3, sl, #1
 800b09e:	f8cd 9008 	str.w	r9, [sp, #8]
 800b0a2:	f8cd b000 	str.w	fp, [sp]
 800b0a6:	9306      	str	r3, [sp, #24]
 800b0a8:	42b7      	cmp	r7, r6
 800b0aa:	d340      	bcc.n	800b12e <__gethex+0x21e>
 800b0ac:	9802      	ldr	r0, [sp, #8]
 800b0ae:	9b00      	ldr	r3, [sp, #0]
 800b0b0:	f840 3b04 	str.w	r3, [r0], #4
 800b0b4:	eba0 0009 	sub.w	r0, r0, r9
 800b0b8:	1080      	asrs	r0, r0, #2
 800b0ba:	0146      	lsls	r6, r0, #5
 800b0bc:	6120      	str	r0, [r4, #16]
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f000 fba6 	bl	800b810 <__hi0bits>
 800b0c4:	1a30      	subs	r0, r6, r0
 800b0c6:	f8d8 6000 	ldr.w	r6, [r8]
 800b0ca:	42b0      	cmp	r0, r6
 800b0cc:	dd63      	ble.n	800b196 <__gethex+0x286>
 800b0ce:	1b87      	subs	r7, r0, r6
 800b0d0:	4639      	mov	r1, r7
 800b0d2:	4620      	mov	r0, r4
 800b0d4:	f000 ff4a 	bl	800bf6c <__any_on>
 800b0d8:	4682      	mov	sl, r0
 800b0da:	b1a8      	cbz	r0, 800b108 <__gethex+0x1f8>
 800b0dc:	1e7b      	subs	r3, r7, #1
 800b0de:	1159      	asrs	r1, r3, #5
 800b0e0:	f003 021f 	and.w	r2, r3, #31
 800b0e4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b0e8:	f04f 0a01 	mov.w	sl, #1
 800b0ec:	fa0a f202 	lsl.w	r2, sl, r2
 800b0f0:	420a      	tst	r2, r1
 800b0f2:	d009      	beq.n	800b108 <__gethex+0x1f8>
 800b0f4:	4553      	cmp	r3, sl
 800b0f6:	dd05      	ble.n	800b104 <__gethex+0x1f4>
 800b0f8:	1eb9      	subs	r1, r7, #2
 800b0fa:	4620      	mov	r0, r4
 800b0fc:	f000 ff36 	bl	800bf6c <__any_on>
 800b100:	2800      	cmp	r0, #0
 800b102:	d145      	bne.n	800b190 <__gethex+0x280>
 800b104:	f04f 0a02 	mov.w	sl, #2
 800b108:	4639      	mov	r1, r7
 800b10a:	4620      	mov	r0, r4
 800b10c:	f7ff fe99 	bl	800ae42 <rshift>
 800b110:	443d      	add	r5, r7
 800b112:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b116:	42ab      	cmp	r3, r5
 800b118:	da4c      	bge.n	800b1b4 <__gethex+0x2a4>
 800b11a:	ee18 0a10 	vmov	r0, s16
 800b11e:	4621      	mov	r1, r4
 800b120:	f000 fac4 	bl	800b6ac <_Bfree>
 800b124:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b126:	2300      	movs	r3, #0
 800b128:	6013      	str	r3, [r2, #0]
 800b12a:	27a3      	movs	r7, #163	; 0xa3
 800b12c:	e785      	b.n	800b03a <__gethex+0x12a>
 800b12e:	1e73      	subs	r3, r6, #1
 800b130:	9a05      	ldr	r2, [sp, #20]
 800b132:	9303      	str	r3, [sp, #12]
 800b134:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b138:	4293      	cmp	r3, r2
 800b13a:	d019      	beq.n	800b170 <__gethex+0x260>
 800b13c:	f1bb 0f20 	cmp.w	fp, #32
 800b140:	d107      	bne.n	800b152 <__gethex+0x242>
 800b142:	9b02      	ldr	r3, [sp, #8]
 800b144:	9a00      	ldr	r2, [sp, #0]
 800b146:	f843 2b04 	str.w	r2, [r3], #4
 800b14a:	9302      	str	r3, [sp, #8]
 800b14c:	2300      	movs	r3, #0
 800b14e:	9300      	str	r3, [sp, #0]
 800b150:	469b      	mov	fp, r3
 800b152:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b156:	f7ff fec6 	bl	800aee6 <__hexdig_fun>
 800b15a:	9b00      	ldr	r3, [sp, #0]
 800b15c:	f000 000f 	and.w	r0, r0, #15
 800b160:	fa00 f00b 	lsl.w	r0, r0, fp
 800b164:	4303      	orrs	r3, r0
 800b166:	9300      	str	r3, [sp, #0]
 800b168:	f10b 0b04 	add.w	fp, fp, #4
 800b16c:	9b03      	ldr	r3, [sp, #12]
 800b16e:	e00d      	b.n	800b18c <__gethex+0x27c>
 800b170:	9b03      	ldr	r3, [sp, #12]
 800b172:	9a06      	ldr	r2, [sp, #24]
 800b174:	4413      	add	r3, r2
 800b176:	42bb      	cmp	r3, r7
 800b178:	d3e0      	bcc.n	800b13c <__gethex+0x22c>
 800b17a:	4618      	mov	r0, r3
 800b17c:	9901      	ldr	r1, [sp, #4]
 800b17e:	9307      	str	r3, [sp, #28]
 800b180:	4652      	mov	r2, sl
 800b182:	f001 fb1c 	bl	800c7be <strncmp>
 800b186:	9b07      	ldr	r3, [sp, #28]
 800b188:	2800      	cmp	r0, #0
 800b18a:	d1d7      	bne.n	800b13c <__gethex+0x22c>
 800b18c:	461e      	mov	r6, r3
 800b18e:	e78b      	b.n	800b0a8 <__gethex+0x198>
 800b190:	f04f 0a03 	mov.w	sl, #3
 800b194:	e7b8      	b.n	800b108 <__gethex+0x1f8>
 800b196:	da0a      	bge.n	800b1ae <__gethex+0x29e>
 800b198:	1a37      	subs	r7, r6, r0
 800b19a:	4621      	mov	r1, r4
 800b19c:	ee18 0a10 	vmov	r0, s16
 800b1a0:	463a      	mov	r2, r7
 800b1a2:	f000 fc9f 	bl	800bae4 <__lshift>
 800b1a6:	1bed      	subs	r5, r5, r7
 800b1a8:	4604      	mov	r4, r0
 800b1aa:	f100 0914 	add.w	r9, r0, #20
 800b1ae:	f04f 0a00 	mov.w	sl, #0
 800b1b2:	e7ae      	b.n	800b112 <__gethex+0x202>
 800b1b4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b1b8:	42a8      	cmp	r0, r5
 800b1ba:	dd72      	ble.n	800b2a2 <__gethex+0x392>
 800b1bc:	1b45      	subs	r5, r0, r5
 800b1be:	42ae      	cmp	r6, r5
 800b1c0:	dc36      	bgt.n	800b230 <__gethex+0x320>
 800b1c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b1c6:	2b02      	cmp	r3, #2
 800b1c8:	d02a      	beq.n	800b220 <__gethex+0x310>
 800b1ca:	2b03      	cmp	r3, #3
 800b1cc:	d02c      	beq.n	800b228 <__gethex+0x318>
 800b1ce:	2b01      	cmp	r3, #1
 800b1d0:	d11c      	bne.n	800b20c <__gethex+0x2fc>
 800b1d2:	42ae      	cmp	r6, r5
 800b1d4:	d11a      	bne.n	800b20c <__gethex+0x2fc>
 800b1d6:	2e01      	cmp	r6, #1
 800b1d8:	d112      	bne.n	800b200 <__gethex+0x2f0>
 800b1da:	9a04      	ldr	r2, [sp, #16]
 800b1dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b1e0:	6013      	str	r3, [r2, #0]
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	6123      	str	r3, [r4, #16]
 800b1e6:	f8c9 3000 	str.w	r3, [r9]
 800b1ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b1ec:	2762      	movs	r7, #98	; 0x62
 800b1ee:	601c      	str	r4, [r3, #0]
 800b1f0:	e723      	b.n	800b03a <__gethex+0x12a>
 800b1f2:	bf00      	nop
 800b1f4:	0800cec4 	.word	0x0800cec4
 800b1f8:	0800cde8 	.word	0x0800cde8
 800b1fc:	0800ce5c 	.word	0x0800ce5c
 800b200:	1e71      	subs	r1, r6, #1
 800b202:	4620      	mov	r0, r4
 800b204:	f000 feb2 	bl	800bf6c <__any_on>
 800b208:	2800      	cmp	r0, #0
 800b20a:	d1e6      	bne.n	800b1da <__gethex+0x2ca>
 800b20c:	ee18 0a10 	vmov	r0, s16
 800b210:	4621      	mov	r1, r4
 800b212:	f000 fa4b 	bl	800b6ac <_Bfree>
 800b216:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b218:	2300      	movs	r3, #0
 800b21a:	6013      	str	r3, [r2, #0]
 800b21c:	2750      	movs	r7, #80	; 0x50
 800b21e:	e70c      	b.n	800b03a <__gethex+0x12a>
 800b220:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b222:	2b00      	cmp	r3, #0
 800b224:	d1f2      	bne.n	800b20c <__gethex+0x2fc>
 800b226:	e7d8      	b.n	800b1da <__gethex+0x2ca>
 800b228:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d1d5      	bne.n	800b1da <__gethex+0x2ca>
 800b22e:	e7ed      	b.n	800b20c <__gethex+0x2fc>
 800b230:	1e6f      	subs	r7, r5, #1
 800b232:	f1ba 0f00 	cmp.w	sl, #0
 800b236:	d131      	bne.n	800b29c <__gethex+0x38c>
 800b238:	b127      	cbz	r7, 800b244 <__gethex+0x334>
 800b23a:	4639      	mov	r1, r7
 800b23c:	4620      	mov	r0, r4
 800b23e:	f000 fe95 	bl	800bf6c <__any_on>
 800b242:	4682      	mov	sl, r0
 800b244:	117b      	asrs	r3, r7, #5
 800b246:	2101      	movs	r1, #1
 800b248:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b24c:	f007 071f 	and.w	r7, r7, #31
 800b250:	fa01 f707 	lsl.w	r7, r1, r7
 800b254:	421f      	tst	r7, r3
 800b256:	4629      	mov	r1, r5
 800b258:	4620      	mov	r0, r4
 800b25a:	bf18      	it	ne
 800b25c:	f04a 0a02 	orrne.w	sl, sl, #2
 800b260:	1b76      	subs	r6, r6, r5
 800b262:	f7ff fdee 	bl	800ae42 <rshift>
 800b266:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b26a:	2702      	movs	r7, #2
 800b26c:	f1ba 0f00 	cmp.w	sl, #0
 800b270:	d048      	beq.n	800b304 <__gethex+0x3f4>
 800b272:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b276:	2b02      	cmp	r3, #2
 800b278:	d015      	beq.n	800b2a6 <__gethex+0x396>
 800b27a:	2b03      	cmp	r3, #3
 800b27c:	d017      	beq.n	800b2ae <__gethex+0x39e>
 800b27e:	2b01      	cmp	r3, #1
 800b280:	d109      	bne.n	800b296 <__gethex+0x386>
 800b282:	f01a 0f02 	tst.w	sl, #2
 800b286:	d006      	beq.n	800b296 <__gethex+0x386>
 800b288:	f8d9 0000 	ldr.w	r0, [r9]
 800b28c:	ea4a 0a00 	orr.w	sl, sl, r0
 800b290:	f01a 0f01 	tst.w	sl, #1
 800b294:	d10e      	bne.n	800b2b4 <__gethex+0x3a4>
 800b296:	f047 0710 	orr.w	r7, r7, #16
 800b29a:	e033      	b.n	800b304 <__gethex+0x3f4>
 800b29c:	f04f 0a01 	mov.w	sl, #1
 800b2a0:	e7d0      	b.n	800b244 <__gethex+0x334>
 800b2a2:	2701      	movs	r7, #1
 800b2a4:	e7e2      	b.n	800b26c <__gethex+0x35c>
 800b2a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2a8:	f1c3 0301 	rsb	r3, r3, #1
 800b2ac:	9315      	str	r3, [sp, #84]	; 0x54
 800b2ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d0f0      	beq.n	800b296 <__gethex+0x386>
 800b2b4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b2b8:	f104 0314 	add.w	r3, r4, #20
 800b2bc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b2c0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b2c4:	f04f 0c00 	mov.w	ip, #0
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2ce:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b2d2:	d01c      	beq.n	800b30e <__gethex+0x3fe>
 800b2d4:	3201      	adds	r2, #1
 800b2d6:	6002      	str	r2, [r0, #0]
 800b2d8:	2f02      	cmp	r7, #2
 800b2da:	f104 0314 	add.w	r3, r4, #20
 800b2de:	d13f      	bne.n	800b360 <__gethex+0x450>
 800b2e0:	f8d8 2000 	ldr.w	r2, [r8]
 800b2e4:	3a01      	subs	r2, #1
 800b2e6:	42b2      	cmp	r2, r6
 800b2e8:	d10a      	bne.n	800b300 <__gethex+0x3f0>
 800b2ea:	1171      	asrs	r1, r6, #5
 800b2ec:	2201      	movs	r2, #1
 800b2ee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b2f2:	f006 061f 	and.w	r6, r6, #31
 800b2f6:	fa02 f606 	lsl.w	r6, r2, r6
 800b2fa:	421e      	tst	r6, r3
 800b2fc:	bf18      	it	ne
 800b2fe:	4617      	movne	r7, r2
 800b300:	f047 0720 	orr.w	r7, r7, #32
 800b304:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b306:	601c      	str	r4, [r3, #0]
 800b308:	9b04      	ldr	r3, [sp, #16]
 800b30a:	601d      	str	r5, [r3, #0]
 800b30c:	e695      	b.n	800b03a <__gethex+0x12a>
 800b30e:	4299      	cmp	r1, r3
 800b310:	f843 cc04 	str.w	ip, [r3, #-4]
 800b314:	d8d8      	bhi.n	800b2c8 <__gethex+0x3b8>
 800b316:	68a3      	ldr	r3, [r4, #8]
 800b318:	459b      	cmp	fp, r3
 800b31a:	db19      	blt.n	800b350 <__gethex+0x440>
 800b31c:	6861      	ldr	r1, [r4, #4]
 800b31e:	ee18 0a10 	vmov	r0, s16
 800b322:	3101      	adds	r1, #1
 800b324:	f000 f982 	bl	800b62c <_Balloc>
 800b328:	4681      	mov	r9, r0
 800b32a:	b918      	cbnz	r0, 800b334 <__gethex+0x424>
 800b32c:	4b1a      	ldr	r3, [pc, #104]	; (800b398 <__gethex+0x488>)
 800b32e:	4602      	mov	r2, r0
 800b330:	2184      	movs	r1, #132	; 0x84
 800b332:	e6a8      	b.n	800b086 <__gethex+0x176>
 800b334:	6922      	ldr	r2, [r4, #16]
 800b336:	3202      	adds	r2, #2
 800b338:	f104 010c 	add.w	r1, r4, #12
 800b33c:	0092      	lsls	r2, r2, #2
 800b33e:	300c      	adds	r0, #12
 800b340:	f7fc fe9e 	bl	8008080 <memcpy>
 800b344:	4621      	mov	r1, r4
 800b346:	ee18 0a10 	vmov	r0, s16
 800b34a:	f000 f9af 	bl	800b6ac <_Bfree>
 800b34e:	464c      	mov	r4, r9
 800b350:	6923      	ldr	r3, [r4, #16]
 800b352:	1c5a      	adds	r2, r3, #1
 800b354:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b358:	6122      	str	r2, [r4, #16]
 800b35a:	2201      	movs	r2, #1
 800b35c:	615a      	str	r2, [r3, #20]
 800b35e:	e7bb      	b.n	800b2d8 <__gethex+0x3c8>
 800b360:	6922      	ldr	r2, [r4, #16]
 800b362:	455a      	cmp	r2, fp
 800b364:	dd0b      	ble.n	800b37e <__gethex+0x46e>
 800b366:	2101      	movs	r1, #1
 800b368:	4620      	mov	r0, r4
 800b36a:	f7ff fd6a 	bl	800ae42 <rshift>
 800b36e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b372:	3501      	adds	r5, #1
 800b374:	42ab      	cmp	r3, r5
 800b376:	f6ff aed0 	blt.w	800b11a <__gethex+0x20a>
 800b37a:	2701      	movs	r7, #1
 800b37c:	e7c0      	b.n	800b300 <__gethex+0x3f0>
 800b37e:	f016 061f 	ands.w	r6, r6, #31
 800b382:	d0fa      	beq.n	800b37a <__gethex+0x46a>
 800b384:	4453      	add	r3, sl
 800b386:	f1c6 0620 	rsb	r6, r6, #32
 800b38a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b38e:	f000 fa3f 	bl	800b810 <__hi0bits>
 800b392:	42b0      	cmp	r0, r6
 800b394:	dbe7      	blt.n	800b366 <__gethex+0x456>
 800b396:	e7f0      	b.n	800b37a <__gethex+0x46a>
 800b398:	0800cde8 	.word	0x0800cde8

0800b39c <L_shift>:
 800b39c:	f1c2 0208 	rsb	r2, r2, #8
 800b3a0:	0092      	lsls	r2, r2, #2
 800b3a2:	b570      	push	{r4, r5, r6, lr}
 800b3a4:	f1c2 0620 	rsb	r6, r2, #32
 800b3a8:	6843      	ldr	r3, [r0, #4]
 800b3aa:	6804      	ldr	r4, [r0, #0]
 800b3ac:	fa03 f506 	lsl.w	r5, r3, r6
 800b3b0:	432c      	orrs	r4, r5
 800b3b2:	40d3      	lsrs	r3, r2
 800b3b4:	6004      	str	r4, [r0, #0]
 800b3b6:	f840 3f04 	str.w	r3, [r0, #4]!
 800b3ba:	4288      	cmp	r0, r1
 800b3bc:	d3f4      	bcc.n	800b3a8 <L_shift+0xc>
 800b3be:	bd70      	pop	{r4, r5, r6, pc}

0800b3c0 <__match>:
 800b3c0:	b530      	push	{r4, r5, lr}
 800b3c2:	6803      	ldr	r3, [r0, #0]
 800b3c4:	3301      	adds	r3, #1
 800b3c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3ca:	b914      	cbnz	r4, 800b3d2 <__match+0x12>
 800b3cc:	6003      	str	r3, [r0, #0]
 800b3ce:	2001      	movs	r0, #1
 800b3d0:	bd30      	pop	{r4, r5, pc}
 800b3d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3d6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b3da:	2d19      	cmp	r5, #25
 800b3dc:	bf98      	it	ls
 800b3de:	3220      	addls	r2, #32
 800b3e0:	42a2      	cmp	r2, r4
 800b3e2:	d0f0      	beq.n	800b3c6 <__match+0x6>
 800b3e4:	2000      	movs	r0, #0
 800b3e6:	e7f3      	b.n	800b3d0 <__match+0x10>

0800b3e8 <__hexnan>:
 800b3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ec:	680b      	ldr	r3, [r1, #0]
 800b3ee:	115e      	asrs	r6, r3, #5
 800b3f0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b3f4:	f013 031f 	ands.w	r3, r3, #31
 800b3f8:	b087      	sub	sp, #28
 800b3fa:	bf18      	it	ne
 800b3fc:	3604      	addne	r6, #4
 800b3fe:	2500      	movs	r5, #0
 800b400:	1f37      	subs	r7, r6, #4
 800b402:	4690      	mov	r8, r2
 800b404:	6802      	ldr	r2, [r0, #0]
 800b406:	9301      	str	r3, [sp, #4]
 800b408:	4682      	mov	sl, r0
 800b40a:	f846 5c04 	str.w	r5, [r6, #-4]
 800b40e:	46b9      	mov	r9, r7
 800b410:	463c      	mov	r4, r7
 800b412:	9502      	str	r5, [sp, #8]
 800b414:	46ab      	mov	fp, r5
 800b416:	7851      	ldrb	r1, [r2, #1]
 800b418:	1c53      	adds	r3, r2, #1
 800b41a:	9303      	str	r3, [sp, #12]
 800b41c:	b341      	cbz	r1, 800b470 <__hexnan+0x88>
 800b41e:	4608      	mov	r0, r1
 800b420:	9205      	str	r2, [sp, #20]
 800b422:	9104      	str	r1, [sp, #16]
 800b424:	f7ff fd5f 	bl	800aee6 <__hexdig_fun>
 800b428:	2800      	cmp	r0, #0
 800b42a:	d14f      	bne.n	800b4cc <__hexnan+0xe4>
 800b42c:	9904      	ldr	r1, [sp, #16]
 800b42e:	9a05      	ldr	r2, [sp, #20]
 800b430:	2920      	cmp	r1, #32
 800b432:	d818      	bhi.n	800b466 <__hexnan+0x7e>
 800b434:	9b02      	ldr	r3, [sp, #8]
 800b436:	459b      	cmp	fp, r3
 800b438:	dd13      	ble.n	800b462 <__hexnan+0x7a>
 800b43a:	454c      	cmp	r4, r9
 800b43c:	d206      	bcs.n	800b44c <__hexnan+0x64>
 800b43e:	2d07      	cmp	r5, #7
 800b440:	dc04      	bgt.n	800b44c <__hexnan+0x64>
 800b442:	462a      	mov	r2, r5
 800b444:	4649      	mov	r1, r9
 800b446:	4620      	mov	r0, r4
 800b448:	f7ff ffa8 	bl	800b39c <L_shift>
 800b44c:	4544      	cmp	r4, r8
 800b44e:	d950      	bls.n	800b4f2 <__hexnan+0x10a>
 800b450:	2300      	movs	r3, #0
 800b452:	f1a4 0904 	sub.w	r9, r4, #4
 800b456:	f844 3c04 	str.w	r3, [r4, #-4]
 800b45a:	f8cd b008 	str.w	fp, [sp, #8]
 800b45e:	464c      	mov	r4, r9
 800b460:	461d      	mov	r5, r3
 800b462:	9a03      	ldr	r2, [sp, #12]
 800b464:	e7d7      	b.n	800b416 <__hexnan+0x2e>
 800b466:	2929      	cmp	r1, #41	; 0x29
 800b468:	d156      	bne.n	800b518 <__hexnan+0x130>
 800b46a:	3202      	adds	r2, #2
 800b46c:	f8ca 2000 	str.w	r2, [sl]
 800b470:	f1bb 0f00 	cmp.w	fp, #0
 800b474:	d050      	beq.n	800b518 <__hexnan+0x130>
 800b476:	454c      	cmp	r4, r9
 800b478:	d206      	bcs.n	800b488 <__hexnan+0xa0>
 800b47a:	2d07      	cmp	r5, #7
 800b47c:	dc04      	bgt.n	800b488 <__hexnan+0xa0>
 800b47e:	462a      	mov	r2, r5
 800b480:	4649      	mov	r1, r9
 800b482:	4620      	mov	r0, r4
 800b484:	f7ff ff8a 	bl	800b39c <L_shift>
 800b488:	4544      	cmp	r4, r8
 800b48a:	d934      	bls.n	800b4f6 <__hexnan+0x10e>
 800b48c:	f1a8 0204 	sub.w	r2, r8, #4
 800b490:	4623      	mov	r3, r4
 800b492:	f853 1b04 	ldr.w	r1, [r3], #4
 800b496:	f842 1f04 	str.w	r1, [r2, #4]!
 800b49a:	429f      	cmp	r7, r3
 800b49c:	d2f9      	bcs.n	800b492 <__hexnan+0xaa>
 800b49e:	1b3b      	subs	r3, r7, r4
 800b4a0:	f023 0303 	bic.w	r3, r3, #3
 800b4a4:	3304      	adds	r3, #4
 800b4a6:	3401      	adds	r4, #1
 800b4a8:	3e03      	subs	r6, #3
 800b4aa:	42b4      	cmp	r4, r6
 800b4ac:	bf88      	it	hi
 800b4ae:	2304      	movhi	r3, #4
 800b4b0:	4443      	add	r3, r8
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	f843 2b04 	str.w	r2, [r3], #4
 800b4b8:	429f      	cmp	r7, r3
 800b4ba:	d2fb      	bcs.n	800b4b4 <__hexnan+0xcc>
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	b91b      	cbnz	r3, 800b4c8 <__hexnan+0xe0>
 800b4c0:	4547      	cmp	r7, r8
 800b4c2:	d127      	bne.n	800b514 <__hexnan+0x12c>
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	603b      	str	r3, [r7, #0]
 800b4c8:	2005      	movs	r0, #5
 800b4ca:	e026      	b.n	800b51a <__hexnan+0x132>
 800b4cc:	3501      	adds	r5, #1
 800b4ce:	2d08      	cmp	r5, #8
 800b4d0:	f10b 0b01 	add.w	fp, fp, #1
 800b4d4:	dd06      	ble.n	800b4e4 <__hexnan+0xfc>
 800b4d6:	4544      	cmp	r4, r8
 800b4d8:	d9c3      	bls.n	800b462 <__hexnan+0x7a>
 800b4da:	2300      	movs	r3, #0
 800b4dc:	f844 3c04 	str.w	r3, [r4, #-4]
 800b4e0:	2501      	movs	r5, #1
 800b4e2:	3c04      	subs	r4, #4
 800b4e4:	6822      	ldr	r2, [r4, #0]
 800b4e6:	f000 000f 	and.w	r0, r0, #15
 800b4ea:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b4ee:	6022      	str	r2, [r4, #0]
 800b4f0:	e7b7      	b.n	800b462 <__hexnan+0x7a>
 800b4f2:	2508      	movs	r5, #8
 800b4f4:	e7b5      	b.n	800b462 <__hexnan+0x7a>
 800b4f6:	9b01      	ldr	r3, [sp, #4]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d0df      	beq.n	800b4bc <__hexnan+0xd4>
 800b4fc:	f04f 32ff 	mov.w	r2, #4294967295
 800b500:	f1c3 0320 	rsb	r3, r3, #32
 800b504:	fa22 f303 	lsr.w	r3, r2, r3
 800b508:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b50c:	401a      	ands	r2, r3
 800b50e:	f846 2c04 	str.w	r2, [r6, #-4]
 800b512:	e7d3      	b.n	800b4bc <__hexnan+0xd4>
 800b514:	3f04      	subs	r7, #4
 800b516:	e7d1      	b.n	800b4bc <__hexnan+0xd4>
 800b518:	2004      	movs	r0, #4
 800b51a:	b007      	add	sp, #28
 800b51c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b520 <_localeconv_r>:
 800b520:	4800      	ldr	r0, [pc, #0]	; (800b524 <_localeconv_r+0x4>)
 800b522:	4770      	bx	lr
 800b524:	2000016c 	.word	0x2000016c

0800b528 <__retarget_lock_init_recursive>:
 800b528:	4770      	bx	lr

0800b52a <__retarget_lock_acquire_recursive>:
 800b52a:	4770      	bx	lr

0800b52c <__retarget_lock_release_recursive>:
 800b52c:	4770      	bx	lr

0800b52e <__swhatbuf_r>:
 800b52e:	b570      	push	{r4, r5, r6, lr}
 800b530:	460e      	mov	r6, r1
 800b532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b536:	2900      	cmp	r1, #0
 800b538:	b096      	sub	sp, #88	; 0x58
 800b53a:	4614      	mov	r4, r2
 800b53c:	461d      	mov	r5, r3
 800b53e:	da08      	bge.n	800b552 <__swhatbuf_r+0x24>
 800b540:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b544:	2200      	movs	r2, #0
 800b546:	602a      	str	r2, [r5, #0]
 800b548:	061a      	lsls	r2, r3, #24
 800b54a:	d410      	bmi.n	800b56e <__swhatbuf_r+0x40>
 800b54c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b550:	e00e      	b.n	800b570 <__swhatbuf_r+0x42>
 800b552:	466a      	mov	r2, sp
 800b554:	f001 f9a6 	bl	800c8a4 <_fstat_r>
 800b558:	2800      	cmp	r0, #0
 800b55a:	dbf1      	blt.n	800b540 <__swhatbuf_r+0x12>
 800b55c:	9a01      	ldr	r2, [sp, #4]
 800b55e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b562:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b566:	425a      	negs	r2, r3
 800b568:	415a      	adcs	r2, r3
 800b56a:	602a      	str	r2, [r5, #0]
 800b56c:	e7ee      	b.n	800b54c <__swhatbuf_r+0x1e>
 800b56e:	2340      	movs	r3, #64	; 0x40
 800b570:	2000      	movs	r0, #0
 800b572:	6023      	str	r3, [r4, #0]
 800b574:	b016      	add	sp, #88	; 0x58
 800b576:	bd70      	pop	{r4, r5, r6, pc}

0800b578 <__smakebuf_r>:
 800b578:	898b      	ldrh	r3, [r1, #12]
 800b57a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b57c:	079d      	lsls	r5, r3, #30
 800b57e:	4606      	mov	r6, r0
 800b580:	460c      	mov	r4, r1
 800b582:	d507      	bpl.n	800b594 <__smakebuf_r+0x1c>
 800b584:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b588:	6023      	str	r3, [r4, #0]
 800b58a:	6123      	str	r3, [r4, #16]
 800b58c:	2301      	movs	r3, #1
 800b58e:	6163      	str	r3, [r4, #20]
 800b590:	b002      	add	sp, #8
 800b592:	bd70      	pop	{r4, r5, r6, pc}
 800b594:	ab01      	add	r3, sp, #4
 800b596:	466a      	mov	r2, sp
 800b598:	f7ff ffc9 	bl	800b52e <__swhatbuf_r>
 800b59c:	9900      	ldr	r1, [sp, #0]
 800b59e:	4605      	mov	r5, r0
 800b5a0:	4630      	mov	r0, r6
 800b5a2:	f000 fd87 	bl	800c0b4 <_malloc_r>
 800b5a6:	b948      	cbnz	r0, 800b5bc <__smakebuf_r+0x44>
 800b5a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5ac:	059a      	lsls	r2, r3, #22
 800b5ae:	d4ef      	bmi.n	800b590 <__smakebuf_r+0x18>
 800b5b0:	f023 0303 	bic.w	r3, r3, #3
 800b5b4:	f043 0302 	orr.w	r3, r3, #2
 800b5b8:	81a3      	strh	r3, [r4, #12]
 800b5ba:	e7e3      	b.n	800b584 <__smakebuf_r+0xc>
 800b5bc:	4b0d      	ldr	r3, [pc, #52]	; (800b5f4 <__smakebuf_r+0x7c>)
 800b5be:	62b3      	str	r3, [r6, #40]	; 0x28
 800b5c0:	89a3      	ldrh	r3, [r4, #12]
 800b5c2:	6020      	str	r0, [r4, #0]
 800b5c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5c8:	81a3      	strh	r3, [r4, #12]
 800b5ca:	9b00      	ldr	r3, [sp, #0]
 800b5cc:	6163      	str	r3, [r4, #20]
 800b5ce:	9b01      	ldr	r3, [sp, #4]
 800b5d0:	6120      	str	r0, [r4, #16]
 800b5d2:	b15b      	cbz	r3, 800b5ec <__smakebuf_r+0x74>
 800b5d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5d8:	4630      	mov	r0, r6
 800b5da:	f001 f975 	bl	800c8c8 <_isatty_r>
 800b5de:	b128      	cbz	r0, 800b5ec <__smakebuf_r+0x74>
 800b5e0:	89a3      	ldrh	r3, [r4, #12]
 800b5e2:	f023 0303 	bic.w	r3, r3, #3
 800b5e6:	f043 0301 	orr.w	r3, r3, #1
 800b5ea:	81a3      	strh	r3, [r4, #12]
 800b5ec:	89a0      	ldrh	r0, [r4, #12]
 800b5ee:	4305      	orrs	r5, r0
 800b5f0:	81a5      	strh	r5, [r4, #12]
 800b5f2:	e7cd      	b.n	800b590 <__smakebuf_r+0x18>
 800b5f4:	0800aca1 	.word	0x0800aca1

0800b5f8 <malloc>:
 800b5f8:	4b02      	ldr	r3, [pc, #8]	; (800b604 <malloc+0xc>)
 800b5fa:	4601      	mov	r1, r0
 800b5fc:	6818      	ldr	r0, [r3, #0]
 800b5fe:	f000 bd59 	b.w	800c0b4 <_malloc_r>
 800b602:	bf00      	nop
 800b604:	20000014 	.word	0x20000014

0800b608 <__ascii_mbtowc>:
 800b608:	b082      	sub	sp, #8
 800b60a:	b901      	cbnz	r1, 800b60e <__ascii_mbtowc+0x6>
 800b60c:	a901      	add	r1, sp, #4
 800b60e:	b142      	cbz	r2, 800b622 <__ascii_mbtowc+0x1a>
 800b610:	b14b      	cbz	r3, 800b626 <__ascii_mbtowc+0x1e>
 800b612:	7813      	ldrb	r3, [r2, #0]
 800b614:	600b      	str	r3, [r1, #0]
 800b616:	7812      	ldrb	r2, [r2, #0]
 800b618:	1e10      	subs	r0, r2, #0
 800b61a:	bf18      	it	ne
 800b61c:	2001      	movne	r0, #1
 800b61e:	b002      	add	sp, #8
 800b620:	4770      	bx	lr
 800b622:	4610      	mov	r0, r2
 800b624:	e7fb      	b.n	800b61e <__ascii_mbtowc+0x16>
 800b626:	f06f 0001 	mvn.w	r0, #1
 800b62a:	e7f8      	b.n	800b61e <__ascii_mbtowc+0x16>

0800b62c <_Balloc>:
 800b62c:	b570      	push	{r4, r5, r6, lr}
 800b62e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b630:	4604      	mov	r4, r0
 800b632:	460d      	mov	r5, r1
 800b634:	b976      	cbnz	r6, 800b654 <_Balloc+0x28>
 800b636:	2010      	movs	r0, #16
 800b638:	f7ff ffde 	bl	800b5f8 <malloc>
 800b63c:	4602      	mov	r2, r0
 800b63e:	6260      	str	r0, [r4, #36]	; 0x24
 800b640:	b920      	cbnz	r0, 800b64c <_Balloc+0x20>
 800b642:	4b18      	ldr	r3, [pc, #96]	; (800b6a4 <_Balloc+0x78>)
 800b644:	4818      	ldr	r0, [pc, #96]	; (800b6a8 <_Balloc+0x7c>)
 800b646:	2166      	movs	r1, #102	; 0x66
 800b648:	f001 f8ec 	bl	800c824 <__assert_func>
 800b64c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b650:	6006      	str	r6, [r0, #0]
 800b652:	60c6      	str	r6, [r0, #12]
 800b654:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b656:	68f3      	ldr	r3, [r6, #12]
 800b658:	b183      	cbz	r3, 800b67c <_Balloc+0x50>
 800b65a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b65c:	68db      	ldr	r3, [r3, #12]
 800b65e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b662:	b9b8      	cbnz	r0, 800b694 <_Balloc+0x68>
 800b664:	2101      	movs	r1, #1
 800b666:	fa01 f605 	lsl.w	r6, r1, r5
 800b66a:	1d72      	adds	r2, r6, #5
 800b66c:	0092      	lsls	r2, r2, #2
 800b66e:	4620      	mov	r0, r4
 800b670:	f000 fc9d 	bl	800bfae <_calloc_r>
 800b674:	b160      	cbz	r0, 800b690 <_Balloc+0x64>
 800b676:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b67a:	e00e      	b.n	800b69a <_Balloc+0x6e>
 800b67c:	2221      	movs	r2, #33	; 0x21
 800b67e:	2104      	movs	r1, #4
 800b680:	4620      	mov	r0, r4
 800b682:	f000 fc94 	bl	800bfae <_calloc_r>
 800b686:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b688:	60f0      	str	r0, [r6, #12]
 800b68a:	68db      	ldr	r3, [r3, #12]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d1e4      	bne.n	800b65a <_Balloc+0x2e>
 800b690:	2000      	movs	r0, #0
 800b692:	bd70      	pop	{r4, r5, r6, pc}
 800b694:	6802      	ldr	r2, [r0, #0]
 800b696:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b69a:	2300      	movs	r3, #0
 800b69c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b6a0:	e7f7      	b.n	800b692 <_Balloc+0x66>
 800b6a2:	bf00      	nop
 800b6a4:	0800cd76 	.word	0x0800cd76
 800b6a8:	0800ced8 	.word	0x0800ced8

0800b6ac <_Bfree>:
 800b6ac:	b570      	push	{r4, r5, r6, lr}
 800b6ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b6b0:	4605      	mov	r5, r0
 800b6b2:	460c      	mov	r4, r1
 800b6b4:	b976      	cbnz	r6, 800b6d4 <_Bfree+0x28>
 800b6b6:	2010      	movs	r0, #16
 800b6b8:	f7ff ff9e 	bl	800b5f8 <malloc>
 800b6bc:	4602      	mov	r2, r0
 800b6be:	6268      	str	r0, [r5, #36]	; 0x24
 800b6c0:	b920      	cbnz	r0, 800b6cc <_Bfree+0x20>
 800b6c2:	4b09      	ldr	r3, [pc, #36]	; (800b6e8 <_Bfree+0x3c>)
 800b6c4:	4809      	ldr	r0, [pc, #36]	; (800b6ec <_Bfree+0x40>)
 800b6c6:	218a      	movs	r1, #138	; 0x8a
 800b6c8:	f001 f8ac 	bl	800c824 <__assert_func>
 800b6cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b6d0:	6006      	str	r6, [r0, #0]
 800b6d2:	60c6      	str	r6, [r0, #12]
 800b6d4:	b13c      	cbz	r4, 800b6e6 <_Bfree+0x3a>
 800b6d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b6d8:	6862      	ldr	r2, [r4, #4]
 800b6da:	68db      	ldr	r3, [r3, #12]
 800b6dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b6e0:	6021      	str	r1, [r4, #0]
 800b6e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b6e6:	bd70      	pop	{r4, r5, r6, pc}
 800b6e8:	0800cd76 	.word	0x0800cd76
 800b6ec:	0800ced8 	.word	0x0800ced8

0800b6f0 <__multadd>:
 800b6f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6f4:	690d      	ldr	r5, [r1, #16]
 800b6f6:	4607      	mov	r7, r0
 800b6f8:	460c      	mov	r4, r1
 800b6fa:	461e      	mov	r6, r3
 800b6fc:	f101 0c14 	add.w	ip, r1, #20
 800b700:	2000      	movs	r0, #0
 800b702:	f8dc 3000 	ldr.w	r3, [ip]
 800b706:	b299      	uxth	r1, r3
 800b708:	fb02 6101 	mla	r1, r2, r1, r6
 800b70c:	0c1e      	lsrs	r6, r3, #16
 800b70e:	0c0b      	lsrs	r3, r1, #16
 800b710:	fb02 3306 	mla	r3, r2, r6, r3
 800b714:	b289      	uxth	r1, r1
 800b716:	3001      	adds	r0, #1
 800b718:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b71c:	4285      	cmp	r5, r0
 800b71e:	f84c 1b04 	str.w	r1, [ip], #4
 800b722:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b726:	dcec      	bgt.n	800b702 <__multadd+0x12>
 800b728:	b30e      	cbz	r6, 800b76e <__multadd+0x7e>
 800b72a:	68a3      	ldr	r3, [r4, #8]
 800b72c:	42ab      	cmp	r3, r5
 800b72e:	dc19      	bgt.n	800b764 <__multadd+0x74>
 800b730:	6861      	ldr	r1, [r4, #4]
 800b732:	4638      	mov	r0, r7
 800b734:	3101      	adds	r1, #1
 800b736:	f7ff ff79 	bl	800b62c <_Balloc>
 800b73a:	4680      	mov	r8, r0
 800b73c:	b928      	cbnz	r0, 800b74a <__multadd+0x5a>
 800b73e:	4602      	mov	r2, r0
 800b740:	4b0c      	ldr	r3, [pc, #48]	; (800b774 <__multadd+0x84>)
 800b742:	480d      	ldr	r0, [pc, #52]	; (800b778 <__multadd+0x88>)
 800b744:	21b5      	movs	r1, #181	; 0xb5
 800b746:	f001 f86d 	bl	800c824 <__assert_func>
 800b74a:	6922      	ldr	r2, [r4, #16]
 800b74c:	3202      	adds	r2, #2
 800b74e:	f104 010c 	add.w	r1, r4, #12
 800b752:	0092      	lsls	r2, r2, #2
 800b754:	300c      	adds	r0, #12
 800b756:	f7fc fc93 	bl	8008080 <memcpy>
 800b75a:	4621      	mov	r1, r4
 800b75c:	4638      	mov	r0, r7
 800b75e:	f7ff ffa5 	bl	800b6ac <_Bfree>
 800b762:	4644      	mov	r4, r8
 800b764:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b768:	3501      	adds	r5, #1
 800b76a:	615e      	str	r6, [r3, #20]
 800b76c:	6125      	str	r5, [r4, #16]
 800b76e:	4620      	mov	r0, r4
 800b770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b774:	0800cde8 	.word	0x0800cde8
 800b778:	0800ced8 	.word	0x0800ced8

0800b77c <__s2b>:
 800b77c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b780:	460c      	mov	r4, r1
 800b782:	4615      	mov	r5, r2
 800b784:	461f      	mov	r7, r3
 800b786:	2209      	movs	r2, #9
 800b788:	3308      	adds	r3, #8
 800b78a:	4606      	mov	r6, r0
 800b78c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b790:	2100      	movs	r1, #0
 800b792:	2201      	movs	r2, #1
 800b794:	429a      	cmp	r2, r3
 800b796:	db09      	blt.n	800b7ac <__s2b+0x30>
 800b798:	4630      	mov	r0, r6
 800b79a:	f7ff ff47 	bl	800b62c <_Balloc>
 800b79e:	b940      	cbnz	r0, 800b7b2 <__s2b+0x36>
 800b7a0:	4602      	mov	r2, r0
 800b7a2:	4b19      	ldr	r3, [pc, #100]	; (800b808 <__s2b+0x8c>)
 800b7a4:	4819      	ldr	r0, [pc, #100]	; (800b80c <__s2b+0x90>)
 800b7a6:	21ce      	movs	r1, #206	; 0xce
 800b7a8:	f001 f83c 	bl	800c824 <__assert_func>
 800b7ac:	0052      	lsls	r2, r2, #1
 800b7ae:	3101      	adds	r1, #1
 800b7b0:	e7f0      	b.n	800b794 <__s2b+0x18>
 800b7b2:	9b08      	ldr	r3, [sp, #32]
 800b7b4:	6143      	str	r3, [r0, #20]
 800b7b6:	2d09      	cmp	r5, #9
 800b7b8:	f04f 0301 	mov.w	r3, #1
 800b7bc:	6103      	str	r3, [r0, #16]
 800b7be:	dd16      	ble.n	800b7ee <__s2b+0x72>
 800b7c0:	f104 0909 	add.w	r9, r4, #9
 800b7c4:	46c8      	mov	r8, r9
 800b7c6:	442c      	add	r4, r5
 800b7c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b7cc:	4601      	mov	r1, r0
 800b7ce:	3b30      	subs	r3, #48	; 0x30
 800b7d0:	220a      	movs	r2, #10
 800b7d2:	4630      	mov	r0, r6
 800b7d4:	f7ff ff8c 	bl	800b6f0 <__multadd>
 800b7d8:	45a0      	cmp	r8, r4
 800b7da:	d1f5      	bne.n	800b7c8 <__s2b+0x4c>
 800b7dc:	f1a5 0408 	sub.w	r4, r5, #8
 800b7e0:	444c      	add	r4, r9
 800b7e2:	1b2d      	subs	r5, r5, r4
 800b7e4:	1963      	adds	r3, r4, r5
 800b7e6:	42bb      	cmp	r3, r7
 800b7e8:	db04      	blt.n	800b7f4 <__s2b+0x78>
 800b7ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7ee:	340a      	adds	r4, #10
 800b7f0:	2509      	movs	r5, #9
 800b7f2:	e7f6      	b.n	800b7e2 <__s2b+0x66>
 800b7f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b7f8:	4601      	mov	r1, r0
 800b7fa:	3b30      	subs	r3, #48	; 0x30
 800b7fc:	220a      	movs	r2, #10
 800b7fe:	4630      	mov	r0, r6
 800b800:	f7ff ff76 	bl	800b6f0 <__multadd>
 800b804:	e7ee      	b.n	800b7e4 <__s2b+0x68>
 800b806:	bf00      	nop
 800b808:	0800cde8 	.word	0x0800cde8
 800b80c:	0800ced8 	.word	0x0800ced8

0800b810 <__hi0bits>:
 800b810:	0c03      	lsrs	r3, r0, #16
 800b812:	041b      	lsls	r3, r3, #16
 800b814:	b9d3      	cbnz	r3, 800b84c <__hi0bits+0x3c>
 800b816:	0400      	lsls	r0, r0, #16
 800b818:	2310      	movs	r3, #16
 800b81a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b81e:	bf04      	itt	eq
 800b820:	0200      	lsleq	r0, r0, #8
 800b822:	3308      	addeq	r3, #8
 800b824:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b828:	bf04      	itt	eq
 800b82a:	0100      	lsleq	r0, r0, #4
 800b82c:	3304      	addeq	r3, #4
 800b82e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b832:	bf04      	itt	eq
 800b834:	0080      	lsleq	r0, r0, #2
 800b836:	3302      	addeq	r3, #2
 800b838:	2800      	cmp	r0, #0
 800b83a:	db05      	blt.n	800b848 <__hi0bits+0x38>
 800b83c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b840:	f103 0301 	add.w	r3, r3, #1
 800b844:	bf08      	it	eq
 800b846:	2320      	moveq	r3, #32
 800b848:	4618      	mov	r0, r3
 800b84a:	4770      	bx	lr
 800b84c:	2300      	movs	r3, #0
 800b84e:	e7e4      	b.n	800b81a <__hi0bits+0xa>

0800b850 <__lo0bits>:
 800b850:	6803      	ldr	r3, [r0, #0]
 800b852:	f013 0207 	ands.w	r2, r3, #7
 800b856:	4601      	mov	r1, r0
 800b858:	d00b      	beq.n	800b872 <__lo0bits+0x22>
 800b85a:	07da      	lsls	r2, r3, #31
 800b85c:	d423      	bmi.n	800b8a6 <__lo0bits+0x56>
 800b85e:	0798      	lsls	r0, r3, #30
 800b860:	bf49      	itett	mi
 800b862:	085b      	lsrmi	r3, r3, #1
 800b864:	089b      	lsrpl	r3, r3, #2
 800b866:	2001      	movmi	r0, #1
 800b868:	600b      	strmi	r3, [r1, #0]
 800b86a:	bf5c      	itt	pl
 800b86c:	600b      	strpl	r3, [r1, #0]
 800b86e:	2002      	movpl	r0, #2
 800b870:	4770      	bx	lr
 800b872:	b298      	uxth	r0, r3
 800b874:	b9a8      	cbnz	r0, 800b8a2 <__lo0bits+0x52>
 800b876:	0c1b      	lsrs	r3, r3, #16
 800b878:	2010      	movs	r0, #16
 800b87a:	b2da      	uxtb	r2, r3
 800b87c:	b90a      	cbnz	r2, 800b882 <__lo0bits+0x32>
 800b87e:	3008      	adds	r0, #8
 800b880:	0a1b      	lsrs	r3, r3, #8
 800b882:	071a      	lsls	r2, r3, #28
 800b884:	bf04      	itt	eq
 800b886:	091b      	lsreq	r3, r3, #4
 800b888:	3004      	addeq	r0, #4
 800b88a:	079a      	lsls	r2, r3, #30
 800b88c:	bf04      	itt	eq
 800b88e:	089b      	lsreq	r3, r3, #2
 800b890:	3002      	addeq	r0, #2
 800b892:	07da      	lsls	r2, r3, #31
 800b894:	d403      	bmi.n	800b89e <__lo0bits+0x4e>
 800b896:	085b      	lsrs	r3, r3, #1
 800b898:	f100 0001 	add.w	r0, r0, #1
 800b89c:	d005      	beq.n	800b8aa <__lo0bits+0x5a>
 800b89e:	600b      	str	r3, [r1, #0]
 800b8a0:	4770      	bx	lr
 800b8a2:	4610      	mov	r0, r2
 800b8a4:	e7e9      	b.n	800b87a <__lo0bits+0x2a>
 800b8a6:	2000      	movs	r0, #0
 800b8a8:	4770      	bx	lr
 800b8aa:	2020      	movs	r0, #32
 800b8ac:	4770      	bx	lr
	...

0800b8b0 <__i2b>:
 800b8b0:	b510      	push	{r4, lr}
 800b8b2:	460c      	mov	r4, r1
 800b8b4:	2101      	movs	r1, #1
 800b8b6:	f7ff feb9 	bl	800b62c <_Balloc>
 800b8ba:	4602      	mov	r2, r0
 800b8bc:	b928      	cbnz	r0, 800b8ca <__i2b+0x1a>
 800b8be:	4b05      	ldr	r3, [pc, #20]	; (800b8d4 <__i2b+0x24>)
 800b8c0:	4805      	ldr	r0, [pc, #20]	; (800b8d8 <__i2b+0x28>)
 800b8c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b8c6:	f000 ffad 	bl	800c824 <__assert_func>
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	6144      	str	r4, [r0, #20]
 800b8ce:	6103      	str	r3, [r0, #16]
 800b8d0:	bd10      	pop	{r4, pc}
 800b8d2:	bf00      	nop
 800b8d4:	0800cde8 	.word	0x0800cde8
 800b8d8:	0800ced8 	.word	0x0800ced8

0800b8dc <__multiply>:
 800b8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8e0:	4691      	mov	r9, r2
 800b8e2:	690a      	ldr	r2, [r1, #16]
 800b8e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b8e8:	429a      	cmp	r2, r3
 800b8ea:	bfb8      	it	lt
 800b8ec:	460b      	movlt	r3, r1
 800b8ee:	460c      	mov	r4, r1
 800b8f0:	bfbc      	itt	lt
 800b8f2:	464c      	movlt	r4, r9
 800b8f4:	4699      	movlt	r9, r3
 800b8f6:	6927      	ldr	r7, [r4, #16]
 800b8f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b8fc:	68a3      	ldr	r3, [r4, #8]
 800b8fe:	6861      	ldr	r1, [r4, #4]
 800b900:	eb07 060a 	add.w	r6, r7, sl
 800b904:	42b3      	cmp	r3, r6
 800b906:	b085      	sub	sp, #20
 800b908:	bfb8      	it	lt
 800b90a:	3101      	addlt	r1, #1
 800b90c:	f7ff fe8e 	bl	800b62c <_Balloc>
 800b910:	b930      	cbnz	r0, 800b920 <__multiply+0x44>
 800b912:	4602      	mov	r2, r0
 800b914:	4b44      	ldr	r3, [pc, #272]	; (800ba28 <__multiply+0x14c>)
 800b916:	4845      	ldr	r0, [pc, #276]	; (800ba2c <__multiply+0x150>)
 800b918:	f240 115d 	movw	r1, #349	; 0x15d
 800b91c:	f000 ff82 	bl	800c824 <__assert_func>
 800b920:	f100 0514 	add.w	r5, r0, #20
 800b924:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b928:	462b      	mov	r3, r5
 800b92a:	2200      	movs	r2, #0
 800b92c:	4543      	cmp	r3, r8
 800b92e:	d321      	bcc.n	800b974 <__multiply+0x98>
 800b930:	f104 0314 	add.w	r3, r4, #20
 800b934:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b938:	f109 0314 	add.w	r3, r9, #20
 800b93c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b940:	9202      	str	r2, [sp, #8]
 800b942:	1b3a      	subs	r2, r7, r4
 800b944:	3a15      	subs	r2, #21
 800b946:	f022 0203 	bic.w	r2, r2, #3
 800b94a:	3204      	adds	r2, #4
 800b94c:	f104 0115 	add.w	r1, r4, #21
 800b950:	428f      	cmp	r7, r1
 800b952:	bf38      	it	cc
 800b954:	2204      	movcc	r2, #4
 800b956:	9201      	str	r2, [sp, #4]
 800b958:	9a02      	ldr	r2, [sp, #8]
 800b95a:	9303      	str	r3, [sp, #12]
 800b95c:	429a      	cmp	r2, r3
 800b95e:	d80c      	bhi.n	800b97a <__multiply+0x9e>
 800b960:	2e00      	cmp	r6, #0
 800b962:	dd03      	ble.n	800b96c <__multiply+0x90>
 800b964:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d05a      	beq.n	800ba22 <__multiply+0x146>
 800b96c:	6106      	str	r6, [r0, #16]
 800b96e:	b005      	add	sp, #20
 800b970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b974:	f843 2b04 	str.w	r2, [r3], #4
 800b978:	e7d8      	b.n	800b92c <__multiply+0x50>
 800b97a:	f8b3 a000 	ldrh.w	sl, [r3]
 800b97e:	f1ba 0f00 	cmp.w	sl, #0
 800b982:	d024      	beq.n	800b9ce <__multiply+0xf2>
 800b984:	f104 0e14 	add.w	lr, r4, #20
 800b988:	46a9      	mov	r9, r5
 800b98a:	f04f 0c00 	mov.w	ip, #0
 800b98e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b992:	f8d9 1000 	ldr.w	r1, [r9]
 800b996:	fa1f fb82 	uxth.w	fp, r2
 800b99a:	b289      	uxth	r1, r1
 800b99c:	fb0a 110b 	mla	r1, sl, fp, r1
 800b9a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b9a4:	f8d9 2000 	ldr.w	r2, [r9]
 800b9a8:	4461      	add	r1, ip
 800b9aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b9ae:	fb0a c20b 	mla	r2, sl, fp, ip
 800b9b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b9b6:	b289      	uxth	r1, r1
 800b9b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b9bc:	4577      	cmp	r7, lr
 800b9be:	f849 1b04 	str.w	r1, [r9], #4
 800b9c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b9c6:	d8e2      	bhi.n	800b98e <__multiply+0xb2>
 800b9c8:	9a01      	ldr	r2, [sp, #4]
 800b9ca:	f845 c002 	str.w	ip, [r5, r2]
 800b9ce:	9a03      	ldr	r2, [sp, #12]
 800b9d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b9d4:	3304      	adds	r3, #4
 800b9d6:	f1b9 0f00 	cmp.w	r9, #0
 800b9da:	d020      	beq.n	800ba1e <__multiply+0x142>
 800b9dc:	6829      	ldr	r1, [r5, #0]
 800b9de:	f104 0c14 	add.w	ip, r4, #20
 800b9e2:	46ae      	mov	lr, r5
 800b9e4:	f04f 0a00 	mov.w	sl, #0
 800b9e8:	f8bc b000 	ldrh.w	fp, [ip]
 800b9ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b9f0:	fb09 220b 	mla	r2, r9, fp, r2
 800b9f4:	4492      	add	sl, r2
 800b9f6:	b289      	uxth	r1, r1
 800b9f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b9fc:	f84e 1b04 	str.w	r1, [lr], #4
 800ba00:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ba04:	f8be 1000 	ldrh.w	r1, [lr]
 800ba08:	0c12      	lsrs	r2, r2, #16
 800ba0a:	fb09 1102 	mla	r1, r9, r2, r1
 800ba0e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ba12:	4567      	cmp	r7, ip
 800ba14:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ba18:	d8e6      	bhi.n	800b9e8 <__multiply+0x10c>
 800ba1a:	9a01      	ldr	r2, [sp, #4]
 800ba1c:	50a9      	str	r1, [r5, r2]
 800ba1e:	3504      	adds	r5, #4
 800ba20:	e79a      	b.n	800b958 <__multiply+0x7c>
 800ba22:	3e01      	subs	r6, #1
 800ba24:	e79c      	b.n	800b960 <__multiply+0x84>
 800ba26:	bf00      	nop
 800ba28:	0800cde8 	.word	0x0800cde8
 800ba2c:	0800ced8 	.word	0x0800ced8

0800ba30 <__pow5mult>:
 800ba30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba34:	4615      	mov	r5, r2
 800ba36:	f012 0203 	ands.w	r2, r2, #3
 800ba3a:	4606      	mov	r6, r0
 800ba3c:	460f      	mov	r7, r1
 800ba3e:	d007      	beq.n	800ba50 <__pow5mult+0x20>
 800ba40:	4c25      	ldr	r4, [pc, #148]	; (800bad8 <__pow5mult+0xa8>)
 800ba42:	3a01      	subs	r2, #1
 800ba44:	2300      	movs	r3, #0
 800ba46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ba4a:	f7ff fe51 	bl	800b6f0 <__multadd>
 800ba4e:	4607      	mov	r7, r0
 800ba50:	10ad      	asrs	r5, r5, #2
 800ba52:	d03d      	beq.n	800bad0 <__pow5mult+0xa0>
 800ba54:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ba56:	b97c      	cbnz	r4, 800ba78 <__pow5mult+0x48>
 800ba58:	2010      	movs	r0, #16
 800ba5a:	f7ff fdcd 	bl	800b5f8 <malloc>
 800ba5e:	4602      	mov	r2, r0
 800ba60:	6270      	str	r0, [r6, #36]	; 0x24
 800ba62:	b928      	cbnz	r0, 800ba70 <__pow5mult+0x40>
 800ba64:	4b1d      	ldr	r3, [pc, #116]	; (800badc <__pow5mult+0xac>)
 800ba66:	481e      	ldr	r0, [pc, #120]	; (800bae0 <__pow5mult+0xb0>)
 800ba68:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ba6c:	f000 feda 	bl	800c824 <__assert_func>
 800ba70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ba74:	6004      	str	r4, [r0, #0]
 800ba76:	60c4      	str	r4, [r0, #12]
 800ba78:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ba7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ba80:	b94c      	cbnz	r4, 800ba96 <__pow5mult+0x66>
 800ba82:	f240 2171 	movw	r1, #625	; 0x271
 800ba86:	4630      	mov	r0, r6
 800ba88:	f7ff ff12 	bl	800b8b0 <__i2b>
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ba92:	4604      	mov	r4, r0
 800ba94:	6003      	str	r3, [r0, #0]
 800ba96:	f04f 0900 	mov.w	r9, #0
 800ba9a:	07eb      	lsls	r3, r5, #31
 800ba9c:	d50a      	bpl.n	800bab4 <__pow5mult+0x84>
 800ba9e:	4639      	mov	r1, r7
 800baa0:	4622      	mov	r2, r4
 800baa2:	4630      	mov	r0, r6
 800baa4:	f7ff ff1a 	bl	800b8dc <__multiply>
 800baa8:	4639      	mov	r1, r7
 800baaa:	4680      	mov	r8, r0
 800baac:	4630      	mov	r0, r6
 800baae:	f7ff fdfd 	bl	800b6ac <_Bfree>
 800bab2:	4647      	mov	r7, r8
 800bab4:	106d      	asrs	r5, r5, #1
 800bab6:	d00b      	beq.n	800bad0 <__pow5mult+0xa0>
 800bab8:	6820      	ldr	r0, [r4, #0]
 800baba:	b938      	cbnz	r0, 800bacc <__pow5mult+0x9c>
 800babc:	4622      	mov	r2, r4
 800babe:	4621      	mov	r1, r4
 800bac0:	4630      	mov	r0, r6
 800bac2:	f7ff ff0b 	bl	800b8dc <__multiply>
 800bac6:	6020      	str	r0, [r4, #0]
 800bac8:	f8c0 9000 	str.w	r9, [r0]
 800bacc:	4604      	mov	r4, r0
 800bace:	e7e4      	b.n	800ba9a <__pow5mult+0x6a>
 800bad0:	4638      	mov	r0, r7
 800bad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bad6:	bf00      	nop
 800bad8:	0800d028 	.word	0x0800d028
 800badc:	0800cd76 	.word	0x0800cd76
 800bae0:	0800ced8 	.word	0x0800ced8

0800bae4 <__lshift>:
 800bae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bae8:	460c      	mov	r4, r1
 800baea:	6849      	ldr	r1, [r1, #4]
 800baec:	6923      	ldr	r3, [r4, #16]
 800baee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800baf2:	68a3      	ldr	r3, [r4, #8]
 800baf4:	4607      	mov	r7, r0
 800baf6:	4691      	mov	r9, r2
 800baf8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bafc:	f108 0601 	add.w	r6, r8, #1
 800bb00:	42b3      	cmp	r3, r6
 800bb02:	db0b      	blt.n	800bb1c <__lshift+0x38>
 800bb04:	4638      	mov	r0, r7
 800bb06:	f7ff fd91 	bl	800b62c <_Balloc>
 800bb0a:	4605      	mov	r5, r0
 800bb0c:	b948      	cbnz	r0, 800bb22 <__lshift+0x3e>
 800bb0e:	4602      	mov	r2, r0
 800bb10:	4b2a      	ldr	r3, [pc, #168]	; (800bbbc <__lshift+0xd8>)
 800bb12:	482b      	ldr	r0, [pc, #172]	; (800bbc0 <__lshift+0xdc>)
 800bb14:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bb18:	f000 fe84 	bl	800c824 <__assert_func>
 800bb1c:	3101      	adds	r1, #1
 800bb1e:	005b      	lsls	r3, r3, #1
 800bb20:	e7ee      	b.n	800bb00 <__lshift+0x1c>
 800bb22:	2300      	movs	r3, #0
 800bb24:	f100 0114 	add.w	r1, r0, #20
 800bb28:	f100 0210 	add.w	r2, r0, #16
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	4553      	cmp	r3, sl
 800bb30:	db37      	blt.n	800bba2 <__lshift+0xbe>
 800bb32:	6920      	ldr	r0, [r4, #16]
 800bb34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bb38:	f104 0314 	add.w	r3, r4, #20
 800bb3c:	f019 091f 	ands.w	r9, r9, #31
 800bb40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bb44:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bb48:	d02f      	beq.n	800bbaa <__lshift+0xc6>
 800bb4a:	f1c9 0e20 	rsb	lr, r9, #32
 800bb4e:	468a      	mov	sl, r1
 800bb50:	f04f 0c00 	mov.w	ip, #0
 800bb54:	681a      	ldr	r2, [r3, #0]
 800bb56:	fa02 f209 	lsl.w	r2, r2, r9
 800bb5a:	ea42 020c 	orr.w	r2, r2, ip
 800bb5e:	f84a 2b04 	str.w	r2, [sl], #4
 800bb62:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb66:	4298      	cmp	r0, r3
 800bb68:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bb6c:	d8f2      	bhi.n	800bb54 <__lshift+0x70>
 800bb6e:	1b03      	subs	r3, r0, r4
 800bb70:	3b15      	subs	r3, #21
 800bb72:	f023 0303 	bic.w	r3, r3, #3
 800bb76:	3304      	adds	r3, #4
 800bb78:	f104 0215 	add.w	r2, r4, #21
 800bb7c:	4290      	cmp	r0, r2
 800bb7e:	bf38      	it	cc
 800bb80:	2304      	movcc	r3, #4
 800bb82:	f841 c003 	str.w	ip, [r1, r3]
 800bb86:	f1bc 0f00 	cmp.w	ip, #0
 800bb8a:	d001      	beq.n	800bb90 <__lshift+0xac>
 800bb8c:	f108 0602 	add.w	r6, r8, #2
 800bb90:	3e01      	subs	r6, #1
 800bb92:	4638      	mov	r0, r7
 800bb94:	612e      	str	r6, [r5, #16]
 800bb96:	4621      	mov	r1, r4
 800bb98:	f7ff fd88 	bl	800b6ac <_Bfree>
 800bb9c:	4628      	mov	r0, r5
 800bb9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bba2:	f842 0f04 	str.w	r0, [r2, #4]!
 800bba6:	3301      	adds	r3, #1
 800bba8:	e7c1      	b.n	800bb2e <__lshift+0x4a>
 800bbaa:	3904      	subs	r1, #4
 800bbac:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbb0:	f841 2f04 	str.w	r2, [r1, #4]!
 800bbb4:	4298      	cmp	r0, r3
 800bbb6:	d8f9      	bhi.n	800bbac <__lshift+0xc8>
 800bbb8:	e7ea      	b.n	800bb90 <__lshift+0xac>
 800bbba:	bf00      	nop
 800bbbc:	0800cde8 	.word	0x0800cde8
 800bbc0:	0800ced8 	.word	0x0800ced8

0800bbc4 <__mcmp>:
 800bbc4:	b530      	push	{r4, r5, lr}
 800bbc6:	6902      	ldr	r2, [r0, #16]
 800bbc8:	690c      	ldr	r4, [r1, #16]
 800bbca:	1b12      	subs	r2, r2, r4
 800bbcc:	d10e      	bne.n	800bbec <__mcmp+0x28>
 800bbce:	f100 0314 	add.w	r3, r0, #20
 800bbd2:	3114      	adds	r1, #20
 800bbd4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bbd8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bbdc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bbe0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bbe4:	42a5      	cmp	r5, r4
 800bbe6:	d003      	beq.n	800bbf0 <__mcmp+0x2c>
 800bbe8:	d305      	bcc.n	800bbf6 <__mcmp+0x32>
 800bbea:	2201      	movs	r2, #1
 800bbec:	4610      	mov	r0, r2
 800bbee:	bd30      	pop	{r4, r5, pc}
 800bbf0:	4283      	cmp	r3, r0
 800bbf2:	d3f3      	bcc.n	800bbdc <__mcmp+0x18>
 800bbf4:	e7fa      	b.n	800bbec <__mcmp+0x28>
 800bbf6:	f04f 32ff 	mov.w	r2, #4294967295
 800bbfa:	e7f7      	b.n	800bbec <__mcmp+0x28>

0800bbfc <__mdiff>:
 800bbfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc00:	460c      	mov	r4, r1
 800bc02:	4606      	mov	r6, r0
 800bc04:	4611      	mov	r1, r2
 800bc06:	4620      	mov	r0, r4
 800bc08:	4690      	mov	r8, r2
 800bc0a:	f7ff ffdb 	bl	800bbc4 <__mcmp>
 800bc0e:	1e05      	subs	r5, r0, #0
 800bc10:	d110      	bne.n	800bc34 <__mdiff+0x38>
 800bc12:	4629      	mov	r1, r5
 800bc14:	4630      	mov	r0, r6
 800bc16:	f7ff fd09 	bl	800b62c <_Balloc>
 800bc1a:	b930      	cbnz	r0, 800bc2a <__mdiff+0x2e>
 800bc1c:	4b3a      	ldr	r3, [pc, #232]	; (800bd08 <__mdiff+0x10c>)
 800bc1e:	4602      	mov	r2, r0
 800bc20:	f240 2132 	movw	r1, #562	; 0x232
 800bc24:	4839      	ldr	r0, [pc, #228]	; (800bd0c <__mdiff+0x110>)
 800bc26:	f000 fdfd 	bl	800c824 <__assert_func>
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bc30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc34:	bfa4      	itt	ge
 800bc36:	4643      	movge	r3, r8
 800bc38:	46a0      	movge	r8, r4
 800bc3a:	4630      	mov	r0, r6
 800bc3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bc40:	bfa6      	itte	ge
 800bc42:	461c      	movge	r4, r3
 800bc44:	2500      	movge	r5, #0
 800bc46:	2501      	movlt	r5, #1
 800bc48:	f7ff fcf0 	bl	800b62c <_Balloc>
 800bc4c:	b920      	cbnz	r0, 800bc58 <__mdiff+0x5c>
 800bc4e:	4b2e      	ldr	r3, [pc, #184]	; (800bd08 <__mdiff+0x10c>)
 800bc50:	4602      	mov	r2, r0
 800bc52:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bc56:	e7e5      	b.n	800bc24 <__mdiff+0x28>
 800bc58:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bc5c:	6926      	ldr	r6, [r4, #16]
 800bc5e:	60c5      	str	r5, [r0, #12]
 800bc60:	f104 0914 	add.w	r9, r4, #20
 800bc64:	f108 0514 	add.w	r5, r8, #20
 800bc68:	f100 0e14 	add.w	lr, r0, #20
 800bc6c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bc70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bc74:	f108 0210 	add.w	r2, r8, #16
 800bc78:	46f2      	mov	sl, lr
 800bc7a:	2100      	movs	r1, #0
 800bc7c:	f859 3b04 	ldr.w	r3, [r9], #4
 800bc80:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bc84:	fa1f f883 	uxth.w	r8, r3
 800bc88:	fa11 f18b 	uxtah	r1, r1, fp
 800bc8c:	0c1b      	lsrs	r3, r3, #16
 800bc8e:	eba1 0808 	sub.w	r8, r1, r8
 800bc92:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bc96:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bc9a:	fa1f f888 	uxth.w	r8, r8
 800bc9e:	1419      	asrs	r1, r3, #16
 800bca0:	454e      	cmp	r6, r9
 800bca2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bca6:	f84a 3b04 	str.w	r3, [sl], #4
 800bcaa:	d8e7      	bhi.n	800bc7c <__mdiff+0x80>
 800bcac:	1b33      	subs	r3, r6, r4
 800bcae:	3b15      	subs	r3, #21
 800bcb0:	f023 0303 	bic.w	r3, r3, #3
 800bcb4:	3304      	adds	r3, #4
 800bcb6:	3415      	adds	r4, #21
 800bcb8:	42a6      	cmp	r6, r4
 800bcba:	bf38      	it	cc
 800bcbc:	2304      	movcc	r3, #4
 800bcbe:	441d      	add	r5, r3
 800bcc0:	4473      	add	r3, lr
 800bcc2:	469e      	mov	lr, r3
 800bcc4:	462e      	mov	r6, r5
 800bcc6:	4566      	cmp	r6, ip
 800bcc8:	d30e      	bcc.n	800bce8 <__mdiff+0xec>
 800bcca:	f10c 0203 	add.w	r2, ip, #3
 800bcce:	1b52      	subs	r2, r2, r5
 800bcd0:	f022 0203 	bic.w	r2, r2, #3
 800bcd4:	3d03      	subs	r5, #3
 800bcd6:	45ac      	cmp	ip, r5
 800bcd8:	bf38      	it	cc
 800bcda:	2200      	movcc	r2, #0
 800bcdc:	441a      	add	r2, r3
 800bcde:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bce2:	b17b      	cbz	r3, 800bd04 <__mdiff+0x108>
 800bce4:	6107      	str	r7, [r0, #16]
 800bce6:	e7a3      	b.n	800bc30 <__mdiff+0x34>
 800bce8:	f856 8b04 	ldr.w	r8, [r6], #4
 800bcec:	fa11 f288 	uxtah	r2, r1, r8
 800bcf0:	1414      	asrs	r4, r2, #16
 800bcf2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bcf6:	b292      	uxth	r2, r2
 800bcf8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bcfc:	f84e 2b04 	str.w	r2, [lr], #4
 800bd00:	1421      	asrs	r1, r4, #16
 800bd02:	e7e0      	b.n	800bcc6 <__mdiff+0xca>
 800bd04:	3f01      	subs	r7, #1
 800bd06:	e7ea      	b.n	800bcde <__mdiff+0xe2>
 800bd08:	0800cde8 	.word	0x0800cde8
 800bd0c:	0800ced8 	.word	0x0800ced8

0800bd10 <__ulp>:
 800bd10:	b082      	sub	sp, #8
 800bd12:	ed8d 0b00 	vstr	d0, [sp]
 800bd16:	9b01      	ldr	r3, [sp, #4]
 800bd18:	4912      	ldr	r1, [pc, #72]	; (800bd64 <__ulp+0x54>)
 800bd1a:	4019      	ands	r1, r3
 800bd1c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800bd20:	2900      	cmp	r1, #0
 800bd22:	dd05      	ble.n	800bd30 <__ulp+0x20>
 800bd24:	2200      	movs	r2, #0
 800bd26:	460b      	mov	r3, r1
 800bd28:	ec43 2b10 	vmov	d0, r2, r3
 800bd2c:	b002      	add	sp, #8
 800bd2e:	4770      	bx	lr
 800bd30:	4249      	negs	r1, r1
 800bd32:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800bd36:	ea4f 5021 	mov.w	r0, r1, asr #20
 800bd3a:	f04f 0200 	mov.w	r2, #0
 800bd3e:	f04f 0300 	mov.w	r3, #0
 800bd42:	da04      	bge.n	800bd4e <__ulp+0x3e>
 800bd44:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800bd48:	fa41 f300 	asr.w	r3, r1, r0
 800bd4c:	e7ec      	b.n	800bd28 <__ulp+0x18>
 800bd4e:	f1a0 0114 	sub.w	r1, r0, #20
 800bd52:	291e      	cmp	r1, #30
 800bd54:	bfda      	itte	le
 800bd56:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800bd5a:	fa20 f101 	lsrle.w	r1, r0, r1
 800bd5e:	2101      	movgt	r1, #1
 800bd60:	460a      	mov	r2, r1
 800bd62:	e7e1      	b.n	800bd28 <__ulp+0x18>
 800bd64:	7ff00000 	.word	0x7ff00000

0800bd68 <__b2d>:
 800bd68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd6a:	6905      	ldr	r5, [r0, #16]
 800bd6c:	f100 0714 	add.w	r7, r0, #20
 800bd70:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800bd74:	1f2e      	subs	r6, r5, #4
 800bd76:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800bd7a:	4620      	mov	r0, r4
 800bd7c:	f7ff fd48 	bl	800b810 <__hi0bits>
 800bd80:	f1c0 0320 	rsb	r3, r0, #32
 800bd84:	280a      	cmp	r0, #10
 800bd86:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800be04 <__b2d+0x9c>
 800bd8a:	600b      	str	r3, [r1, #0]
 800bd8c:	dc14      	bgt.n	800bdb8 <__b2d+0x50>
 800bd8e:	f1c0 0e0b 	rsb	lr, r0, #11
 800bd92:	fa24 f10e 	lsr.w	r1, r4, lr
 800bd96:	42b7      	cmp	r7, r6
 800bd98:	ea41 030c 	orr.w	r3, r1, ip
 800bd9c:	bf34      	ite	cc
 800bd9e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bda2:	2100      	movcs	r1, #0
 800bda4:	3015      	adds	r0, #21
 800bda6:	fa04 f000 	lsl.w	r0, r4, r0
 800bdaa:	fa21 f10e 	lsr.w	r1, r1, lr
 800bdae:	ea40 0201 	orr.w	r2, r0, r1
 800bdb2:	ec43 2b10 	vmov	d0, r2, r3
 800bdb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdb8:	42b7      	cmp	r7, r6
 800bdba:	bf3a      	itte	cc
 800bdbc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bdc0:	f1a5 0608 	subcc.w	r6, r5, #8
 800bdc4:	2100      	movcs	r1, #0
 800bdc6:	380b      	subs	r0, #11
 800bdc8:	d017      	beq.n	800bdfa <__b2d+0x92>
 800bdca:	f1c0 0c20 	rsb	ip, r0, #32
 800bdce:	fa04 f500 	lsl.w	r5, r4, r0
 800bdd2:	42be      	cmp	r6, r7
 800bdd4:	fa21 f40c 	lsr.w	r4, r1, ip
 800bdd8:	ea45 0504 	orr.w	r5, r5, r4
 800bddc:	bf8c      	ite	hi
 800bdde:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800bde2:	2400      	movls	r4, #0
 800bde4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800bde8:	fa01 f000 	lsl.w	r0, r1, r0
 800bdec:	fa24 f40c 	lsr.w	r4, r4, ip
 800bdf0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bdf4:	ea40 0204 	orr.w	r2, r0, r4
 800bdf8:	e7db      	b.n	800bdb2 <__b2d+0x4a>
 800bdfa:	ea44 030c 	orr.w	r3, r4, ip
 800bdfe:	460a      	mov	r2, r1
 800be00:	e7d7      	b.n	800bdb2 <__b2d+0x4a>
 800be02:	bf00      	nop
 800be04:	3ff00000 	.word	0x3ff00000

0800be08 <__d2b>:
 800be08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800be0c:	4689      	mov	r9, r1
 800be0e:	2101      	movs	r1, #1
 800be10:	ec57 6b10 	vmov	r6, r7, d0
 800be14:	4690      	mov	r8, r2
 800be16:	f7ff fc09 	bl	800b62c <_Balloc>
 800be1a:	4604      	mov	r4, r0
 800be1c:	b930      	cbnz	r0, 800be2c <__d2b+0x24>
 800be1e:	4602      	mov	r2, r0
 800be20:	4b25      	ldr	r3, [pc, #148]	; (800beb8 <__d2b+0xb0>)
 800be22:	4826      	ldr	r0, [pc, #152]	; (800bebc <__d2b+0xb4>)
 800be24:	f240 310a 	movw	r1, #778	; 0x30a
 800be28:	f000 fcfc 	bl	800c824 <__assert_func>
 800be2c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800be30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800be34:	bb35      	cbnz	r5, 800be84 <__d2b+0x7c>
 800be36:	2e00      	cmp	r6, #0
 800be38:	9301      	str	r3, [sp, #4]
 800be3a:	d028      	beq.n	800be8e <__d2b+0x86>
 800be3c:	4668      	mov	r0, sp
 800be3e:	9600      	str	r6, [sp, #0]
 800be40:	f7ff fd06 	bl	800b850 <__lo0bits>
 800be44:	9900      	ldr	r1, [sp, #0]
 800be46:	b300      	cbz	r0, 800be8a <__d2b+0x82>
 800be48:	9a01      	ldr	r2, [sp, #4]
 800be4a:	f1c0 0320 	rsb	r3, r0, #32
 800be4e:	fa02 f303 	lsl.w	r3, r2, r3
 800be52:	430b      	orrs	r3, r1
 800be54:	40c2      	lsrs	r2, r0
 800be56:	6163      	str	r3, [r4, #20]
 800be58:	9201      	str	r2, [sp, #4]
 800be5a:	9b01      	ldr	r3, [sp, #4]
 800be5c:	61a3      	str	r3, [r4, #24]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	bf14      	ite	ne
 800be62:	2202      	movne	r2, #2
 800be64:	2201      	moveq	r2, #1
 800be66:	6122      	str	r2, [r4, #16]
 800be68:	b1d5      	cbz	r5, 800bea0 <__d2b+0x98>
 800be6a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800be6e:	4405      	add	r5, r0
 800be70:	f8c9 5000 	str.w	r5, [r9]
 800be74:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800be78:	f8c8 0000 	str.w	r0, [r8]
 800be7c:	4620      	mov	r0, r4
 800be7e:	b003      	add	sp, #12
 800be80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be88:	e7d5      	b.n	800be36 <__d2b+0x2e>
 800be8a:	6161      	str	r1, [r4, #20]
 800be8c:	e7e5      	b.n	800be5a <__d2b+0x52>
 800be8e:	a801      	add	r0, sp, #4
 800be90:	f7ff fcde 	bl	800b850 <__lo0bits>
 800be94:	9b01      	ldr	r3, [sp, #4]
 800be96:	6163      	str	r3, [r4, #20]
 800be98:	2201      	movs	r2, #1
 800be9a:	6122      	str	r2, [r4, #16]
 800be9c:	3020      	adds	r0, #32
 800be9e:	e7e3      	b.n	800be68 <__d2b+0x60>
 800bea0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bea4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bea8:	f8c9 0000 	str.w	r0, [r9]
 800beac:	6918      	ldr	r0, [r3, #16]
 800beae:	f7ff fcaf 	bl	800b810 <__hi0bits>
 800beb2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800beb6:	e7df      	b.n	800be78 <__d2b+0x70>
 800beb8:	0800cde8 	.word	0x0800cde8
 800bebc:	0800ced8 	.word	0x0800ced8

0800bec0 <__ratio>:
 800bec0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bec4:	4688      	mov	r8, r1
 800bec6:	4669      	mov	r1, sp
 800bec8:	4681      	mov	r9, r0
 800beca:	f7ff ff4d 	bl	800bd68 <__b2d>
 800bece:	a901      	add	r1, sp, #4
 800bed0:	4640      	mov	r0, r8
 800bed2:	ec55 4b10 	vmov	r4, r5, d0
 800bed6:	f7ff ff47 	bl	800bd68 <__b2d>
 800beda:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bede:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bee2:	eba3 0c02 	sub.w	ip, r3, r2
 800bee6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800beea:	1a9b      	subs	r3, r3, r2
 800beec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bef0:	ec51 0b10 	vmov	r0, r1, d0
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	bfd6      	itet	le
 800bef8:	460a      	movle	r2, r1
 800befa:	462a      	movgt	r2, r5
 800befc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bf00:	468b      	mov	fp, r1
 800bf02:	462f      	mov	r7, r5
 800bf04:	bfd4      	ite	le
 800bf06:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800bf0a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bf0e:	4620      	mov	r0, r4
 800bf10:	ee10 2a10 	vmov	r2, s0
 800bf14:	465b      	mov	r3, fp
 800bf16:	4639      	mov	r1, r7
 800bf18:	f7f4 fc98 	bl	800084c <__aeabi_ddiv>
 800bf1c:	ec41 0b10 	vmov	d0, r0, r1
 800bf20:	b003      	add	sp, #12
 800bf22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bf26 <__copybits>:
 800bf26:	3901      	subs	r1, #1
 800bf28:	b570      	push	{r4, r5, r6, lr}
 800bf2a:	1149      	asrs	r1, r1, #5
 800bf2c:	6914      	ldr	r4, [r2, #16]
 800bf2e:	3101      	adds	r1, #1
 800bf30:	f102 0314 	add.w	r3, r2, #20
 800bf34:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bf38:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bf3c:	1f05      	subs	r5, r0, #4
 800bf3e:	42a3      	cmp	r3, r4
 800bf40:	d30c      	bcc.n	800bf5c <__copybits+0x36>
 800bf42:	1aa3      	subs	r3, r4, r2
 800bf44:	3b11      	subs	r3, #17
 800bf46:	f023 0303 	bic.w	r3, r3, #3
 800bf4a:	3211      	adds	r2, #17
 800bf4c:	42a2      	cmp	r2, r4
 800bf4e:	bf88      	it	hi
 800bf50:	2300      	movhi	r3, #0
 800bf52:	4418      	add	r0, r3
 800bf54:	2300      	movs	r3, #0
 800bf56:	4288      	cmp	r0, r1
 800bf58:	d305      	bcc.n	800bf66 <__copybits+0x40>
 800bf5a:	bd70      	pop	{r4, r5, r6, pc}
 800bf5c:	f853 6b04 	ldr.w	r6, [r3], #4
 800bf60:	f845 6f04 	str.w	r6, [r5, #4]!
 800bf64:	e7eb      	b.n	800bf3e <__copybits+0x18>
 800bf66:	f840 3b04 	str.w	r3, [r0], #4
 800bf6a:	e7f4      	b.n	800bf56 <__copybits+0x30>

0800bf6c <__any_on>:
 800bf6c:	f100 0214 	add.w	r2, r0, #20
 800bf70:	6900      	ldr	r0, [r0, #16]
 800bf72:	114b      	asrs	r3, r1, #5
 800bf74:	4298      	cmp	r0, r3
 800bf76:	b510      	push	{r4, lr}
 800bf78:	db11      	blt.n	800bf9e <__any_on+0x32>
 800bf7a:	dd0a      	ble.n	800bf92 <__any_on+0x26>
 800bf7c:	f011 011f 	ands.w	r1, r1, #31
 800bf80:	d007      	beq.n	800bf92 <__any_on+0x26>
 800bf82:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bf86:	fa24 f001 	lsr.w	r0, r4, r1
 800bf8a:	fa00 f101 	lsl.w	r1, r0, r1
 800bf8e:	428c      	cmp	r4, r1
 800bf90:	d10b      	bne.n	800bfaa <__any_on+0x3e>
 800bf92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bf96:	4293      	cmp	r3, r2
 800bf98:	d803      	bhi.n	800bfa2 <__any_on+0x36>
 800bf9a:	2000      	movs	r0, #0
 800bf9c:	bd10      	pop	{r4, pc}
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	e7f7      	b.n	800bf92 <__any_on+0x26>
 800bfa2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bfa6:	2900      	cmp	r1, #0
 800bfa8:	d0f5      	beq.n	800bf96 <__any_on+0x2a>
 800bfaa:	2001      	movs	r0, #1
 800bfac:	e7f6      	b.n	800bf9c <__any_on+0x30>

0800bfae <_calloc_r>:
 800bfae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bfb0:	fba1 2402 	umull	r2, r4, r1, r2
 800bfb4:	b94c      	cbnz	r4, 800bfca <_calloc_r+0x1c>
 800bfb6:	4611      	mov	r1, r2
 800bfb8:	9201      	str	r2, [sp, #4]
 800bfba:	f000 f87b 	bl	800c0b4 <_malloc_r>
 800bfbe:	9a01      	ldr	r2, [sp, #4]
 800bfc0:	4605      	mov	r5, r0
 800bfc2:	b930      	cbnz	r0, 800bfd2 <_calloc_r+0x24>
 800bfc4:	4628      	mov	r0, r5
 800bfc6:	b003      	add	sp, #12
 800bfc8:	bd30      	pop	{r4, r5, pc}
 800bfca:	220c      	movs	r2, #12
 800bfcc:	6002      	str	r2, [r0, #0]
 800bfce:	2500      	movs	r5, #0
 800bfd0:	e7f8      	b.n	800bfc4 <_calloc_r+0x16>
 800bfd2:	4621      	mov	r1, r4
 800bfd4:	f7fc f862 	bl	800809c <memset>
 800bfd8:	e7f4      	b.n	800bfc4 <_calloc_r+0x16>
	...

0800bfdc <_free_r>:
 800bfdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bfde:	2900      	cmp	r1, #0
 800bfe0:	d044      	beq.n	800c06c <_free_r+0x90>
 800bfe2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfe6:	9001      	str	r0, [sp, #4]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	f1a1 0404 	sub.w	r4, r1, #4
 800bfee:	bfb8      	it	lt
 800bff0:	18e4      	addlt	r4, r4, r3
 800bff2:	f000 fca5 	bl	800c940 <__malloc_lock>
 800bff6:	4a1e      	ldr	r2, [pc, #120]	; (800c070 <_free_r+0x94>)
 800bff8:	9801      	ldr	r0, [sp, #4]
 800bffa:	6813      	ldr	r3, [r2, #0]
 800bffc:	b933      	cbnz	r3, 800c00c <_free_r+0x30>
 800bffe:	6063      	str	r3, [r4, #4]
 800c000:	6014      	str	r4, [r2, #0]
 800c002:	b003      	add	sp, #12
 800c004:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c008:	f000 bca0 	b.w	800c94c <__malloc_unlock>
 800c00c:	42a3      	cmp	r3, r4
 800c00e:	d908      	bls.n	800c022 <_free_r+0x46>
 800c010:	6825      	ldr	r5, [r4, #0]
 800c012:	1961      	adds	r1, r4, r5
 800c014:	428b      	cmp	r3, r1
 800c016:	bf01      	itttt	eq
 800c018:	6819      	ldreq	r1, [r3, #0]
 800c01a:	685b      	ldreq	r3, [r3, #4]
 800c01c:	1949      	addeq	r1, r1, r5
 800c01e:	6021      	streq	r1, [r4, #0]
 800c020:	e7ed      	b.n	800bffe <_free_r+0x22>
 800c022:	461a      	mov	r2, r3
 800c024:	685b      	ldr	r3, [r3, #4]
 800c026:	b10b      	cbz	r3, 800c02c <_free_r+0x50>
 800c028:	42a3      	cmp	r3, r4
 800c02a:	d9fa      	bls.n	800c022 <_free_r+0x46>
 800c02c:	6811      	ldr	r1, [r2, #0]
 800c02e:	1855      	adds	r5, r2, r1
 800c030:	42a5      	cmp	r5, r4
 800c032:	d10b      	bne.n	800c04c <_free_r+0x70>
 800c034:	6824      	ldr	r4, [r4, #0]
 800c036:	4421      	add	r1, r4
 800c038:	1854      	adds	r4, r2, r1
 800c03a:	42a3      	cmp	r3, r4
 800c03c:	6011      	str	r1, [r2, #0]
 800c03e:	d1e0      	bne.n	800c002 <_free_r+0x26>
 800c040:	681c      	ldr	r4, [r3, #0]
 800c042:	685b      	ldr	r3, [r3, #4]
 800c044:	6053      	str	r3, [r2, #4]
 800c046:	4421      	add	r1, r4
 800c048:	6011      	str	r1, [r2, #0]
 800c04a:	e7da      	b.n	800c002 <_free_r+0x26>
 800c04c:	d902      	bls.n	800c054 <_free_r+0x78>
 800c04e:	230c      	movs	r3, #12
 800c050:	6003      	str	r3, [r0, #0]
 800c052:	e7d6      	b.n	800c002 <_free_r+0x26>
 800c054:	6825      	ldr	r5, [r4, #0]
 800c056:	1961      	adds	r1, r4, r5
 800c058:	428b      	cmp	r3, r1
 800c05a:	bf04      	itt	eq
 800c05c:	6819      	ldreq	r1, [r3, #0]
 800c05e:	685b      	ldreq	r3, [r3, #4]
 800c060:	6063      	str	r3, [r4, #4]
 800c062:	bf04      	itt	eq
 800c064:	1949      	addeq	r1, r1, r5
 800c066:	6021      	streq	r1, [r4, #0]
 800c068:	6054      	str	r4, [r2, #4]
 800c06a:	e7ca      	b.n	800c002 <_free_r+0x26>
 800c06c:	b003      	add	sp, #12
 800c06e:	bd30      	pop	{r4, r5, pc}
 800c070:	20000424 	.word	0x20000424

0800c074 <sbrk_aligned>:
 800c074:	b570      	push	{r4, r5, r6, lr}
 800c076:	4e0e      	ldr	r6, [pc, #56]	; (800c0b0 <sbrk_aligned+0x3c>)
 800c078:	460c      	mov	r4, r1
 800c07a:	6831      	ldr	r1, [r6, #0]
 800c07c:	4605      	mov	r5, r0
 800c07e:	b911      	cbnz	r1, 800c086 <sbrk_aligned+0x12>
 800c080:	f000 fb4a 	bl	800c718 <_sbrk_r>
 800c084:	6030      	str	r0, [r6, #0]
 800c086:	4621      	mov	r1, r4
 800c088:	4628      	mov	r0, r5
 800c08a:	f000 fb45 	bl	800c718 <_sbrk_r>
 800c08e:	1c43      	adds	r3, r0, #1
 800c090:	d00a      	beq.n	800c0a8 <sbrk_aligned+0x34>
 800c092:	1cc4      	adds	r4, r0, #3
 800c094:	f024 0403 	bic.w	r4, r4, #3
 800c098:	42a0      	cmp	r0, r4
 800c09a:	d007      	beq.n	800c0ac <sbrk_aligned+0x38>
 800c09c:	1a21      	subs	r1, r4, r0
 800c09e:	4628      	mov	r0, r5
 800c0a0:	f000 fb3a 	bl	800c718 <_sbrk_r>
 800c0a4:	3001      	adds	r0, #1
 800c0a6:	d101      	bne.n	800c0ac <sbrk_aligned+0x38>
 800c0a8:	f04f 34ff 	mov.w	r4, #4294967295
 800c0ac:	4620      	mov	r0, r4
 800c0ae:	bd70      	pop	{r4, r5, r6, pc}
 800c0b0:	20000428 	.word	0x20000428

0800c0b4 <_malloc_r>:
 800c0b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0b8:	1ccd      	adds	r5, r1, #3
 800c0ba:	f025 0503 	bic.w	r5, r5, #3
 800c0be:	3508      	adds	r5, #8
 800c0c0:	2d0c      	cmp	r5, #12
 800c0c2:	bf38      	it	cc
 800c0c4:	250c      	movcc	r5, #12
 800c0c6:	2d00      	cmp	r5, #0
 800c0c8:	4607      	mov	r7, r0
 800c0ca:	db01      	blt.n	800c0d0 <_malloc_r+0x1c>
 800c0cc:	42a9      	cmp	r1, r5
 800c0ce:	d905      	bls.n	800c0dc <_malloc_r+0x28>
 800c0d0:	230c      	movs	r3, #12
 800c0d2:	603b      	str	r3, [r7, #0]
 800c0d4:	2600      	movs	r6, #0
 800c0d6:	4630      	mov	r0, r6
 800c0d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0dc:	4e2e      	ldr	r6, [pc, #184]	; (800c198 <_malloc_r+0xe4>)
 800c0de:	f000 fc2f 	bl	800c940 <__malloc_lock>
 800c0e2:	6833      	ldr	r3, [r6, #0]
 800c0e4:	461c      	mov	r4, r3
 800c0e6:	bb34      	cbnz	r4, 800c136 <_malloc_r+0x82>
 800c0e8:	4629      	mov	r1, r5
 800c0ea:	4638      	mov	r0, r7
 800c0ec:	f7ff ffc2 	bl	800c074 <sbrk_aligned>
 800c0f0:	1c43      	adds	r3, r0, #1
 800c0f2:	4604      	mov	r4, r0
 800c0f4:	d14d      	bne.n	800c192 <_malloc_r+0xde>
 800c0f6:	6834      	ldr	r4, [r6, #0]
 800c0f8:	4626      	mov	r6, r4
 800c0fa:	2e00      	cmp	r6, #0
 800c0fc:	d140      	bne.n	800c180 <_malloc_r+0xcc>
 800c0fe:	6823      	ldr	r3, [r4, #0]
 800c100:	4631      	mov	r1, r6
 800c102:	4638      	mov	r0, r7
 800c104:	eb04 0803 	add.w	r8, r4, r3
 800c108:	f000 fb06 	bl	800c718 <_sbrk_r>
 800c10c:	4580      	cmp	r8, r0
 800c10e:	d13a      	bne.n	800c186 <_malloc_r+0xd2>
 800c110:	6821      	ldr	r1, [r4, #0]
 800c112:	3503      	adds	r5, #3
 800c114:	1a6d      	subs	r5, r5, r1
 800c116:	f025 0503 	bic.w	r5, r5, #3
 800c11a:	3508      	adds	r5, #8
 800c11c:	2d0c      	cmp	r5, #12
 800c11e:	bf38      	it	cc
 800c120:	250c      	movcc	r5, #12
 800c122:	4629      	mov	r1, r5
 800c124:	4638      	mov	r0, r7
 800c126:	f7ff ffa5 	bl	800c074 <sbrk_aligned>
 800c12a:	3001      	adds	r0, #1
 800c12c:	d02b      	beq.n	800c186 <_malloc_r+0xd2>
 800c12e:	6823      	ldr	r3, [r4, #0]
 800c130:	442b      	add	r3, r5
 800c132:	6023      	str	r3, [r4, #0]
 800c134:	e00e      	b.n	800c154 <_malloc_r+0xa0>
 800c136:	6822      	ldr	r2, [r4, #0]
 800c138:	1b52      	subs	r2, r2, r5
 800c13a:	d41e      	bmi.n	800c17a <_malloc_r+0xc6>
 800c13c:	2a0b      	cmp	r2, #11
 800c13e:	d916      	bls.n	800c16e <_malloc_r+0xba>
 800c140:	1961      	adds	r1, r4, r5
 800c142:	42a3      	cmp	r3, r4
 800c144:	6025      	str	r5, [r4, #0]
 800c146:	bf18      	it	ne
 800c148:	6059      	strne	r1, [r3, #4]
 800c14a:	6863      	ldr	r3, [r4, #4]
 800c14c:	bf08      	it	eq
 800c14e:	6031      	streq	r1, [r6, #0]
 800c150:	5162      	str	r2, [r4, r5]
 800c152:	604b      	str	r3, [r1, #4]
 800c154:	4638      	mov	r0, r7
 800c156:	f104 060b 	add.w	r6, r4, #11
 800c15a:	f000 fbf7 	bl	800c94c <__malloc_unlock>
 800c15e:	f026 0607 	bic.w	r6, r6, #7
 800c162:	1d23      	adds	r3, r4, #4
 800c164:	1af2      	subs	r2, r6, r3
 800c166:	d0b6      	beq.n	800c0d6 <_malloc_r+0x22>
 800c168:	1b9b      	subs	r3, r3, r6
 800c16a:	50a3      	str	r3, [r4, r2]
 800c16c:	e7b3      	b.n	800c0d6 <_malloc_r+0x22>
 800c16e:	6862      	ldr	r2, [r4, #4]
 800c170:	42a3      	cmp	r3, r4
 800c172:	bf0c      	ite	eq
 800c174:	6032      	streq	r2, [r6, #0]
 800c176:	605a      	strne	r2, [r3, #4]
 800c178:	e7ec      	b.n	800c154 <_malloc_r+0xa0>
 800c17a:	4623      	mov	r3, r4
 800c17c:	6864      	ldr	r4, [r4, #4]
 800c17e:	e7b2      	b.n	800c0e6 <_malloc_r+0x32>
 800c180:	4634      	mov	r4, r6
 800c182:	6876      	ldr	r6, [r6, #4]
 800c184:	e7b9      	b.n	800c0fa <_malloc_r+0x46>
 800c186:	230c      	movs	r3, #12
 800c188:	603b      	str	r3, [r7, #0]
 800c18a:	4638      	mov	r0, r7
 800c18c:	f000 fbde 	bl	800c94c <__malloc_unlock>
 800c190:	e7a1      	b.n	800c0d6 <_malloc_r+0x22>
 800c192:	6025      	str	r5, [r4, #0]
 800c194:	e7de      	b.n	800c154 <_malloc_r+0xa0>
 800c196:	bf00      	nop
 800c198:	20000424 	.word	0x20000424

0800c19c <__ssputs_r>:
 800c19c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1a0:	688e      	ldr	r6, [r1, #8]
 800c1a2:	429e      	cmp	r6, r3
 800c1a4:	4682      	mov	sl, r0
 800c1a6:	460c      	mov	r4, r1
 800c1a8:	4690      	mov	r8, r2
 800c1aa:	461f      	mov	r7, r3
 800c1ac:	d838      	bhi.n	800c220 <__ssputs_r+0x84>
 800c1ae:	898a      	ldrh	r2, [r1, #12]
 800c1b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c1b4:	d032      	beq.n	800c21c <__ssputs_r+0x80>
 800c1b6:	6825      	ldr	r5, [r4, #0]
 800c1b8:	6909      	ldr	r1, [r1, #16]
 800c1ba:	eba5 0901 	sub.w	r9, r5, r1
 800c1be:	6965      	ldr	r5, [r4, #20]
 800c1c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c1c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c1c8:	3301      	adds	r3, #1
 800c1ca:	444b      	add	r3, r9
 800c1cc:	106d      	asrs	r5, r5, #1
 800c1ce:	429d      	cmp	r5, r3
 800c1d0:	bf38      	it	cc
 800c1d2:	461d      	movcc	r5, r3
 800c1d4:	0553      	lsls	r3, r2, #21
 800c1d6:	d531      	bpl.n	800c23c <__ssputs_r+0xa0>
 800c1d8:	4629      	mov	r1, r5
 800c1da:	f7ff ff6b 	bl	800c0b4 <_malloc_r>
 800c1de:	4606      	mov	r6, r0
 800c1e0:	b950      	cbnz	r0, 800c1f8 <__ssputs_r+0x5c>
 800c1e2:	230c      	movs	r3, #12
 800c1e4:	f8ca 3000 	str.w	r3, [sl]
 800c1e8:	89a3      	ldrh	r3, [r4, #12]
 800c1ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1ee:	81a3      	strh	r3, [r4, #12]
 800c1f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c1f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1f8:	6921      	ldr	r1, [r4, #16]
 800c1fa:	464a      	mov	r2, r9
 800c1fc:	f7fb ff40 	bl	8008080 <memcpy>
 800c200:	89a3      	ldrh	r3, [r4, #12]
 800c202:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c20a:	81a3      	strh	r3, [r4, #12]
 800c20c:	6126      	str	r6, [r4, #16]
 800c20e:	6165      	str	r5, [r4, #20]
 800c210:	444e      	add	r6, r9
 800c212:	eba5 0509 	sub.w	r5, r5, r9
 800c216:	6026      	str	r6, [r4, #0]
 800c218:	60a5      	str	r5, [r4, #8]
 800c21a:	463e      	mov	r6, r7
 800c21c:	42be      	cmp	r6, r7
 800c21e:	d900      	bls.n	800c222 <__ssputs_r+0x86>
 800c220:	463e      	mov	r6, r7
 800c222:	6820      	ldr	r0, [r4, #0]
 800c224:	4632      	mov	r2, r6
 800c226:	4641      	mov	r1, r8
 800c228:	f000 fb70 	bl	800c90c <memmove>
 800c22c:	68a3      	ldr	r3, [r4, #8]
 800c22e:	1b9b      	subs	r3, r3, r6
 800c230:	60a3      	str	r3, [r4, #8]
 800c232:	6823      	ldr	r3, [r4, #0]
 800c234:	4433      	add	r3, r6
 800c236:	6023      	str	r3, [r4, #0]
 800c238:	2000      	movs	r0, #0
 800c23a:	e7db      	b.n	800c1f4 <__ssputs_r+0x58>
 800c23c:	462a      	mov	r2, r5
 800c23e:	f000 fb8b 	bl	800c958 <_realloc_r>
 800c242:	4606      	mov	r6, r0
 800c244:	2800      	cmp	r0, #0
 800c246:	d1e1      	bne.n	800c20c <__ssputs_r+0x70>
 800c248:	6921      	ldr	r1, [r4, #16]
 800c24a:	4650      	mov	r0, sl
 800c24c:	f7ff fec6 	bl	800bfdc <_free_r>
 800c250:	e7c7      	b.n	800c1e2 <__ssputs_r+0x46>
	...

0800c254 <_svfiprintf_r>:
 800c254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c258:	4698      	mov	r8, r3
 800c25a:	898b      	ldrh	r3, [r1, #12]
 800c25c:	061b      	lsls	r3, r3, #24
 800c25e:	b09d      	sub	sp, #116	; 0x74
 800c260:	4607      	mov	r7, r0
 800c262:	460d      	mov	r5, r1
 800c264:	4614      	mov	r4, r2
 800c266:	d50e      	bpl.n	800c286 <_svfiprintf_r+0x32>
 800c268:	690b      	ldr	r3, [r1, #16]
 800c26a:	b963      	cbnz	r3, 800c286 <_svfiprintf_r+0x32>
 800c26c:	2140      	movs	r1, #64	; 0x40
 800c26e:	f7ff ff21 	bl	800c0b4 <_malloc_r>
 800c272:	6028      	str	r0, [r5, #0]
 800c274:	6128      	str	r0, [r5, #16]
 800c276:	b920      	cbnz	r0, 800c282 <_svfiprintf_r+0x2e>
 800c278:	230c      	movs	r3, #12
 800c27a:	603b      	str	r3, [r7, #0]
 800c27c:	f04f 30ff 	mov.w	r0, #4294967295
 800c280:	e0d1      	b.n	800c426 <_svfiprintf_r+0x1d2>
 800c282:	2340      	movs	r3, #64	; 0x40
 800c284:	616b      	str	r3, [r5, #20]
 800c286:	2300      	movs	r3, #0
 800c288:	9309      	str	r3, [sp, #36]	; 0x24
 800c28a:	2320      	movs	r3, #32
 800c28c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c290:	f8cd 800c 	str.w	r8, [sp, #12]
 800c294:	2330      	movs	r3, #48	; 0x30
 800c296:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c440 <_svfiprintf_r+0x1ec>
 800c29a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c29e:	f04f 0901 	mov.w	r9, #1
 800c2a2:	4623      	mov	r3, r4
 800c2a4:	469a      	mov	sl, r3
 800c2a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2aa:	b10a      	cbz	r2, 800c2b0 <_svfiprintf_r+0x5c>
 800c2ac:	2a25      	cmp	r2, #37	; 0x25
 800c2ae:	d1f9      	bne.n	800c2a4 <_svfiprintf_r+0x50>
 800c2b0:	ebba 0b04 	subs.w	fp, sl, r4
 800c2b4:	d00b      	beq.n	800c2ce <_svfiprintf_r+0x7a>
 800c2b6:	465b      	mov	r3, fp
 800c2b8:	4622      	mov	r2, r4
 800c2ba:	4629      	mov	r1, r5
 800c2bc:	4638      	mov	r0, r7
 800c2be:	f7ff ff6d 	bl	800c19c <__ssputs_r>
 800c2c2:	3001      	adds	r0, #1
 800c2c4:	f000 80aa 	beq.w	800c41c <_svfiprintf_r+0x1c8>
 800c2c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2ca:	445a      	add	r2, fp
 800c2cc:	9209      	str	r2, [sp, #36]	; 0x24
 800c2ce:	f89a 3000 	ldrb.w	r3, [sl]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	f000 80a2 	beq.w	800c41c <_svfiprintf_r+0x1c8>
 800c2d8:	2300      	movs	r3, #0
 800c2da:	f04f 32ff 	mov.w	r2, #4294967295
 800c2de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2e2:	f10a 0a01 	add.w	sl, sl, #1
 800c2e6:	9304      	str	r3, [sp, #16]
 800c2e8:	9307      	str	r3, [sp, #28]
 800c2ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c2ee:	931a      	str	r3, [sp, #104]	; 0x68
 800c2f0:	4654      	mov	r4, sl
 800c2f2:	2205      	movs	r2, #5
 800c2f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2f8:	4851      	ldr	r0, [pc, #324]	; (800c440 <_svfiprintf_r+0x1ec>)
 800c2fa:	f7f3 ff71 	bl	80001e0 <memchr>
 800c2fe:	9a04      	ldr	r2, [sp, #16]
 800c300:	b9d8      	cbnz	r0, 800c33a <_svfiprintf_r+0xe6>
 800c302:	06d0      	lsls	r0, r2, #27
 800c304:	bf44      	itt	mi
 800c306:	2320      	movmi	r3, #32
 800c308:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c30c:	0711      	lsls	r1, r2, #28
 800c30e:	bf44      	itt	mi
 800c310:	232b      	movmi	r3, #43	; 0x2b
 800c312:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c316:	f89a 3000 	ldrb.w	r3, [sl]
 800c31a:	2b2a      	cmp	r3, #42	; 0x2a
 800c31c:	d015      	beq.n	800c34a <_svfiprintf_r+0xf6>
 800c31e:	9a07      	ldr	r2, [sp, #28]
 800c320:	4654      	mov	r4, sl
 800c322:	2000      	movs	r0, #0
 800c324:	f04f 0c0a 	mov.w	ip, #10
 800c328:	4621      	mov	r1, r4
 800c32a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c32e:	3b30      	subs	r3, #48	; 0x30
 800c330:	2b09      	cmp	r3, #9
 800c332:	d94e      	bls.n	800c3d2 <_svfiprintf_r+0x17e>
 800c334:	b1b0      	cbz	r0, 800c364 <_svfiprintf_r+0x110>
 800c336:	9207      	str	r2, [sp, #28]
 800c338:	e014      	b.n	800c364 <_svfiprintf_r+0x110>
 800c33a:	eba0 0308 	sub.w	r3, r0, r8
 800c33e:	fa09 f303 	lsl.w	r3, r9, r3
 800c342:	4313      	orrs	r3, r2
 800c344:	9304      	str	r3, [sp, #16]
 800c346:	46a2      	mov	sl, r4
 800c348:	e7d2      	b.n	800c2f0 <_svfiprintf_r+0x9c>
 800c34a:	9b03      	ldr	r3, [sp, #12]
 800c34c:	1d19      	adds	r1, r3, #4
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	9103      	str	r1, [sp, #12]
 800c352:	2b00      	cmp	r3, #0
 800c354:	bfbb      	ittet	lt
 800c356:	425b      	neglt	r3, r3
 800c358:	f042 0202 	orrlt.w	r2, r2, #2
 800c35c:	9307      	strge	r3, [sp, #28]
 800c35e:	9307      	strlt	r3, [sp, #28]
 800c360:	bfb8      	it	lt
 800c362:	9204      	strlt	r2, [sp, #16]
 800c364:	7823      	ldrb	r3, [r4, #0]
 800c366:	2b2e      	cmp	r3, #46	; 0x2e
 800c368:	d10c      	bne.n	800c384 <_svfiprintf_r+0x130>
 800c36a:	7863      	ldrb	r3, [r4, #1]
 800c36c:	2b2a      	cmp	r3, #42	; 0x2a
 800c36e:	d135      	bne.n	800c3dc <_svfiprintf_r+0x188>
 800c370:	9b03      	ldr	r3, [sp, #12]
 800c372:	1d1a      	adds	r2, r3, #4
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	9203      	str	r2, [sp, #12]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	bfb8      	it	lt
 800c37c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c380:	3402      	adds	r4, #2
 800c382:	9305      	str	r3, [sp, #20]
 800c384:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c450 <_svfiprintf_r+0x1fc>
 800c388:	7821      	ldrb	r1, [r4, #0]
 800c38a:	2203      	movs	r2, #3
 800c38c:	4650      	mov	r0, sl
 800c38e:	f7f3 ff27 	bl	80001e0 <memchr>
 800c392:	b140      	cbz	r0, 800c3a6 <_svfiprintf_r+0x152>
 800c394:	2340      	movs	r3, #64	; 0x40
 800c396:	eba0 000a 	sub.w	r0, r0, sl
 800c39a:	fa03 f000 	lsl.w	r0, r3, r0
 800c39e:	9b04      	ldr	r3, [sp, #16]
 800c3a0:	4303      	orrs	r3, r0
 800c3a2:	3401      	adds	r4, #1
 800c3a4:	9304      	str	r3, [sp, #16]
 800c3a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3aa:	4826      	ldr	r0, [pc, #152]	; (800c444 <_svfiprintf_r+0x1f0>)
 800c3ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c3b0:	2206      	movs	r2, #6
 800c3b2:	f7f3 ff15 	bl	80001e0 <memchr>
 800c3b6:	2800      	cmp	r0, #0
 800c3b8:	d038      	beq.n	800c42c <_svfiprintf_r+0x1d8>
 800c3ba:	4b23      	ldr	r3, [pc, #140]	; (800c448 <_svfiprintf_r+0x1f4>)
 800c3bc:	bb1b      	cbnz	r3, 800c406 <_svfiprintf_r+0x1b2>
 800c3be:	9b03      	ldr	r3, [sp, #12]
 800c3c0:	3307      	adds	r3, #7
 800c3c2:	f023 0307 	bic.w	r3, r3, #7
 800c3c6:	3308      	adds	r3, #8
 800c3c8:	9303      	str	r3, [sp, #12]
 800c3ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3cc:	4433      	add	r3, r6
 800c3ce:	9309      	str	r3, [sp, #36]	; 0x24
 800c3d0:	e767      	b.n	800c2a2 <_svfiprintf_r+0x4e>
 800c3d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3d6:	460c      	mov	r4, r1
 800c3d8:	2001      	movs	r0, #1
 800c3da:	e7a5      	b.n	800c328 <_svfiprintf_r+0xd4>
 800c3dc:	2300      	movs	r3, #0
 800c3de:	3401      	adds	r4, #1
 800c3e0:	9305      	str	r3, [sp, #20]
 800c3e2:	4619      	mov	r1, r3
 800c3e4:	f04f 0c0a 	mov.w	ip, #10
 800c3e8:	4620      	mov	r0, r4
 800c3ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3ee:	3a30      	subs	r2, #48	; 0x30
 800c3f0:	2a09      	cmp	r2, #9
 800c3f2:	d903      	bls.n	800c3fc <_svfiprintf_r+0x1a8>
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d0c5      	beq.n	800c384 <_svfiprintf_r+0x130>
 800c3f8:	9105      	str	r1, [sp, #20]
 800c3fa:	e7c3      	b.n	800c384 <_svfiprintf_r+0x130>
 800c3fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800c400:	4604      	mov	r4, r0
 800c402:	2301      	movs	r3, #1
 800c404:	e7f0      	b.n	800c3e8 <_svfiprintf_r+0x194>
 800c406:	ab03      	add	r3, sp, #12
 800c408:	9300      	str	r3, [sp, #0]
 800c40a:	462a      	mov	r2, r5
 800c40c:	4b0f      	ldr	r3, [pc, #60]	; (800c44c <_svfiprintf_r+0x1f8>)
 800c40e:	a904      	add	r1, sp, #16
 800c410:	4638      	mov	r0, r7
 800c412:	f7fb feeb 	bl	80081ec <_printf_float>
 800c416:	1c42      	adds	r2, r0, #1
 800c418:	4606      	mov	r6, r0
 800c41a:	d1d6      	bne.n	800c3ca <_svfiprintf_r+0x176>
 800c41c:	89ab      	ldrh	r3, [r5, #12]
 800c41e:	065b      	lsls	r3, r3, #25
 800c420:	f53f af2c 	bmi.w	800c27c <_svfiprintf_r+0x28>
 800c424:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c426:	b01d      	add	sp, #116	; 0x74
 800c428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c42c:	ab03      	add	r3, sp, #12
 800c42e:	9300      	str	r3, [sp, #0]
 800c430:	462a      	mov	r2, r5
 800c432:	4b06      	ldr	r3, [pc, #24]	; (800c44c <_svfiprintf_r+0x1f8>)
 800c434:	a904      	add	r1, sp, #16
 800c436:	4638      	mov	r0, r7
 800c438:	f7fc f97c 	bl	8008734 <_printf_i>
 800c43c:	e7eb      	b.n	800c416 <_svfiprintf_r+0x1c2>
 800c43e:	bf00      	nop
 800c440:	0800d034 	.word	0x0800d034
 800c444:	0800d03e 	.word	0x0800d03e
 800c448:	080081ed 	.word	0x080081ed
 800c44c:	0800c19d 	.word	0x0800c19d
 800c450:	0800d03a 	.word	0x0800d03a

0800c454 <__sfputc_r>:
 800c454:	6893      	ldr	r3, [r2, #8]
 800c456:	3b01      	subs	r3, #1
 800c458:	2b00      	cmp	r3, #0
 800c45a:	b410      	push	{r4}
 800c45c:	6093      	str	r3, [r2, #8]
 800c45e:	da08      	bge.n	800c472 <__sfputc_r+0x1e>
 800c460:	6994      	ldr	r4, [r2, #24]
 800c462:	42a3      	cmp	r3, r4
 800c464:	db01      	blt.n	800c46a <__sfputc_r+0x16>
 800c466:	290a      	cmp	r1, #10
 800c468:	d103      	bne.n	800c472 <__sfputc_r+0x1e>
 800c46a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c46e:	f7fd bbf7 	b.w	8009c60 <__swbuf_r>
 800c472:	6813      	ldr	r3, [r2, #0]
 800c474:	1c58      	adds	r0, r3, #1
 800c476:	6010      	str	r0, [r2, #0]
 800c478:	7019      	strb	r1, [r3, #0]
 800c47a:	4608      	mov	r0, r1
 800c47c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c480:	4770      	bx	lr

0800c482 <__sfputs_r>:
 800c482:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c484:	4606      	mov	r6, r0
 800c486:	460f      	mov	r7, r1
 800c488:	4614      	mov	r4, r2
 800c48a:	18d5      	adds	r5, r2, r3
 800c48c:	42ac      	cmp	r4, r5
 800c48e:	d101      	bne.n	800c494 <__sfputs_r+0x12>
 800c490:	2000      	movs	r0, #0
 800c492:	e007      	b.n	800c4a4 <__sfputs_r+0x22>
 800c494:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c498:	463a      	mov	r2, r7
 800c49a:	4630      	mov	r0, r6
 800c49c:	f7ff ffda 	bl	800c454 <__sfputc_r>
 800c4a0:	1c43      	adds	r3, r0, #1
 800c4a2:	d1f3      	bne.n	800c48c <__sfputs_r+0xa>
 800c4a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c4a8 <_vfiprintf_r>:
 800c4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ac:	460d      	mov	r5, r1
 800c4ae:	b09d      	sub	sp, #116	; 0x74
 800c4b0:	4614      	mov	r4, r2
 800c4b2:	4698      	mov	r8, r3
 800c4b4:	4606      	mov	r6, r0
 800c4b6:	b118      	cbz	r0, 800c4c0 <_vfiprintf_r+0x18>
 800c4b8:	6983      	ldr	r3, [r0, #24]
 800c4ba:	b90b      	cbnz	r3, 800c4c0 <_vfiprintf_r+0x18>
 800c4bc:	f7fe fc24 	bl	800ad08 <__sinit>
 800c4c0:	4b89      	ldr	r3, [pc, #548]	; (800c6e8 <_vfiprintf_r+0x240>)
 800c4c2:	429d      	cmp	r5, r3
 800c4c4:	d11b      	bne.n	800c4fe <_vfiprintf_r+0x56>
 800c4c6:	6875      	ldr	r5, [r6, #4]
 800c4c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c4ca:	07d9      	lsls	r1, r3, #31
 800c4cc:	d405      	bmi.n	800c4da <_vfiprintf_r+0x32>
 800c4ce:	89ab      	ldrh	r3, [r5, #12]
 800c4d0:	059a      	lsls	r2, r3, #22
 800c4d2:	d402      	bmi.n	800c4da <_vfiprintf_r+0x32>
 800c4d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c4d6:	f7ff f828 	bl	800b52a <__retarget_lock_acquire_recursive>
 800c4da:	89ab      	ldrh	r3, [r5, #12]
 800c4dc:	071b      	lsls	r3, r3, #28
 800c4de:	d501      	bpl.n	800c4e4 <_vfiprintf_r+0x3c>
 800c4e0:	692b      	ldr	r3, [r5, #16]
 800c4e2:	b9eb      	cbnz	r3, 800c520 <_vfiprintf_r+0x78>
 800c4e4:	4629      	mov	r1, r5
 800c4e6:	4630      	mov	r0, r6
 800c4e8:	f7fd fc0c 	bl	8009d04 <__swsetup_r>
 800c4ec:	b1c0      	cbz	r0, 800c520 <_vfiprintf_r+0x78>
 800c4ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c4f0:	07dc      	lsls	r4, r3, #31
 800c4f2:	d50e      	bpl.n	800c512 <_vfiprintf_r+0x6a>
 800c4f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c4f8:	b01d      	add	sp, #116	; 0x74
 800c4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4fe:	4b7b      	ldr	r3, [pc, #492]	; (800c6ec <_vfiprintf_r+0x244>)
 800c500:	429d      	cmp	r5, r3
 800c502:	d101      	bne.n	800c508 <_vfiprintf_r+0x60>
 800c504:	68b5      	ldr	r5, [r6, #8]
 800c506:	e7df      	b.n	800c4c8 <_vfiprintf_r+0x20>
 800c508:	4b79      	ldr	r3, [pc, #484]	; (800c6f0 <_vfiprintf_r+0x248>)
 800c50a:	429d      	cmp	r5, r3
 800c50c:	bf08      	it	eq
 800c50e:	68f5      	ldreq	r5, [r6, #12]
 800c510:	e7da      	b.n	800c4c8 <_vfiprintf_r+0x20>
 800c512:	89ab      	ldrh	r3, [r5, #12]
 800c514:	0598      	lsls	r0, r3, #22
 800c516:	d4ed      	bmi.n	800c4f4 <_vfiprintf_r+0x4c>
 800c518:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c51a:	f7ff f807 	bl	800b52c <__retarget_lock_release_recursive>
 800c51e:	e7e9      	b.n	800c4f4 <_vfiprintf_r+0x4c>
 800c520:	2300      	movs	r3, #0
 800c522:	9309      	str	r3, [sp, #36]	; 0x24
 800c524:	2320      	movs	r3, #32
 800c526:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c52a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c52e:	2330      	movs	r3, #48	; 0x30
 800c530:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c6f4 <_vfiprintf_r+0x24c>
 800c534:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c538:	f04f 0901 	mov.w	r9, #1
 800c53c:	4623      	mov	r3, r4
 800c53e:	469a      	mov	sl, r3
 800c540:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c544:	b10a      	cbz	r2, 800c54a <_vfiprintf_r+0xa2>
 800c546:	2a25      	cmp	r2, #37	; 0x25
 800c548:	d1f9      	bne.n	800c53e <_vfiprintf_r+0x96>
 800c54a:	ebba 0b04 	subs.w	fp, sl, r4
 800c54e:	d00b      	beq.n	800c568 <_vfiprintf_r+0xc0>
 800c550:	465b      	mov	r3, fp
 800c552:	4622      	mov	r2, r4
 800c554:	4629      	mov	r1, r5
 800c556:	4630      	mov	r0, r6
 800c558:	f7ff ff93 	bl	800c482 <__sfputs_r>
 800c55c:	3001      	adds	r0, #1
 800c55e:	f000 80aa 	beq.w	800c6b6 <_vfiprintf_r+0x20e>
 800c562:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c564:	445a      	add	r2, fp
 800c566:	9209      	str	r2, [sp, #36]	; 0x24
 800c568:	f89a 3000 	ldrb.w	r3, [sl]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	f000 80a2 	beq.w	800c6b6 <_vfiprintf_r+0x20e>
 800c572:	2300      	movs	r3, #0
 800c574:	f04f 32ff 	mov.w	r2, #4294967295
 800c578:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c57c:	f10a 0a01 	add.w	sl, sl, #1
 800c580:	9304      	str	r3, [sp, #16]
 800c582:	9307      	str	r3, [sp, #28]
 800c584:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c588:	931a      	str	r3, [sp, #104]	; 0x68
 800c58a:	4654      	mov	r4, sl
 800c58c:	2205      	movs	r2, #5
 800c58e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c592:	4858      	ldr	r0, [pc, #352]	; (800c6f4 <_vfiprintf_r+0x24c>)
 800c594:	f7f3 fe24 	bl	80001e0 <memchr>
 800c598:	9a04      	ldr	r2, [sp, #16]
 800c59a:	b9d8      	cbnz	r0, 800c5d4 <_vfiprintf_r+0x12c>
 800c59c:	06d1      	lsls	r1, r2, #27
 800c59e:	bf44      	itt	mi
 800c5a0:	2320      	movmi	r3, #32
 800c5a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5a6:	0713      	lsls	r3, r2, #28
 800c5a8:	bf44      	itt	mi
 800c5aa:	232b      	movmi	r3, #43	; 0x2b
 800c5ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5b0:	f89a 3000 	ldrb.w	r3, [sl]
 800c5b4:	2b2a      	cmp	r3, #42	; 0x2a
 800c5b6:	d015      	beq.n	800c5e4 <_vfiprintf_r+0x13c>
 800c5b8:	9a07      	ldr	r2, [sp, #28]
 800c5ba:	4654      	mov	r4, sl
 800c5bc:	2000      	movs	r0, #0
 800c5be:	f04f 0c0a 	mov.w	ip, #10
 800c5c2:	4621      	mov	r1, r4
 800c5c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5c8:	3b30      	subs	r3, #48	; 0x30
 800c5ca:	2b09      	cmp	r3, #9
 800c5cc:	d94e      	bls.n	800c66c <_vfiprintf_r+0x1c4>
 800c5ce:	b1b0      	cbz	r0, 800c5fe <_vfiprintf_r+0x156>
 800c5d0:	9207      	str	r2, [sp, #28]
 800c5d2:	e014      	b.n	800c5fe <_vfiprintf_r+0x156>
 800c5d4:	eba0 0308 	sub.w	r3, r0, r8
 800c5d8:	fa09 f303 	lsl.w	r3, r9, r3
 800c5dc:	4313      	orrs	r3, r2
 800c5de:	9304      	str	r3, [sp, #16]
 800c5e0:	46a2      	mov	sl, r4
 800c5e2:	e7d2      	b.n	800c58a <_vfiprintf_r+0xe2>
 800c5e4:	9b03      	ldr	r3, [sp, #12]
 800c5e6:	1d19      	adds	r1, r3, #4
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	9103      	str	r1, [sp, #12]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	bfbb      	ittet	lt
 800c5f0:	425b      	neglt	r3, r3
 800c5f2:	f042 0202 	orrlt.w	r2, r2, #2
 800c5f6:	9307      	strge	r3, [sp, #28]
 800c5f8:	9307      	strlt	r3, [sp, #28]
 800c5fa:	bfb8      	it	lt
 800c5fc:	9204      	strlt	r2, [sp, #16]
 800c5fe:	7823      	ldrb	r3, [r4, #0]
 800c600:	2b2e      	cmp	r3, #46	; 0x2e
 800c602:	d10c      	bne.n	800c61e <_vfiprintf_r+0x176>
 800c604:	7863      	ldrb	r3, [r4, #1]
 800c606:	2b2a      	cmp	r3, #42	; 0x2a
 800c608:	d135      	bne.n	800c676 <_vfiprintf_r+0x1ce>
 800c60a:	9b03      	ldr	r3, [sp, #12]
 800c60c:	1d1a      	adds	r2, r3, #4
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	9203      	str	r2, [sp, #12]
 800c612:	2b00      	cmp	r3, #0
 800c614:	bfb8      	it	lt
 800c616:	f04f 33ff 	movlt.w	r3, #4294967295
 800c61a:	3402      	adds	r4, #2
 800c61c:	9305      	str	r3, [sp, #20]
 800c61e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c704 <_vfiprintf_r+0x25c>
 800c622:	7821      	ldrb	r1, [r4, #0]
 800c624:	2203      	movs	r2, #3
 800c626:	4650      	mov	r0, sl
 800c628:	f7f3 fdda 	bl	80001e0 <memchr>
 800c62c:	b140      	cbz	r0, 800c640 <_vfiprintf_r+0x198>
 800c62e:	2340      	movs	r3, #64	; 0x40
 800c630:	eba0 000a 	sub.w	r0, r0, sl
 800c634:	fa03 f000 	lsl.w	r0, r3, r0
 800c638:	9b04      	ldr	r3, [sp, #16]
 800c63a:	4303      	orrs	r3, r0
 800c63c:	3401      	adds	r4, #1
 800c63e:	9304      	str	r3, [sp, #16]
 800c640:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c644:	482c      	ldr	r0, [pc, #176]	; (800c6f8 <_vfiprintf_r+0x250>)
 800c646:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c64a:	2206      	movs	r2, #6
 800c64c:	f7f3 fdc8 	bl	80001e0 <memchr>
 800c650:	2800      	cmp	r0, #0
 800c652:	d03f      	beq.n	800c6d4 <_vfiprintf_r+0x22c>
 800c654:	4b29      	ldr	r3, [pc, #164]	; (800c6fc <_vfiprintf_r+0x254>)
 800c656:	bb1b      	cbnz	r3, 800c6a0 <_vfiprintf_r+0x1f8>
 800c658:	9b03      	ldr	r3, [sp, #12]
 800c65a:	3307      	adds	r3, #7
 800c65c:	f023 0307 	bic.w	r3, r3, #7
 800c660:	3308      	adds	r3, #8
 800c662:	9303      	str	r3, [sp, #12]
 800c664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c666:	443b      	add	r3, r7
 800c668:	9309      	str	r3, [sp, #36]	; 0x24
 800c66a:	e767      	b.n	800c53c <_vfiprintf_r+0x94>
 800c66c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c670:	460c      	mov	r4, r1
 800c672:	2001      	movs	r0, #1
 800c674:	e7a5      	b.n	800c5c2 <_vfiprintf_r+0x11a>
 800c676:	2300      	movs	r3, #0
 800c678:	3401      	adds	r4, #1
 800c67a:	9305      	str	r3, [sp, #20]
 800c67c:	4619      	mov	r1, r3
 800c67e:	f04f 0c0a 	mov.w	ip, #10
 800c682:	4620      	mov	r0, r4
 800c684:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c688:	3a30      	subs	r2, #48	; 0x30
 800c68a:	2a09      	cmp	r2, #9
 800c68c:	d903      	bls.n	800c696 <_vfiprintf_r+0x1ee>
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d0c5      	beq.n	800c61e <_vfiprintf_r+0x176>
 800c692:	9105      	str	r1, [sp, #20]
 800c694:	e7c3      	b.n	800c61e <_vfiprintf_r+0x176>
 800c696:	fb0c 2101 	mla	r1, ip, r1, r2
 800c69a:	4604      	mov	r4, r0
 800c69c:	2301      	movs	r3, #1
 800c69e:	e7f0      	b.n	800c682 <_vfiprintf_r+0x1da>
 800c6a0:	ab03      	add	r3, sp, #12
 800c6a2:	9300      	str	r3, [sp, #0]
 800c6a4:	462a      	mov	r2, r5
 800c6a6:	4b16      	ldr	r3, [pc, #88]	; (800c700 <_vfiprintf_r+0x258>)
 800c6a8:	a904      	add	r1, sp, #16
 800c6aa:	4630      	mov	r0, r6
 800c6ac:	f7fb fd9e 	bl	80081ec <_printf_float>
 800c6b0:	4607      	mov	r7, r0
 800c6b2:	1c78      	adds	r0, r7, #1
 800c6b4:	d1d6      	bne.n	800c664 <_vfiprintf_r+0x1bc>
 800c6b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6b8:	07d9      	lsls	r1, r3, #31
 800c6ba:	d405      	bmi.n	800c6c8 <_vfiprintf_r+0x220>
 800c6bc:	89ab      	ldrh	r3, [r5, #12]
 800c6be:	059a      	lsls	r2, r3, #22
 800c6c0:	d402      	bmi.n	800c6c8 <_vfiprintf_r+0x220>
 800c6c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6c4:	f7fe ff32 	bl	800b52c <__retarget_lock_release_recursive>
 800c6c8:	89ab      	ldrh	r3, [r5, #12]
 800c6ca:	065b      	lsls	r3, r3, #25
 800c6cc:	f53f af12 	bmi.w	800c4f4 <_vfiprintf_r+0x4c>
 800c6d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c6d2:	e711      	b.n	800c4f8 <_vfiprintf_r+0x50>
 800c6d4:	ab03      	add	r3, sp, #12
 800c6d6:	9300      	str	r3, [sp, #0]
 800c6d8:	462a      	mov	r2, r5
 800c6da:	4b09      	ldr	r3, [pc, #36]	; (800c700 <_vfiprintf_r+0x258>)
 800c6dc:	a904      	add	r1, sp, #16
 800c6de:	4630      	mov	r0, r6
 800c6e0:	f7fc f828 	bl	8008734 <_printf_i>
 800c6e4:	e7e4      	b.n	800c6b0 <_vfiprintf_r+0x208>
 800c6e6:	bf00      	nop
 800c6e8:	0800ce1c 	.word	0x0800ce1c
 800c6ec:	0800ce3c 	.word	0x0800ce3c
 800c6f0:	0800cdfc 	.word	0x0800cdfc
 800c6f4:	0800d034 	.word	0x0800d034
 800c6f8:	0800d03e 	.word	0x0800d03e
 800c6fc:	080081ed 	.word	0x080081ed
 800c700:	0800c483 	.word	0x0800c483
 800c704:	0800d03a 	.word	0x0800d03a

0800c708 <nan>:
 800c708:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c710 <nan+0x8>
 800c70c:	4770      	bx	lr
 800c70e:	bf00      	nop
 800c710:	00000000 	.word	0x00000000
 800c714:	7ff80000 	.word	0x7ff80000

0800c718 <_sbrk_r>:
 800c718:	b538      	push	{r3, r4, r5, lr}
 800c71a:	4d06      	ldr	r5, [pc, #24]	; (800c734 <_sbrk_r+0x1c>)
 800c71c:	2300      	movs	r3, #0
 800c71e:	4604      	mov	r4, r0
 800c720:	4608      	mov	r0, r1
 800c722:	602b      	str	r3, [r5, #0]
 800c724:	f7f5 fb2e 	bl	8001d84 <_sbrk>
 800c728:	1c43      	adds	r3, r0, #1
 800c72a:	d102      	bne.n	800c732 <_sbrk_r+0x1a>
 800c72c:	682b      	ldr	r3, [r5, #0]
 800c72e:	b103      	cbz	r3, 800c732 <_sbrk_r+0x1a>
 800c730:	6023      	str	r3, [r4, #0]
 800c732:	bd38      	pop	{r3, r4, r5, pc}
 800c734:	2000042c 	.word	0x2000042c

0800c738 <__sread>:
 800c738:	b510      	push	{r4, lr}
 800c73a:	460c      	mov	r4, r1
 800c73c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c740:	f000 f93a 	bl	800c9b8 <_read_r>
 800c744:	2800      	cmp	r0, #0
 800c746:	bfab      	itete	ge
 800c748:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c74a:	89a3      	ldrhlt	r3, [r4, #12]
 800c74c:	181b      	addge	r3, r3, r0
 800c74e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c752:	bfac      	ite	ge
 800c754:	6563      	strge	r3, [r4, #84]	; 0x54
 800c756:	81a3      	strhlt	r3, [r4, #12]
 800c758:	bd10      	pop	{r4, pc}

0800c75a <__swrite>:
 800c75a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c75e:	461f      	mov	r7, r3
 800c760:	898b      	ldrh	r3, [r1, #12]
 800c762:	05db      	lsls	r3, r3, #23
 800c764:	4605      	mov	r5, r0
 800c766:	460c      	mov	r4, r1
 800c768:	4616      	mov	r6, r2
 800c76a:	d505      	bpl.n	800c778 <__swrite+0x1e>
 800c76c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c770:	2302      	movs	r3, #2
 800c772:	2200      	movs	r2, #0
 800c774:	f000 f8b8 	bl	800c8e8 <_lseek_r>
 800c778:	89a3      	ldrh	r3, [r4, #12]
 800c77a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c77e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c782:	81a3      	strh	r3, [r4, #12]
 800c784:	4632      	mov	r2, r6
 800c786:	463b      	mov	r3, r7
 800c788:	4628      	mov	r0, r5
 800c78a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c78e:	f000 b837 	b.w	800c800 <_write_r>

0800c792 <__sseek>:
 800c792:	b510      	push	{r4, lr}
 800c794:	460c      	mov	r4, r1
 800c796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c79a:	f000 f8a5 	bl	800c8e8 <_lseek_r>
 800c79e:	1c43      	adds	r3, r0, #1
 800c7a0:	89a3      	ldrh	r3, [r4, #12]
 800c7a2:	bf15      	itete	ne
 800c7a4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c7a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c7aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c7ae:	81a3      	strheq	r3, [r4, #12]
 800c7b0:	bf18      	it	ne
 800c7b2:	81a3      	strhne	r3, [r4, #12]
 800c7b4:	bd10      	pop	{r4, pc}

0800c7b6 <__sclose>:
 800c7b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7ba:	f000 b851 	b.w	800c860 <_close_r>

0800c7be <strncmp>:
 800c7be:	b510      	push	{r4, lr}
 800c7c0:	b17a      	cbz	r2, 800c7e2 <strncmp+0x24>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	3901      	subs	r1, #1
 800c7c6:	1884      	adds	r4, r0, r2
 800c7c8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c7cc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c7d0:	4290      	cmp	r0, r2
 800c7d2:	d101      	bne.n	800c7d8 <strncmp+0x1a>
 800c7d4:	42a3      	cmp	r3, r4
 800c7d6:	d101      	bne.n	800c7dc <strncmp+0x1e>
 800c7d8:	1a80      	subs	r0, r0, r2
 800c7da:	bd10      	pop	{r4, pc}
 800c7dc:	2800      	cmp	r0, #0
 800c7de:	d1f3      	bne.n	800c7c8 <strncmp+0xa>
 800c7e0:	e7fa      	b.n	800c7d8 <strncmp+0x1a>
 800c7e2:	4610      	mov	r0, r2
 800c7e4:	e7f9      	b.n	800c7da <strncmp+0x1c>

0800c7e6 <__ascii_wctomb>:
 800c7e6:	b149      	cbz	r1, 800c7fc <__ascii_wctomb+0x16>
 800c7e8:	2aff      	cmp	r2, #255	; 0xff
 800c7ea:	bf85      	ittet	hi
 800c7ec:	238a      	movhi	r3, #138	; 0x8a
 800c7ee:	6003      	strhi	r3, [r0, #0]
 800c7f0:	700a      	strbls	r2, [r1, #0]
 800c7f2:	f04f 30ff 	movhi.w	r0, #4294967295
 800c7f6:	bf98      	it	ls
 800c7f8:	2001      	movls	r0, #1
 800c7fa:	4770      	bx	lr
 800c7fc:	4608      	mov	r0, r1
 800c7fe:	4770      	bx	lr

0800c800 <_write_r>:
 800c800:	b538      	push	{r3, r4, r5, lr}
 800c802:	4d07      	ldr	r5, [pc, #28]	; (800c820 <_write_r+0x20>)
 800c804:	4604      	mov	r4, r0
 800c806:	4608      	mov	r0, r1
 800c808:	4611      	mov	r1, r2
 800c80a:	2200      	movs	r2, #0
 800c80c:	602a      	str	r2, [r5, #0]
 800c80e:	461a      	mov	r2, r3
 800c810:	f7f4 fbf2 	bl	8000ff8 <_write>
 800c814:	1c43      	adds	r3, r0, #1
 800c816:	d102      	bne.n	800c81e <_write_r+0x1e>
 800c818:	682b      	ldr	r3, [r5, #0]
 800c81a:	b103      	cbz	r3, 800c81e <_write_r+0x1e>
 800c81c:	6023      	str	r3, [r4, #0]
 800c81e:	bd38      	pop	{r3, r4, r5, pc}
 800c820:	2000042c 	.word	0x2000042c

0800c824 <__assert_func>:
 800c824:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c826:	4614      	mov	r4, r2
 800c828:	461a      	mov	r2, r3
 800c82a:	4b09      	ldr	r3, [pc, #36]	; (800c850 <__assert_func+0x2c>)
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	4605      	mov	r5, r0
 800c830:	68d8      	ldr	r0, [r3, #12]
 800c832:	b14c      	cbz	r4, 800c848 <__assert_func+0x24>
 800c834:	4b07      	ldr	r3, [pc, #28]	; (800c854 <__assert_func+0x30>)
 800c836:	9100      	str	r1, [sp, #0]
 800c838:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c83c:	4906      	ldr	r1, [pc, #24]	; (800c858 <__assert_func+0x34>)
 800c83e:	462b      	mov	r3, r5
 800c840:	f000 f81e 	bl	800c880 <fiprintf>
 800c844:	f000 f8ca 	bl	800c9dc <abort>
 800c848:	4b04      	ldr	r3, [pc, #16]	; (800c85c <__assert_func+0x38>)
 800c84a:	461c      	mov	r4, r3
 800c84c:	e7f3      	b.n	800c836 <__assert_func+0x12>
 800c84e:	bf00      	nop
 800c850:	20000014 	.word	0x20000014
 800c854:	0800d045 	.word	0x0800d045
 800c858:	0800d052 	.word	0x0800d052
 800c85c:	0800d080 	.word	0x0800d080

0800c860 <_close_r>:
 800c860:	b538      	push	{r3, r4, r5, lr}
 800c862:	4d06      	ldr	r5, [pc, #24]	; (800c87c <_close_r+0x1c>)
 800c864:	2300      	movs	r3, #0
 800c866:	4604      	mov	r4, r0
 800c868:	4608      	mov	r0, r1
 800c86a:	602b      	str	r3, [r5, #0]
 800c86c:	f7f5 fa55 	bl	8001d1a <_close>
 800c870:	1c43      	adds	r3, r0, #1
 800c872:	d102      	bne.n	800c87a <_close_r+0x1a>
 800c874:	682b      	ldr	r3, [r5, #0]
 800c876:	b103      	cbz	r3, 800c87a <_close_r+0x1a>
 800c878:	6023      	str	r3, [r4, #0]
 800c87a:	bd38      	pop	{r3, r4, r5, pc}
 800c87c:	2000042c 	.word	0x2000042c

0800c880 <fiprintf>:
 800c880:	b40e      	push	{r1, r2, r3}
 800c882:	b503      	push	{r0, r1, lr}
 800c884:	4601      	mov	r1, r0
 800c886:	ab03      	add	r3, sp, #12
 800c888:	4805      	ldr	r0, [pc, #20]	; (800c8a0 <fiprintf+0x20>)
 800c88a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c88e:	6800      	ldr	r0, [r0, #0]
 800c890:	9301      	str	r3, [sp, #4]
 800c892:	f7ff fe09 	bl	800c4a8 <_vfiprintf_r>
 800c896:	b002      	add	sp, #8
 800c898:	f85d eb04 	ldr.w	lr, [sp], #4
 800c89c:	b003      	add	sp, #12
 800c89e:	4770      	bx	lr
 800c8a0:	20000014 	.word	0x20000014

0800c8a4 <_fstat_r>:
 800c8a4:	b538      	push	{r3, r4, r5, lr}
 800c8a6:	4d07      	ldr	r5, [pc, #28]	; (800c8c4 <_fstat_r+0x20>)
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	4604      	mov	r4, r0
 800c8ac:	4608      	mov	r0, r1
 800c8ae:	4611      	mov	r1, r2
 800c8b0:	602b      	str	r3, [r5, #0]
 800c8b2:	f7f5 fa3e 	bl	8001d32 <_fstat>
 800c8b6:	1c43      	adds	r3, r0, #1
 800c8b8:	d102      	bne.n	800c8c0 <_fstat_r+0x1c>
 800c8ba:	682b      	ldr	r3, [r5, #0]
 800c8bc:	b103      	cbz	r3, 800c8c0 <_fstat_r+0x1c>
 800c8be:	6023      	str	r3, [r4, #0]
 800c8c0:	bd38      	pop	{r3, r4, r5, pc}
 800c8c2:	bf00      	nop
 800c8c4:	2000042c 	.word	0x2000042c

0800c8c8 <_isatty_r>:
 800c8c8:	b538      	push	{r3, r4, r5, lr}
 800c8ca:	4d06      	ldr	r5, [pc, #24]	; (800c8e4 <_isatty_r+0x1c>)
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	4604      	mov	r4, r0
 800c8d0:	4608      	mov	r0, r1
 800c8d2:	602b      	str	r3, [r5, #0]
 800c8d4:	f7f5 fa3d 	bl	8001d52 <_isatty>
 800c8d8:	1c43      	adds	r3, r0, #1
 800c8da:	d102      	bne.n	800c8e2 <_isatty_r+0x1a>
 800c8dc:	682b      	ldr	r3, [r5, #0]
 800c8de:	b103      	cbz	r3, 800c8e2 <_isatty_r+0x1a>
 800c8e0:	6023      	str	r3, [r4, #0]
 800c8e2:	bd38      	pop	{r3, r4, r5, pc}
 800c8e4:	2000042c 	.word	0x2000042c

0800c8e8 <_lseek_r>:
 800c8e8:	b538      	push	{r3, r4, r5, lr}
 800c8ea:	4d07      	ldr	r5, [pc, #28]	; (800c908 <_lseek_r+0x20>)
 800c8ec:	4604      	mov	r4, r0
 800c8ee:	4608      	mov	r0, r1
 800c8f0:	4611      	mov	r1, r2
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	602a      	str	r2, [r5, #0]
 800c8f6:	461a      	mov	r2, r3
 800c8f8:	f7f5 fa36 	bl	8001d68 <_lseek>
 800c8fc:	1c43      	adds	r3, r0, #1
 800c8fe:	d102      	bne.n	800c906 <_lseek_r+0x1e>
 800c900:	682b      	ldr	r3, [r5, #0]
 800c902:	b103      	cbz	r3, 800c906 <_lseek_r+0x1e>
 800c904:	6023      	str	r3, [r4, #0]
 800c906:	bd38      	pop	{r3, r4, r5, pc}
 800c908:	2000042c 	.word	0x2000042c

0800c90c <memmove>:
 800c90c:	4288      	cmp	r0, r1
 800c90e:	b510      	push	{r4, lr}
 800c910:	eb01 0402 	add.w	r4, r1, r2
 800c914:	d902      	bls.n	800c91c <memmove+0x10>
 800c916:	4284      	cmp	r4, r0
 800c918:	4623      	mov	r3, r4
 800c91a:	d807      	bhi.n	800c92c <memmove+0x20>
 800c91c:	1e43      	subs	r3, r0, #1
 800c91e:	42a1      	cmp	r1, r4
 800c920:	d008      	beq.n	800c934 <memmove+0x28>
 800c922:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c926:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c92a:	e7f8      	b.n	800c91e <memmove+0x12>
 800c92c:	4402      	add	r2, r0
 800c92e:	4601      	mov	r1, r0
 800c930:	428a      	cmp	r2, r1
 800c932:	d100      	bne.n	800c936 <memmove+0x2a>
 800c934:	bd10      	pop	{r4, pc}
 800c936:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c93a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c93e:	e7f7      	b.n	800c930 <memmove+0x24>

0800c940 <__malloc_lock>:
 800c940:	4801      	ldr	r0, [pc, #4]	; (800c948 <__malloc_lock+0x8>)
 800c942:	f7fe bdf2 	b.w	800b52a <__retarget_lock_acquire_recursive>
 800c946:	bf00      	nop
 800c948:	20000420 	.word	0x20000420

0800c94c <__malloc_unlock>:
 800c94c:	4801      	ldr	r0, [pc, #4]	; (800c954 <__malloc_unlock+0x8>)
 800c94e:	f7fe bded 	b.w	800b52c <__retarget_lock_release_recursive>
 800c952:	bf00      	nop
 800c954:	20000420 	.word	0x20000420

0800c958 <_realloc_r>:
 800c958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c95c:	4680      	mov	r8, r0
 800c95e:	4614      	mov	r4, r2
 800c960:	460e      	mov	r6, r1
 800c962:	b921      	cbnz	r1, 800c96e <_realloc_r+0x16>
 800c964:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c968:	4611      	mov	r1, r2
 800c96a:	f7ff bba3 	b.w	800c0b4 <_malloc_r>
 800c96e:	b92a      	cbnz	r2, 800c97c <_realloc_r+0x24>
 800c970:	f7ff fb34 	bl	800bfdc <_free_r>
 800c974:	4625      	mov	r5, r4
 800c976:	4628      	mov	r0, r5
 800c978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c97c:	f000 f835 	bl	800c9ea <_malloc_usable_size_r>
 800c980:	4284      	cmp	r4, r0
 800c982:	4607      	mov	r7, r0
 800c984:	d802      	bhi.n	800c98c <_realloc_r+0x34>
 800c986:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c98a:	d812      	bhi.n	800c9b2 <_realloc_r+0x5a>
 800c98c:	4621      	mov	r1, r4
 800c98e:	4640      	mov	r0, r8
 800c990:	f7ff fb90 	bl	800c0b4 <_malloc_r>
 800c994:	4605      	mov	r5, r0
 800c996:	2800      	cmp	r0, #0
 800c998:	d0ed      	beq.n	800c976 <_realloc_r+0x1e>
 800c99a:	42bc      	cmp	r4, r7
 800c99c:	4622      	mov	r2, r4
 800c99e:	4631      	mov	r1, r6
 800c9a0:	bf28      	it	cs
 800c9a2:	463a      	movcs	r2, r7
 800c9a4:	f7fb fb6c 	bl	8008080 <memcpy>
 800c9a8:	4631      	mov	r1, r6
 800c9aa:	4640      	mov	r0, r8
 800c9ac:	f7ff fb16 	bl	800bfdc <_free_r>
 800c9b0:	e7e1      	b.n	800c976 <_realloc_r+0x1e>
 800c9b2:	4635      	mov	r5, r6
 800c9b4:	e7df      	b.n	800c976 <_realloc_r+0x1e>
	...

0800c9b8 <_read_r>:
 800c9b8:	b538      	push	{r3, r4, r5, lr}
 800c9ba:	4d07      	ldr	r5, [pc, #28]	; (800c9d8 <_read_r+0x20>)
 800c9bc:	4604      	mov	r4, r0
 800c9be:	4608      	mov	r0, r1
 800c9c0:	4611      	mov	r1, r2
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	602a      	str	r2, [r5, #0]
 800c9c6:	461a      	mov	r2, r3
 800c9c8:	f7f5 f98a 	bl	8001ce0 <_read>
 800c9cc:	1c43      	adds	r3, r0, #1
 800c9ce:	d102      	bne.n	800c9d6 <_read_r+0x1e>
 800c9d0:	682b      	ldr	r3, [r5, #0]
 800c9d2:	b103      	cbz	r3, 800c9d6 <_read_r+0x1e>
 800c9d4:	6023      	str	r3, [r4, #0]
 800c9d6:	bd38      	pop	{r3, r4, r5, pc}
 800c9d8:	2000042c 	.word	0x2000042c

0800c9dc <abort>:
 800c9dc:	b508      	push	{r3, lr}
 800c9de:	2006      	movs	r0, #6
 800c9e0:	f000 f834 	bl	800ca4c <raise>
 800c9e4:	2001      	movs	r0, #1
 800c9e6:	f7f5 f971 	bl	8001ccc <_exit>

0800c9ea <_malloc_usable_size_r>:
 800c9ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9ee:	1f18      	subs	r0, r3, #4
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	bfbc      	itt	lt
 800c9f4:	580b      	ldrlt	r3, [r1, r0]
 800c9f6:	18c0      	addlt	r0, r0, r3
 800c9f8:	4770      	bx	lr

0800c9fa <_raise_r>:
 800c9fa:	291f      	cmp	r1, #31
 800c9fc:	b538      	push	{r3, r4, r5, lr}
 800c9fe:	4604      	mov	r4, r0
 800ca00:	460d      	mov	r5, r1
 800ca02:	d904      	bls.n	800ca0e <_raise_r+0x14>
 800ca04:	2316      	movs	r3, #22
 800ca06:	6003      	str	r3, [r0, #0]
 800ca08:	f04f 30ff 	mov.w	r0, #4294967295
 800ca0c:	bd38      	pop	{r3, r4, r5, pc}
 800ca0e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ca10:	b112      	cbz	r2, 800ca18 <_raise_r+0x1e>
 800ca12:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ca16:	b94b      	cbnz	r3, 800ca2c <_raise_r+0x32>
 800ca18:	4620      	mov	r0, r4
 800ca1a:	f000 f831 	bl	800ca80 <_getpid_r>
 800ca1e:	462a      	mov	r2, r5
 800ca20:	4601      	mov	r1, r0
 800ca22:	4620      	mov	r0, r4
 800ca24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca28:	f000 b818 	b.w	800ca5c <_kill_r>
 800ca2c:	2b01      	cmp	r3, #1
 800ca2e:	d00a      	beq.n	800ca46 <_raise_r+0x4c>
 800ca30:	1c59      	adds	r1, r3, #1
 800ca32:	d103      	bne.n	800ca3c <_raise_r+0x42>
 800ca34:	2316      	movs	r3, #22
 800ca36:	6003      	str	r3, [r0, #0]
 800ca38:	2001      	movs	r0, #1
 800ca3a:	e7e7      	b.n	800ca0c <_raise_r+0x12>
 800ca3c:	2400      	movs	r4, #0
 800ca3e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ca42:	4628      	mov	r0, r5
 800ca44:	4798      	blx	r3
 800ca46:	2000      	movs	r0, #0
 800ca48:	e7e0      	b.n	800ca0c <_raise_r+0x12>
	...

0800ca4c <raise>:
 800ca4c:	4b02      	ldr	r3, [pc, #8]	; (800ca58 <raise+0xc>)
 800ca4e:	4601      	mov	r1, r0
 800ca50:	6818      	ldr	r0, [r3, #0]
 800ca52:	f7ff bfd2 	b.w	800c9fa <_raise_r>
 800ca56:	bf00      	nop
 800ca58:	20000014 	.word	0x20000014

0800ca5c <_kill_r>:
 800ca5c:	b538      	push	{r3, r4, r5, lr}
 800ca5e:	4d07      	ldr	r5, [pc, #28]	; (800ca7c <_kill_r+0x20>)
 800ca60:	2300      	movs	r3, #0
 800ca62:	4604      	mov	r4, r0
 800ca64:	4608      	mov	r0, r1
 800ca66:	4611      	mov	r1, r2
 800ca68:	602b      	str	r3, [r5, #0]
 800ca6a:	f7f5 f91f 	bl	8001cac <_kill>
 800ca6e:	1c43      	adds	r3, r0, #1
 800ca70:	d102      	bne.n	800ca78 <_kill_r+0x1c>
 800ca72:	682b      	ldr	r3, [r5, #0]
 800ca74:	b103      	cbz	r3, 800ca78 <_kill_r+0x1c>
 800ca76:	6023      	str	r3, [r4, #0]
 800ca78:	bd38      	pop	{r3, r4, r5, pc}
 800ca7a:	bf00      	nop
 800ca7c:	2000042c 	.word	0x2000042c

0800ca80 <_getpid_r>:
 800ca80:	f7f5 b90c 	b.w	8001c9c <_getpid>

0800ca84 <_init>:
 800ca84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca86:	bf00      	nop
 800ca88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca8a:	bc08      	pop	{r3}
 800ca8c:	469e      	mov	lr, r3
 800ca8e:	4770      	bx	lr

0800ca90 <_fini>:
 800ca90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca92:	bf00      	nop
 800ca94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca96:	bc08      	pop	{r3}
 800ca98:	469e      	mov	lr, r3
 800ca9a:	4770      	bx	lr
