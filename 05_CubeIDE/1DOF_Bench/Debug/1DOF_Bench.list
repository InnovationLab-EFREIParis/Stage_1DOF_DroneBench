
1DOF_Bench.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  0800658c  0800658c  0001658c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066b0  080066b0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080066b0  080066b0  000166b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066b8  080066b8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066b8  080066b8  000166b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066bc  080066bc  000166bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080066c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000070  08006730  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  08006730  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001937f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a58  00000000  00000000  0003941f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001328  00000000  00000000  0003be78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001220  00000000  00000000  0003d1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029799  00000000  00000000  0003e3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015ba5  00000000  00000000  00067b59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108f71  00000000  00000000  0007d6fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018666f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005970  00000000  00000000  001866c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006574 	.word	0x08006574

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006574 	.word	0x08006574

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056a:	b093      	sub	sp, #76	; 0x4c
 800056c:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fcdb 	bl	8000f28 <HAL_Init>

  /* USER CODE BEGIN Init */


		// set green led if push button
		setGreenLedViaButton();
 8000572:	f000 fa4b 	bl	8000a0c <setGreenLedViaButton>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000576:	f000 f847 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057a:	f000 f9b5 	bl	80008e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800057e:	f000 f983 	bl	8000888 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000582:	f000 f893 	bl	80006ac <MX_ADC1_Init>
  MX_TIM3_Init();
 8000586:	f000 f907 	bl	8000798 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	// Light up green led
	setGreenLed();
 800058a:	f000 fa18 	bl	80009be <setGreenLed>
	// blink green led
	blinkGreenLed(10, 100);
 800058e:	2164      	movs	r1, #100	; 0x64
 8000590:	200a      	movs	r0, #10
 8000592:	f000 fa1e 	bl	80009d2 <blinkGreenLed>
	// Welcome message on UART
	sendWelcomeMsgRS232(&huart2);
 8000596:	4818      	ldr	r0, [pc, #96]	; (80005f8 <main+0x90>)
 8000598:	f000 fa54 	bl	8000a44 <sendWelcomeMsgRS232>
	printf("Hello from main\n\r");
 800059c:	4817      	ldr	r0, [pc, #92]	; (80005fc <main+0x94>)
 800059e:	f005 f893 	bl	80056c8 <iprintf>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2 );
 80005a2:	2104      	movs	r1, #4
 80005a4:	4816      	ldr	r0, [pc, #88]	; (8000600 <main+0x98>)
 80005a6:	f003 fba5 	bl	8003cf4 <HAL_TIM_PWM_Start>
	TIM3->CCR2 = 4096;
 80005aa:	4b16      	ldr	r3, [pc, #88]	; (8000604 <main+0x9c>)
 80005ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005b0:	639a      	str	r2, [r3, #56]	; 0x38
	int vol =4096;
 80005b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b6:	607b      	str	r3, [r7, #4]
	HAL_Delay(1000);
 80005b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005bc:	f000 fd30 	bl	8001020 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  load_pwm(htim3, vol);
 80005c0:	4e0f      	ldr	r6, [pc, #60]	; (8000600 <main+0x98>)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80005c6:	466d      	mov	r5, sp
 80005c8:	f106 0410 	add.w	r4, r6, #16
 80005cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005d8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80005dc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80005e0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80005e4:	f000 fc66 	bl	8000eb4 <load_pwm>
	  HAL_Delay(50);
 80005e8:	2032      	movs	r0, #50	; 0x32
 80005ea:	f000 fd19 	bl	8001020 <HAL_Delay>
	  vol--;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	3b01      	subs	r3, #1
 80005f2:	607b      	str	r3, [r7, #4]
	  load_pwm(htim3, vol);
 80005f4:	e7e4      	b.n	80005c0 <main+0x58>
 80005f6:	bf00      	nop
 80005f8:	20000150 	.word	0x20000150
 80005fc:	0800658c 	.word	0x0800658c
 8000600:	20000098 	.word	0x20000098
 8000604:	40000400 	.word	0x40000400

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b096      	sub	sp, #88	; 0x58
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	2244      	movs	r2, #68	; 0x44
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f005 f84e 	bl	80056b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	463b      	mov	r3, r7
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	60da      	str	r2, [r3, #12]
 8000628:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800062a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800062e:	f001 ffab 	bl	8002588 <HAL_PWREx_ControlVoltageScaling>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000638:	f000 f9bc 	bl	80009b4 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800063c:	2302      	movs	r3, #2
 800063e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000640:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000644:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000646:	2310      	movs	r3, #16
 8000648:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064a:	2302      	movs	r3, #2
 800064c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800064e:	2302      	movs	r3, #2
 8000650:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000652:	2301      	movs	r3, #1
 8000654:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000656:	230a      	movs	r3, #10
 8000658:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800065a:	2307      	movs	r3, #7
 800065c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800065e:	2302      	movs	r3, #2
 8000660:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000662:	2302      	movs	r3, #2
 8000664:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000666:	f107 0314 	add.w	r3, r7, #20
 800066a:	4618      	mov	r0, r3
 800066c:	f001 ffe2 	bl	8002634 <HAL_RCC_OscConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000676:	f000 f99d 	bl	80009b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067a:	230f      	movs	r3, #15
 800067c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067e:	2303      	movs	r3, #3
 8000680:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800068e:	463b      	mov	r3, r7
 8000690:	2104      	movs	r1, #4
 8000692:	4618      	mov	r0, r3
 8000694:	f002 fbb4 	bl	8002e00 <HAL_RCC_ClockConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800069e:	f000 f989 	bl	80009b4 <Error_Handler>
  }
}
 80006a2:	bf00      	nop
 80006a4:	3758      	adds	r7, #88	; 0x58
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
	...

080006ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	; 0x28
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]
 80006cc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80006ce:	4b2f      	ldr	r3, [pc, #188]	; (800078c <MX_ADC1_Init+0xe0>)
 80006d0:	4a2f      	ldr	r2, [pc, #188]	; (8000790 <MX_ADC1_Init+0xe4>)
 80006d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006d4:	4b2d      	ldr	r3, [pc, #180]	; (800078c <MX_ADC1_Init+0xe0>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006da:	4b2c      	ldr	r3, [pc, #176]	; (800078c <MX_ADC1_Init+0xe0>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006e0:	4b2a      	ldr	r3, [pc, #168]	; (800078c <MX_ADC1_Init+0xe0>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006e6:	4b29      	ldr	r3, [pc, #164]	; (800078c <MX_ADC1_Init+0xe0>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ec:	4b27      	ldr	r3, [pc, #156]	; (800078c <MX_ADC1_Init+0xe0>)
 80006ee:	2204      	movs	r2, #4
 80006f0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006f2:	4b26      	ldr	r3, [pc, #152]	; (800078c <MX_ADC1_Init+0xe0>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006f8:	4b24      	ldr	r3, [pc, #144]	; (800078c <MX_ADC1_Init+0xe0>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80006fe:	4b23      	ldr	r3, [pc, #140]	; (800078c <MX_ADC1_Init+0xe0>)
 8000700:	2201      	movs	r2, #1
 8000702:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000704:	4b21      	ldr	r3, [pc, #132]	; (800078c <MX_ADC1_Init+0xe0>)
 8000706:	2200      	movs	r2, #0
 8000708:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800070c:	4b1f      	ldr	r3, [pc, #124]	; (800078c <MX_ADC1_Init+0xe0>)
 800070e:	2200      	movs	r2, #0
 8000710:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000712:	4b1e      	ldr	r3, [pc, #120]	; (800078c <MX_ADC1_Init+0xe0>)
 8000714:	2200      	movs	r2, #0
 8000716:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000718:	4b1c      	ldr	r3, [pc, #112]	; (800078c <MX_ADC1_Init+0xe0>)
 800071a:	2200      	movs	r2, #0
 800071c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000720:	4b1a      	ldr	r3, [pc, #104]	; (800078c <MX_ADC1_Init+0xe0>)
 8000722:	2200      	movs	r2, #0
 8000724:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000726:	4b19      	ldr	r3, [pc, #100]	; (800078c <MX_ADC1_Init+0xe0>)
 8000728:	2200      	movs	r2, #0
 800072a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800072e:	4817      	ldr	r0, [pc, #92]	; (800078c <MX_ADC1_Init+0xe0>)
 8000730:	f000 fe26 	bl	8001380 <HAL_ADC_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800073a:	f000 f93b 	bl	80009b4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800073e:	2300      	movs	r3, #0
 8000740:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	4619      	mov	r1, r3
 8000748:	4810      	ldr	r0, [pc, #64]	; (800078c <MX_ADC1_Init+0xe0>)
 800074a:	f001 fb85 	bl	8001e58 <HAL_ADCEx_MultiModeConfigChannel>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000754:	f000 f92e 	bl	80009b4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000758:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <MX_ADC1_Init+0xe8>)
 800075a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800075c:	2306      	movs	r3, #6
 800075e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000760:	2300      	movs	r3, #0
 8000762:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000764:	237f      	movs	r3, #127	; 0x7f
 8000766:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000768:	2304      	movs	r3, #4
 800076a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	4619      	mov	r1, r3
 8000774:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_ADC1_Init+0xe0>)
 8000776:	f000 ff59 	bl	800162c <HAL_ADC_ConfigChannel>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000780:	f000 f918 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	3728      	adds	r7, #40	; 0x28
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	200000e8 	.word	0x200000e8
 8000790:	50040000 	.word	0x50040000
 8000794:	14f00020 	.word	0x14f00020

08000798 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08e      	sub	sp, #56	; 0x38
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800079e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ac:	f107 031c 	add.w	r3, r7, #28
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007b8:	463b      	mov	r3, r7
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]
 80007c6:	615a      	str	r2, [r3, #20]
 80007c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007ca:	4b2d      	ldr	r3, [pc, #180]	; (8000880 <MX_TIM3_Init+0xe8>)
 80007cc:	4a2d      	ldr	r2, [pc, #180]	; (8000884 <MX_TIM3_Init+0xec>)
 80007ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80007d0:	4b2b      	ldr	r3, [pc, #172]	; (8000880 <MX_TIM3_Init+0xe8>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d6:	4b2a      	ldr	r3, [pc, #168]	; (8000880 <MX_TIM3_Init+0xe8>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4096;
 80007dc:	4b28      	ldr	r3, [pc, #160]	; (8000880 <MX_TIM3_Init+0xe8>)
 80007de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e4:	4b26      	ldr	r3, [pc, #152]	; (8000880 <MX_TIM3_Init+0xe8>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007ea:	4b25      	ldr	r3, [pc, #148]	; (8000880 <MX_TIM3_Init+0xe8>)
 80007ec:	2280      	movs	r2, #128	; 0x80
 80007ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007f0:	4823      	ldr	r0, [pc, #140]	; (8000880 <MX_TIM3_Init+0xe8>)
 80007f2:	f003 f9c7 	bl	8003b84 <HAL_TIM_Base_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80007fc:	f000 f8da 	bl	80009b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000804:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000806:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800080a:	4619      	mov	r1, r3
 800080c:	481c      	ldr	r0, [pc, #112]	; (8000880 <MX_TIM3_Init+0xe8>)
 800080e:	f003 fc8b 	bl	8004128 <HAL_TIM_ConfigClockSource>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000818:	f000 f8cc 	bl	80009b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800081c:	4818      	ldr	r0, [pc, #96]	; (8000880 <MX_TIM3_Init+0xe8>)
 800081e:	f003 fa08 	bl	8003c32 <HAL_TIM_PWM_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000828:	f000 f8c4 	bl	80009b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800082c:	2300      	movs	r3, #0
 800082e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000830:	2300      	movs	r3, #0
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	4619      	mov	r1, r3
 800083a:	4811      	ldr	r0, [pc, #68]	; (8000880 <MX_TIM3_Init+0xe8>)
 800083c:	f004 f96e 	bl	8004b1c <HAL_TIMEx_MasterConfigSynchronization>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000846:	f000 f8b5 	bl	80009b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800084a:	2360      	movs	r3, #96	; 0x60
 800084c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000856:	2300      	movs	r3, #0
 8000858:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800085a:	463b      	mov	r3, r7
 800085c:	2204      	movs	r2, #4
 800085e:	4619      	mov	r1, r3
 8000860:	4807      	ldr	r0, [pc, #28]	; (8000880 <MX_TIM3_Init+0xe8>)
 8000862:	f003 fb4d 	bl	8003f00 <HAL_TIM_PWM_ConfigChannel>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800086c:	f000 f8a2 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000870:	4803      	ldr	r0, [pc, #12]	; (8000880 <MX_TIM3_Init+0xe8>)
 8000872:	f000 f9ad 	bl	8000bd0 <HAL_TIM_MspPostInit>

}
 8000876:	bf00      	nop
 8000878:	3738      	adds	r7, #56	; 0x38
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000098 	.word	0x20000098
 8000884:	40000400 	.word	0x40000400

08000888 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800088c:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 800088e:	4a15      	ldr	r2, [pc, #84]	; (80008e4 <MX_USART2_UART_Init+0x5c>)
 8000890:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000892:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 8000894:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000898:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 80008ae:	220c      	movs	r2, #12
 80008b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 80008cc:	f004 f9ae 	bl	8004c2c <HAL_UART_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008d6:	f000 f86d 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000150 	.word	0x20000150
 80008e4:	40004400 	.word	0x40004400

080008e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08a      	sub	sp, #40	; 0x28
 80008ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fe:	4b2b      	ldr	r3, [pc, #172]	; (80009ac <MX_GPIO_Init+0xc4>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	4a2a      	ldr	r2, [pc, #168]	; (80009ac <MX_GPIO_Init+0xc4>)
 8000904:	f043 0304 	orr.w	r3, r3, #4
 8000908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090a:	4b28      	ldr	r3, [pc, #160]	; (80009ac <MX_GPIO_Init+0xc4>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	f003 0304 	and.w	r3, r3, #4
 8000912:	613b      	str	r3, [r7, #16]
 8000914:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000916:	4b25      	ldr	r3, [pc, #148]	; (80009ac <MX_GPIO_Init+0xc4>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	4a24      	ldr	r2, [pc, #144]	; (80009ac <MX_GPIO_Init+0xc4>)
 800091c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000922:	4b22      	ldr	r3, [pc, #136]	; (80009ac <MX_GPIO_Init+0xc4>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	4b1f      	ldr	r3, [pc, #124]	; (80009ac <MX_GPIO_Init+0xc4>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000932:	4a1e      	ldr	r2, [pc, #120]	; (80009ac <MX_GPIO_Init+0xc4>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093a:	4b1c      	ldr	r3, [pc, #112]	; (80009ac <MX_GPIO_Init+0xc4>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000946:	4b19      	ldr	r3, [pc, #100]	; (80009ac <MX_GPIO_Init+0xc4>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094a:	4a18      	ldr	r2, [pc, #96]	; (80009ac <MX_GPIO_Init+0xc4>)
 800094c:	f043 0302 	orr.w	r3, r3, #2
 8000950:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000952:	4b16      	ldr	r3, [pc, #88]	; (80009ac <MX_GPIO_Init+0xc4>)
 8000954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000956:	f003 0302 	and.w	r3, r3, #2
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	2120      	movs	r1, #32
 8000962:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000966:	f001 fdcf 	bl	8002508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800096a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800096e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000970:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000974:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	4619      	mov	r1, r3
 8000980:	480b      	ldr	r0, [pc, #44]	; (80009b0 <MX_GPIO_Init+0xc8>)
 8000982:	f001 fbff 	bl	8002184 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000986:	2320      	movs	r3, #32
 8000988:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098a:	2301      	movs	r3, #1
 800098c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4619      	mov	r1, r3
 800099c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a0:	f001 fbf0 	bl	8002184 <HAL_GPIO_Init>

}
 80009a4:	bf00      	nop
 80009a6:	3728      	adds	r7, #40	; 0x28
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40021000 	.word	0x40021000
 80009b0:	48000800 	.word	0x48000800

080009b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b8:	b672      	cpsid	i
}
 80009ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80009bc:	e7fe      	b.n	80009bc <Error_Handler+0x8>

080009be <setGreenLed>:
 */

#include "remi.h"

// On board green LED On
void setGreenLed() {
 80009be:	b580      	push	{r7, lr}
 80009c0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 80009c2:	2201      	movs	r2, #1
 80009c4:	2120      	movs	r1, #32
 80009c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ca:	f001 fd9d 	bl	8002508 <HAL_GPIO_WritePin>
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <blinkGreenLed>:

// On board green LED blink
void blinkGreenLed(int nb, int delay) {
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b084      	sub	sp, #16
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
 80009da:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < nb; i++) {
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	e00b      	b.n	80009fa <blinkGreenLed+0x28>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80009e2:	2120      	movs	r1, #32
 80009e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e8:	f001 fda6 	bl	8002538 <HAL_GPIO_TogglePin>
		HAL_Delay(delay);
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f000 fb16 	bl	8001020 <HAL_Delay>
	for (int i = 0; i < nb; i++) {
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	3301      	adds	r3, #1
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	68fa      	ldr	r2, [r7, #12]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	429a      	cmp	r2, r3
 8000a00:	dbef      	blt.n	80009e2 <blinkGreenLed+0x10>
	}
}
 8000a02:	bf00      	nop
 8000a04:	bf00      	nop
 8000a06:	3710      	adds	r7, #16
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <setGreenLedViaButton>:

// set green led if blue push button is pressed
void setGreenLedViaButton() {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
	// Gpio, push button
	// by default, PUSH_BUTTON is at 1
	//PinState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1)
 8000a10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a14:	480a      	ldr	r0, [pc, #40]	; (8000a40 <setGreenLedViaButton+0x34>)
 8000a16:	f001 fd5f 	bl	80024d8 <HAL_GPIO_ReadPin>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d106      	bne.n	8000a2e <setGreenLedViaButton+0x22>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8000a20:	2200      	movs	r2, #0
 8000a22:	2120      	movs	r1, #32
 8000a24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a28:	f001 fd6e 	bl	8002508 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);

}
 8000a2c:	e005      	b.n	8000a3a <setGreenLedViaButton+0x2e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8000a2e:	2201      	movs	r2, #1
 8000a30:	2120      	movs	r1, #32
 8000a32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a36:	f001 fd67 	bl	8002508 <HAL_GPIO_WritePin>
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	48000800 	.word	0x48000800

08000a44 <sendWelcomeMsgRS232>:

// Welcome Message On RS232
void sendWelcomeMsgRS232(UART_HandleTypeDef *huart) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	printf("Hello from remi\n\r");
 8000a4c:	4808      	ldr	r0, [pc, #32]	; (8000a70 <sendWelcomeMsgRS232+0x2c>)
 8000a4e:	f004 fe3b 	bl	80056c8 <iprintf>
	//pointer targets in passing argument 2 of 'HAL_UART_Transmit' differ in signedness [-Wpointer-sign]
	//if (HAL_UART_Transmit(huart, "Nucleo L476RG connected\n\r", 25, 100)
	//modification au niveau du formatage du message
	if (HAL_UART_Transmit(huart, (uint8_t*)"Nucleo L476RG connected\n\r", 25, 100)
 8000a52:	2364      	movs	r3, #100	; 0x64
 8000a54:	2219      	movs	r2, #25
 8000a56:	4907      	ldr	r1, [pc, #28]	; (8000a74 <sendWelcomeMsgRS232+0x30>)
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f004 f935 	bl	8004cc8 <HAL_UART_Transmit>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <sendWelcomeMsgRS232+0x24>
			!= HAL_OK)
		Error_Handler();
 8000a64:	f7ff ffa6 	bl	80009b4 <Error_Handler>
}
 8000a68:	bf00      	nop
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	080065a0 	.word	0x080065a0
 8000a74:	080065b4 	.word	0x080065b4

08000a78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7e:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <HAL_MspInit+0x44>)
 8000a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a82:	4a0e      	ldr	r2, [pc, #56]	; (8000abc <HAL_MspInit+0x44>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	6613      	str	r3, [r2, #96]	; 0x60
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <HAL_MspInit+0x44>)
 8000a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a96:	4b09      	ldr	r3, [pc, #36]	; (8000abc <HAL_MspInit+0x44>)
 8000a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a9a:	4a08      	ldr	r2, [pc, #32]	; (8000abc <HAL_MspInit+0x44>)
 8000a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa0:	6593      	str	r3, [r2, #88]	; 0x58
 8000aa2:	4b06      	ldr	r3, [pc, #24]	; (8000abc <HAL_MspInit+0x44>)
 8000aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	40021000 	.word	0x40021000

08000ac0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b0ac      	sub	sp, #176	; 0xb0
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	2288      	movs	r2, #136	; 0x88
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f004 fde9 	bl	80056b8 <memset>
  if(hadc->Instance==ADC1)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a27      	ldr	r2, [pc, #156]	; (8000b88 <HAL_ADC_MspInit+0xc8>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d147      	bne.n	8000b80 <HAL_ADC_MspInit+0xc0>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000af0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000af4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000af6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000afa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000afe:	2302      	movs	r3, #2
 8000b00:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000b02:	2301      	movs	r3, #1
 8000b04:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000b06:	2308      	movs	r3, #8
 8000b08:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000b0a:	2307      	movs	r3, #7
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000b12:	2302      	movs	r3, #2
 8000b14:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000b16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b1a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4618      	mov	r0, r3
 8000b22:	f002 fb73 	bl	800320c <HAL_RCCEx_PeriphCLKConfig>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000b2c:	f7ff ff42 	bl	80009b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b30:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <HAL_ADC_MspInit+0xcc>)
 8000b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b34:	4a15      	ldr	r2, [pc, #84]	; (8000b8c <HAL_ADC_MspInit+0xcc>)
 8000b36:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b3c:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <HAL_ADC_MspInit+0xcc>)
 8000b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b48:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <HAL_ADC_MspInit+0xcc>)
 8000b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4c:	4a0f      	ldr	r2, [pc, #60]	; (8000b8c <HAL_ADC_MspInit+0xcc>)
 8000b4e:	f043 0301 	orr.w	r3, r3, #1
 8000b52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b54:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <HAL_ADC_MspInit+0xcc>)
 8000b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b58:	f003 0301 	and.w	r3, r3, #1
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b60:	2301      	movs	r3, #1
 8000b62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b66:	230b      	movs	r3, #11
 8000b68:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b72:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b76:	4619      	mov	r1, r3
 8000b78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b7c:	f001 fb02 	bl	8002184 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b80:	bf00      	nop
 8000b82:	37b0      	adds	r7, #176	; 0xb0
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	50040000 	.word	0x50040000
 8000b8c:	40021000 	.word	0x40021000

08000b90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a0a      	ldr	r2, [pc, #40]	; (8000bc8 <HAL_TIM_Base_MspInit+0x38>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d10b      	bne.n	8000bba <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <HAL_TIM_Base_MspInit+0x3c>)
 8000ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba6:	4a09      	ldr	r2, [pc, #36]	; (8000bcc <HAL_TIM_Base_MspInit+0x3c>)
 8000ba8:	f043 0302 	orr.w	r3, r3, #2
 8000bac:	6593      	str	r3, [r2, #88]	; 0x58
 8000bae:	4b07      	ldr	r3, [pc, #28]	; (8000bcc <HAL_TIM_Base_MspInit+0x3c>)
 8000bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb2:	f003 0302 	and.w	r3, r3, #2
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000bba:	bf00      	nop
 8000bbc:	3714      	adds	r7, #20
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	40000400 	.word	0x40000400
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b088      	sub	sp, #32
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 030c 	add.w	r3, r7, #12
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a11      	ldr	r2, [pc, #68]	; (8000c34 <HAL_TIM_MspPostInit+0x64>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d11c      	bne.n	8000c2c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf2:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <HAL_TIM_MspPostInit+0x68>)
 8000bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf6:	4a10      	ldr	r2, [pc, #64]	; (8000c38 <HAL_TIM_MspPostInit+0x68>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <HAL_TIM_MspPostInit+0x68>)
 8000c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c0a:	2380      	movs	r3, #128	; 0x80
 8000c0c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1e:	f107 030c 	add.w	r3, r7, #12
 8000c22:	4619      	mov	r1, r3
 8000c24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c28:	f001 faac 	bl	8002184 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c2c:	bf00      	nop
 8000c2e:	3720      	adds	r7, #32
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40000400 	.word	0x40000400
 8000c38:	40021000 	.word	0x40021000

08000c3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b0ac      	sub	sp, #176	; 0xb0
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	2288      	movs	r2, #136	; 0x88
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f004 fd2b 	bl	80056b8 <memset>
  if(huart->Instance==USART2)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a21      	ldr	r2, [pc, #132]	; (8000cec <HAL_UART_MspInit+0xb0>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d13b      	bne.n	8000ce4 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c70:	2300      	movs	r3, #0
 8000c72:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f002 fac7 	bl	800320c <HAL_RCCEx_PeriphCLKConfig>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c84:	f7ff fe96 	bl	80009b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c88:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <HAL_UART_MspInit+0xb4>)
 8000c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c8c:	4a18      	ldr	r2, [pc, #96]	; (8000cf0 <HAL_UART_MspInit+0xb4>)
 8000c8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c92:	6593      	str	r3, [r2, #88]	; 0x58
 8000c94:	4b16      	ldr	r3, [pc, #88]	; (8000cf0 <HAL_UART_MspInit+0xb4>)
 8000c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c9c:	613b      	str	r3, [r7, #16]
 8000c9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca0:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <HAL_UART_MspInit+0xb4>)
 8000ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca4:	4a12      	ldr	r2, [pc, #72]	; (8000cf0 <HAL_UART_MspInit+0xb4>)
 8000ca6:	f043 0301 	orr.w	r3, r3, #1
 8000caa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cac:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <HAL_UART_MspInit+0xb4>)
 8000cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb0:	f003 0301 	and.w	r3, r3, #1
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cb8:	230c      	movs	r3, #12
 8000cba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cd0:	2307      	movs	r3, #7
 8000cd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cda:	4619      	mov	r1, r3
 8000cdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce0:	f001 fa50 	bl	8002184 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ce4:	bf00      	nop
 8000ce6:	37b0      	adds	r7, #176	; 0xb0
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40004400 	.word	0x40004400
 8000cf0:	40021000 	.word	0x40021000

08000cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <NMI_Handler+0x4>

08000cfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <HardFault_Handler+0x4>

08000d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <MemManage_Handler+0x4>

08000d06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0a:	e7fe      	b.n	8000d0a <BusFault_Handler+0x4>

08000d0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <UsageFault_Handler+0x4>

08000d12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d40:	f000 f94e 	bl	8000fe0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
 8000d58:	e00a      	b.n	8000d70 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d5a:	f3af 8000 	nop.w
 8000d5e:	4601      	mov	r1, r0
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	1c5a      	adds	r2, r3, #1
 8000d64:	60ba      	str	r2, [r7, #8]
 8000d66:	b2ca      	uxtb	r2, r1
 8000d68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	617b      	str	r3, [r7, #20]
 8000d70:	697a      	ldr	r2, [r7, #20]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	dbf0      	blt.n	8000d5a <_read+0x12>
	}

return len;
 8000d78:	687b      	ldr	r3, [r7, #4]
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3718      	adds	r7, #24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b086      	sub	sp, #24
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	60f8      	str	r0, [r7, #12]
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
 8000d92:	e009      	b.n	8000da8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	1c5a      	adds	r2, r3, #1
 8000d98:	60ba      	str	r2, [r7, #8]
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	3301      	adds	r3, #1
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	697a      	ldr	r2, [r7, #20]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	dbf1      	blt.n	8000d94 <_write+0x12>
	}
	return len;
 8000db0:	687b      	ldr	r3, [r7, #4]
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <_close>:

int _close(int file)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	b083      	sub	sp, #12
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
	return -1;
 8000dc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	b083      	sub	sp, #12
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
 8000dda:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000de2:	605a      	str	r2, [r3, #4]
	return 0;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <_isatty>:

int _isatty(int file)
{
 8000df2:	b480      	push	{r7}
 8000df4:	b083      	sub	sp, #12
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
	return 1;
 8000dfa:	2301      	movs	r3, #1
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
	return 0;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3714      	adds	r7, #20
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
	...

08000e24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e2c:	4a14      	ldr	r2, [pc, #80]	; (8000e80 <_sbrk+0x5c>)
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <_sbrk+0x60>)
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e38:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <_sbrk+0x64>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d102      	bne.n	8000e46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e40:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <_sbrk+0x64>)
 8000e42:	4a12      	ldr	r2, [pc, #72]	; (8000e8c <_sbrk+0x68>)
 8000e44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e46:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <_sbrk+0x64>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d207      	bcs.n	8000e64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e54:	f004 fc06 	bl	8005664 <__errno>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	220c      	movs	r2, #12
 8000e5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e62:	e009      	b.n	8000e78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <_sbrk+0x64>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e6a:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <_sbrk+0x64>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4413      	add	r3, r2
 8000e72:	4a05      	ldr	r2, [pc, #20]	; (8000e88 <_sbrk+0x64>)
 8000e74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e76:	68fb      	ldr	r3, [r7, #12]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3718      	adds	r7, #24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20018000 	.word	0x20018000
 8000e84:	00000400 	.word	0x00000400
 8000e88:	2000008c 	.word	0x2000008c
 8000e8c:	200001e8 	.word	0x200001e8

08000e90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <SystemInit+0x20>)
 8000e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e9a:	4a05      	ldr	r2, [pc, #20]	; (8000eb0 <SystemInit+0x20>)
 8000e9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <load_pwm>:
	HAL_ADC_PollForConversion(&hadc, polTime);
	return  HAL_ADC_GetValue(&hadc);

}

void load_pwm(TIM_HandleTypeDef htimX,int val){
 8000eb4:	b084      	sub	sp, #16
 8000eb6:	b490      	push	{r4, r7}
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	f107 0408 	add.w	r4, r7, #8
 8000ebe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	htimX.Instance->CCR2=val ;
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000ec6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc90      	pop	{r4, r7}
 8000ece:	b004      	add	sp, #16
 8000ed0:	4770      	bx	lr
	...

08000ed4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ed4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f0c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ed8:	f7ff ffda 	bl	8000e90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000edc:	480c      	ldr	r0, [pc, #48]	; (8000f10 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ede:	490d      	ldr	r1, [pc, #52]	; (8000f14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ee0:	4a0d      	ldr	r2, [pc, #52]	; (8000f18 <LoopForever+0xe>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee4:	e002      	b.n	8000eec <LoopCopyDataInit>

08000ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eea:	3304      	adds	r3, #4

08000eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef0:	d3f9      	bcc.n	8000ee6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ef2:	4a0a      	ldr	r2, [pc, #40]	; (8000f1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ef4:	4c0a      	ldr	r4, [pc, #40]	; (8000f20 <LoopForever+0x16>)
  movs r3, #0
 8000ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef8:	e001      	b.n	8000efe <LoopFillZerobss>

08000efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000efc:	3204      	adds	r2, #4

08000efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f00:	d3fb      	bcc.n	8000efa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f02:	f004 fbb5 	bl	8005670 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f06:	f7ff fb2f 	bl	8000568 <main>

08000f0a <LoopForever>:

LoopForever:
    b LoopForever
 8000f0a:	e7fe      	b.n	8000f0a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f0c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f14:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f18:	080066c0 	.word	0x080066c0
  ldr r2, =_sbss
 8000f1c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f20:	200001e8 	.word	0x200001e8

08000f24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f24:	e7fe      	b.n	8000f24 <ADC1_2_IRQHandler>
	...

08000f28 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f32:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <HAL_Init+0x3c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <HAL_Init+0x3c>)
 8000f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f3c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f3e:	2003      	movs	r0, #3
 8000f40:	f001 f8ec 	bl	800211c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f44:	2000      	movs	r0, #0
 8000f46:	f000 f80f 	bl	8000f68 <HAL_InitTick>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d002      	beq.n	8000f56 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	71fb      	strb	r3, [r7, #7]
 8000f54:	e001      	b.n	8000f5a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f56:	f7ff fd8f 	bl	8000a78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40022000 	.word	0x40022000

08000f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f70:	2300      	movs	r3, #0
 8000f72:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f74:	4b17      	ldr	r3, [pc, #92]	; (8000fd4 <HAL_InitTick+0x6c>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d023      	beq.n	8000fc4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f7c:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <HAL_InitTick+0x70>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	4b14      	ldr	r3, [pc, #80]	; (8000fd4 <HAL_InitTick+0x6c>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	4619      	mov	r1, r3
 8000f86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f92:	4618      	mov	r0, r3
 8000f94:	f001 f8e9 	bl	800216a <HAL_SYSTICK_Config>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d10f      	bne.n	8000fbe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b0f      	cmp	r3, #15
 8000fa2:	d809      	bhi.n	8000fb8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	f001 f8c1 	bl	8002132 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fb0:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <HAL_InitTick+0x74>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6013      	str	r3, [r2, #0]
 8000fb6:	e007      	b.n	8000fc8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	73fb      	strb	r3, [r7, #15]
 8000fbc:	e004      	b.n	8000fc8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	73fb      	strb	r3, [r7, #15]
 8000fc2:	e001      	b.n	8000fc8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000008 	.word	0x20000008
 8000fd8:	20000000 	.word	0x20000000
 8000fdc:	20000004 	.word	0x20000004

08000fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_IncTick+0x20>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b06      	ldr	r3, [pc, #24]	; (8001004 <HAL_IncTick+0x24>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4413      	add	r3, r2
 8000ff0:	4a04      	ldr	r2, [pc, #16]	; (8001004 <HAL_IncTick+0x24>)
 8000ff2:	6013      	str	r3, [r2, #0]
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	20000008 	.word	0x20000008
 8001004:	200001d4 	.word	0x200001d4

08001008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return uwTick;
 800100c:	4b03      	ldr	r3, [pc, #12]	; (800101c <HAL_GetTick+0x14>)
 800100e:	681b      	ldr	r3, [r3, #0]
}
 8001010:	4618      	mov	r0, r3
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	200001d4 	.word	0x200001d4

08001020 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001028:	f7ff ffee 	bl	8001008 <HAL_GetTick>
 800102c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001038:	d005      	beq.n	8001046 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800103a:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <HAL_Delay+0x44>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	461a      	mov	r2, r3
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4413      	add	r3, r2
 8001044:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001046:	bf00      	nop
 8001048:	f7ff ffde 	bl	8001008 <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	68fa      	ldr	r2, [r7, #12]
 8001054:	429a      	cmp	r2, r3
 8001056:	d8f7      	bhi.n	8001048 <HAL_Delay+0x28>
  {
  }
}
 8001058:	bf00      	nop
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000008 	.word	0x20000008

08001068 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	431a      	orrs	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	609a      	str	r2, [r3, #8]
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
 8001096:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	431a      	orrs	r2, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	609a      	str	r2, [r3, #8]
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b087      	sub	sp, #28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
 80010dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	3360      	adds	r3, #96	; 0x60
 80010e2:	461a      	mov	r2, r3
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	4413      	add	r3, r2
 80010ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <LL_ADC_SetOffset+0x44>)
 80010f2:	4013      	ands	r3, r2
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80010fa:	683a      	ldr	r2, [r7, #0]
 80010fc:	430a      	orrs	r2, r1
 80010fe:	4313      	orrs	r3, r2
 8001100:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001108:	bf00      	nop
 800110a:	371c      	adds	r7, #28
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	03fff000 	.word	0x03fff000

08001118 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	3360      	adds	r3, #96	; 0x60
 8001126:	461a      	mov	r2, r3
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	4413      	add	r3, r2
 800112e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001138:	4618      	mov	r0, r3
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001144:	b480      	push	{r7}
 8001146:	b087      	sub	sp, #28
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	3360      	adds	r3, #96	; 0x60
 8001154:	461a      	mov	r2, r3
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	4413      	add	r3, r2
 800115c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	431a      	orrs	r2, r3
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800116e:	bf00      	nop
 8001170:	371c      	adds	r7, #28
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800117a:	b480      	push	{r7}
 800117c:	b087      	sub	sp, #28
 800117e:	af00      	add	r7, sp, #0
 8001180:	60f8      	str	r0, [r7, #12]
 8001182:	60b9      	str	r1, [r7, #8]
 8001184:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	3330      	adds	r3, #48	; 0x30
 800118a:	461a      	mov	r2, r3
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	0a1b      	lsrs	r3, r3, #8
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	f003 030c 	and.w	r3, r3, #12
 8001196:	4413      	add	r3, r2
 8001198:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	f003 031f 	and.w	r3, r3, #31
 80011a4:	211f      	movs	r1, #31
 80011a6:	fa01 f303 	lsl.w	r3, r1, r3
 80011aa:	43db      	mvns	r3, r3
 80011ac:	401a      	ands	r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	0e9b      	lsrs	r3, r3, #26
 80011b2:	f003 011f 	and.w	r1, r3, #31
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	f003 031f 	and.w	r3, r3, #31
 80011bc:	fa01 f303 	lsl.w	r3, r1, r3
 80011c0:	431a      	orrs	r2, r3
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80011c6:	bf00      	nop
 80011c8:	371c      	adds	r7, #28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80011d2:	b480      	push	{r7}
 80011d4:	b087      	sub	sp, #28
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	60f8      	str	r0, [r7, #12]
 80011da:	60b9      	str	r1, [r7, #8]
 80011dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	3314      	adds	r3, #20
 80011e2:	461a      	mov	r2, r3
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	0e5b      	lsrs	r3, r3, #25
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	f003 0304 	and.w	r3, r3, #4
 80011ee:	4413      	add	r3, r2
 80011f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	0d1b      	lsrs	r3, r3, #20
 80011fa:	f003 031f 	and.w	r3, r3, #31
 80011fe:	2107      	movs	r1, #7
 8001200:	fa01 f303 	lsl.w	r3, r1, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	401a      	ands	r2, r3
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	0d1b      	lsrs	r3, r3, #20
 800120c:	f003 031f 	and.w	r3, r3, #31
 8001210:	6879      	ldr	r1, [r7, #4]
 8001212:	fa01 f303 	lsl.w	r3, r1, r3
 8001216:	431a      	orrs	r2, r3
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800121c:	bf00      	nop
 800121e:	371c      	adds	r7, #28
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001240:	43db      	mvns	r3, r3
 8001242:	401a      	ands	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f003 0318 	and.w	r3, r3, #24
 800124a:	4908      	ldr	r1, [pc, #32]	; (800126c <LL_ADC_SetChannelSingleDiff+0x44>)
 800124c:	40d9      	lsrs	r1, r3
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	400b      	ands	r3, r1
 8001252:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001256:	431a      	orrs	r2, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800125e:	bf00      	nop
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	0007ffff 	.word	0x0007ffff

08001270 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001280:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	6093      	str	r3, [r2, #8]
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80012a8:	d101      	bne.n	80012ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80012aa:	2301      	movs	r3, #1
 80012ac:	e000      	b.n	80012b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80012cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80012f8:	d101      	bne.n	80012fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80012fa:	2301      	movs	r3, #1
 80012fc:	e000      	b.n	8001300 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80012fe:	2300      	movs	r3, #0
}
 8001300:	4618      	mov	r0, r3
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	2b01      	cmp	r3, #1
 800131e:	d101      	bne.n	8001324 <LL_ADC_IsEnabled+0x18>
 8001320:	2301      	movs	r3, #1
 8001322:	e000      	b.n	8001326 <LL_ADC_IsEnabled+0x1a>
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f003 0304 	and.w	r3, r3, #4
 8001342:	2b04      	cmp	r3, #4
 8001344:	d101      	bne.n	800134a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001346:	2301      	movs	r3, #1
 8001348:	e000      	b.n	800134c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800134a:	2300      	movs	r3, #0
}
 800134c:	4618      	mov	r0, r3
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	f003 0308 	and.w	r3, r3, #8
 8001368:	2b08      	cmp	r3, #8
 800136a:	d101      	bne.n	8001370 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800136c:	2301      	movs	r3, #1
 800136e:	e000      	b.n	8001372 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
	...

08001380 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001380:	b590      	push	{r4, r7, lr}
 8001382:	b089      	sub	sp, #36	; 0x24
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001388:	2300      	movs	r3, #0
 800138a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800138c:	2300      	movs	r3, #0
 800138e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e136      	b.n	8001608 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d109      	bne.n	80013bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f7ff fb89 	bl	8000ac0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff ff67 	bl	8001294 <LL_ADC_IsDeepPowerDownEnabled>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d004      	beq.n	80013d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff ff4d 	bl	8001270 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff ff82 	bl	80012e4 <LL_ADC_IsInternalRegulatorEnabled>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d115      	bne.n	8001412 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff ff66 	bl	80012bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80013f0:	4b87      	ldr	r3, [pc, #540]	; (8001610 <HAL_ADC_Init+0x290>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	099b      	lsrs	r3, r3, #6
 80013f6:	4a87      	ldr	r2, [pc, #540]	; (8001614 <HAL_ADC_Init+0x294>)
 80013f8:	fba2 2303 	umull	r2, r3, r2, r3
 80013fc:	099b      	lsrs	r3, r3, #6
 80013fe:	3301      	adds	r3, #1
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001404:	e002      	b.n	800140c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	3b01      	subs	r3, #1
 800140a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1f9      	bne.n	8001406 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff ff64 	bl	80012e4 <LL_ADC_IsInternalRegulatorEnabled>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d10d      	bne.n	800143e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001426:	f043 0210 	orr.w	r2, r3, #16
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001432:	f043 0201 	orr.w	r2, r3, #1
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff ff75 	bl	8001332 <LL_ADC_REG_IsConversionOngoing>
 8001448:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800144e:	f003 0310 	and.w	r3, r3, #16
 8001452:	2b00      	cmp	r3, #0
 8001454:	f040 80cf 	bne.w	80015f6 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	2b00      	cmp	r3, #0
 800145c:	f040 80cb 	bne.w	80015f6 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001464:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001468:	f043 0202 	orr.w	r2, r3, #2
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ff49 	bl	800130c <LL_ADC_IsEnabled>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d115      	bne.n	80014ac <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001480:	4865      	ldr	r0, [pc, #404]	; (8001618 <HAL_ADC_Init+0x298>)
 8001482:	f7ff ff43 	bl	800130c <LL_ADC_IsEnabled>
 8001486:	4604      	mov	r4, r0
 8001488:	4864      	ldr	r0, [pc, #400]	; (800161c <HAL_ADC_Init+0x29c>)
 800148a:	f7ff ff3f 	bl	800130c <LL_ADC_IsEnabled>
 800148e:	4603      	mov	r3, r0
 8001490:	431c      	orrs	r4, r3
 8001492:	4863      	ldr	r0, [pc, #396]	; (8001620 <HAL_ADC_Init+0x2a0>)
 8001494:	f7ff ff3a 	bl	800130c <LL_ADC_IsEnabled>
 8001498:	4603      	mov	r3, r0
 800149a:	4323      	orrs	r3, r4
 800149c:	2b00      	cmp	r3, #0
 800149e:	d105      	bne.n	80014ac <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	4619      	mov	r1, r3
 80014a6:	485f      	ldr	r0, [pc, #380]	; (8001624 <HAL_ADC_Init+0x2a4>)
 80014a8:	f7ff fdde 	bl	8001068 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	7e5b      	ldrb	r3, [r3, #25]
 80014b0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014b6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80014bc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80014c2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014ca:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014cc:	4313      	orrs	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d106      	bne.n	80014e8 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014de:	3b01      	subs	r3, #1
 80014e0:	045b      	lsls	r3, r3, #17
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d009      	beq.n	8001504 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4313      	orrs	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	68da      	ldr	r2, [r3, #12]
 800150a:	4b47      	ldr	r3, [pc, #284]	; (8001628 <HAL_ADC_Init+0x2a8>)
 800150c:	4013      	ands	r3, r2
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	6812      	ldr	r2, [r2, #0]
 8001512:	69b9      	ldr	r1, [r7, #24]
 8001514:	430b      	orrs	r3, r1
 8001516:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ff08 	bl	8001332 <LL_ADC_REG_IsConversionOngoing>
 8001522:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff ff15 	bl	8001358 <LL_ADC_INJ_IsConversionOngoing>
 800152e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d13d      	bne.n	80015b2 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d13a      	bne.n	80015b2 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001540:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001548:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800154a:	4313      	orrs	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001558:	f023 0302 	bic.w	r3, r3, #2
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	6812      	ldr	r2, [r2, #0]
 8001560:	69b9      	ldr	r1, [r7, #24]
 8001562:	430b      	orrs	r3, r1
 8001564:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800156c:	2b01      	cmp	r3, #1
 800156e:	d118      	bne.n	80015a2 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800157a:	f023 0304 	bic.w	r3, r3, #4
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001586:	4311      	orrs	r1, r2
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800158c:	4311      	orrs	r1, r2
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001592:	430a      	orrs	r2, r1
 8001594:	431a      	orrs	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f042 0201 	orr.w	r2, r2, #1
 800159e:	611a      	str	r2, [r3, #16]
 80015a0:	e007      	b.n	80015b2 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	691a      	ldr	r2, [r3, #16]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f022 0201 	bic.w	r2, r2, #1
 80015b0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d10c      	bne.n	80015d4 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c0:	f023 010f 	bic.w	r1, r3, #15
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	69db      	ldr	r3, [r3, #28]
 80015c8:	1e5a      	subs	r2, r3, #1
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	430a      	orrs	r2, r1
 80015d0:	631a      	str	r2, [r3, #48]	; 0x30
 80015d2:	e007      	b.n	80015e4 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f022 020f 	bic.w	r2, r2, #15
 80015e2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015e8:	f023 0303 	bic.w	r3, r3, #3
 80015ec:	f043 0201 	orr.w	r2, r3, #1
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	655a      	str	r2, [r3, #84]	; 0x54
 80015f4:	e007      	b.n	8001606 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015fa:	f043 0210 	orr.w	r2, r3, #16
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001606:	7ffb      	ldrb	r3, [r7, #31]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3724      	adds	r7, #36	; 0x24
 800160c:	46bd      	mov	sp, r7
 800160e:	bd90      	pop	{r4, r7, pc}
 8001610:	20000000 	.word	0x20000000
 8001614:	053e2d63 	.word	0x053e2d63
 8001618:	50040000 	.word	0x50040000
 800161c:	50040100 	.word	0x50040100
 8001620:	50040200 	.word	0x50040200
 8001624:	50040300 	.word	0x50040300
 8001628:	fff0c007 	.word	0xfff0c007

0800162c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b0b6      	sub	sp, #216	; 0xd8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001636:	2300      	movs	r3, #0
 8001638:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800163c:	2300      	movs	r3, #0
 800163e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001646:	2b01      	cmp	r3, #1
 8001648:	d101      	bne.n	800164e <HAL_ADC_ConfigChannel+0x22>
 800164a:	2302      	movs	r3, #2
 800164c:	e3c7      	b.n	8001dde <HAL_ADC_ConfigChannel+0x7b2>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2201      	movs	r2, #1
 8001652:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff fe69 	bl	8001332 <LL_ADC_REG_IsConversionOngoing>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	f040 83a8 	bne.w	8001db8 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	2b05      	cmp	r3, #5
 800166e:	d824      	bhi.n	80016ba <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	3b02      	subs	r3, #2
 8001676:	2b03      	cmp	r3, #3
 8001678:	d81b      	bhi.n	80016b2 <HAL_ADC_ConfigChannel+0x86>
 800167a:	a201      	add	r2, pc, #4	; (adr r2, 8001680 <HAL_ADC_ConfigChannel+0x54>)
 800167c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001680:	08001691 	.word	0x08001691
 8001684:	08001699 	.word	0x08001699
 8001688:	080016a1 	.word	0x080016a1
 800168c:	080016a9 	.word	0x080016a9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	220c      	movs	r2, #12
 8001694:	605a      	str	r2, [r3, #4]
          break;
 8001696:	e011      	b.n	80016bc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	2212      	movs	r2, #18
 800169c:	605a      	str	r2, [r3, #4]
          break;
 800169e:	e00d      	b.n	80016bc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	2218      	movs	r2, #24
 80016a4:	605a      	str	r2, [r3, #4]
          break;
 80016a6:	e009      	b.n	80016bc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016ae:	605a      	str	r2, [r3, #4]
          break;
 80016b0:	e004      	b.n	80016bc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	2206      	movs	r2, #6
 80016b6:	605a      	str	r2, [r3, #4]
          break;
 80016b8:	e000      	b.n	80016bc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80016ba:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6818      	ldr	r0, [r3, #0]
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	6859      	ldr	r1, [r3, #4]
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	461a      	mov	r2, r3
 80016ca:	f7ff fd56 	bl	800117a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fe2d 	bl	8001332 <LL_ADC_REG_IsConversionOngoing>
 80016d8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff fe39 	bl	8001358 <LL_ADC_INJ_IsConversionOngoing>
 80016e6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f040 81a6 	bne.w	8001a40 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f040 81a1 	bne.w	8001a40 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6818      	ldr	r0, [r3, #0]
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	6819      	ldr	r1, [r3, #0]
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	461a      	mov	r2, r3
 800170c:	f7ff fd61 	bl	80011d2 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	695a      	ldr	r2, [r3, #20]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	08db      	lsrs	r3, r3, #3
 800171c:	f003 0303 	and.w	r3, r3, #3
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	2b04      	cmp	r3, #4
 8001730:	d00a      	beq.n	8001748 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6818      	ldr	r0, [r3, #0]
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	6919      	ldr	r1, [r3, #16]
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001742:	f7ff fcc5 	bl	80010d0 <LL_ADC_SetOffset>
 8001746:	e17b      	b.n	8001a40 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2100      	movs	r1, #0
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff fce2 	bl	8001118 <LL_ADC_GetOffsetChannel>
 8001754:	4603      	mov	r3, r0
 8001756:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800175a:	2b00      	cmp	r3, #0
 800175c:	d10a      	bne.n	8001774 <HAL_ADC_ConfigChannel+0x148>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2100      	movs	r1, #0
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff fcd7 	bl	8001118 <LL_ADC_GetOffsetChannel>
 800176a:	4603      	mov	r3, r0
 800176c:	0e9b      	lsrs	r3, r3, #26
 800176e:	f003 021f 	and.w	r2, r3, #31
 8001772:	e01e      	b.n	80017b2 <HAL_ADC_ConfigChannel+0x186>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2100      	movs	r1, #0
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fccc 	bl	8001118 <LL_ADC_GetOffsetChannel>
 8001780:	4603      	mov	r3, r0
 8001782:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001786:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800178a:	fa93 f3a3 	rbit	r3, r3
 800178e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001792:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001796:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800179a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80017a2:	2320      	movs	r3, #32
 80017a4:	e004      	b.n	80017b0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80017a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80017aa:	fab3 f383 	clz	r3, r3
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d105      	bne.n	80017ca <HAL_ADC_ConfigChannel+0x19e>
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	0e9b      	lsrs	r3, r3, #26
 80017c4:	f003 031f 	and.w	r3, r3, #31
 80017c8:	e018      	b.n	80017fc <HAL_ADC_ConfigChannel+0x1d0>
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80017d6:	fa93 f3a3 	rbit	r3, r3
 80017da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80017de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80017e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80017ee:	2320      	movs	r3, #32
 80017f0:	e004      	b.n	80017fc <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80017f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80017f6:	fab3 f383 	clz	r3, r3
 80017fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d106      	bne.n	800180e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2200      	movs	r2, #0
 8001806:	2100      	movs	r1, #0
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff fc9b 	bl	8001144 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2101      	movs	r1, #1
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff fc7f 	bl	8001118 <LL_ADC_GetOffsetChannel>
 800181a:	4603      	mov	r3, r0
 800181c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001820:	2b00      	cmp	r3, #0
 8001822:	d10a      	bne.n	800183a <HAL_ADC_ConfigChannel+0x20e>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2101      	movs	r1, #1
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fc74 	bl	8001118 <LL_ADC_GetOffsetChannel>
 8001830:	4603      	mov	r3, r0
 8001832:	0e9b      	lsrs	r3, r3, #26
 8001834:	f003 021f 	and.w	r2, r3, #31
 8001838:	e01e      	b.n	8001878 <HAL_ADC_ConfigChannel+0x24c>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2101      	movs	r1, #1
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff fc69 	bl	8001118 <LL_ADC_GetOffsetChannel>
 8001846:	4603      	mov	r3, r0
 8001848:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001850:	fa93 f3a3 	rbit	r3, r3
 8001854:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001858:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800185c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001860:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001864:	2b00      	cmp	r3, #0
 8001866:	d101      	bne.n	800186c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001868:	2320      	movs	r3, #32
 800186a:	e004      	b.n	8001876 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800186c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001870:	fab3 f383 	clz	r3, r3
 8001874:	b2db      	uxtb	r3, r3
 8001876:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001880:	2b00      	cmp	r3, #0
 8001882:	d105      	bne.n	8001890 <HAL_ADC_ConfigChannel+0x264>
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	0e9b      	lsrs	r3, r3, #26
 800188a:	f003 031f 	and.w	r3, r3, #31
 800188e:	e018      	b.n	80018c2 <HAL_ADC_ConfigChannel+0x296>
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001898:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800189c:	fa93 f3a3 	rbit	r3, r3
 80018a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80018a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80018a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80018ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80018b4:	2320      	movs	r3, #32
 80018b6:	e004      	b.n	80018c2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80018b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80018bc:	fab3 f383 	clz	r3, r3
 80018c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d106      	bne.n	80018d4 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2200      	movs	r2, #0
 80018cc:	2101      	movs	r1, #1
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff fc38 	bl	8001144 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2102      	movs	r1, #2
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff fc1c 	bl	8001118 <LL_ADC_GetOffsetChannel>
 80018e0:	4603      	mov	r3, r0
 80018e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d10a      	bne.n	8001900 <HAL_ADC_ConfigChannel+0x2d4>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2102      	movs	r1, #2
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fc11 	bl	8001118 <LL_ADC_GetOffsetChannel>
 80018f6:	4603      	mov	r3, r0
 80018f8:	0e9b      	lsrs	r3, r3, #26
 80018fa:	f003 021f 	and.w	r2, r3, #31
 80018fe:	e01e      	b.n	800193e <HAL_ADC_ConfigChannel+0x312>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2102      	movs	r1, #2
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff fc06 	bl	8001118 <LL_ADC_GetOffsetChannel>
 800190c:	4603      	mov	r3, r0
 800190e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001912:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001916:	fa93 f3a3 	rbit	r3, r3
 800191a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800191e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001922:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001926:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800192e:	2320      	movs	r3, #32
 8001930:	e004      	b.n	800193c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001932:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001936:	fab3 f383 	clz	r3, r3
 800193a:	b2db      	uxtb	r3, r3
 800193c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001946:	2b00      	cmp	r3, #0
 8001948:	d105      	bne.n	8001956 <HAL_ADC_ConfigChannel+0x32a>
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	0e9b      	lsrs	r3, r3, #26
 8001950:	f003 031f 	and.w	r3, r3, #31
 8001954:	e016      	b.n	8001984 <HAL_ADC_ConfigChannel+0x358>
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001962:	fa93 f3a3 	rbit	r3, r3
 8001966:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001968:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800196a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800196e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001976:	2320      	movs	r3, #32
 8001978:	e004      	b.n	8001984 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800197a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800197e:	fab3 f383 	clz	r3, r3
 8001982:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001984:	429a      	cmp	r2, r3
 8001986:	d106      	bne.n	8001996 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2200      	movs	r2, #0
 800198e:	2102      	movs	r1, #2
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff fbd7 	bl	8001144 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2103      	movs	r1, #3
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff fbbb 	bl	8001118 <LL_ADC_GetOffsetChannel>
 80019a2:	4603      	mov	r3, r0
 80019a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d10a      	bne.n	80019c2 <HAL_ADC_ConfigChannel+0x396>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2103      	movs	r1, #3
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff fbb0 	bl	8001118 <LL_ADC_GetOffsetChannel>
 80019b8:	4603      	mov	r3, r0
 80019ba:	0e9b      	lsrs	r3, r3, #26
 80019bc:	f003 021f 	and.w	r2, r3, #31
 80019c0:	e017      	b.n	80019f2 <HAL_ADC_ConfigChannel+0x3c6>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2103      	movs	r1, #3
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff fba5 	bl	8001118 <LL_ADC_GetOffsetChannel>
 80019ce:	4603      	mov	r3, r0
 80019d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019d4:	fa93 f3a3 	rbit	r3, r3
 80019d8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80019da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019dc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80019de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d101      	bne.n	80019e8 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80019e4:	2320      	movs	r3, #32
 80019e6:	e003      	b.n	80019f0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80019e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019ea:	fab3 f383 	clz	r3, r3
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d105      	bne.n	8001a0a <HAL_ADC_ConfigChannel+0x3de>
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	0e9b      	lsrs	r3, r3, #26
 8001a04:	f003 031f 	and.w	r3, r3, #31
 8001a08:	e011      	b.n	8001a2e <HAL_ADC_ConfigChannel+0x402>
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a12:	fa93 f3a3 	rbit	r3, r3
 8001a16:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001a18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a1a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001a22:	2320      	movs	r3, #32
 8001a24:	e003      	b.n	8001a2e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001a26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a28:	fab3 f383 	clz	r3, r3
 8001a2c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d106      	bne.n	8001a40 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2200      	movs	r2, #0
 8001a38:	2103      	movs	r1, #3
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff fb82 	bl	8001144 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff fc61 	bl	800130c <LL_ADC_IsEnabled>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f040 813f 	bne.w	8001cd0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6818      	ldr	r0, [r3, #0]
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	6819      	ldr	r1, [r3, #0]
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	f7ff fbe2 	bl	8001228 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	4a8e      	ldr	r2, [pc, #568]	; (8001ca4 <HAL_ADC_ConfigChannel+0x678>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	f040 8130 	bne.w	8001cd0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d10b      	bne.n	8001a98 <HAL_ADC_ConfigChannel+0x46c>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	0e9b      	lsrs	r3, r3, #26
 8001a86:	3301      	adds	r3, #1
 8001a88:	f003 031f 	and.w	r3, r3, #31
 8001a8c:	2b09      	cmp	r3, #9
 8001a8e:	bf94      	ite	ls
 8001a90:	2301      	movls	r3, #1
 8001a92:	2300      	movhi	r3, #0
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	e019      	b.n	8001acc <HAL_ADC_ConfigChannel+0x4a0>
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001aa0:	fa93 f3a3 	rbit	r3, r3
 8001aa4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001aa6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001aa8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001aaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001ab0:	2320      	movs	r3, #32
 8001ab2:	e003      	b.n	8001abc <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001ab4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ab6:	fab3 f383 	clz	r3, r3
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	3301      	adds	r3, #1
 8001abe:	f003 031f 	and.w	r3, r3, #31
 8001ac2:	2b09      	cmp	r3, #9
 8001ac4:	bf94      	ite	ls
 8001ac6:	2301      	movls	r3, #1
 8001ac8:	2300      	movhi	r3, #0
 8001aca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d079      	beq.n	8001bc4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d107      	bne.n	8001aec <HAL_ADC_ConfigChannel+0x4c0>
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	0e9b      	lsrs	r3, r3, #26
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	069b      	lsls	r3, r3, #26
 8001ae6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001aea:	e015      	b.n	8001b18 <HAL_ADC_ConfigChannel+0x4ec>
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001af4:	fa93 f3a3 	rbit	r3, r3
 8001af8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001afc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001afe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d101      	bne.n	8001b08 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001b04:	2320      	movs	r3, #32
 8001b06:	e003      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001b08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b0a:	fab3 f383 	clz	r3, r3
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	3301      	adds	r3, #1
 8001b12:	069b      	lsls	r3, r3, #26
 8001b14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d109      	bne.n	8001b38 <HAL_ADC_ConfigChannel+0x50c>
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	0e9b      	lsrs	r3, r3, #26
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	f003 031f 	and.w	r3, r3, #31
 8001b30:	2101      	movs	r1, #1
 8001b32:	fa01 f303 	lsl.w	r3, r1, r3
 8001b36:	e017      	b.n	8001b68 <HAL_ADC_ConfigChannel+0x53c>
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b40:	fa93 f3a3 	rbit	r3, r3
 8001b44:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001b46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b48:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001b4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d101      	bne.n	8001b54 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001b50:	2320      	movs	r3, #32
 8001b52:	e003      	b.n	8001b5c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001b54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b56:	fab3 f383 	clz	r3, r3
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	f003 031f 	and.w	r3, r3, #31
 8001b62:	2101      	movs	r1, #1
 8001b64:	fa01 f303 	lsl.w	r3, r1, r3
 8001b68:	ea42 0103 	orr.w	r1, r2, r3
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d10a      	bne.n	8001b8e <HAL_ADC_ConfigChannel+0x562>
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	0e9b      	lsrs	r3, r3, #26
 8001b7e:	3301      	adds	r3, #1
 8001b80:	f003 021f 	and.w	r2, r3, #31
 8001b84:	4613      	mov	r3, r2
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	4413      	add	r3, r2
 8001b8a:	051b      	lsls	r3, r3, #20
 8001b8c:	e018      	b.n	8001bc0 <HAL_ADC_ConfigChannel+0x594>
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b96:	fa93 f3a3 	rbit	r3, r3
 8001b9a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001ba6:	2320      	movs	r3, #32
 8001ba8:	e003      	b.n	8001bb2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bac:	fab3 f383 	clz	r3, r3
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	f003 021f 	and.w	r2, r3, #31
 8001bb8:	4613      	mov	r3, r2
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	4413      	add	r3, r2
 8001bbe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bc0:	430b      	orrs	r3, r1
 8001bc2:	e080      	b.n	8001cc6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d107      	bne.n	8001be0 <HAL_ADC_ConfigChannel+0x5b4>
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	0e9b      	lsrs	r3, r3, #26
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	069b      	lsls	r3, r3, #26
 8001bda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bde:	e015      	b.n	8001c0c <HAL_ADC_ConfigChannel+0x5e0>
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be8:	fa93 f3a3 	rbit	r3, r3
 8001bec:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bf0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001bf8:	2320      	movs	r3, #32
 8001bfa:	e003      	b.n	8001c04 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bfe:	fab3 f383 	clz	r3, r3
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	3301      	adds	r3, #1
 8001c06:	069b      	lsls	r3, r3, #26
 8001c08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d109      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x600>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	0e9b      	lsrs	r3, r3, #26
 8001c1e:	3301      	adds	r3, #1
 8001c20:	f003 031f 	and.w	r3, r3, #31
 8001c24:	2101      	movs	r1, #1
 8001c26:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2a:	e017      	b.n	8001c5c <HAL_ADC_ConfigChannel+0x630>
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c32:	6a3b      	ldr	r3, [r7, #32]
 8001c34:	fa93 f3a3 	rbit	r3, r3
 8001c38:	61fb      	str	r3, [r7, #28]
  return result;
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001c44:	2320      	movs	r3, #32
 8001c46:	e003      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4a:	fab3 f383 	clz	r3, r3
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	3301      	adds	r3, #1
 8001c52:	f003 031f 	and.w	r3, r3, #31
 8001c56:	2101      	movs	r1, #1
 8001c58:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5c:	ea42 0103 	orr.w	r1, r2, r3
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d10d      	bne.n	8001c88 <HAL_ADC_ConfigChannel+0x65c>
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	0e9b      	lsrs	r3, r3, #26
 8001c72:	3301      	adds	r3, #1
 8001c74:	f003 021f 	and.w	r2, r3, #31
 8001c78:	4613      	mov	r3, r2
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	4413      	add	r3, r2
 8001c7e:	3b1e      	subs	r3, #30
 8001c80:	051b      	lsls	r3, r3, #20
 8001c82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c86:	e01d      	b.n	8001cc4 <HAL_ADC_ConfigChannel+0x698>
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	fa93 f3a3 	rbit	r3, r3
 8001c94:	613b      	str	r3, [r7, #16]
  return result;
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d103      	bne.n	8001ca8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001ca0:	2320      	movs	r3, #32
 8001ca2:	e005      	b.n	8001cb0 <HAL_ADC_ConfigChannel+0x684>
 8001ca4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	fab3 f383 	clz	r3, r3
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	f003 021f 	and.w	r2, r3, #31
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	4413      	add	r3, r2
 8001cbc:	3b1e      	subs	r3, #30
 8001cbe:	051b      	lsls	r3, r3, #20
 8001cc0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cc4:	430b      	orrs	r3, r1
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	6892      	ldr	r2, [r2, #8]
 8001cca:	4619      	mov	r1, r3
 8001ccc:	f7ff fa81 	bl	80011d2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4b44      	ldr	r3, [pc, #272]	; (8001de8 <HAL_ADC_ConfigChannel+0x7bc>)
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d07a      	beq.n	8001dd2 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cdc:	4843      	ldr	r0, [pc, #268]	; (8001dec <HAL_ADC_ConfigChannel+0x7c0>)
 8001cde:	f7ff f9e9 	bl	80010b4 <LL_ADC_GetCommonPathInternalCh>
 8001ce2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a41      	ldr	r2, [pc, #260]	; (8001df0 <HAL_ADC_ConfigChannel+0x7c4>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d12c      	bne.n	8001d4a <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001cf0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cf4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d126      	bne.n	8001d4a <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a3c      	ldr	r2, [pc, #240]	; (8001df4 <HAL_ADC_ConfigChannel+0x7c8>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d004      	beq.n	8001d10 <HAL_ADC_ConfigChannel+0x6e4>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a3b      	ldr	r2, [pc, #236]	; (8001df8 <HAL_ADC_ConfigChannel+0x7cc>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d15d      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d14:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4834      	ldr	r0, [pc, #208]	; (8001dec <HAL_ADC_ConfigChannel+0x7c0>)
 8001d1c:	f7ff f9b7 	bl	800108e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d20:	4b36      	ldr	r3, [pc, #216]	; (8001dfc <HAL_ADC_ConfigChannel+0x7d0>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	099b      	lsrs	r3, r3, #6
 8001d26:	4a36      	ldr	r2, [pc, #216]	; (8001e00 <HAL_ADC_ConfigChannel+0x7d4>)
 8001d28:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2c:	099b      	lsrs	r3, r3, #6
 8001d2e:	1c5a      	adds	r2, r3, #1
 8001d30:	4613      	mov	r3, r2
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	4413      	add	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d3a:	e002      	b.n	8001d42 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1f9      	bne.n	8001d3c <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d48:	e040      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a2d      	ldr	r2, [pc, #180]	; (8001e04 <HAL_ADC_ConfigChannel+0x7d8>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d118      	bne.n	8001d86 <HAL_ADC_ConfigChannel+0x75a>
 8001d54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d112      	bne.n	8001d86 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a23      	ldr	r2, [pc, #140]	; (8001df4 <HAL_ADC_ConfigChannel+0x7c8>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d004      	beq.n	8001d74 <HAL_ADC_ConfigChannel+0x748>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a22      	ldr	r2, [pc, #136]	; (8001df8 <HAL_ADC_ConfigChannel+0x7cc>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d12d      	bne.n	8001dd0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	481b      	ldr	r0, [pc, #108]	; (8001dec <HAL_ADC_ConfigChannel+0x7c0>)
 8001d80:	f7ff f985 	bl	800108e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d84:	e024      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a1f      	ldr	r2, [pc, #124]	; (8001e08 <HAL_ADC_ConfigChannel+0x7dc>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d120      	bne.n	8001dd2 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001d90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d11a      	bne.n	8001dd2 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a14      	ldr	r2, [pc, #80]	; (8001df4 <HAL_ADC_ConfigChannel+0x7c8>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d115      	bne.n	8001dd2 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001da6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001daa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dae:	4619      	mov	r1, r3
 8001db0:	480e      	ldr	r0, [pc, #56]	; (8001dec <HAL_ADC_ConfigChannel+0x7c0>)
 8001db2:	f7ff f96c 	bl	800108e <LL_ADC_SetCommonPathInternalCh>
 8001db6:	e00c      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dbc:	f043 0220 	orr.w	r2, r3, #32
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001dca:	e002      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001dcc:	bf00      	nop
 8001dce:	e000      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001dd0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001dda:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	37d8      	adds	r7, #216	; 0xd8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	80080000 	.word	0x80080000
 8001dec:	50040300 	.word	0x50040300
 8001df0:	c7520000 	.word	0xc7520000
 8001df4:	50040000 	.word	0x50040000
 8001df8:	50040200 	.word	0x50040200
 8001dfc:	20000000 	.word	0x20000000
 8001e00:	053e2d63 	.word	0x053e2d63
 8001e04:	cb840000 	.word	0xcb840000
 8001e08:	80000001 	.word	0x80000001

08001e0c <LL_ADC_IsEnabled>:
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d101      	bne.n	8001e24 <LL_ADC_IsEnabled+0x18>
 8001e20:	2301      	movs	r3, #1
 8001e22:	e000      	b.n	8001e26 <LL_ADC_IsEnabled+0x1a>
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <LL_ADC_REG_IsConversionOngoing>:
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 0304 	and.w	r3, r3, #4
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	d101      	bne.n	8001e4a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e46:	2301      	movs	r3, #1
 8001e48:	e000      	b.n	8001e4c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001e58:	b590      	push	{r4, r7, lr}
 8001e5a:	b09f      	sub	sp, #124	; 0x7c
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e62:	2300      	movs	r3, #0
 8001e64:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d101      	bne.n	8001e76 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001e72:	2302      	movs	r3, #2
 8001e74:	e093      	b.n	8001f9e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001e7e:	2300      	movs	r3, #0
 8001e80:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001e82:	2300      	movs	r3, #0
 8001e84:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a47      	ldr	r2, [pc, #284]	; (8001fa8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d102      	bne.n	8001e96 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001e90:	4b46      	ldr	r3, [pc, #280]	; (8001fac <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001e92:	60bb      	str	r3, [r7, #8]
 8001e94:	e001      	b.n	8001e9a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001e96:	2300      	movs	r3, #0
 8001e98:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d10b      	bne.n	8001eb8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea4:	f043 0220 	orr.w	r2, r3, #32
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e072      	b.n	8001f9e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff ffb9 	bl	8001e32 <LL_ADC_REG_IsConversionOngoing>
 8001ec0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff ffb3 	bl	8001e32 <LL_ADC_REG_IsConversionOngoing>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d154      	bne.n	8001f7c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001ed2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d151      	bne.n	8001f7c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001ed8:	4b35      	ldr	r3, [pc, #212]	; (8001fb0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001eda:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d02c      	beq.n	8001f3e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	6859      	ldr	r1, [r3, #4]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ef6:	035b      	lsls	r3, r3, #13
 8001ef8:	430b      	orrs	r3, r1
 8001efa:	431a      	orrs	r2, r3
 8001efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001efe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f00:	4829      	ldr	r0, [pc, #164]	; (8001fa8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001f02:	f7ff ff83 	bl	8001e0c <LL_ADC_IsEnabled>
 8001f06:	4604      	mov	r4, r0
 8001f08:	4828      	ldr	r0, [pc, #160]	; (8001fac <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001f0a:	f7ff ff7f 	bl	8001e0c <LL_ADC_IsEnabled>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	431c      	orrs	r4, r3
 8001f12:	4828      	ldr	r0, [pc, #160]	; (8001fb4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001f14:	f7ff ff7a 	bl	8001e0c <LL_ADC_IsEnabled>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	4323      	orrs	r3, r4
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d137      	bne.n	8001f90 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001f20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001f28:	f023 030f 	bic.w	r3, r3, #15
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	6811      	ldr	r1, [r2, #0]
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	6892      	ldr	r2, [r2, #8]
 8001f34:	430a      	orrs	r2, r1
 8001f36:	431a      	orrs	r2, r3
 8001f38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f3a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f3c:	e028      	b.n	8001f90 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f48:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f4a:	4817      	ldr	r0, [pc, #92]	; (8001fa8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001f4c:	f7ff ff5e 	bl	8001e0c <LL_ADC_IsEnabled>
 8001f50:	4604      	mov	r4, r0
 8001f52:	4816      	ldr	r0, [pc, #88]	; (8001fac <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001f54:	f7ff ff5a 	bl	8001e0c <LL_ADC_IsEnabled>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	431c      	orrs	r4, r3
 8001f5c:	4815      	ldr	r0, [pc, #84]	; (8001fb4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001f5e:	f7ff ff55 	bl	8001e0c <LL_ADC_IsEnabled>
 8001f62:	4603      	mov	r3, r0
 8001f64:	4323      	orrs	r3, r4
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d112      	bne.n	8001f90 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001f72:	f023 030f 	bic.w	r3, r3, #15
 8001f76:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001f78:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f7a:	e009      	b.n	8001f90 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f80:	f043 0220 	orr.w	r2, r3, #32
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001f8e:	e000      	b.n	8001f92 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f90:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001f9a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	377c      	adds	r7, #124	; 0x7c
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd90      	pop	{r4, r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	50040000 	.word	0x50040000
 8001fac:	50040100 	.word	0x50040100
 8001fb0:	50040300 	.word	0x50040300
 8001fb4:	50040200 	.word	0x50040200

08001fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <__NVIC_SetPriorityGrouping+0x44>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fe0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fea:	4a04      	ldr	r2, [pc, #16]	; (8001ffc <__NVIC_SetPriorityGrouping+0x44>)
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	60d3      	str	r3, [r2, #12]
}
 8001ff0:	bf00      	nop
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002004:	4b04      	ldr	r3, [pc, #16]	; (8002018 <__NVIC_GetPriorityGrouping+0x18>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	0a1b      	lsrs	r3, r3, #8
 800200a:	f003 0307 	and.w	r3, r3, #7
}
 800200e:	4618      	mov	r0, r3
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	6039      	str	r1, [r7, #0]
 8002026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202c:	2b00      	cmp	r3, #0
 800202e:	db0a      	blt.n	8002046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	b2da      	uxtb	r2, r3
 8002034:	490c      	ldr	r1, [pc, #48]	; (8002068 <__NVIC_SetPriority+0x4c>)
 8002036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203a:	0112      	lsls	r2, r2, #4
 800203c:	b2d2      	uxtb	r2, r2
 800203e:	440b      	add	r3, r1
 8002040:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002044:	e00a      	b.n	800205c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	b2da      	uxtb	r2, r3
 800204a:	4908      	ldr	r1, [pc, #32]	; (800206c <__NVIC_SetPriority+0x50>)
 800204c:	79fb      	ldrb	r3, [r7, #7]
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	3b04      	subs	r3, #4
 8002054:	0112      	lsls	r2, r2, #4
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	440b      	add	r3, r1
 800205a:	761a      	strb	r2, [r3, #24]
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	e000e100 	.word	0xe000e100
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002070:	b480      	push	{r7}
 8002072:	b089      	sub	sp, #36	; 0x24
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f1c3 0307 	rsb	r3, r3, #7
 800208a:	2b04      	cmp	r3, #4
 800208c:	bf28      	it	cs
 800208e:	2304      	movcs	r3, #4
 8002090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	3304      	adds	r3, #4
 8002096:	2b06      	cmp	r3, #6
 8002098:	d902      	bls.n	80020a0 <NVIC_EncodePriority+0x30>
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	3b03      	subs	r3, #3
 800209e:	e000      	b.n	80020a2 <NVIC_EncodePriority+0x32>
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a4:	f04f 32ff 	mov.w	r2, #4294967295
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43da      	mvns	r2, r3
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	401a      	ands	r2, r3
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020b8:	f04f 31ff 	mov.w	r1, #4294967295
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	fa01 f303 	lsl.w	r3, r1, r3
 80020c2:	43d9      	mvns	r1, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c8:	4313      	orrs	r3, r2
         );
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3724      	adds	r7, #36	; 0x24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
	...

080020d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020e8:	d301      	bcc.n	80020ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ea:	2301      	movs	r3, #1
 80020ec:	e00f      	b.n	800210e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ee:	4a0a      	ldr	r2, [pc, #40]	; (8002118 <SysTick_Config+0x40>)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020f6:	210f      	movs	r1, #15
 80020f8:	f04f 30ff 	mov.w	r0, #4294967295
 80020fc:	f7ff ff8e 	bl	800201c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002100:	4b05      	ldr	r3, [pc, #20]	; (8002118 <SysTick_Config+0x40>)
 8002102:	2200      	movs	r2, #0
 8002104:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002106:	4b04      	ldr	r3, [pc, #16]	; (8002118 <SysTick_Config+0x40>)
 8002108:	2207      	movs	r2, #7
 800210a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	e000e010 	.word	0xe000e010

0800211c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f7ff ff47 	bl	8001fb8 <__NVIC_SetPriorityGrouping>
}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b086      	sub	sp, #24
 8002136:	af00      	add	r7, sp, #0
 8002138:	4603      	mov	r3, r0
 800213a:	60b9      	str	r1, [r7, #8]
 800213c:	607a      	str	r2, [r7, #4]
 800213e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002144:	f7ff ff5c 	bl	8002000 <__NVIC_GetPriorityGrouping>
 8002148:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	68b9      	ldr	r1, [r7, #8]
 800214e:	6978      	ldr	r0, [r7, #20]
 8002150:	f7ff ff8e 	bl	8002070 <NVIC_EncodePriority>
 8002154:	4602      	mov	r2, r0
 8002156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800215a:	4611      	mov	r1, r2
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff ff5d 	bl	800201c <__NVIC_SetPriority>
}
 8002162:	bf00      	nop
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b082      	sub	sp, #8
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7ff ffb0 	bl	80020d8 <SysTick_Config>
 8002178:	4603      	mov	r3, r0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
	...

08002184 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002184:	b480      	push	{r7}
 8002186:	b087      	sub	sp, #28
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800218e:	2300      	movs	r3, #0
 8002190:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002192:	e17f      	b.n	8002494 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	2101      	movs	r1, #1
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	fa01 f303 	lsl.w	r3, r1, r3
 80021a0:	4013      	ands	r3, r2
 80021a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 8171 	beq.w	800248e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 0303 	and.w	r3, r3, #3
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d005      	beq.n	80021c4 <HAL_GPIO_Init+0x40>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 0303 	and.w	r3, r3, #3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d130      	bne.n	8002226 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	2203      	movs	r2, #3
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43db      	mvns	r3, r3
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	4013      	ands	r3, r2
 80021da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	68da      	ldr	r2, [r3, #12]
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021fa:	2201      	movs	r2, #1
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43db      	mvns	r3, r3
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	4013      	ands	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	091b      	lsrs	r3, r3, #4
 8002210:	f003 0201 	and.w	r2, r3, #1
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	4313      	orrs	r3, r2
 800221e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	2b03      	cmp	r3, #3
 8002230:	d118      	bne.n	8002264 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002236:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002238:	2201      	movs	r2, #1
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	43db      	mvns	r3, r3
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	4013      	ands	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	08db      	lsrs	r3, r3, #3
 800224e:	f003 0201 	and.w	r2, r3, #1
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	4313      	orrs	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f003 0303 	and.w	r3, r3, #3
 800226c:	2b03      	cmp	r3, #3
 800226e:	d017      	beq.n	80022a0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	2203      	movs	r2, #3
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	43db      	mvns	r3, r3
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	4013      	ands	r3, r2
 8002286:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	4313      	orrs	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 0303 	and.w	r3, r3, #3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d123      	bne.n	80022f4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	08da      	lsrs	r2, r3, #3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3208      	adds	r2, #8
 80022b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	f003 0307 	and.w	r3, r3, #7
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	220f      	movs	r2, #15
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	43db      	mvns	r3, r3
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	4013      	ands	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	691a      	ldr	r2, [r3, #16]
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	08da      	lsrs	r2, r3, #3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	3208      	adds	r2, #8
 80022ee:	6939      	ldr	r1, [r7, #16]
 80022f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	2203      	movs	r2, #3
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	4013      	ands	r3, r2
 800230a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f003 0203 	and.w	r2, r3, #3
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	4313      	orrs	r3, r2
 8002320:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002330:	2b00      	cmp	r3, #0
 8002332:	f000 80ac 	beq.w	800248e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002336:	4b5f      	ldr	r3, [pc, #380]	; (80024b4 <HAL_GPIO_Init+0x330>)
 8002338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800233a:	4a5e      	ldr	r2, [pc, #376]	; (80024b4 <HAL_GPIO_Init+0x330>)
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	6613      	str	r3, [r2, #96]	; 0x60
 8002342:	4b5c      	ldr	r3, [pc, #368]	; (80024b4 <HAL_GPIO_Init+0x330>)
 8002344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	60bb      	str	r3, [r7, #8]
 800234c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800234e:	4a5a      	ldr	r2, [pc, #360]	; (80024b8 <HAL_GPIO_Init+0x334>)
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	089b      	lsrs	r3, r3, #2
 8002354:	3302      	adds	r3, #2
 8002356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800235a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	f003 0303 	and.w	r3, r3, #3
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	220f      	movs	r2, #15
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43db      	mvns	r3, r3
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	4013      	ands	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002378:	d025      	beq.n	80023c6 <HAL_GPIO_Init+0x242>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a4f      	ldr	r2, [pc, #316]	; (80024bc <HAL_GPIO_Init+0x338>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d01f      	beq.n	80023c2 <HAL_GPIO_Init+0x23e>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a4e      	ldr	r2, [pc, #312]	; (80024c0 <HAL_GPIO_Init+0x33c>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d019      	beq.n	80023be <HAL_GPIO_Init+0x23a>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a4d      	ldr	r2, [pc, #308]	; (80024c4 <HAL_GPIO_Init+0x340>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d013      	beq.n	80023ba <HAL_GPIO_Init+0x236>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a4c      	ldr	r2, [pc, #304]	; (80024c8 <HAL_GPIO_Init+0x344>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d00d      	beq.n	80023b6 <HAL_GPIO_Init+0x232>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a4b      	ldr	r2, [pc, #300]	; (80024cc <HAL_GPIO_Init+0x348>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d007      	beq.n	80023b2 <HAL_GPIO_Init+0x22e>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a4a      	ldr	r2, [pc, #296]	; (80024d0 <HAL_GPIO_Init+0x34c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d101      	bne.n	80023ae <HAL_GPIO_Init+0x22a>
 80023aa:	2306      	movs	r3, #6
 80023ac:	e00c      	b.n	80023c8 <HAL_GPIO_Init+0x244>
 80023ae:	2307      	movs	r3, #7
 80023b0:	e00a      	b.n	80023c8 <HAL_GPIO_Init+0x244>
 80023b2:	2305      	movs	r3, #5
 80023b4:	e008      	b.n	80023c8 <HAL_GPIO_Init+0x244>
 80023b6:	2304      	movs	r3, #4
 80023b8:	e006      	b.n	80023c8 <HAL_GPIO_Init+0x244>
 80023ba:	2303      	movs	r3, #3
 80023bc:	e004      	b.n	80023c8 <HAL_GPIO_Init+0x244>
 80023be:	2302      	movs	r3, #2
 80023c0:	e002      	b.n	80023c8 <HAL_GPIO_Init+0x244>
 80023c2:	2301      	movs	r3, #1
 80023c4:	e000      	b.n	80023c8 <HAL_GPIO_Init+0x244>
 80023c6:	2300      	movs	r3, #0
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	f002 0203 	and.w	r2, r2, #3
 80023ce:	0092      	lsls	r2, r2, #2
 80023d0:	4093      	lsls	r3, r2
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023d8:	4937      	ldr	r1, [pc, #220]	; (80024b8 <HAL_GPIO_Init+0x334>)
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	089b      	lsrs	r3, r3, #2
 80023de:	3302      	adds	r3, #2
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023e6:	4b3b      	ldr	r3, [pc, #236]	; (80024d4 <HAL_GPIO_Init+0x350>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	43db      	mvns	r3, r3
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	4013      	ands	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	4313      	orrs	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800240a:	4a32      	ldr	r2, [pc, #200]	; (80024d4 <HAL_GPIO_Init+0x350>)
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002410:	4b30      	ldr	r3, [pc, #192]	; (80024d4 <HAL_GPIO_Init+0x350>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	43db      	mvns	r3, r3
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	4013      	ands	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d003      	beq.n	8002434 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	4313      	orrs	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002434:	4a27      	ldr	r2, [pc, #156]	; (80024d4 <HAL_GPIO_Init+0x350>)
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800243a:	4b26      	ldr	r3, [pc, #152]	; (80024d4 <HAL_GPIO_Init+0x350>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	43db      	mvns	r3, r3
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	4013      	ands	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	4313      	orrs	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800245e:	4a1d      	ldr	r2, [pc, #116]	; (80024d4 <HAL_GPIO_Init+0x350>)
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002464:	4b1b      	ldr	r3, [pc, #108]	; (80024d4 <HAL_GPIO_Init+0x350>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	43db      	mvns	r3, r3
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	4013      	ands	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	4313      	orrs	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002488:	4a12      	ldr	r2, [pc, #72]	; (80024d4 <HAL_GPIO_Init+0x350>)
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	3301      	adds	r3, #1
 8002492:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	fa22 f303 	lsr.w	r3, r2, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f47f ae78 	bne.w	8002194 <HAL_GPIO_Init+0x10>
  }
}
 80024a4:	bf00      	nop
 80024a6:	bf00      	nop
 80024a8:	371c      	adds	r7, #28
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	40021000 	.word	0x40021000
 80024b8:	40010000 	.word	0x40010000
 80024bc:	48000400 	.word	0x48000400
 80024c0:	48000800 	.word	0x48000800
 80024c4:	48000c00 	.word	0x48000c00
 80024c8:	48001000 	.word	0x48001000
 80024cc:	48001400 	.word	0x48001400
 80024d0:	48001800 	.word	0x48001800
 80024d4:	40010400 	.word	0x40010400

080024d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	691a      	ldr	r2, [r3, #16]
 80024e8:	887b      	ldrh	r3, [r7, #2]
 80024ea:	4013      	ands	r3, r2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d002      	beq.n	80024f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024f0:	2301      	movs	r3, #1
 80024f2:	73fb      	strb	r3, [r7, #15]
 80024f4:	e001      	b.n	80024fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024f6:	2300      	movs	r3, #0
 80024f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3714      	adds	r7, #20
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	460b      	mov	r3, r1
 8002512:	807b      	strh	r3, [r7, #2]
 8002514:	4613      	mov	r3, r2
 8002516:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002518:	787b      	ldrb	r3, [r7, #1]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800251e:	887a      	ldrh	r2, [r7, #2]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002524:	e002      	b.n	800252c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002526:	887a      	ldrh	r2, [r7, #2]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	460b      	mov	r3, r1
 8002542:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	695b      	ldr	r3, [r3, #20]
 8002548:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800254a:	887a      	ldrh	r2, [r7, #2]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4013      	ands	r3, r2
 8002550:	041a      	lsls	r2, r3, #16
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	43d9      	mvns	r1, r3
 8002556:	887b      	ldrh	r3, [r7, #2]
 8002558:	400b      	ands	r3, r1
 800255a:	431a      	orrs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	619a      	str	r2, [r3, #24]
}
 8002560:	bf00      	nop
 8002562:	3714      	adds	r7, #20
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002570:	4b04      	ldr	r3, [pc, #16]	; (8002584 <HAL_PWREx_GetVoltageRange+0x18>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002578:	4618      	mov	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	40007000 	.word	0x40007000

08002588 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002596:	d130      	bne.n	80025fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002598:	4b23      	ldr	r3, [pc, #140]	; (8002628 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025a4:	d038      	beq.n	8002618 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025a6:	4b20      	ldr	r3, [pc, #128]	; (8002628 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025ae:	4a1e      	ldr	r2, [pc, #120]	; (8002628 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80025b6:	4b1d      	ldr	r3, [pc, #116]	; (800262c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2232      	movs	r2, #50	; 0x32
 80025bc:	fb02 f303 	mul.w	r3, r2, r3
 80025c0:	4a1b      	ldr	r2, [pc, #108]	; (8002630 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80025c2:	fba2 2303 	umull	r2, r3, r2, r3
 80025c6:	0c9b      	lsrs	r3, r3, #18
 80025c8:	3301      	adds	r3, #1
 80025ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025cc:	e002      	b.n	80025d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	3b01      	subs	r3, #1
 80025d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025d4:	4b14      	ldr	r3, [pc, #80]	; (8002628 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025d6:	695b      	ldr	r3, [r3, #20]
 80025d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025e0:	d102      	bne.n	80025e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1f2      	bne.n	80025ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025e8:	4b0f      	ldr	r3, [pc, #60]	; (8002628 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025f4:	d110      	bne.n	8002618 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e00f      	b.n	800261a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80025fa:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002606:	d007      	beq.n	8002618 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002608:	4b07      	ldr	r3, [pc, #28]	; (8002628 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002610:	4a05      	ldr	r2, [pc, #20]	; (8002628 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002612:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002616:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	40007000 	.word	0x40007000
 800262c:	20000000 	.word	0x20000000
 8002630:	431bde83 	.word	0x431bde83

08002634 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b088      	sub	sp, #32
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e3d4      	b.n	8002df0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002646:	4ba1      	ldr	r3, [pc, #644]	; (80028cc <HAL_RCC_OscConfig+0x298>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 030c 	and.w	r3, r3, #12
 800264e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002650:	4b9e      	ldr	r3, [pc, #632]	; (80028cc <HAL_RCC_OscConfig+0x298>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	f003 0303 	and.w	r3, r3, #3
 8002658:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0310 	and.w	r3, r3, #16
 8002662:	2b00      	cmp	r3, #0
 8002664:	f000 80e4 	beq.w	8002830 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d007      	beq.n	800267e <HAL_RCC_OscConfig+0x4a>
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	2b0c      	cmp	r3, #12
 8002672:	f040 808b 	bne.w	800278c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	2b01      	cmp	r3, #1
 800267a:	f040 8087 	bne.w	800278c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800267e:	4b93      	ldr	r3, [pc, #588]	; (80028cc <HAL_RCC_OscConfig+0x298>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d005      	beq.n	8002696 <HAL_RCC_OscConfig+0x62>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e3ac      	b.n	8002df0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a1a      	ldr	r2, [r3, #32]
 800269a:	4b8c      	ldr	r3, [pc, #560]	; (80028cc <HAL_RCC_OscConfig+0x298>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d004      	beq.n	80026b0 <HAL_RCC_OscConfig+0x7c>
 80026a6:	4b89      	ldr	r3, [pc, #548]	; (80028cc <HAL_RCC_OscConfig+0x298>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026ae:	e005      	b.n	80026bc <HAL_RCC_OscConfig+0x88>
 80026b0:	4b86      	ldr	r3, [pc, #536]	; (80028cc <HAL_RCC_OscConfig+0x298>)
 80026b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026b6:	091b      	lsrs	r3, r3, #4
 80026b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026bc:	4293      	cmp	r3, r2
 80026be:	d223      	bcs.n	8002708 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f000 fd41 	bl	800314c <RCC_SetFlashLatencyFromMSIRange>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e38d      	b.n	8002df0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026d4:	4b7d      	ldr	r3, [pc, #500]	; (80028cc <HAL_RCC_OscConfig+0x298>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a7c      	ldr	r2, [pc, #496]	; (80028cc <HAL_RCC_OscConfig+0x298>)
 80026da:	f043 0308 	orr.w	r3, r3, #8
 80026de:	6013      	str	r3, [r2, #0]
 80026e0:	4b7a      	ldr	r3, [pc, #488]	; (80028cc <HAL_RCC_OscConfig+0x298>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	4977      	ldr	r1, [pc, #476]	; (80028cc <HAL_RCC_OscConfig+0x298>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026f2:	4b76      	ldr	r3, [pc, #472]	; (80028cc <HAL_RCC_OscConfig+0x298>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	021b      	lsls	r3, r3, #8
 8002700:	4972      	ldr	r1, [pc, #456]	; (80028cc <HAL_RCC_OscConfig+0x298>)
 8002702:	4313      	orrs	r3, r2
 8002704:	604b      	str	r3, [r1, #4]
 8002706:	e025      	b.n	8002754 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002708:	4b70      	ldr	r3, [pc, #448]	; (80028cc <HAL_RCC_OscConfig+0x298>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a6f      	ldr	r2, [pc, #444]	; (80028cc <HAL_RCC_OscConfig+0x298>)
 800270e:	f043 0308 	orr.w	r3, r3, #8
 8002712:	6013      	str	r3, [r2, #0]
 8002714:	4b6d      	ldr	r3, [pc, #436]	; (80028cc <HAL_RCC_OscConfig+0x298>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	496a      	ldr	r1, [pc, #424]	; (80028cc <HAL_RCC_OscConfig+0x298>)
 8002722:	4313      	orrs	r3, r2
 8002724:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002726:	4b69      	ldr	r3, [pc, #420]	; (80028cc <HAL_RCC_OscConfig+0x298>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	021b      	lsls	r3, r3, #8
 8002734:	4965      	ldr	r1, [pc, #404]	; (80028cc <HAL_RCC_OscConfig+0x298>)
 8002736:	4313      	orrs	r3, r2
 8002738:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d109      	bne.n	8002754 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	4618      	mov	r0, r3
 8002746:	f000 fd01 	bl	800314c <RCC_SetFlashLatencyFromMSIRange>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e34d      	b.n	8002df0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002754:	f000 fc36 	bl	8002fc4 <HAL_RCC_GetSysClockFreq>
 8002758:	4602      	mov	r2, r0
 800275a:	4b5c      	ldr	r3, [pc, #368]	; (80028cc <HAL_RCC_OscConfig+0x298>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	091b      	lsrs	r3, r3, #4
 8002760:	f003 030f 	and.w	r3, r3, #15
 8002764:	495a      	ldr	r1, [pc, #360]	; (80028d0 <HAL_RCC_OscConfig+0x29c>)
 8002766:	5ccb      	ldrb	r3, [r1, r3]
 8002768:	f003 031f 	and.w	r3, r3, #31
 800276c:	fa22 f303 	lsr.w	r3, r2, r3
 8002770:	4a58      	ldr	r2, [pc, #352]	; (80028d4 <HAL_RCC_OscConfig+0x2a0>)
 8002772:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002774:	4b58      	ldr	r3, [pc, #352]	; (80028d8 <HAL_RCC_OscConfig+0x2a4>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4618      	mov	r0, r3
 800277a:	f7fe fbf5 	bl	8000f68 <HAL_InitTick>
 800277e:	4603      	mov	r3, r0
 8002780:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002782:	7bfb      	ldrb	r3, [r7, #15]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d052      	beq.n	800282e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002788:	7bfb      	ldrb	r3, [r7, #15]
 800278a:	e331      	b.n	8002df0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d032      	beq.n	80027fa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002794:	4b4d      	ldr	r3, [pc, #308]	; (80028cc <HAL_RCC_OscConfig+0x298>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a4c      	ldr	r2, [pc, #304]	; (80028cc <HAL_RCC_OscConfig+0x298>)
 800279a:	f043 0301 	orr.w	r3, r3, #1
 800279e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027a0:	f7fe fc32 	bl	8001008 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027a8:	f7fe fc2e 	bl	8001008 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e31a      	b.n	8002df0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027ba:	4b44      	ldr	r3, [pc, #272]	; (80028cc <HAL_RCC_OscConfig+0x298>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0f0      	beq.n	80027a8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027c6:	4b41      	ldr	r3, [pc, #260]	; (80028cc <HAL_RCC_OscConfig+0x298>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a40      	ldr	r2, [pc, #256]	; (80028cc <HAL_RCC_OscConfig+0x298>)
 80027cc:	f043 0308 	orr.w	r3, r3, #8
 80027d0:	6013      	str	r3, [r2, #0]
 80027d2:	4b3e      	ldr	r3, [pc, #248]	; (80028cc <HAL_RCC_OscConfig+0x298>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	493b      	ldr	r1, [pc, #236]	; (80028cc <HAL_RCC_OscConfig+0x298>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027e4:	4b39      	ldr	r3, [pc, #228]	; (80028cc <HAL_RCC_OscConfig+0x298>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	69db      	ldr	r3, [r3, #28]
 80027f0:	021b      	lsls	r3, r3, #8
 80027f2:	4936      	ldr	r1, [pc, #216]	; (80028cc <HAL_RCC_OscConfig+0x298>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	604b      	str	r3, [r1, #4]
 80027f8:	e01a      	b.n	8002830 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027fa:	4b34      	ldr	r3, [pc, #208]	; (80028cc <HAL_RCC_OscConfig+0x298>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a33      	ldr	r2, [pc, #204]	; (80028cc <HAL_RCC_OscConfig+0x298>)
 8002800:	f023 0301 	bic.w	r3, r3, #1
 8002804:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002806:	f7fe fbff 	bl	8001008 <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800280c:	e008      	b.n	8002820 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800280e:	f7fe fbfb 	bl	8001008 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e2e7      	b.n	8002df0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002820:	4b2a      	ldr	r3, [pc, #168]	; (80028cc <HAL_RCC_OscConfig+0x298>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1f0      	bne.n	800280e <HAL_RCC_OscConfig+0x1da>
 800282c:	e000      	b.n	8002830 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800282e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	2b00      	cmp	r3, #0
 800283a:	d074      	beq.n	8002926 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	2b08      	cmp	r3, #8
 8002840:	d005      	beq.n	800284e <HAL_RCC_OscConfig+0x21a>
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	2b0c      	cmp	r3, #12
 8002846:	d10e      	bne.n	8002866 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	2b03      	cmp	r3, #3
 800284c:	d10b      	bne.n	8002866 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800284e:	4b1f      	ldr	r3, [pc, #124]	; (80028cc <HAL_RCC_OscConfig+0x298>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d064      	beq.n	8002924 <HAL_RCC_OscConfig+0x2f0>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d160      	bne.n	8002924 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e2c4      	b.n	8002df0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800286e:	d106      	bne.n	800287e <HAL_RCC_OscConfig+0x24a>
 8002870:	4b16      	ldr	r3, [pc, #88]	; (80028cc <HAL_RCC_OscConfig+0x298>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a15      	ldr	r2, [pc, #84]	; (80028cc <HAL_RCC_OscConfig+0x298>)
 8002876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800287a:	6013      	str	r3, [r2, #0]
 800287c:	e01d      	b.n	80028ba <HAL_RCC_OscConfig+0x286>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002886:	d10c      	bne.n	80028a2 <HAL_RCC_OscConfig+0x26e>
 8002888:	4b10      	ldr	r3, [pc, #64]	; (80028cc <HAL_RCC_OscConfig+0x298>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a0f      	ldr	r2, [pc, #60]	; (80028cc <HAL_RCC_OscConfig+0x298>)
 800288e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002892:	6013      	str	r3, [r2, #0]
 8002894:	4b0d      	ldr	r3, [pc, #52]	; (80028cc <HAL_RCC_OscConfig+0x298>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a0c      	ldr	r2, [pc, #48]	; (80028cc <HAL_RCC_OscConfig+0x298>)
 800289a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800289e:	6013      	str	r3, [r2, #0]
 80028a0:	e00b      	b.n	80028ba <HAL_RCC_OscConfig+0x286>
 80028a2:	4b0a      	ldr	r3, [pc, #40]	; (80028cc <HAL_RCC_OscConfig+0x298>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a09      	ldr	r2, [pc, #36]	; (80028cc <HAL_RCC_OscConfig+0x298>)
 80028a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ac:	6013      	str	r3, [r2, #0]
 80028ae:	4b07      	ldr	r3, [pc, #28]	; (80028cc <HAL_RCC_OscConfig+0x298>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a06      	ldr	r2, [pc, #24]	; (80028cc <HAL_RCC_OscConfig+0x298>)
 80028b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028b8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d01c      	beq.n	80028fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c2:	f7fe fba1 	bl	8001008 <HAL_GetTick>
 80028c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028c8:	e011      	b.n	80028ee <HAL_RCC_OscConfig+0x2ba>
 80028ca:	bf00      	nop
 80028cc:	40021000 	.word	0x40021000
 80028d0:	080065d0 	.word	0x080065d0
 80028d4:	20000000 	.word	0x20000000
 80028d8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028dc:	f7fe fb94 	bl	8001008 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b64      	cmp	r3, #100	; 0x64
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e280      	b.n	8002df0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028ee:	4baf      	ldr	r3, [pc, #700]	; (8002bac <HAL_RCC_OscConfig+0x578>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0f0      	beq.n	80028dc <HAL_RCC_OscConfig+0x2a8>
 80028fa:	e014      	b.n	8002926 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fc:	f7fe fb84 	bl	8001008 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002904:	f7fe fb80 	bl	8001008 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b64      	cmp	r3, #100	; 0x64
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e26c      	b.n	8002df0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002916:	4ba5      	ldr	r3, [pc, #660]	; (8002bac <HAL_RCC_OscConfig+0x578>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1f0      	bne.n	8002904 <HAL_RCC_OscConfig+0x2d0>
 8002922:	e000      	b.n	8002926 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d060      	beq.n	80029f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	2b04      	cmp	r3, #4
 8002936:	d005      	beq.n	8002944 <HAL_RCC_OscConfig+0x310>
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	2b0c      	cmp	r3, #12
 800293c:	d119      	bne.n	8002972 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	2b02      	cmp	r3, #2
 8002942:	d116      	bne.n	8002972 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002944:	4b99      	ldr	r3, [pc, #612]	; (8002bac <HAL_RCC_OscConfig+0x578>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800294c:	2b00      	cmp	r3, #0
 800294e:	d005      	beq.n	800295c <HAL_RCC_OscConfig+0x328>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e249      	b.n	8002df0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800295c:	4b93      	ldr	r3, [pc, #588]	; (8002bac <HAL_RCC_OscConfig+0x578>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	061b      	lsls	r3, r3, #24
 800296a:	4990      	ldr	r1, [pc, #576]	; (8002bac <HAL_RCC_OscConfig+0x578>)
 800296c:	4313      	orrs	r3, r2
 800296e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002970:	e040      	b.n	80029f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d023      	beq.n	80029c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800297a:	4b8c      	ldr	r3, [pc, #560]	; (8002bac <HAL_RCC_OscConfig+0x578>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a8b      	ldr	r2, [pc, #556]	; (8002bac <HAL_RCC_OscConfig+0x578>)
 8002980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002984:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002986:	f7fe fb3f 	bl	8001008 <HAL_GetTick>
 800298a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800298c:	e008      	b.n	80029a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800298e:	f7fe fb3b 	bl	8001008 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e227      	b.n	8002df0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029a0:	4b82      	ldr	r3, [pc, #520]	; (8002bac <HAL_RCC_OscConfig+0x578>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d0f0      	beq.n	800298e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ac:	4b7f      	ldr	r3, [pc, #508]	; (8002bac <HAL_RCC_OscConfig+0x578>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	061b      	lsls	r3, r3, #24
 80029ba:	497c      	ldr	r1, [pc, #496]	; (8002bac <HAL_RCC_OscConfig+0x578>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	604b      	str	r3, [r1, #4]
 80029c0:	e018      	b.n	80029f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029c2:	4b7a      	ldr	r3, [pc, #488]	; (8002bac <HAL_RCC_OscConfig+0x578>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a79      	ldr	r2, [pc, #484]	; (8002bac <HAL_RCC_OscConfig+0x578>)
 80029c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ce:	f7fe fb1b 	bl	8001008 <HAL_GetTick>
 80029d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029d4:	e008      	b.n	80029e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029d6:	f7fe fb17 	bl	8001008 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e203      	b.n	8002df0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029e8:	4b70      	ldr	r3, [pc, #448]	; (8002bac <HAL_RCC_OscConfig+0x578>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1f0      	bne.n	80029d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d03c      	beq.n	8002a7a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d01c      	beq.n	8002a42 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a08:	4b68      	ldr	r3, [pc, #416]	; (8002bac <HAL_RCC_OscConfig+0x578>)
 8002a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a0e:	4a67      	ldr	r2, [pc, #412]	; (8002bac <HAL_RCC_OscConfig+0x578>)
 8002a10:	f043 0301 	orr.w	r3, r3, #1
 8002a14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a18:	f7fe faf6 	bl	8001008 <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a20:	f7fe faf2 	bl	8001008 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e1de      	b.n	8002df0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a32:	4b5e      	ldr	r3, [pc, #376]	; (8002bac <HAL_RCC_OscConfig+0x578>)
 8002a34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0ef      	beq.n	8002a20 <HAL_RCC_OscConfig+0x3ec>
 8002a40:	e01b      	b.n	8002a7a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a42:	4b5a      	ldr	r3, [pc, #360]	; (8002bac <HAL_RCC_OscConfig+0x578>)
 8002a44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a48:	4a58      	ldr	r2, [pc, #352]	; (8002bac <HAL_RCC_OscConfig+0x578>)
 8002a4a:	f023 0301 	bic.w	r3, r3, #1
 8002a4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a52:	f7fe fad9 	bl	8001008 <HAL_GetTick>
 8002a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a58:	e008      	b.n	8002a6c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a5a:	f7fe fad5 	bl	8001008 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e1c1      	b.n	8002df0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a6c:	4b4f      	ldr	r3, [pc, #316]	; (8002bac <HAL_RCC_OscConfig+0x578>)
 8002a6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1ef      	bne.n	8002a5a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0304 	and.w	r3, r3, #4
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f000 80a6 	beq.w	8002bd4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a8c:	4b47      	ldr	r3, [pc, #284]	; (8002bac <HAL_RCC_OscConfig+0x578>)
 8002a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10d      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a98:	4b44      	ldr	r3, [pc, #272]	; (8002bac <HAL_RCC_OscConfig+0x578>)
 8002a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9c:	4a43      	ldr	r2, [pc, #268]	; (8002bac <HAL_RCC_OscConfig+0x578>)
 8002a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aa2:	6593      	str	r3, [r2, #88]	; 0x58
 8002aa4:	4b41      	ldr	r3, [pc, #260]	; (8002bac <HAL_RCC_OscConfig+0x578>)
 8002aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aac:	60bb      	str	r3, [r7, #8]
 8002aae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ab4:	4b3e      	ldr	r3, [pc, #248]	; (8002bb0 <HAL_RCC_OscConfig+0x57c>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d118      	bne.n	8002af2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ac0:	4b3b      	ldr	r3, [pc, #236]	; (8002bb0 <HAL_RCC_OscConfig+0x57c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a3a      	ldr	r2, [pc, #232]	; (8002bb0 <HAL_RCC_OscConfig+0x57c>)
 8002ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002acc:	f7fe fa9c 	bl	8001008 <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ad4:	f7fe fa98 	bl	8001008 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e184      	b.n	8002df0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ae6:	4b32      	ldr	r3, [pc, #200]	; (8002bb0 <HAL_RCC_OscConfig+0x57c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d0f0      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d108      	bne.n	8002b0c <HAL_RCC_OscConfig+0x4d8>
 8002afa:	4b2c      	ldr	r3, [pc, #176]	; (8002bac <HAL_RCC_OscConfig+0x578>)
 8002afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b00:	4a2a      	ldr	r2, [pc, #168]	; (8002bac <HAL_RCC_OscConfig+0x578>)
 8002b02:	f043 0301 	orr.w	r3, r3, #1
 8002b06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b0a:	e024      	b.n	8002b56 <HAL_RCC_OscConfig+0x522>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	2b05      	cmp	r3, #5
 8002b12:	d110      	bne.n	8002b36 <HAL_RCC_OscConfig+0x502>
 8002b14:	4b25      	ldr	r3, [pc, #148]	; (8002bac <HAL_RCC_OscConfig+0x578>)
 8002b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b1a:	4a24      	ldr	r2, [pc, #144]	; (8002bac <HAL_RCC_OscConfig+0x578>)
 8002b1c:	f043 0304 	orr.w	r3, r3, #4
 8002b20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b24:	4b21      	ldr	r3, [pc, #132]	; (8002bac <HAL_RCC_OscConfig+0x578>)
 8002b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b2a:	4a20      	ldr	r2, [pc, #128]	; (8002bac <HAL_RCC_OscConfig+0x578>)
 8002b2c:	f043 0301 	orr.w	r3, r3, #1
 8002b30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b34:	e00f      	b.n	8002b56 <HAL_RCC_OscConfig+0x522>
 8002b36:	4b1d      	ldr	r3, [pc, #116]	; (8002bac <HAL_RCC_OscConfig+0x578>)
 8002b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b3c:	4a1b      	ldr	r2, [pc, #108]	; (8002bac <HAL_RCC_OscConfig+0x578>)
 8002b3e:	f023 0301 	bic.w	r3, r3, #1
 8002b42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b46:	4b19      	ldr	r3, [pc, #100]	; (8002bac <HAL_RCC_OscConfig+0x578>)
 8002b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b4c:	4a17      	ldr	r2, [pc, #92]	; (8002bac <HAL_RCC_OscConfig+0x578>)
 8002b4e:	f023 0304 	bic.w	r3, r3, #4
 8002b52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d016      	beq.n	8002b8c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b5e:	f7fe fa53 	bl	8001008 <HAL_GetTick>
 8002b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b64:	e00a      	b.n	8002b7c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b66:	f7fe fa4f 	bl	8001008 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e139      	b.n	8002df0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b7c:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <HAL_RCC_OscConfig+0x578>)
 8002b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0ed      	beq.n	8002b66 <HAL_RCC_OscConfig+0x532>
 8002b8a:	e01a      	b.n	8002bc2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b8c:	f7fe fa3c 	bl	8001008 <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b92:	e00f      	b.n	8002bb4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b94:	f7fe fa38 	bl	8001008 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d906      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e122      	b.n	8002df0 <HAL_RCC_OscConfig+0x7bc>
 8002baa:	bf00      	nop
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bb4:	4b90      	ldr	r3, [pc, #576]	; (8002df8 <HAL_RCC_OscConfig+0x7c4>)
 8002bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1e8      	bne.n	8002b94 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bc2:	7ffb      	ldrb	r3, [r7, #31]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d105      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bc8:	4b8b      	ldr	r3, [pc, #556]	; (8002df8 <HAL_RCC_OscConfig+0x7c4>)
 8002bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bcc:	4a8a      	ldr	r2, [pc, #552]	; (8002df8 <HAL_RCC_OscConfig+0x7c4>)
 8002bce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bd2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 8108 	beq.w	8002dee <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	f040 80d0 	bne.w	8002d88 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002be8:	4b83      	ldr	r3, [pc, #524]	; (8002df8 <HAL_RCC_OscConfig+0x7c4>)
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f003 0203 	and.w	r2, r3, #3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d130      	bne.n	8002c5e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c06:	3b01      	subs	r3, #1
 8002c08:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d127      	bne.n	8002c5e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c18:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d11f      	bne.n	8002c5e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c28:	2a07      	cmp	r2, #7
 8002c2a:	bf14      	ite	ne
 8002c2c:	2201      	movne	r2, #1
 8002c2e:	2200      	moveq	r2, #0
 8002c30:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d113      	bne.n	8002c5e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c40:	085b      	lsrs	r3, r3, #1
 8002c42:	3b01      	subs	r3, #1
 8002c44:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d109      	bne.n	8002c5e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c54:	085b      	lsrs	r3, r3, #1
 8002c56:	3b01      	subs	r3, #1
 8002c58:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d06e      	beq.n	8002d3c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	2b0c      	cmp	r3, #12
 8002c62:	d069      	beq.n	8002d38 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c64:	4b64      	ldr	r3, [pc, #400]	; (8002df8 <HAL_RCC_OscConfig+0x7c4>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d105      	bne.n	8002c7c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c70:	4b61      	ldr	r3, [pc, #388]	; (8002df8 <HAL_RCC_OscConfig+0x7c4>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e0b7      	b.n	8002df0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c80:	4b5d      	ldr	r3, [pc, #372]	; (8002df8 <HAL_RCC_OscConfig+0x7c4>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a5c      	ldr	r2, [pc, #368]	; (8002df8 <HAL_RCC_OscConfig+0x7c4>)
 8002c86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c8a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c8c:	f7fe f9bc 	bl	8001008 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c94:	f7fe f9b8 	bl	8001008 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e0a4      	b.n	8002df0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ca6:	4b54      	ldr	r3, [pc, #336]	; (8002df8 <HAL_RCC_OscConfig+0x7c4>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1f0      	bne.n	8002c94 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cb2:	4b51      	ldr	r3, [pc, #324]	; (8002df8 <HAL_RCC_OscConfig+0x7c4>)
 8002cb4:	68da      	ldr	r2, [r3, #12]
 8002cb6:	4b51      	ldr	r3, [pc, #324]	; (8002dfc <HAL_RCC_OscConfig+0x7c8>)
 8002cb8:	4013      	ands	r3, r2
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002cc2:	3a01      	subs	r2, #1
 8002cc4:	0112      	lsls	r2, r2, #4
 8002cc6:	4311      	orrs	r1, r2
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ccc:	0212      	lsls	r2, r2, #8
 8002cce:	4311      	orrs	r1, r2
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002cd4:	0852      	lsrs	r2, r2, #1
 8002cd6:	3a01      	subs	r2, #1
 8002cd8:	0552      	lsls	r2, r2, #21
 8002cda:	4311      	orrs	r1, r2
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ce0:	0852      	lsrs	r2, r2, #1
 8002ce2:	3a01      	subs	r2, #1
 8002ce4:	0652      	lsls	r2, r2, #25
 8002ce6:	4311      	orrs	r1, r2
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002cec:	0912      	lsrs	r2, r2, #4
 8002cee:	0452      	lsls	r2, r2, #17
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	4941      	ldr	r1, [pc, #260]	; (8002df8 <HAL_RCC_OscConfig+0x7c4>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002cf8:	4b3f      	ldr	r3, [pc, #252]	; (8002df8 <HAL_RCC_OscConfig+0x7c4>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a3e      	ldr	r2, [pc, #248]	; (8002df8 <HAL_RCC_OscConfig+0x7c4>)
 8002cfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d02:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d04:	4b3c      	ldr	r3, [pc, #240]	; (8002df8 <HAL_RCC_OscConfig+0x7c4>)
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	4a3b      	ldr	r2, [pc, #236]	; (8002df8 <HAL_RCC_OscConfig+0x7c4>)
 8002d0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d0e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d10:	f7fe f97a 	bl	8001008 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d18:	f7fe f976 	bl	8001008 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e062      	b.n	8002df0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d2a:	4b33      	ldr	r3, [pc, #204]	; (8002df8 <HAL_RCC_OscConfig+0x7c4>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0f0      	beq.n	8002d18 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d36:	e05a      	b.n	8002dee <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e059      	b.n	8002df0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d3c:	4b2e      	ldr	r3, [pc, #184]	; (8002df8 <HAL_RCC_OscConfig+0x7c4>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d152      	bne.n	8002dee <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d48:	4b2b      	ldr	r3, [pc, #172]	; (8002df8 <HAL_RCC_OscConfig+0x7c4>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a2a      	ldr	r2, [pc, #168]	; (8002df8 <HAL_RCC_OscConfig+0x7c4>)
 8002d4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d52:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d54:	4b28      	ldr	r3, [pc, #160]	; (8002df8 <HAL_RCC_OscConfig+0x7c4>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	4a27      	ldr	r2, [pc, #156]	; (8002df8 <HAL_RCC_OscConfig+0x7c4>)
 8002d5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d5e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d60:	f7fe f952 	bl	8001008 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d68:	f7fe f94e 	bl	8001008 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e03a      	b.n	8002df0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d7a:	4b1f      	ldr	r3, [pc, #124]	; (8002df8 <HAL_RCC_OscConfig+0x7c4>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0f0      	beq.n	8002d68 <HAL_RCC_OscConfig+0x734>
 8002d86:	e032      	b.n	8002dee <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	2b0c      	cmp	r3, #12
 8002d8c:	d02d      	beq.n	8002dea <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d8e:	4b1a      	ldr	r3, [pc, #104]	; (8002df8 <HAL_RCC_OscConfig+0x7c4>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a19      	ldr	r2, [pc, #100]	; (8002df8 <HAL_RCC_OscConfig+0x7c4>)
 8002d94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d98:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002d9a:	4b17      	ldr	r3, [pc, #92]	; (8002df8 <HAL_RCC_OscConfig+0x7c4>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d105      	bne.n	8002db2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002da6:	4b14      	ldr	r3, [pc, #80]	; (8002df8 <HAL_RCC_OscConfig+0x7c4>)
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	4a13      	ldr	r2, [pc, #76]	; (8002df8 <HAL_RCC_OscConfig+0x7c4>)
 8002dac:	f023 0303 	bic.w	r3, r3, #3
 8002db0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002db2:	4b11      	ldr	r3, [pc, #68]	; (8002df8 <HAL_RCC_OscConfig+0x7c4>)
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	4a10      	ldr	r2, [pc, #64]	; (8002df8 <HAL_RCC_OscConfig+0x7c4>)
 8002db8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002dbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dc0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc2:	f7fe f921 	bl	8001008 <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dc8:	e008      	b.n	8002ddc <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dca:	f7fe f91d 	bl	8001008 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e009      	b.n	8002df0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ddc:	4b06      	ldr	r3, [pc, #24]	; (8002df8 <HAL_RCC_OscConfig+0x7c4>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1f0      	bne.n	8002dca <HAL_RCC_OscConfig+0x796>
 8002de8:	e001      	b.n	8002dee <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e000      	b.n	8002df0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3720      	adds	r7, #32
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	f99d808c 	.word	0xf99d808c

08002e00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d101      	bne.n	8002e14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e0c8      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e14:	4b66      	ldr	r3, [pc, #408]	; (8002fb0 <HAL_RCC_ClockConfig+0x1b0>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d910      	bls.n	8002e44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e22:	4b63      	ldr	r3, [pc, #396]	; (8002fb0 <HAL_RCC_ClockConfig+0x1b0>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f023 0207 	bic.w	r2, r3, #7
 8002e2a:	4961      	ldr	r1, [pc, #388]	; (8002fb0 <HAL_RCC_ClockConfig+0x1b0>)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e32:	4b5f      	ldr	r3, [pc, #380]	; (8002fb0 <HAL_RCC_ClockConfig+0x1b0>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	683a      	ldr	r2, [r7, #0]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d001      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e0b0      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d04c      	beq.n	8002eea <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	2b03      	cmp	r3, #3
 8002e56:	d107      	bne.n	8002e68 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e58:	4b56      	ldr	r3, [pc, #344]	; (8002fb4 <HAL_RCC_ClockConfig+0x1b4>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d121      	bne.n	8002ea8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e09e      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d107      	bne.n	8002e80 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e70:	4b50      	ldr	r3, [pc, #320]	; (8002fb4 <HAL_RCC_ClockConfig+0x1b4>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d115      	bne.n	8002ea8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e092      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d107      	bne.n	8002e98 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e88:	4b4a      	ldr	r3, [pc, #296]	; (8002fb4 <HAL_RCC_ClockConfig+0x1b4>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d109      	bne.n	8002ea8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e086      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e98:	4b46      	ldr	r3, [pc, #280]	; (8002fb4 <HAL_RCC_ClockConfig+0x1b4>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e07e      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ea8:	4b42      	ldr	r3, [pc, #264]	; (8002fb4 <HAL_RCC_ClockConfig+0x1b4>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f023 0203 	bic.w	r2, r3, #3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	493f      	ldr	r1, [pc, #252]	; (8002fb4 <HAL_RCC_ClockConfig+0x1b4>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eba:	f7fe f8a5 	bl	8001008 <HAL_GetTick>
 8002ebe:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec0:	e00a      	b.n	8002ed8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec2:	f7fe f8a1 	bl	8001008 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e066      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed8:	4b36      	ldr	r3, [pc, #216]	; (8002fb4 <HAL_RCC_ClockConfig+0x1b4>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 020c 	and.w	r2, r3, #12
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d1eb      	bne.n	8002ec2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d008      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ef6:	4b2f      	ldr	r3, [pc, #188]	; (8002fb4 <HAL_RCC_ClockConfig+0x1b4>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	492c      	ldr	r1, [pc, #176]	; (8002fb4 <HAL_RCC_ClockConfig+0x1b4>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f08:	4b29      	ldr	r3, [pc, #164]	; (8002fb0 <HAL_RCC_ClockConfig+0x1b0>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d210      	bcs.n	8002f38 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f16:	4b26      	ldr	r3, [pc, #152]	; (8002fb0 <HAL_RCC_ClockConfig+0x1b0>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f023 0207 	bic.w	r2, r3, #7
 8002f1e:	4924      	ldr	r1, [pc, #144]	; (8002fb0 <HAL_RCC_ClockConfig+0x1b0>)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f26:	4b22      	ldr	r3, [pc, #136]	; (8002fb0 <HAL_RCC_ClockConfig+0x1b0>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d001      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e036      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d008      	beq.n	8002f56 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f44:	4b1b      	ldr	r3, [pc, #108]	; (8002fb4 <HAL_RCC_ClockConfig+0x1b4>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	4918      	ldr	r1, [pc, #96]	; (8002fb4 <HAL_RCC_ClockConfig+0x1b4>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0308 	and.w	r3, r3, #8
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d009      	beq.n	8002f76 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f62:	4b14      	ldr	r3, [pc, #80]	; (8002fb4 <HAL_RCC_ClockConfig+0x1b4>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	4910      	ldr	r1, [pc, #64]	; (8002fb4 <HAL_RCC_ClockConfig+0x1b4>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f76:	f000 f825 	bl	8002fc4 <HAL_RCC_GetSysClockFreq>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	4b0d      	ldr	r3, [pc, #52]	; (8002fb4 <HAL_RCC_ClockConfig+0x1b4>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	091b      	lsrs	r3, r3, #4
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	490c      	ldr	r1, [pc, #48]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f88:	5ccb      	ldrb	r3, [r1, r3]
 8002f8a:	f003 031f 	and.w	r3, r3, #31
 8002f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f92:	4a0a      	ldr	r2, [pc, #40]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002f94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f96:	4b0a      	ldr	r3, [pc, #40]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7fd ffe4 	bl	8000f68 <HAL_InitTick>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	72fb      	strb	r3, [r7, #11]

  return status;
 8002fa4:	7afb      	ldrb	r3, [r7, #11]
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40022000 	.word	0x40022000
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	080065d0 	.word	0x080065d0
 8002fbc:	20000000 	.word	0x20000000
 8002fc0:	20000004 	.word	0x20000004

08002fc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b089      	sub	sp, #36	; 0x24
 8002fc8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	61fb      	str	r3, [r7, #28]
 8002fce:	2300      	movs	r3, #0
 8002fd0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fd2:	4b3e      	ldr	r3, [pc, #248]	; (80030cc <HAL_RCC_GetSysClockFreq+0x108>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f003 030c 	and.w	r3, r3, #12
 8002fda:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fdc:	4b3b      	ldr	r3, [pc, #236]	; (80030cc <HAL_RCC_GetSysClockFreq+0x108>)
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f003 0303 	and.w	r3, r3, #3
 8002fe4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d005      	beq.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x34>
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	2b0c      	cmp	r3, #12
 8002ff0:	d121      	bne.n	8003036 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d11e      	bne.n	8003036 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ff8:	4b34      	ldr	r3, [pc, #208]	; (80030cc <HAL_RCC_GetSysClockFreq+0x108>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0308 	and.w	r3, r3, #8
 8003000:	2b00      	cmp	r3, #0
 8003002:	d107      	bne.n	8003014 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003004:	4b31      	ldr	r3, [pc, #196]	; (80030cc <HAL_RCC_GetSysClockFreq+0x108>)
 8003006:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800300a:	0a1b      	lsrs	r3, r3, #8
 800300c:	f003 030f 	and.w	r3, r3, #15
 8003010:	61fb      	str	r3, [r7, #28]
 8003012:	e005      	b.n	8003020 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003014:	4b2d      	ldr	r3, [pc, #180]	; (80030cc <HAL_RCC_GetSysClockFreq+0x108>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	091b      	lsrs	r3, r3, #4
 800301a:	f003 030f 	and.w	r3, r3, #15
 800301e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003020:	4a2b      	ldr	r2, [pc, #172]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003028:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d10d      	bne.n	800304c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003034:	e00a      	b.n	800304c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	2b04      	cmp	r3, #4
 800303a:	d102      	bne.n	8003042 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800303c:	4b25      	ldr	r3, [pc, #148]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800303e:	61bb      	str	r3, [r7, #24]
 8003040:	e004      	b.n	800304c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	2b08      	cmp	r3, #8
 8003046:	d101      	bne.n	800304c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003048:	4b23      	ldr	r3, [pc, #140]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x114>)
 800304a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	2b0c      	cmp	r3, #12
 8003050:	d134      	bne.n	80030bc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003052:	4b1e      	ldr	r3, [pc, #120]	; (80030cc <HAL_RCC_GetSysClockFreq+0x108>)
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	2b02      	cmp	r3, #2
 8003060:	d003      	beq.n	800306a <HAL_RCC_GetSysClockFreq+0xa6>
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	2b03      	cmp	r3, #3
 8003066:	d003      	beq.n	8003070 <HAL_RCC_GetSysClockFreq+0xac>
 8003068:	e005      	b.n	8003076 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800306a:	4b1a      	ldr	r3, [pc, #104]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800306c:	617b      	str	r3, [r7, #20]
      break;
 800306e:	e005      	b.n	800307c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003070:	4b19      	ldr	r3, [pc, #100]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003072:	617b      	str	r3, [r7, #20]
      break;
 8003074:	e002      	b.n	800307c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	617b      	str	r3, [r7, #20]
      break;
 800307a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800307c:	4b13      	ldr	r3, [pc, #76]	; (80030cc <HAL_RCC_GetSysClockFreq+0x108>)
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	091b      	lsrs	r3, r3, #4
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	3301      	adds	r3, #1
 8003088:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800308a:	4b10      	ldr	r3, [pc, #64]	; (80030cc <HAL_RCC_GetSysClockFreq+0x108>)
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	0a1b      	lsrs	r3, r3, #8
 8003090:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	fb02 f203 	mul.w	r2, r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030a2:	4b0a      	ldr	r3, [pc, #40]	; (80030cc <HAL_RCC_GetSysClockFreq+0x108>)
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	0e5b      	lsrs	r3, r3, #25
 80030a8:	f003 0303 	and.w	r3, r3, #3
 80030ac:	3301      	adds	r3, #1
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80030bc:	69bb      	ldr	r3, [r7, #24]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3724      	adds	r7, #36	; 0x24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	40021000 	.word	0x40021000
 80030d0:	080065e8 	.word	0x080065e8
 80030d4:	00f42400 	.word	0x00f42400
 80030d8:	007a1200 	.word	0x007a1200

080030dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030e0:	4b03      	ldr	r3, [pc, #12]	; (80030f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80030e2:	681b      	ldr	r3, [r3, #0]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	20000000 	.word	0x20000000

080030f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80030f8:	f7ff fff0 	bl	80030dc <HAL_RCC_GetHCLKFreq>
 80030fc:	4602      	mov	r2, r0
 80030fe:	4b06      	ldr	r3, [pc, #24]	; (8003118 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	0a1b      	lsrs	r3, r3, #8
 8003104:	f003 0307 	and.w	r3, r3, #7
 8003108:	4904      	ldr	r1, [pc, #16]	; (800311c <HAL_RCC_GetPCLK1Freq+0x28>)
 800310a:	5ccb      	ldrb	r3, [r1, r3]
 800310c:	f003 031f 	and.w	r3, r3, #31
 8003110:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003114:	4618      	mov	r0, r3
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40021000 	.word	0x40021000
 800311c:	080065e0 	.word	0x080065e0

08003120 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003124:	f7ff ffda 	bl	80030dc <HAL_RCC_GetHCLKFreq>
 8003128:	4602      	mov	r2, r0
 800312a:	4b06      	ldr	r3, [pc, #24]	; (8003144 <HAL_RCC_GetPCLK2Freq+0x24>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	0adb      	lsrs	r3, r3, #11
 8003130:	f003 0307 	and.w	r3, r3, #7
 8003134:	4904      	ldr	r1, [pc, #16]	; (8003148 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003136:	5ccb      	ldrb	r3, [r1, r3]
 8003138:	f003 031f 	and.w	r3, r3, #31
 800313c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003140:	4618      	mov	r0, r3
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40021000 	.word	0x40021000
 8003148:	080065e0 	.word	0x080065e0

0800314c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003154:	2300      	movs	r3, #0
 8003156:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003158:	4b2a      	ldr	r3, [pc, #168]	; (8003204 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800315a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800315c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d003      	beq.n	800316c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003164:	f7ff fa02 	bl	800256c <HAL_PWREx_GetVoltageRange>
 8003168:	6178      	str	r0, [r7, #20]
 800316a:	e014      	b.n	8003196 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800316c:	4b25      	ldr	r3, [pc, #148]	; (8003204 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800316e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003170:	4a24      	ldr	r2, [pc, #144]	; (8003204 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003176:	6593      	str	r3, [r2, #88]	; 0x58
 8003178:	4b22      	ldr	r3, [pc, #136]	; (8003204 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800317a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003180:	60fb      	str	r3, [r7, #12]
 8003182:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003184:	f7ff f9f2 	bl	800256c <HAL_PWREx_GetVoltageRange>
 8003188:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800318a:	4b1e      	ldr	r3, [pc, #120]	; (8003204 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800318c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318e:	4a1d      	ldr	r2, [pc, #116]	; (8003204 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003190:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003194:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800319c:	d10b      	bne.n	80031b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b80      	cmp	r3, #128	; 0x80
 80031a2:	d919      	bls.n	80031d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2ba0      	cmp	r3, #160	; 0xa0
 80031a8:	d902      	bls.n	80031b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031aa:	2302      	movs	r3, #2
 80031ac:	613b      	str	r3, [r7, #16]
 80031ae:	e013      	b.n	80031d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031b0:	2301      	movs	r3, #1
 80031b2:	613b      	str	r3, [r7, #16]
 80031b4:	e010      	b.n	80031d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2b80      	cmp	r3, #128	; 0x80
 80031ba:	d902      	bls.n	80031c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80031bc:	2303      	movs	r3, #3
 80031be:	613b      	str	r3, [r7, #16]
 80031c0:	e00a      	b.n	80031d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2b80      	cmp	r3, #128	; 0x80
 80031c6:	d102      	bne.n	80031ce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031c8:	2302      	movs	r3, #2
 80031ca:	613b      	str	r3, [r7, #16]
 80031cc:	e004      	b.n	80031d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2b70      	cmp	r3, #112	; 0x70
 80031d2:	d101      	bne.n	80031d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031d4:	2301      	movs	r3, #1
 80031d6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031d8:	4b0b      	ldr	r3, [pc, #44]	; (8003208 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f023 0207 	bic.w	r2, r3, #7
 80031e0:	4909      	ldr	r1, [pc, #36]	; (8003208 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031e8:	4b07      	ldr	r3, [pc, #28]	; (8003208 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d001      	beq.n	80031fa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e000      	b.n	80031fc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3718      	adds	r7, #24
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	40021000 	.word	0x40021000
 8003208:	40022000 	.word	0x40022000

0800320c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003214:	2300      	movs	r3, #0
 8003216:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003218:	2300      	movs	r3, #0
 800321a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003224:	2b00      	cmp	r3, #0
 8003226:	d041      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800322c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003230:	d02a      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003232:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003236:	d824      	bhi.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003238:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800323c:	d008      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800323e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003242:	d81e      	bhi.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00a      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003248:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800324c:	d010      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800324e:	e018      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003250:	4b86      	ldr	r3, [pc, #536]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	4a85      	ldr	r2, [pc, #532]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003256:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800325a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800325c:	e015      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	3304      	adds	r3, #4
 8003262:	2100      	movs	r1, #0
 8003264:	4618      	mov	r0, r3
 8003266:	f000 fabb 	bl	80037e0 <RCCEx_PLLSAI1_Config>
 800326a:	4603      	mov	r3, r0
 800326c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800326e:	e00c      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3320      	adds	r3, #32
 8003274:	2100      	movs	r1, #0
 8003276:	4618      	mov	r0, r3
 8003278:	f000 fba6 	bl	80039c8 <RCCEx_PLLSAI2_Config>
 800327c:	4603      	mov	r3, r0
 800327e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003280:	e003      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	74fb      	strb	r3, [r7, #19]
      break;
 8003286:	e000      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003288:	bf00      	nop
    }

    if(ret == HAL_OK)
 800328a:	7cfb      	ldrb	r3, [r7, #19]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d10b      	bne.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003290:	4b76      	ldr	r3, [pc, #472]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003296:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800329e:	4973      	ldr	r1, [pc, #460]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80032a6:	e001      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032a8:	7cfb      	ldrb	r3, [r7, #19]
 80032aa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d041      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032c0:	d02a      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80032c2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032c6:	d824      	bhi.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032cc:	d008      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80032ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032d2:	d81e      	bhi.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00a      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80032d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032dc:	d010      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032de:	e018      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032e0:	4b62      	ldr	r3, [pc, #392]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	4a61      	ldr	r2, [pc, #388]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ea:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032ec:	e015      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	3304      	adds	r3, #4
 80032f2:	2100      	movs	r1, #0
 80032f4:	4618      	mov	r0, r3
 80032f6:	f000 fa73 	bl	80037e0 <RCCEx_PLLSAI1_Config>
 80032fa:	4603      	mov	r3, r0
 80032fc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032fe:	e00c      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3320      	adds	r3, #32
 8003304:	2100      	movs	r1, #0
 8003306:	4618      	mov	r0, r3
 8003308:	f000 fb5e 	bl	80039c8 <RCCEx_PLLSAI2_Config>
 800330c:	4603      	mov	r3, r0
 800330e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003310:	e003      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	74fb      	strb	r3, [r7, #19]
      break;
 8003316:	e000      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003318:	bf00      	nop
    }

    if(ret == HAL_OK)
 800331a:	7cfb      	ldrb	r3, [r7, #19]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d10b      	bne.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003320:	4b52      	ldr	r3, [pc, #328]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003326:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800332e:	494f      	ldr	r1, [pc, #316]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003330:	4313      	orrs	r3, r2
 8003332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003336:	e001      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003338:	7cfb      	ldrb	r3, [r7, #19]
 800333a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003344:	2b00      	cmp	r3, #0
 8003346:	f000 80a0 	beq.w	800348a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800334a:	2300      	movs	r3, #0
 800334c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800334e:	4b47      	ldr	r3, [pc, #284]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800335a:	2301      	movs	r3, #1
 800335c:	e000      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800335e:	2300      	movs	r3, #0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00d      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003364:	4b41      	ldr	r3, [pc, #260]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003368:	4a40      	ldr	r2, [pc, #256]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800336a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800336e:	6593      	str	r3, [r2, #88]	; 0x58
 8003370:	4b3e      	ldr	r3, [pc, #248]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003378:	60bb      	str	r3, [r7, #8]
 800337a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800337c:	2301      	movs	r3, #1
 800337e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003380:	4b3b      	ldr	r3, [pc, #236]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a3a      	ldr	r2, [pc, #232]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003386:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800338a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800338c:	f7fd fe3c 	bl	8001008 <HAL_GetTick>
 8003390:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003392:	e009      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003394:	f7fd fe38 	bl	8001008 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d902      	bls.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	74fb      	strb	r3, [r7, #19]
        break;
 80033a6:	e005      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033a8:	4b31      	ldr	r3, [pc, #196]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0ef      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80033b4:	7cfb      	ldrb	r3, [r7, #19]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d15c      	bne.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033ba:	4b2c      	ldr	r3, [pc, #176]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d01f      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d019      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033d8:	4b24      	ldr	r3, [pc, #144]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033e4:	4b21      	ldr	r3, [pc, #132]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ea:	4a20      	ldr	r2, [pc, #128]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033f4:	4b1d      	ldr	r3, [pc, #116]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fa:	4a1c      	ldr	r2, [pc, #112]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003400:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003404:	4a19      	ldr	r2, [pc, #100]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	d016      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003416:	f7fd fdf7 	bl	8001008 <HAL_GetTick>
 800341a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800341c:	e00b      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800341e:	f7fd fdf3 	bl	8001008 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	f241 3288 	movw	r2, #5000	; 0x1388
 800342c:	4293      	cmp	r3, r2
 800342e:	d902      	bls.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	74fb      	strb	r3, [r7, #19]
            break;
 8003434:	e006      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003436:	4b0d      	ldr	r3, [pc, #52]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d0ec      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003444:	7cfb      	ldrb	r3, [r7, #19]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10c      	bne.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800344a:	4b08      	ldr	r3, [pc, #32]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800344c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003450:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800345a:	4904      	ldr	r1, [pc, #16]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800345c:	4313      	orrs	r3, r2
 800345e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003462:	e009      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003464:	7cfb      	ldrb	r3, [r7, #19]
 8003466:	74bb      	strb	r3, [r7, #18]
 8003468:	e006      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800346a:	bf00      	nop
 800346c:	40021000 	.word	0x40021000
 8003470:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003474:	7cfb      	ldrb	r3, [r7, #19]
 8003476:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003478:	7c7b      	ldrb	r3, [r7, #17]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d105      	bne.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800347e:	4b9e      	ldr	r3, [pc, #632]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003482:	4a9d      	ldr	r2, [pc, #628]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003484:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003488:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00a      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003496:	4b98      	ldr	r3, [pc, #608]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800349c:	f023 0203 	bic.w	r2, r3, #3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a4:	4994      	ldr	r1, [pc, #592]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00a      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034b8:	4b8f      	ldr	r3, [pc, #572]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034be:	f023 020c 	bic.w	r2, r3, #12
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c6:	498c      	ldr	r1, [pc, #560]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0304 	and.w	r3, r3, #4
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00a      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034da:	4b87      	ldr	r3, [pc, #540]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e8:	4983      	ldr	r1, [pc, #524]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0308 	and.w	r3, r3, #8
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00a      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034fc:	4b7e      	ldr	r3, [pc, #504]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003502:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350a:	497b      	ldr	r1, [pc, #492]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800350c:	4313      	orrs	r3, r2
 800350e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0310 	and.w	r3, r3, #16
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00a      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800351e:	4b76      	ldr	r3, [pc, #472]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003524:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800352c:	4972      	ldr	r1, [pc, #456]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800352e:	4313      	orrs	r3, r2
 8003530:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0320 	and.w	r3, r3, #32
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00a      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003540:	4b6d      	ldr	r3, [pc, #436]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003546:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800354e:	496a      	ldr	r1, [pc, #424]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003550:	4313      	orrs	r3, r2
 8003552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00a      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003562:	4b65      	ldr	r3, [pc, #404]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003568:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003570:	4961      	ldr	r1, [pc, #388]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003572:	4313      	orrs	r3, r2
 8003574:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00a      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003584:	4b5c      	ldr	r3, [pc, #368]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003592:	4959      	ldr	r1, [pc, #356]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003594:	4313      	orrs	r3, r2
 8003596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00a      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035a6:	4b54      	ldr	r3, [pc, #336]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035b4:	4950      	ldr	r1, [pc, #320]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00a      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035c8:	4b4b      	ldr	r3, [pc, #300]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d6:	4948      	ldr	r1, [pc, #288]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00a      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035ea:	4b43      	ldr	r3, [pc, #268]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f8:	493f      	ldr	r1, [pc, #252]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d028      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800360c:	4b3a      	ldr	r3, [pc, #232]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800360e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003612:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800361a:	4937      	ldr	r1, [pc, #220]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361c:	4313      	orrs	r3, r2
 800361e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003626:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800362a:	d106      	bne.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800362c:	4b32      	ldr	r3, [pc, #200]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	4a31      	ldr	r2, [pc, #196]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003632:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003636:	60d3      	str	r3, [r2, #12]
 8003638:	e011      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800363e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003642:	d10c      	bne.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3304      	adds	r3, #4
 8003648:	2101      	movs	r1, #1
 800364a:	4618      	mov	r0, r3
 800364c:	f000 f8c8 	bl	80037e0 <RCCEx_PLLSAI1_Config>
 8003650:	4603      	mov	r3, r0
 8003652:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003654:	7cfb      	ldrb	r3, [r7, #19]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800365a:	7cfb      	ldrb	r3, [r7, #19]
 800365c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d028      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800366a:	4b23      	ldr	r3, [pc, #140]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800366c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003670:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003678:	491f      	ldr	r1, [pc, #124]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800367a:	4313      	orrs	r3, r2
 800367c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003684:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003688:	d106      	bne.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800368a:	4b1b      	ldr	r3, [pc, #108]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	4a1a      	ldr	r2, [pc, #104]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003690:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003694:	60d3      	str	r3, [r2, #12]
 8003696:	e011      	b.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036a0:	d10c      	bne.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	3304      	adds	r3, #4
 80036a6:	2101      	movs	r1, #1
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 f899 	bl	80037e0 <RCCEx_PLLSAI1_Config>
 80036ae:	4603      	mov	r3, r0
 80036b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036b2:	7cfb      	ldrb	r3, [r7, #19]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80036b8:	7cfb      	ldrb	r3, [r7, #19]
 80036ba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d02b      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036c8:	4b0b      	ldr	r3, [pc, #44]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036d6:	4908      	ldr	r1, [pc, #32]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036e6:	d109      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036e8:	4b03      	ldr	r3, [pc, #12]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	4a02      	ldr	r2, [pc, #8]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036f2:	60d3      	str	r3, [r2, #12]
 80036f4:	e014      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80036f6:	bf00      	nop
 80036f8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003700:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003704:	d10c      	bne.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	3304      	adds	r3, #4
 800370a:	2101      	movs	r1, #1
 800370c:	4618      	mov	r0, r3
 800370e:	f000 f867 	bl	80037e0 <RCCEx_PLLSAI1_Config>
 8003712:	4603      	mov	r3, r0
 8003714:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003716:	7cfb      	ldrb	r3, [r7, #19]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800371c:	7cfb      	ldrb	r3, [r7, #19]
 800371e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d02f      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800372c:	4b2b      	ldr	r3, [pc, #172]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800372e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003732:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800373a:	4928      	ldr	r1, [pc, #160]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800373c:	4313      	orrs	r3, r2
 800373e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003746:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800374a:	d10d      	bne.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	3304      	adds	r3, #4
 8003750:	2102      	movs	r1, #2
 8003752:	4618      	mov	r0, r3
 8003754:	f000 f844 	bl	80037e0 <RCCEx_PLLSAI1_Config>
 8003758:	4603      	mov	r3, r0
 800375a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800375c:	7cfb      	ldrb	r3, [r7, #19]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d014      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003762:	7cfb      	ldrb	r3, [r7, #19]
 8003764:	74bb      	strb	r3, [r7, #18]
 8003766:	e011      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800376c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003770:	d10c      	bne.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	3320      	adds	r3, #32
 8003776:	2102      	movs	r1, #2
 8003778:	4618      	mov	r0, r3
 800377a:	f000 f925 	bl	80039c8 <RCCEx_PLLSAI2_Config>
 800377e:	4603      	mov	r3, r0
 8003780:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003782:	7cfb      	ldrb	r3, [r7, #19]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d001      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003788:	7cfb      	ldrb	r3, [r7, #19]
 800378a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00a      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003798:	4b10      	ldr	r3, [pc, #64]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800379a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037a6:	490d      	ldr	r1, [pc, #52]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00b      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037ba:	4b08      	ldr	r3, [pc, #32]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037ca:	4904      	ldr	r1, [pc, #16]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80037d2:	7cbb      	ldrb	r3, [r7, #18]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3718      	adds	r7, #24
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	40021000 	.word	0x40021000

080037e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037ea:	2300      	movs	r3, #0
 80037ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037ee:	4b75      	ldr	r3, [pc, #468]	; (80039c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	f003 0303 	and.w	r3, r3, #3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d018      	beq.n	800382c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80037fa:	4b72      	ldr	r3, [pc, #456]	; (80039c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	f003 0203 	and.w	r2, r3, #3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	429a      	cmp	r2, r3
 8003808:	d10d      	bne.n	8003826 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
       ||
 800380e:	2b00      	cmp	r3, #0
 8003810:	d009      	beq.n	8003826 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003812:	4b6c      	ldr	r3, [pc, #432]	; (80039c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	091b      	lsrs	r3, r3, #4
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	1c5a      	adds	r2, r3, #1
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
       ||
 8003822:	429a      	cmp	r2, r3
 8003824:	d047      	beq.n	80038b6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	73fb      	strb	r3, [r7, #15]
 800382a:	e044      	b.n	80038b6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2b03      	cmp	r3, #3
 8003832:	d018      	beq.n	8003866 <RCCEx_PLLSAI1_Config+0x86>
 8003834:	2b03      	cmp	r3, #3
 8003836:	d825      	bhi.n	8003884 <RCCEx_PLLSAI1_Config+0xa4>
 8003838:	2b01      	cmp	r3, #1
 800383a:	d002      	beq.n	8003842 <RCCEx_PLLSAI1_Config+0x62>
 800383c:	2b02      	cmp	r3, #2
 800383e:	d009      	beq.n	8003854 <RCCEx_PLLSAI1_Config+0x74>
 8003840:	e020      	b.n	8003884 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003842:	4b60      	ldr	r3, [pc, #384]	; (80039c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d11d      	bne.n	800388a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003852:	e01a      	b.n	800388a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003854:	4b5b      	ldr	r3, [pc, #364]	; (80039c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800385c:	2b00      	cmp	r3, #0
 800385e:	d116      	bne.n	800388e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003864:	e013      	b.n	800388e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003866:	4b57      	ldr	r3, [pc, #348]	; (80039c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10f      	bne.n	8003892 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003872:	4b54      	ldr	r3, [pc, #336]	; (80039c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d109      	bne.n	8003892 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003882:	e006      	b.n	8003892 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	73fb      	strb	r3, [r7, #15]
      break;
 8003888:	e004      	b.n	8003894 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800388a:	bf00      	nop
 800388c:	e002      	b.n	8003894 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800388e:	bf00      	nop
 8003890:	e000      	b.n	8003894 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003892:	bf00      	nop
    }

    if(status == HAL_OK)
 8003894:	7bfb      	ldrb	r3, [r7, #15]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10d      	bne.n	80038b6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800389a:	4b4a      	ldr	r3, [pc, #296]	; (80039c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6819      	ldr	r1, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	3b01      	subs	r3, #1
 80038ac:	011b      	lsls	r3, r3, #4
 80038ae:	430b      	orrs	r3, r1
 80038b0:	4944      	ldr	r1, [pc, #272]	; (80039c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80038b6:	7bfb      	ldrb	r3, [r7, #15]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d17d      	bne.n	80039b8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80038bc:	4b41      	ldr	r3, [pc, #260]	; (80039c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a40      	ldr	r2, [pc, #256]	; (80039c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038c8:	f7fd fb9e 	bl	8001008 <HAL_GetTick>
 80038cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038ce:	e009      	b.n	80038e4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038d0:	f7fd fb9a 	bl	8001008 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d902      	bls.n	80038e4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	73fb      	strb	r3, [r7, #15]
        break;
 80038e2:	e005      	b.n	80038f0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038e4:	4b37      	ldr	r3, [pc, #220]	; (80039c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1ef      	bne.n	80038d0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038f0:	7bfb      	ldrb	r3, [r7, #15]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d160      	bne.n	80039b8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d111      	bne.n	8003920 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038fc:	4b31      	ldr	r3, [pc, #196]	; (80039c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003904:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	6892      	ldr	r2, [r2, #8]
 800390c:	0211      	lsls	r1, r2, #8
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	68d2      	ldr	r2, [r2, #12]
 8003912:	0912      	lsrs	r2, r2, #4
 8003914:	0452      	lsls	r2, r2, #17
 8003916:	430a      	orrs	r2, r1
 8003918:	492a      	ldr	r1, [pc, #168]	; (80039c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800391a:	4313      	orrs	r3, r2
 800391c:	610b      	str	r3, [r1, #16]
 800391e:	e027      	b.n	8003970 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d112      	bne.n	800394c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003926:	4b27      	ldr	r3, [pc, #156]	; (80039c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800392e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	6892      	ldr	r2, [r2, #8]
 8003936:	0211      	lsls	r1, r2, #8
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	6912      	ldr	r2, [r2, #16]
 800393c:	0852      	lsrs	r2, r2, #1
 800393e:	3a01      	subs	r2, #1
 8003940:	0552      	lsls	r2, r2, #21
 8003942:	430a      	orrs	r2, r1
 8003944:	491f      	ldr	r1, [pc, #124]	; (80039c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003946:	4313      	orrs	r3, r2
 8003948:	610b      	str	r3, [r1, #16]
 800394a:	e011      	b.n	8003970 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800394c:	4b1d      	ldr	r3, [pc, #116]	; (80039c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003954:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6892      	ldr	r2, [r2, #8]
 800395c:	0211      	lsls	r1, r2, #8
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6952      	ldr	r2, [r2, #20]
 8003962:	0852      	lsrs	r2, r2, #1
 8003964:	3a01      	subs	r2, #1
 8003966:	0652      	lsls	r2, r2, #25
 8003968:	430a      	orrs	r2, r1
 800396a:	4916      	ldr	r1, [pc, #88]	; (80039c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800396c:	4313      	orrs	r3, r2
 800396e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003970:	4b14      	ldr	r3, [pc, #80]	; (80039c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a13      	ldr	r2, [pc, #76]	; (80039c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003976:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800397a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800397c:	f7fd fb44 	bl	8001008 <HAL_GetTick>
 8003980:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003982:	e009      	b.n	8003998 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003984:	f7fd fb40 	bl	8001008 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d902      	bls.n	8003998 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	73fb      	strb	r3, [r7, #15]
          break;
 8003996:	e005      	b.n	80039a4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003998:	4b0a      	ldr	r3, [pc, #40]	; (80039c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d0ef      	beq.n	8003984 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80039a4:	7bfb      	ldrb	r3, [r7, #15]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d106      	bne.n	80039b8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80039aa:	4b06      	ldr	r3, [pc, #24]	; (80039c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ac:	691a      	ldr	r2, [r3, #16]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	4904      	ldr	r1, [pc, #16]	; (80039c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80039b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	40021000 	.word	0x40021000

080039c8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039d2:	2300      	movs	r3, #0
 80039d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039d6:	4b6a      	ldr	r3, [pc, #424]	; (8003b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	f003 0303 	and.w	r3, r3, #3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d018      	beq.n	8003a14 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80039e2:	4b67      	ldr	r3, [pc, #412]	; (8003b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f003 0203 	and.w	r2, r3, #3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d10d      	bne.n	8003a0e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
       ||
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d009      	beq.n	8003a0e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80039fa:	4b61      	ldr	r3, [pc, #388]	; (8003b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	091b      	lsrs	r3, r3, #4
 8003a00:	f003 0307 	and.w	r3, r3, #7
 8003a04:	1c5a      	adds	r2, r3, #1
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
       ||
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d047      	beq.n	8003a9e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	73fb      	strb	r3, [r7, #15]
 8003a12:	e044      	b.n	8003a9e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2b03      	cmp	r3, #3
 8003a1a:	d018      	beq.n	8003a4e <RCCEx_PLLSAI2_Config+0x86>
 8003a1c:	2b03      	cmp	r3, #3
 8003a1e:	d825      	bhi.n	8003a6c <RCCEx_PLLSAI2_Config+0xa4>
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d002      	beq.n	8003a2a <RCCEx_PLLSAI2_Config+0x62>
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d009      	beq.n	8003a3c <RCCEx_PLLSAI2_Config+0x74>
 8003a28:	e020      	b.n	8003a6c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a2a:	4b55      	ldr	r3, [pc, #340]	; (8003b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d11d      	bne.n	8003a72 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a3a:	e01a      	b.n	8003a72 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a3c:	4b50      	ldr	r3, [pc, #320]	; (8003b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d116      	bne.n	8003a76 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a4c:	e013      	b.n	8003a76 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a4e:	4b4c      	ldr	r3, [pc, #304]	; (8003b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10f      	bne.n	8003a7a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a5a:	4b49      	ldr	r3, [pc, #292]	; (8003b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d109      	bne.n	8003a7a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a6a:	e006      	b.n	8003a7a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a70:	e004      	b.n	8003a7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a72:	bf00      	nop
 8003a74:	e002      	b.n	8003a7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a76:	bf00      	nop
 8003a78:	e000      	b.n	8003a7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a7c:	7bfb      	ldrb	r3, [r7, #15]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10d      	bne.n	8003a9e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a82:	4b3f      	ldr	r3, [pc, #252]	; (8003b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6819      	ldr	r1, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	3b01      	subs	r3, #1
 8003a94:	011b      	lsls	r3, r3, #4
 8003a96:	430b      	orrs	r3, r1
 8003a98:	4939      	ldr	r1, [pc, #228]	; (8003b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a9e:	7bfb      	ldrb	r3, [r7, #15]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d167      	bne.n	8003b74 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003aa4:	4b36      	ldr	r3, [pc, #216]	; (8003b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a35      	ldr	r2, [pc, #212]	; (8003b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ab0:	f7fd faaa 	bl	8001008 <HAL_GetTick>
 8003ab4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ab6:	e009      	b.n	8003acc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ab8:	f7fd faa6 	bl	8001008 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d902      	bls.n	8003acc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	73fb      	strb	r3, [r7, #15]
        break;
 8003aca:	e005      	b.n	8003ad8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003acc:	4b2c      	ldr	r3, [pc, #176]	; (8003b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1ef      	bne.n	8003ab8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ad8:	7bfb      	ldrb	r3, [r7, #15]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d14a      	bne.n	8003b74 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d111      	bne.n	8003b08 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ae4:	4b26      	ldr	r3, [pc, #152]	; (8003b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003aec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	6892      	ldr	r2, [r2, #8]
 8003af4:	0211      	lsls	r1, r2, #8
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	68d2      	ldr	r2, [r2, #12]
 8003afa:	0912      	lsrs	r2, r2, #4
 8003afc:	0452      	lsls	r2, r2, #17
 8003afe:	430a      	orrs	r2, r1
 8003b00:	491f      	ldr	r1, [pc, #124]	; (8003b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	614b      	str	r3, [r1, #20]
 8003b06:	e011      	b.n	8003b2c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b08:	4b1d      	ldr	r3, [pc, #116]	; (8003b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b10:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6892      	ldr	r2, [r2, #8]
 8003b18:	0211      	lsls	r1, r2, #8
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	6912      	ldr	r2, [r2, #16]
 8003b1e:	0852      	lsrs	r2, r2, #1
 8003b20:	3a01      	subs	r2, #1
 8003b22:	0652      	lsls	r2, r2, #25
 8003b24:	430a      	orrs	r2, r1
 8003b26:	4916      	ldr	r1, [pc, #88]	; (8003b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b2c:	4b14      	ldr	r3, [pc, #80]	; (8003b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a13      	ldr	r2, [pc, #76]	; (8003b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b38:	f7fd fa66 	bl	8001008 <HAL_GetTick>
 8003b3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b3e:	e009      	b.n	8003b54 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b40:	f7fd fa62 	bl	8001008 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d902      	bls.n	8003b54 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	73fb      	strb	r3, [r7, #15]
          break;
 8003b52:	e005      	b.n	8003b60 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b54:	4b0a      	ldr	r3, [pc, #40]	; (8003b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d0ef      	beq.n	8003b40 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003b60:	7bfb      	ldrb	r3, [r7, #15]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d106      	bne.n	8003b74 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b66:	4b06      	ldr	r3, [pc, #24]	; (8003b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b68:	695a      	ldr	r2, [r3, #20]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	4904      	ldr	r1, [pc, #16]	; (8003b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	40021000 	.word	0x40021000

08003b84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e049      	b.n	8003c2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d106      	bne.n	8003bb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f7fc fff0 	bl	8000b90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	3304      	adds	r3, #4
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4610      	mov	r0, r2
 8003bc4:	f000 fb7a 	bl	80042bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b082      	sub	sp, #8
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e049      	b.n	8003cd8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d106      	bne.n	8003c5e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 f841 	bl	8003ce0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2202      	movs	r2, #2
 8003c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	3304      	adds	r3, #4
 8003c6e:	4619      	mov	r1, r3
 8003c70:	4610      	mov	r0, r2
 8003c72:	f000 fb23 	bl	80042bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3708      	adds	r7, #8
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d109      	bne.n	8003d18 <HAL_TIM_PWM_Start+0x24>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	bf14      	ite	ne
 8003d10:	2301      	movne	r3, #1
 8003d12:	2300      	moveq	r3, #0
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	e03c      	b.n	8003d92 <HAL_TIM_PWM_Start+0x9e>
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	2b04      	cmp	r3, #4
 8003d1c:	d109      	bne.n	8003d32 <HAL_TIM_PWM_Start+0x3e>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	bf14      	ite	ne
 8003d2a:	2301      	movne	r3, #1
 8003d2c:	2300      	moveq	r3, #0
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	e02f      	b.n	8003d92 <HAL_TIM_PWM_Start+0x9e>
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	2b08      	cmp	r3, #8
 8003d36:	d109      	bne.n	8003d4c <HAL_TIM_PWM_Start+0x58>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	bf14      	ite	ne
 8003d44:	2301      	movne	r3, #1
 8003d46:	2300      	moveq	r3, #0
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	e022      	b.n	8003d92 <HAL_TIM_PWM_Start+0x9e>
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	2b0c      	cmp	r3, #12
 8003d50:	d109      	bne.n	8003d66 <HAL_TIM_PWM_Start+0x72>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	bf14      	ite	ne
 8003d5e:	2301      	movne	r3, #1
 8003d60:	2300      	moveq	r3, #0
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	e015      	b.n	8003d92 <HAL_TIM_PWM_Start+0x9e>
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	2b10      	cmp	r3, #16
 8003d6a:	d109      	bne.n	8003d80 <HAL_TIM_PWM_Start+0x8c>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	bf14      	ite	ne
 8003d78:	2301      	movne	r3, #1
 8003d7a:	2300      	moveq	r3, #0
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	e008      	b.n	8003d92 <HAL_TIM_PWM_Start+0x9e>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	bf14      	ite	ne
 8003d8c:	2301      	movne	r3, #1
 8003d8e:	2300      	moveq	r3, #0
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e09c      	b.n	8003ed4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d104      	bne.n	8003daa <HAL_TIM_PWM_Start+0xb6>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2202      	movs	r2, #2
 8003da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003da8:	e023      	b.n	8003df2 <HAL_TIM_PWM_Start+0xfe>
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	2b04      	cmp	r3, #4
 8003dae:	d104      	bne.n	8003dba <HAL_TIM_PWM_Start+0xc6>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2202      	movs	r2, #2
 8003db4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003db8:	e01b      	b.n	8003df2 <HAL_TIM_PWM_Start+0xfe>
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	2b08      	cmp	r3, #8
 8003dbe:	d104      	bne.n	8003dca <HAL_TIM_PWM_Start+0xd6>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dc8:	e013      	b.n	8003df2 <HAL_TIM_PWM_Start+0xfe>
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	2b0c      	cmp	r3, #12
 8003dce:	d104      	bne.n	8003dda <HAL_TIM_PWM_Start+0xe6>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003dd8:	e00b      	b.n	8003df2 <HAL_TIM_PWM_Start+0xfe>
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	2b10      	cmp	r3, #16
 8003dde:	d104      	bne.n	8003dea <HAL_TIM_PWM_Start+0xf6>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2202      	movs	r2, #2
 8003de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003de8:	e003      	b.n	8003df2 <HAL_TIM_PWM_Start+0xfe>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2202      	movs	r2, #2
 8003dee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2201      	movs	r2, #1
 8003df8:	6839      	ldr	r1, [r7, #0]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 fe68 	bl	8004ad0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a35      	ldr	r2, [pc, #212]	; (8003edc <HAL_TIM_PWM_Start+0x1e8>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d013      	beq.n	8003e32 <HAL_TIM_PWM_Start+0x13e>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a34      	ldr	r2, [pc, #208]	; (8003ee0 <HAL_TIM_PWM_Start+0x1ec>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d00e      	beq.n	8003e32 <HAL_TIM_PWM_Start+0x13e>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a32      	ldr	r2, [pc, #200]	; (8003ee4 <HAL_TIM_PWM_Start+0x1f0>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d009      	beq.n	8003e32 <HAL_TIM_PWM_Start+0x13e>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a31      	ldr	r2, [pc, #196]	; (8003ee8 <HAL_TIM_PWM_Start+0x1f4>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d004      	beq.n	8003e32 <HAL_TIM_PWM_Start+0x13e>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a2f      	ldr	r2, [pc, #188]	; (8003eec <HAL_TIM_PWM_Start+0x1f8>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d101      	bne.n	8003e36 <HAL_TIM_PWM_Start+0x142>
 8003e32:	2301      	movs	r3, #1
 8003e34:	e000      	b.n	8003e38 <HAL_TIM_PWM_Start+0x144>
 8003e36:	2300      	movs	r3, #0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d007      	beq.n	8003e4c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e4a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a22      	ldr	r2, [pc, #136]	; (8003edc <HAL_TIM_PWM_Start+0x1e8>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d01d      	beq.n	8003e92 <HAL_TIM_PWM_Start+0x19e>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e5e:	d018      	beq.n	8003e92 <HAL_TIM_PWM_Start+0x19e>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a22      	ldr	r2, [pc, #136]	; (8003ef0 <HAL_TIM_PWM_Start+0x1fc>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d013      	beq.n	8003e92 <HAL_TIM_PWM_Start+0x19e>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a21      	ldr	r2, [pc, #132]	; (8003ef4 <HAL_TIM_PWM_Start+0x200>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d00e      	beq.n	8003e92 <HAL_TIM_PWM_Start+0x19e>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a1f      	ldr	r2, [pc, #124]	; (8003ef8 <HAL_TIM_PWM_Start+0x204>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d009      	beq.n	8003e92 <HAL_TIM_PWM_Start+0x19e>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a17      	ldr	r2, [pc, #92]	; (8003ee0 <HAL_TIM_PWM_Start+0x1ec>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d004      	beq.n	8003e92 <HAL_TIM_PWM_Start+0x19e>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a15      	ldr	r2, [pc, #84]	; (8003ee4 <HAL_TIM_PWM_Start+0x1f0>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d115      	bne.n	8003ebe <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	4b18      	ldr	r3, [pc, #96]	; (8003efc <HAL_TIM_PWM_Start+0x208>)
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2b06      	cmp	r3, #6
 8003ea2:	d015      	beq.n	8003ed0 <HAL_TIM_PWM_Start+0x1dc>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eaa:	d011      	beq.n	8003ed0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f042 0201 	orr.w	r2, r2, #1
 8003eba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ebc:	e008      	b.n	8003ed0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f042 0201 	orr.w	r2, r2, #1
 8003ecc:	601a      	str	r2, [r3, #0]
 8003ece:	e000      	b.n	8003ed2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ed0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	40012c00 	.word	0x40012c00
 8003ee0:	40013400 	.word	0x40013400
 8003ee4:	40014000 	.word	0x40014000
 8003ee8:	40014400 	.word	0x40014400
 8003eec:	40014800 	.word	0x40014800
 8003ef0:	40000400 	.word	0x40000400
 8003ef4:	40000800 	.word	0x40000800
 8003ef8:	40000c00 	.word	0x40000c00
 8003efc:	00010007 	.word	0x00010007

08003f00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b086      	sub	sp, #24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d101      	bne.n	8003f1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	e0ff      	b.n	800411e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b14      	cmp	r3, #20
 8003f2a:	f200 80f0 	bhi.w	800410e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003f2e:	a201      	add	r2, pc, #4	; (adr r2, 8003f34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f34:	08003f89 	.word	0x08003f89
 8003f38:	0800410f 	.word	0x0800410f
 8003f3c:	0800410f 	.word	0x0800410f
 8003f40:	0800410f 	.word	0x0800410f
 8003f44:	08003fc9 	.word	0x08003fc9
 8003f48:	0800410f 	.word	0x0800410f
 8003f4c:	0800410f 	.word	0x0800410f
 8003f50:	0800410f 	.word	0x0800410f
 8003f54:	0800400b 	.word	0x0800400b
 8003f58:	0800410f 	.word	0x0800410f
 8003f5c:	0800410f 	.word	0x0800410f
 8003f60:	0800410f 	.word	0x0800410f
 8003f64:	0800404b 	.word	0x0800404b
 8003f68:	0800410f 	.word	0x0800410f
 8003f6c:	0800410f 	.word	0x0800410f
 8003f70:	0800410f 	.word	0x0800410f
 8003f74:	0800408d 	.word	0x0800408d
 8003f78:	0800410f 	.word	0x0800410f
 8003f7c:	0800410f 	.word	0x0800410f
 8003f80:	0800410f 	.word	0x0800410f
 8003f84:	080040cd 	.word	0x080040cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68b9      	ldr	r1, [r7, #8]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 fa2e 	bl	80043f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	699a      	ldr	r2, [r3, #24]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f042 0208 	orr.w	r2, r2, #8
 8003fa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	699a      	ldr	r2, [r3, #24]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f022 0204 	bic.w	r2, r2, #4
 8003fb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6999      	ldr	r1, [r3, #24]
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	691a      	ldr	r2, [r3, #16]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	619a      	str	r2, [r3, #24]
      break;
 8003fc6:	e0a5      	b.n	8004114 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68b9      	ldr	r1, [r7, #8]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f000 fa9e 	bl	8004510 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	699a      	ldr	r2, [r3, #24]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fe2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	699a      	ldr	r2, [r3, #24]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ff2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6999      	ldr	r1, [r3, #24]
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	021a      	lsls	r2, r3, #8
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	430a      	orrs	r2, r1
 8004006:	619a      	str	r2, [r3, #24]
      break;
 8004008:	e084      	b.n	8004114 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68b9      	ldr	r1, [r7, #8]
 8004010:	4618      	mov	r0, r3
 8004012:	f000 fb07 	bl	8004624 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	69da      	ldr	r2, [r3, #28]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f042 0208 	orr.w	r2, r2, #8
 8004024:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	69da      	ldr	r2, [r3, #28]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 0204 	bic.w	r2, r2, #4
 8004034:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	69d9      	ldr	r1, [r3, #28]
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	691a      	ldr	r2, [r3, #16]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	430a      	orrs	r2, r1
 8004046:	61da      	str	r2, [r3, #28]
      break;
 8004048:	e064      	b.n	8004114 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68b9      	ldr	r1, [r7, #8]
 8004050:	4618      	mov	r0, r3
 8004052:	f000 fb6f 	bl	8004734 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	69da      	ldr	r2, [r3, #28]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004064:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	69da      	ldr	r2, [r3, #28]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004074:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	69d9      	ldr	r1, [r3, #28]
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	021a      	lsls	r2, r3, #8
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	430a      	orrs	r2, r1
 8004088:	61da      	str	r2, [r3, #28]
      break;
 800408a:	e043      	b.n	8004114 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68b9      	ldr	r1, [r7, #8]
 8004092:	4618      	mov	r0, r3
 8004094:	f000 fbb8 	bl	8004808 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f042 0208 	orr.w	r2, r2, #8
 80040a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f022 0204 	bic.w	r2, r2, #4
 80040b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	691a      	ldr	r2, [r3, #16]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	430a      	orrs	r2, r1
 80040c8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80040ca:	e023      	b.n	8004114 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68b9      	ldr	r1, [r7, #8]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f000 fbfc 	bl	80048d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	021a      	lsls	r2, r3, #8
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	430a      	orrs	r2, r1
 800410a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800410c:	e002      	b.n	8004114 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	75fb      	strb	r3, [r7, #23]
      break;
 8004112:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800411c:	7dfb      	ldrb	r3, [r7, #23]
}
 800411e:	4618      	mov	r0, r3
 8004120:	3718      	adds	r7, #24
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop

08004128 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004132:	2300      	movs	r3, #0
 8004134:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800413c:	2b01      	cmp	r3, #1
 800413e:	d101      	bne.n	8004144 <HAL_TIM_ConfigClockSource+0x1c>
 8004140:	2302      	movs	r3, #2
 8004142:	e0b6      	b.n	80042b2 <HAL_TIM_ConfigClockSource+0x18a>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2202      	movs	r2, #2
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004162:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004166:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800416e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68ba      	ldr	r2, [r7, #8]
 8004176:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004180:	d03e      	beq.n	8004200 <HAL_TIM_ConfigClockSource+0xd8>
 8004182:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004186:	f200 8087 	bhi.w	8004298 <HAL_TIM_ConfigClockSource+0x170>
 800418a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800418e:	f000 8086 	beq.w	800429e <HAL_TIM_ConfigClockSource+0x176>
 8004192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004196:	d87f      	bhi.n	8004298 <HAL_TIM_ConfigClockSource+0x170>
 8004198:	2b70      	cmp	r3, #112	; 0x70
 800419a:	d01a      	beq.n	80041d2 <HAL_TIM_ConfigClockSource+0xaa>
 800419c:	2b70      	cmp	r3, #112	; 0x70
 800419e:	d87b      	bhi.n	8004298 <HAL_TIM_ConfigClockSource+0x170>
 80041a0:	2b60      	cmp	r3, #96	; 0x60
 80041a2:	d050      	beq.n	8004246 <HAL_TIM_ConfigClockSource+0x11e>
 80041a4:	2b60      	cmp	r3, #96	; 0x60
 80041a6:	d877      	bhi.n	8004298 <HAL_TIM_ConfigClockSource+0x170>
 80041a8:	2b50      	cmp	r3, #80	; 0x50
 80041aa:	d03c      	beq.n	8004226 <HAL_TIM_ConfigClockSource+0xfe>
 80041ac:	2b50      	cmp	r3, #80	; 0x50
 80041ae:	d873      	bhi.n	8004298 <HAL_TIM_ConfigClockSource+0x170>
 80041b0:	2b40      	cmp	r3, #64	; 0x40
 80041b2:	d058      	beq.n	8004266 <HAL_TIM_ConfigClockSource+0x13e>
 80041b4:	2b40      	cmp	r3, #64	; 0x40
 80041b6:	d86f      	bhi.n	8004298 <HAL_TIM_ConfigClockSource+0x170>
 80041b8:	2b30      	cmp	r3, #48	; 0x30
 80041ba:	d064      	beq.n	8004286 <HAL_TIM_ConfigClockSource+0x15e>
 80041bc:	2b30      	cmp	r3, #48	; 0x30
 80041be:	d86b      	bhi.n	8004298 <HAL_TIM_ConfigClockSource+0x170>
 80041c0:	2b20      	cmp	r3, #32
 80041c2:	d060      	beq.n	8004286 <HAL_TIM_ConfigClockSource+0x15e>
 80041c4:	2b20      	cmp	r3, #32
 80041c6:	d867      	bhi.n	8004298 <HAL_TIM_ConfigClockSource+0x170>
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d05c      	beq.n	8004286 <HAL_TIM_ConfigClockSource+0x15e>
 80041cc:	2b10      	cmp	r3, #16
 80041ce:	d05a      	beq.n	8004286 <HAL_TIM_ConfigClockSource+0x15e>
 80041d0:	e062      	b.n	8004298 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6818      	ldr	r0, [r3, #0]
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	6899      	ldr	r1, [r3, #8]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f000 fc55 	bl	8004a90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	609a      	str	r2, [r3, #8]
      break;
 80041fe:	e04f      	b.n	80042a0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6818      	ldr	r0, [r3, #0]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	6899      	ldr	r1, [r3, #8]
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685a      	ldr	r2, [r3, #4]
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f000 fc3e 	bl	8004a90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689a      	ldr	r2, [r3, #8]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004222:	609a      	str	r2, [r3, #8]
      break;
 8004224:	e03c      	b.n	80042a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6818      	ldr	r0, [r3, #0]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	6859      	ldr	r1, [r3, #4]
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	461a      	mov	r2, r3
 8004234:	f000 fbb2 	bl	800499c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2150      	movs	r1, #80	; 0x50
 800423e:	4618      	mov	r0, r3
 8004240:	f000 fc0b 	bl	8004a5a <TIM_ITRx_SetConfig>
      break;
 8004244:	e02c      	b.n	80042a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6818      	ldr	r0, [r3, #0]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	6859      	ldr	r1, [r3, #4]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	461a      	mov	r2, r3
 8004254:	f000 fbd1 	bl	80049fa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2160      	movs	r1, #96	; 0x60
 800425e:	4618      	mov	r0, r3
 8004260:	f000 fbfb 	bl	8004a5a <TIM_ITRx_SetConfig>
      break;
 8004264:	e01c      	b.n	80042a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6818      	ldr	r0, [r3, #0]
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	6859      	ldr	r1, [r3, #4]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	461a      	mov	r2, r3
 8004274:	f000 fb92 	bl	800499c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2140      	movs	r1, #64	; 0x40
 800427e:	4618      	mov	r0, r3
 8004280:	f000 fbeb 	bl	8004a5a <TIM_ITRx_SetConfig>
      break;
 8004284:	e00c      	b.n	80042a0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4619      	mov	r1, r3
 8004290:	4610      	mov	r0, r2
 8004292:	f000 fbe2 	bl	8004a5a <TIM_ITRx_SetConfig>
      break;
 8004296:	e003      	b.n	80042a0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	73fb      	strb	r3, [r7, #15]
      break;
 800429c:	e000      	b.n	80042a0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800429e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
	...

080042bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a40      	ldr	r2, [pc, #256]	; (80043d0 <TIM_Base_SetConfig+0x114>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d013      	beq.n	80042fc <TIM_Base_SetConfig+0x40>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042da:	d00f      	beq.n	80042fc <TIM_Base_SetConfig+0x40>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a3d      	ldr	r2, [pc, #244]	; (80043d4 <TIM_Base_SetConfig+0x118>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d00b      	beq.n	80042fc <TIM_Base_SetConfig+0x40>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a3c      	ldr	r2, [pc, #240]	; (80043d8 <TIM_Base_SetConfig+0x11c>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d007      	beq.n	80042fc <TIM_Base_SetConfig+0x40>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a3b      	ldr	r2, [pc, #236]	; (80043dc <TIM_Base_SetConfig+0x120>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d003      	beq.n	80042fc <TIM_Base_SetConfig+0x40>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a3a      	ldr	r2, [pc, #232]	; (80043e0 <TIM_Base_SetConfig+0x124>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d108      	bne.n	800430e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004302:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	4313      	orrs	r3, r2
 800430c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a2f      	ldr	r2, [pc, #188]	; (80043d0 <TIM_Base_SetConfig+0x114>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d01f      	beq.n	8004356 <TIM_Base_SetConfig+0x9a>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800431c:	d01b      	beq.n	8004356 <TIM_Base_SetConfig+0x9a>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a2c      	ldr	r2, [pc, #176]	; (80043d4 <TIM_Base_SetConfig+0x118>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d017      	beq.n	8004356 <TIM_Base_SetConfig+0x9a>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a2b      	ldr	r2, [pc, #172]	; (80043d8 <TIM_Base_SetConfig+0x11c>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d013      	beq.n	8004356 <TIM_Base_SetConfig+0x9a>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a2a      	ldr	r2, [pc, #168]	; (80043dc <TIM_Base_SetConfig+0x120>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d00f      	beq.n	8004356 <TIM_Base_SetConfig+0x9a>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a29      	ldr	r2, [pc, #164]	; (80043e0 <TIM_Base_SetConfig+0x124>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d00b      	beq.n	8004356 <TIM_Base_SetConfig+0x9a>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a28      	ldr	r2, [pc, #160]	; (80043e4 <TIM_Base_SetConfig+0x128>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d007      	beq.n	8004356 <TIM_Base_SetConfig+0x9a>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a27      	ldr	r2, [pc, #156]	; (80043e8 <TIM_Base_SetConfig+0x12c>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d003      	beq.n	8004356 <TIM_Base_SetConfig+0x9a>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a26      	ldr	r2, [pc, #152]	; (80043ec <TIM_Base_SetConfig+0x130>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d108      	bne.n	8004368 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800435c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	4313      	orrs	r3, r2
 8004366:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	4313      	orrs	r3, r2
 8004374:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	689a      	ldr	r2, [r3, #8]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a10      	ldr	r2, [pc, #64]	; (80043d0 <TIM_Base_SetConfig+0x114>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d00f      	beq.n	80043b4 <TIM_Base_SetConfig+0xf8>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a12      	ldr	r2, [pc, #72]	; (80043e0 <TIM_Base_SetConfig+0x124>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d00b      	beq.n	80043b4 <TIM_Base_SetConfig+0xf8>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a11      	ldr	r2, [pc, #68]	; (80043e4 <TIM_Base_SetConfig+0x128>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d007      	beq.n	80043b4 <TIM_Base_SetConfig+0xf8>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a10      	ldr	r2, [pc, #64]	; (80043e8 <TIM_Base_SetConfig+0x12c>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d003      	beq.n	80043b4 <TIM_Base_SetConfig+0xf8>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a0f      	ldr	r2, [pc, #60]	; (80043ec <TIM_Base_SetConfig+0x130>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d103      	bne.n	80043bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	691a      	ldr	r2, [r3, #16]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	615a      	str	r2, [r3, #20]
}
 80043c2:	bf00      	nop
 80043c4:	3714      	adds	r7, #20
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	40012c00 	.word	0x40012c00
 80043d4:	40000400 	.word	0x40000400
 80043d8:	40000800 	.word	0x40000800
 80043dc:	40000c00 	.word	0x40000c00
 80043e0:	40013400 	.word	0x40013400
 80043e4:	40014000 	.word	0x40014000
 80043e8:	40014400 	.word	0x40014400
 80043ec:	40014800 	.word	0x40014800

080043f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b087      	sub	sp, #28
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	f023 0201 	bic.w	r2, r3, #1
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800441e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f023 0303 	bic.w	r3, r3, #3
 800442a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	4313      	orrs	r3, r2
 8004434:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f023 0302 	bic.w	r3, r3, #2
 800443c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	4313      	orrs	r3, r2
 8004446:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a2c      	ldr	r2, [pc, #176]	; (80044fc <TIM_OC1_SetConfig+0x10c>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d00f      	beq.n	8004470 <TIM_OC1_SetConfig+0x80>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a2b      	ldr	r2, [pc, #172]	; (8004500 <TIM_OC1_SetConfig+0x110>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d00b      	beq.n	8004470 <TIM_OC1_SetConfig+0x80>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a2a      	ldr	r2, [pc, #168]	; (8004504 <TIM_OC1_SetConfig+0x114>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d007      	beq.n	8004470 <TIM_OC1_SetConfig+0x80>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a29      	ldr	r2, [pc, #164]	; (8004508 <TIM_OC1_SetConfig+0x118>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d003      	beq.n	8004470 <TIM_OC1_SetConfig+0x80>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a28      	ldr	r2, [pc, #160]	; (800450c <TIM_OC1_SetConfig+0x11c>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d10c      	bne.n	800448a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	f023 0308 	bic.w	r3, r3, #8
 8004476:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	4313      	orrs	r3, r2
 8004480:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	f023 0304 	bic.w	r3, r3, #4
 8004488:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a1b      	ldr	r2, [pc, #108]	; (80044fc <TIM_OC1_SetConfig+0x10c>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d00f      	beq.n	80044b2 <TIM_OC1_SetConfig+0xc2>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a1a      	ldr	r2, [pc, #104]	; (8004500 <TIM_OC1_SetConfig+0x110>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d00b      	beq.n	80044b2 <TIM_OC1_SetConfig+0xc2>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a19      	ldr	r2, [pc, #100]	; (8004504 <TIM_OC1_SetConfig+0x114>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d007      	beq.n	80044b2 <TIM_OC1_SetConfig+0xc2>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a18      	ldr	r2, [pc, #96]	; (8004508 <TIM_OC1_SetConfig+0x118>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d003      	beq.n	80044b2 <TIM_OC1_SetConfig+0xc2>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a17      	ldr	r2, [pc, #92]	; (800450c <TIM_OC1_SetConfig+0x11c>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d111      	bne.n	80044d6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	693a      	ldr	r2, [r7, #16]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685a      	ldr	r2, [r3, #4]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	621a      	str	r2, [r3, #32]
}
 80044f0:	bf00      	nop
 80044f2:	371c      	adds	r7, #28
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	40012c00 	.word	0x40012c00
 8004500:	40013400 	.word	0x40013400
 8004504:	40014000 	.word	0x40014000
 8004508:	40014400 	.word	0x40014400
 800450c:	40014800 	.word	0x40014800

08004510 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004510:	b480      	push	{r7}
 8004512:	b087      	sub	sp, #28
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	f023 0210 	bic.w	r2, r3, #16
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800453e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800454a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	021b      	lsls	r3, r3, #8
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	4313      	orrs	r3, r2
 8004556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	f023 0320 	bic.w	r3, r3, #32
 800455e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	011b      	lsls	r3, r3, #4
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	4313      	orrs	r3, r2
 800456a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a28      	ldr	r2, [pc, #160]	; (8004610 <TIM_OC2_SetConfig+0x100>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d003      	beq.n	800457c <TIM_OC2_SetConfig+0x6c>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a27      	ldr	r2, [pc, #156]	; (8004614 <TIM_OC2_SetConfig+0x104>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d10d      	bne.n	8004598 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004582:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	011b      	lsls	r3, r3, #4
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	4313      	orrs	r3, r2
 800458e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004596:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a1d      	ldr	r2, [pc, #116]	; (8004610 <TIM_OC2_SetConfig+0x100>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d00f      	beq.n	80045c0 <TIM_OC2_SetConfig+0xb0>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a1c      	ldr	r2, [pc, #112]	; (8004614 <TIM_OC2_SetConfig+0x104>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d00b      	beq.n	80045c0 <TIM_OC2_SetConfig+0xb0>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a1b      	ldr	r2, [pc, #108]	; (8004618 <TIM_OC2_SetConfig+0x108>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d007      	beq.n	80045c0 <TIM_OC2_SetConfig+0xb0>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a1a      	ldr	r2, [pc, #104]	; (800461c <TIM_OC2_SetConfig+0x10c>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d003      	beq.n	80045c0 <TIM_OC2_SetConfig+0xb0>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a19      	ldr	r2, [pc, #100]	; (8004620 <TIM_OC2_SetConfig+0x110>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d113      	bne.n	80045e8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	695b      	ldr	r3, [r3, #20]
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	4313      	orrs	r3, r2
 80045da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	621a      	str	r2, [r3, #32]
}
 8004602:	bf00      	nop
 8004604:	371c      	adds	r7, #28
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	40012c00 	.word	0x40012c00
 8004614:	40013400 	.word	0x40013400
 8004618:	40014000 	.word	0x40014000
 800461c:	40014400 	.word	0x40014400
 8004620:	40014800 	.word	0x40014800

08004624 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004624:	b480      	push	{r7}
 8004626:	b087      	sub	sp, #28
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	69db      	ldr	r3, [r3, #28]
 800464a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f023 0303 	bic.w	r3, r3, #3
 800465e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	4313      	orrs	r3, r2
 8004668:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004670:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	021b      	lsls	r3, r3, #8
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	4313      	orrs	r3, r2
 800467c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a27      	ldr	r2, [pc, #156]	; (8004720 <TIM_OC3_SetConfig+0xfc>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d003      	beq.n	800468e <TIM_OC3_SetConfig+0x6a>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a26      	ldr	r2, [pc, #152]	; (8004724 <TIM_OC3_SetConfig+0x100>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d10d      	bne.n	80046aa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004694:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	021b      	lsls	r3, r3, #8
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	4313      	orrs	r3, r2
 80046a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a1c      	ldr	r2, [pc, #112]	; (8004720 <TIM_OC3_SetConfig+0xfc>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d00f      	beq.n	80046d2 <TIM_OC3_SetConfig+0xae>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a1b      	ldr	r2, [pc, #108]	; (8004724 <TIM_OC3_SetConfig+0x100>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d00b      	beq.n	80046d2 <TIM_OC3_SetConfig+0xae>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a1a      	ldr	r2, [pc, #104]	; (8004728 <TIM_OC3_SetConfig+0x104>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d007      	beq.n	80046d2 <TIM_OC3_SetConfig+0xae>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a19      	ldr	r2, [pc, #100]	; (800472c <TIM_OC3_SetConfig+0x108>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d003      	beq.n	80046d2 <TIM_OC3_SetConfig+0xae>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a18      	ldr	r2, [pc, #96]	; (8004730 <TIM_OC3_SetConfig+0x10c>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d113      	bne.n	80046fa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	011b      	lsls	r3, r3, #4
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	011b      	lsls	r3, r3, #4
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	621a      	str	r2, [r3, #32]
}
 8004714:	bf00      	nop
 8004716:	371c      	adds	r7, #28
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr
 8004720:	40012c00 	.word	0x40012c00
 8004724:	40013400 	.word	0x40013400
 8004728:	40014000 	.word	0x40014000
 800472c:	40014400 	.word	0x40014400
 8004730:	40014800 	.word	0x40014800

08004734 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004734:	b480      	push	{r7}
 8004736:	b087      	sub	sp, #28
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	69db      	ldr	r3, [r3, #28]
 800475a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800476e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	021b      	lsls	r3, r3, #8
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	4313      	orrs	r3, r2
 800477a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004782:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	031b      	lsls	r3, r3, #12
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	4313      	orrs	r3, r2
 800478e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a18      	ldr	r2, [pc, #96]	; (80047f4 <TIM_OC4_SetConfig+0xc0>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d00f      	beq.n	80047b8 <TIM_OC4_SetConfig+0x84>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a17      	ldr	r2, [pc, #92]	; (80047f8 <TIM_OC4_SetConfig+0xc4>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d00b      	beq.n	80047b8 <TIM_OC4_SetConfig+0x84>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a16      	ldr	r2, [pc, #88]	; (80047fc <TIM_OC4_SetConfig+0xc8>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d007      	beq.n	80047b8 <TIM_OC4_SetConfig+0x84>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a15      	ldr	r2, [pc, #84]	; (8004800 <TIM_OC4_SetConfig+0xcc>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d003      	beq.n	80047b8 <TIM_OC4_SetConfig+0x84>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a14      	ldr	r2, [pc, #80]	; (8004804 <TIM_OC4_SetConfig+0xd0>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d109      	bne.n	80047cc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	695b      	ldr	r3, [r3, #20]
 80047c4:	019b      	lsls	r3, r3, #6
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	693a      	ldr	r2, [r7, #16]
 80047e4:	621a      	str	r2, [r3, #32]
}
 80047e6:	bf00      	nop
 80047e8:	371c      	adds	r7, #28
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	40012c00 	.word	0x40012c00
 80047f8:	40013400 	.word	0x40013400
 80047fc:	40014000 	.word	0x40014000
 8004800:	40014400 	.word	0x40014400
 8004804:	40014800 	.word	0x40014800

08004808 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004808:	b480      	push	{r7}
 800480a:	b087      	sub	sp, #28
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800482e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800483a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	4313      	orrs	r3, r2
 8004844:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800484c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	041b      	lsls	r3, r3, #16
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	4313      	orrs	r3, r2
 8004858:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a17      	ldr	r2, [pc, #92]	; (80048bc <TIM_OC5_SetConfig+0xb4>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d00f      	beq.n	8004882 <TIM_OC5_SetConfig+0x7a>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a16      	ldr	r2, [pc, #88]	; (80048c0 <TIM_OC5_SetConfig+0xb8>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d00b      	beq.n	8004882 <TIM_OC5_SetConfig+0x7a>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a15      	ldr	r2, [pc, #84]	; (80048c4 <TIM_OC5_SetConfig+0xbc>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d007      	beq.n	8004882 <TIM_OC5_SetConfig+0x7a>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a14      	ldr	r2, [pc, #80]	; (80048c8 <TIM_OC5_SetConfig+0xc0>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d003      	beq.n	8004882 <TIM_OC5_SetConfig+0x7a>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a13      	ldr	r2, [pc, #76]	; (80048cc <TIM_OC5_SetConfig+0xc4>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d109      	bne.n	8004896 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004888:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	021b      	lsls	r3, r3, #8
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	4313      	orrs	r3, r2
 8004894:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	621a      	str	r2, [r3, #32]
}
 80048b0:	bf00      	nop
 80048b2:	371c      	adds	r7, #28
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr
 80048bc:	40012c00 	.word	0x40012c00
 80048c0:	40013400 	.word	0x40013400
 80048c4:	40014000 	.word	0x40014000
 80048c8:	40014400 	.word	0x40014400
 80048cc:	40014800 	.word	0x40014800

080048d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b087      	sub	sp, #28
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004902:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	021b      	lsls	r3, r3, #8
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	4313      	orrs	r3, r2
 800490e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004916:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	051b      	lsls	r3, r3, #20
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	4313      	orrs	r3, r2
 8004922:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a18      	ldr	r2, [pc, #96]	; (8004988 <TIM_OC6_SetConfig+0xb8>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d00f      	beq.n	800494c <TIM_OC6_SetConfig+0x7c>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a17      	ldr	r2, [pc, #92]	; (800498c <TIM_OC6_SetConfig+0xbc>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d00b      	beq.n	800494c <TIM_OC6_SetConfig+0x7c>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a16      	ldr	r2, [pc, #88]	; (8004990 <TIM_OC6_SetConfig+0xc0>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d007      	beq.n	800494c <TIM_OC6_SetConfig+0x7c>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a15      	ldr	r2, [pc, #84]	; (8004994 <TIM_OC6_SetConfig+0xc4>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d003      	beq.n	800494c <TIM_OC6_SetConfig+0x7c>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a14      	ldr	r2, [pc, #80]	; (8004998 <TIM_OC6_SetConfig+0xc8>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d109      	bne.n	8004960 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004952:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	695b      	ldr	r3, [r3, #20]
 8004958:	029b      	lsls	r3, r3, #10
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	4313      	orrs	r3, r2
 800495e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	621a      	str	r2, [r3, #32]
}
 800497a:	bf00      	nop
 800497c:	371c      	adds	r7, #28
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	40012c00 	.word	0x40012c00
 800498c:	40013400 	.word	0x40013400
 8004990:	40014000 	.word	0x40014000
 8004994:	40014400 	.word	0x40014400
 8004998:	40014800 	.word	0x40014800

0800499c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800499c:	b480      	push	{r7}
 800499e:	b087      	sub	sp, #28
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6a1b      	ldr	r3, [r3, #32]
 80049ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	f023 0201 	bic.w	r2, r3, #1
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	011b      	lsls	r3, r3, #4
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f023 030a 	bic.w	r3, r3, #10
 80049d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	4313      	orrs	r3, r2
 80049e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	621a      	str	r2, [r3, #32]
}
 80049ee:	bf00      	nop
 80049f0:	371c      	adds	r7, #28
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr

080049fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049fa:	b480      	push	{r7}
 80049fc:	b087      	sub	sp, #28
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	60f8      	str	r0, [r7, #12]
 8004a02:	60b9      	str	r1, [r7, #8]
 8004a04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	f023 0210 	bic.w	r2, r3, #16
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	031b      	lsls	r3, r3, #12
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	011b      	lsls	r3, r3, #4
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	621a      	str	r2, [r3, #32]
}
 8004a4e:	bf00      	nop
 8004a50:	371c      	adds	r7, #28
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr

08004a5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b085      	sub	sp, #20
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
 8004a62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	f043 0307 	orr.w	r3, r3, #7
 8004a7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	609a      	str	r2, [r3, #8]
}
 8004a84:	bf00      	nop
 8004a86:	3714      	adds	r7, #20
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b087      	sub	sp, #28
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
 8004a9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004aaa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	021a      	lsls	r2, r3, #8
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	609a      	str	r2, [r3, #8]
}
 8004ac4:	bf00      	nop
 8004ac6:	371c      	adds	r7, #28
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	f003 031f 	and.w	r3, r3, #31
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6a1a      	ldr	r2, [r3, #32]
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	43db      	mvns	r3, r3
 8004af2:	401a      	ands	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6a1a      	ldr	r2, [r3, #32]
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	f003 031f 	and.w	r3, r3, #31
 8004b02:	6879      	ldr	r1, [r7, #4]
 8004b04:	fa01 f303 	lsl.w	r3, r1, r3
 8004b08:	431a      	orrs	r2, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	621a      	str	r2, [r3, #32]
}
 8004b0e:	bf00      	nop
 8004b10:	371c      	adds	r7, #28
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
	...

08004b1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d101      	bne.n	8004b34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b30:	2302      	movs	r3, #2
 8004b32:	e068      	b.n	8004c06 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2202      	movs	r2, #2
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a2e      	ldr	r2, [pc, #184]	; (8004c14 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d004      	beq.n	8004b68 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a2d      	ldr	r2, [pc, #180]	; (8004c18 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d108      	bne.n	8004b7a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004b6e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b80:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a1e      	ldr	r2, [pc, #120]	; (8004c14 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d01d      	beq.n	8004bda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ba6:	d018      	beq.n	8004bda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a1b      	ldr	r2, [pc, #108]	; (8004c1c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d013      	beq.n	8004bda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a1a      	ldr	r2, [pc, #104]	; (8004c20 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d00e      	beq.n	8004bda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a18      	ldr	r2, [pc, #96]	; (8004c24 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d009      	beq.n	8004bda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a13      	ldr	r2, [pc, #76]	; (8004c18 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d004      	beq.n	8004bda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a14      	ldr	r2, [pc, #80]	; (8004c28 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d10c      	bne.n	8004bf4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004be0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3714      	adds	r7, #20
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	40012c00 	.word	0x40012c00
 8004c18:	40013400 	.word	0x40013400
 8004c1c:	40000400 	.word	0x40000400
 8004c20:	40000800 	.word	0x40000800
 8004c24:	40000c00 	.word	0x40000c00
 8004c28:	40014000 	.word	0x40014000

08004c2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e040      	b.n	8004cc0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d106      	bne.n	8004c54 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7fb fff4 	bl	8000c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2224      	movs	r2, #36	; 0x24
 8004c58:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f022 0201 	bic.w	r2, r2, #1
 8004c68:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 f8c0 	bl	8004df0 <UART_SetConfig>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d101      	bne.n	8004c7a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e022      	b.n	8004cc0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d002      	beq.n	8004c88 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 fb3e 	bl	8005304 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	685a      	ldr	r2, [r3, #4]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689a      	ldr	r2, [r3, #8]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ca6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f042 0201 	orr.w	r2, r2, #1
 8004cb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 fbc5 	bl	8005448 <UART_CheckIdleState>
 8004cbe:	4603      	mov	r3, r0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3708      	adds	r7, #8
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b08a      	sub	sp, #40	; 0x28
 8004ccc:	af02      	add	r7, sp, #8
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	603b      	str	r3, [r7, #0]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cdc:	2b20      	cmp	r3, #32
 8004cde:	f040 8082 	bne.w	8004de6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d002      	beq.n	8004cee <HAL_UART_Transmit+0x26>
 8004ce8:	88fb      	ldrh	r3, [r7, #6]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e07a      	b.n	8004de8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d101      	bne.n	8004d00 <HAL_UART_Transmit+0x38>
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	e073      	b.n	8004de8 <HAL_UART_Transmit+0x120>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2221      	movs	r2, #33	; 0x21
 8004d14:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d16:	f7fc f977 	bl	8001008 <HAL_GetTick>
 8004d1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	88fa      	ldrh	r2, [r7, #6]
 8004d20:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	88fa      	ldrh	r2, [r7, #6]
 8004d28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d34:	d108      	bne.n	8004d48 <HAL_UART_Transmit+0x80>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d104      	bne.n	8004d48 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	61bb      	str	r3, [r7, #24]
 8004d46:	e003      	b.n	8004d50 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004d58:	e02d      	b.n	8004db6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	9300      	str	r3, [sp, #0]
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	2200      	movs	r2, #0
 8004d62:	2180      	movs	r1, #128	; 0x80
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f000 fbb8 	bl	80054da <UART_WaitOnFlagUntilTimeout>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d001      	beq.n	8004d74 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e039      	b.n	8004de8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10b      	bne.n	8004d92 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	881a      	ldrh	r2, [r3, #0]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d86:	b292      	uxth	r2, r2
 8004d88:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	3302      	adds	r3, #2
 8004d8e:	61bb      	str	r3, [r7, #24]
 8004d90:	e008      	b.n	8004da4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	781a      	ldrb	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	b292      	uxth	r2, r2
 8004d9c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	3301      	adds	r3, #1
 8004da2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	3b01      	subs	r3, #1
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d1cb      	bne.n	8004d5a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	2140      	movs	r1, #64	; 0x40
 8004dcc:	68f8      	ldr	r0, [r7, #12]
 8004dce:	f000 fb84 	bl	80054da <UART_WaitOnFlagUntilTimeout>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d001      	beq.n	8004ddc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e005      	b.n	8004de8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2220      	movs	r2, #32
 8004de0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004de2:	2300      	movs	r3, #0
 8004de4:	e000      	b.n	8004de8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004de6:	2302      	movs	r3, #2
  }
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3720      	adds	r7, #32
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004df0:	b5b0      	push	{r4, r5, r7, lr}
 8004df2:	b088      	sub	sp, #32
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689a      	ldr	r2, [r3, #8]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	431a      	orrs	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	69db      	ldr	r3, [r3, #28]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	4bad      	ldr	r3, [pc, #692]	; (80050d0 <UART_SetConfig+0x2e0>)
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	6812      	ldr	r2, [r2, #0]
 8004e22:	69f9      	ldr	r1, [r7, #28]
 8004e24:	430b      	orrs	r3, r1
 8004e26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68da      	ldr	r2, [r3, #12]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4aa2      	ldr	r2, [pc, #648]	; (80050d4 <UART_SetConfig+0x2e4>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d004      	beq.n	8004e58 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	69fa      	ldr	r2, [r7, #28]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	69fa      	ldr	r2, [r7, #28]
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a99      	ldr	r2, [pc, #612]	; (80050d8 <UART_SetConfig+0x2e8>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d121      	bne.n	8004eba <UART_SetConfig+0xca>
 8004e76:	4b99      	ldr	r3, [pc, #612]	; (80050dc <UART_SetConfig+0x2ec>)
 8004e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e7c:	f003 0303 	and.w	r3, r3, #3
 8004e80:	2b03      	cmp	r3, #3
 8004e82:	d817      	bhi.n	8004eb4 <UART_SetConfig+0xc4>
 8004e84:	a201      	add	r2, pc, #4	; (adr r2, 8004e8c <UART_SetConfig+0x9c>)
 8004e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8a:	bf00      	nop
 8004e8c:	08004e9d 	.word	0x08004e9d
 8004e90:	08004ea9 	.word	0x08004ea9
 8004e94:	08004ea3 	.word	0x08004ea3
 8004e98:	08004eaf 	.word	0x08004eaf
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	76fb      	strb	r3, [r7, #27]
 8004ea0:	e0e7      	b.n	8005072 <UART_SetConfig+0x282>
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	76fb      	strb	r3, [r7, #27]
 8004ea6:	e0e4      	b.n	8005072 <UART_SetConfig+0x282>
 8004ea8:	2304      	movs	r3, #4
 8004eaa:	76fb      	strb	r3, [r7, #27]
 8004eac:	e0e1      	b.n	8005072 <UART_SetConfig+0x282>
 8004eae:	2308      	movs	r3, #8
 8004eb0:	76fb      	strb	r3, [r7, #27]
 8004eb2:	e0de      	b.n	8005072 <UART_SetConfig+0x282>
 8004eb4:	2310      	movs	r3, #16
 8004eb6:	76fb      	strb	r3, [r7, #27]
 8004eb8:	e0db      	b.n	8005072 <UART_SetConfig+0x282>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a88      	ldr	r2, [pc, #544]	; (80050e0 <UART_SetConfig+0x2f0>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d132      	bne.n	8004f2a <UART_SetConfig+0x13a>
 8004ec4:	4b85      	ldr	r3, [pc, #532]	; (80050dc <UART_SetConfig+0x2ec>)
 8004ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eca:	f003 030c 	and.w	r3, r3, #12
 8004ece:	2b0c      	cmp	r3, #12
 8004ed0:	d828      	bhi.n	8004f24 <UART_SetConfig+0x134>
 8004ed2:	a201      	add	r2, pc, #4	; (adr r2, 8004ed8 <UART_SetConfig+0xe8>)
 8004ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed8:	08004f0d 	.word	0x08004f0d
 8004edc:	08004f25 	.word	0x08004f25
 8004ee0:	08004f25 	.word	0x08004f25
 8004ee4:	08004f25 	.word	0x08004f25
 8004ee8:	08004f19 	.word	0x08004f19
 8004eec:	08004f25 	.word	0x08004f25
 8004ef0:	08004f25 	.word	0x08004f25
 8004ef4:	08004f25 	.word	0x08004f25
 8004ef8:	08004f13 	.word	0x08004f13
 8004efc:	08004f25 	.word	0x08004f25
 8004f00:	08004f25 	.word	0x08004f25
 8004f04:	08004f25 	.word	0x08004f25
 8004f08:	08004f1f 	.word	0x08004f1f
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	76fb      	strb	r3, [r7, #27]
 8004f10:	e0af      	b.n	8005072 <UART_SetConfig+0x282>
 8004f12:	2302      	movs	r3, #2
 8004f14:	76fb      	strb	r3, [r7, #27]
 8004f16:	e0ac      	b.n	8005072 <UART_SetConfig+0x282>
 8004f18:	2304      	movs	r3, #4
 8004f1a:	76fb      	strb	r3, [r7, #27]
 8004f1c:	e0a9      	b.n	8005072 <UART_SetConfig+0x282>
 8004f1e:	2308      	movs	r3, #8
 8004f20:	76fb      	strb	r3, [r7, #27]
 8004f22:	e0a6      	b.n	8005072 <UART_SetConfig+0x282>
 8004f24:	2310      	movs	r3, #16
 8004f26:	76fb      	strb	r3, [r7, #27]
 8004f28:	e0a3      	b.n	8005072 <UART_SetConfig+0x282>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a6d      	ldr	r2, [pc, #436]	; (80050e4 <UART_SetConfig+0x2f4>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d120      	bne.n	8004f76 <UART_SetConfig+0x186>
 8004f34:	4b69      	ldr	r3, [pc, #420]	; (80050dc <UART_SetConfig+0x2ec>)
 8004f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f3a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004f3e:	2b30      	cmp	r3, #48	; 0x30
 8004f40:	d013      	beq.n	8004f6a <UART_SetConfig+0x17a>
 8004f42:	2b30      	cmp	r3, #48	; 0x30
 8004f44:	d814      	bhi.n	8004f70 <UART_SetConfig+0x180>
 8004f46:	2b20      	cmp	r3, #32
 8004f48:	d009      	beq.n	8004f5e <UART_SetConfig+0x16e>
 8004f4a:	2b20      	cmp	r3, #32
 8004f4c:	d810      	bhi.n	8004f70 <UART_SetConfig+0x180>
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d002      	beq.n	8004f58 <UART_SetConfig+0x168>
 8004f52:	2b10      	cmp	r3, #16
 8004f54:	d006      	beq.n	8004f64 <UART_SetConfig+0x174>
 8004f56:	e00b      	b.n	8004f70 <UART_SetConfig+0x180>
 8004f58:	2300      	movs	r3, #0
 8004f5a:	76fb      	strb	r3, [r7, #27]
 8004f5c:	e089      	b.n	8005072 <UART_SetConfig+0x282>
 8004f5e:	2302      	movs	r3, #2
 8004f60:	76fb      	strb	r3, [r7, #27]
 8004f62:	e086      	b.n	8005072 <UART_SetConfig+0x282>
 8004f64:	2304      	movs	r3, #4
 8004f66:	76fb      	strb	r3, [r7, #27]
 8004f68:	e083      	b.n	8005072 <UART_SetConfig+0x282>
 8004f6a:	2308      	movs	r3, #8
 8004f6c:	76fb      	strb	r3, [r7, #27]
 8004f6e:	e080      	b.n	8005072 <UART_SetConfig+0x282>
 8004f70:	2310      	movs	r3, #16
 8004f72:	76fb      	strb	r3, [r7, #27]
 8004f74:	e07d      	b.n	8005072 <UART_SetConfig+0x282>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a5b      	ldr	r2, [pc, #364]	; (80050e8 <UART_SetConfig+0x2f8>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d120      	bne.n	8004fc2 <UART_SetConfig+0x1d2>
 8004f80:	4b56      	ldr	r3, [pc, #344]	; (80050dc <UART_SetConfig+0x2ec>)
 8004f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004f8a:	2bc0      	cmp	r3, #192	; 0xc0
 8004f8c:	d013      	beq.n	8004fb6 <UART_SetConfig+0x1c6>
 8004f8e:	2bc0      	cmp	r3, #192	; 0xc0
 8004f90:	d814      	bhi.n	8004fbc <UART_SetConfig+0x1cc>
 8004f92:	2b80      	cmp	r3, #128	; 0x80
 8004f94:	d009      	beq.n	8004faa <UART_SetConfig+0x1ba>
 8004f96:	2b80      	cmp	r3, #128	; 0x80
 8004f98:	d810      	bhi.n	8004fbc <UART_SetConfig+0x1cc>
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d002      	beq.n	8004fa4 <UART_SetConfig+0x1b4>
 8004f9e:	2b40      	cmp	r3, #64	; 0x40
 8004fa0:	d006      	beq.n	8004fb0 <UART_SetConfig+0x1c0>
 8004fa2:	e00b      	b.n	8004fbc <UART_SetConfig+0x1cc>
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	76fb      	strb	r3, [r7, #27]
 8004fa8:	e063      	b.n	8005072 <UART_SetConfig+0x282>
 8004faa:	2302      	movs	r3, #2
 8004fac:	76fb      	strb	r3, [r7, #27]
 8004fae:	e060      	b.n	8005072 <UART_SetConfig+0x282>
 8004fb0:	2304      	movs	r3, #4
 8004fb2:	76fb      	strb	r3, [r7, #27]
 8004fb4:	e05d      	b.n	8005072 <UART_SetConfig+0x282>
 8004fb6:	2308      	movs	r3, #8
 8004fb8:	76fb      	strb	r3, [r7, #27]
 8004fba:	e05a      	b.n	8005072 <UART_SetConfig+0x282>
 8004fbc:	2310      	movs	r3, #16
 8004fbe:	76fb      	strb	r3, [r7, #27]
 8004fc0:	e057      	b.n	8005072 <UART_SetConfig+0x282>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a49      	ldr	r2, [pc, #292]	; (80050ec <UART_SetConfig+0x2fc>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d125      	bne.n	8005018 <UART_SetConfig+0x228>
 8004fcc:	4b43      	ldr	r3, [pc, #268]	; (80050dc <UART_SetConfig+0x2ec>)
 8004fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fda:	d017      	beq.n	800500c <UART_SetConfig+0x21c>
 8004fdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fe0:	d817      	bhi.n	8005012 <UART_SetConfig+0x222>
 8004fe2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fe6:	d00b      	beq.n	8005000 <UART_SetConfig+0x210>
 8004fe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fec:	d811      	bhi.n	8005012 <UART_SetConfig+0x222>
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d003      	beq.n	8004ffa <UART_SetConfig+0x20a>
 8004ff2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ff6:	d006      	beq.n	8005006 <UART_SetConfig+0x216>
 8004ff8:	e00b      	b.n	8005012 <UART_SetConfig+0x222>
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	76fb      	strb	r3, [r7, #27]
 8004ffe:	e038      	b.n	8005072 <UART_SetConfig+0x282>
 8005000:	2302      	movs	r3, #2
 8005002:	76fb      	strb	r3, [r7, #27]
 8005004:	e035      	b.n	8005072 <UART_SetConfig+0x282>
 8005006:	2304      	movs	r3, #4
 8005008:	76fb      	strb	r3, [r7, #27]
 800500a:	e032      	b.n	8005072 <UART_SetConfig+0x282>
 800500c:	2308      	movs	r3, #8
 800500e:	76fb      	strb	r3, [r7, #27]
 8005010:	e02f      	b.n	8005072 <UART_SetConfig+0x282>
 8005012:	2310      	movs	r3, #16
 8005014:	76fb      	strb	r3, [r7, #27]
 8005016:	e02c      	b.n	8005072 <UART_SetConfig+0x282>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a2d      	ldr	r2, [pc, #180]	; (80050d4 <UART_SetConfig+0x2e4>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d125      	bne.n	800506e <UART_SetConfig+0x27e>
 8005022:	4b2e      	ldr	r3, [pc, #184]	; (80050dc <UART_SetConfig+0x2ec>)
 8005024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005028:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800502c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005030:	d017      	beq.n	8005062 <UART_SetConfig+0x272>
 8005032:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005036:	d817      	bhi.n	8005068 <UART_SetConfig+0x278>
 8005038:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800503c:	d00b      	beq.n	8005056 <UART_SetConfig+0x266>
 800503e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005042:	d811      	bhi.n	8005068 <UART_SetConfig+0x278>
 8005044:	2b00      	cmp	r3, #0
 8005046:	d003      	beq.n	8005050 <UART_SetConfig+0x260>
 8005048:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800504c:	d006      	beq.n	800505c <UART_SetConfig+0x26c>
 800504e:	e00b      	b.n	8005068 <UART_SetConfig+0x278>
 8005050:	2300      	movs	r3, #0
 8005052:	76fb      	strb	r3, [r7, #27]
 8005054:	e00d      	b.n	8005072 <UART_SetConfig+0x282>
 8005056:	2302      	movs	r3, #2
 8005058:	76fb      	strb	r3, [r7, #27]
 800505a:	e00a      	b.n	8005072 <UART_SetConfig+0x282>
 800505c:	2304      	movs	r3, #4
 800505e:	76fb      	strb	r3, [r7, #27]
 8005060:	e007      	b.n	8005072 <UART_SetConfig+0x282>
 8005062:	2308      	movs	r3, #8
 8005064:	76fb      	strb	r3, [r7, #27]
 8005066:	e004      	b.n	8005072 <UART_SetConfig+0x282>
 8005068:	2310      	movs	r3, #16
 800506a:	76fb      	strb	r3, [r7, #27]
 800506c:	e001      	b.n	8005072 <UART_SetConfig+0x282>
 800506e:	2310      	movs	r3, #16
 8005070:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a17      	ldr	r2, [pc, #92]	; (80050d4 <UART_SetConfig+0x2e4>)
 8005078:	4293      	cmp	r3, r2
 800507a:	f040 8087 	bne.w	800518c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800507e:	7efb      	ldrb	r3, [r7, #27]
 8005080:	2b08      	cmp	r3, #8
 8005082:	d837      	bhi.n	80050f4 <UART_SetConfig+0x304>
 8005084:	a201      	add	r2, pc, #4	; (adr r2, 800508c <UART_SetConfig+0x29c>)
 8005086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800508a:	bf00      	nop
 800508c:	080050b1 	.word	0x080050b1
 8005090:	080050f5 	.word	0x080050f5
 8005094:	080050b9 	.word	0x080050b9
 8005098:	080050f5 	.word	0x080050f5
 800509c:	080050bf 	.word	0x080050bf
 80050a0:	080050f5 	.word	0x080050f5
 80050a4:	080050f5 	.word	0x080050f5
 80050a8:	080050f5 	.word	0x080050f5
 80050ac:	080050c7 	.word	0x080050c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050b0:	f7fe f820 	bl	80030f4 <HAL_RCC_GetPCLK1Freq>
 80050b4:	6178      	str	r0, [r7, #20]
        break;
 80050b6:	e022      	b.n	80050fe <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050b8:	4b0d      	ldr	r3, [pc, #52]	; (80050f0 <UART_SetConfig+0x300>)
 80050ba:	617b      	str	r3, [r7, #20]
        break;
 80050bc:	e01f      	b.n	80050fe <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050be:	f7fd ff81 	bl	8002fc4 <HAL_RCC_GetSysClockFreq>
 80050c2:	6178      	str	r0, [r7, #20]
        break;
 80050c4:	e01b      	b.n	80050fe <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050ca:	617b      	str	r3, [r7, #20]
        break;
 80050cc:	e017      	b.n	80050fe <UART_SetConfig+0x30e>
 80050ce:	bf00      	nop
 80050d0:	efff69f3 	.word	0xefff69f3
 80050d4:	40008000 	.word	0x40008000
 80050d8:	40013800 	.word	0x40013800
 80050dc:	40021000 	.word	0x40021000
 80050e0:	40004400 	.word	0x40004400
 80050e4:	40004800 	.word	0x40004800
 80050e8:	40004c00 	.word	0x40004c00
 80050ec:	40005000 	.word	0x40005000
 80050f0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80050f4:	2300      	movs	r3, #0
 80050f6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	76bb      	strb	r3, [r7, #26]
        break;
 80050fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	2b00      	cmp	r3, #0
 8005102:	f000 80f1 	beq.w	80052e8 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685a      	ldr	r2, [r3, #4]
 800510a:	4613      	mov	r3, r2
 800510c:	005b      	lsls	r3, r3, #1
 800510e:	4413      	add	r3, r2
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	429a      	cmp	r2, r3
 8005114:	d305      	bcc.n	8005122 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800511c:	697a      	ldr	r2, [r7, #20]
 800511e:	429a      	cmp	r2, r3
 8005120:	d902      	bls.n	8005128 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	76bb      	strb	r3, [r7, #26]
 8005126:	e0df      	b.n	80052e8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	4618      	mov	r0, r3
 800512c:	f04f 0100 	mov.w	r1, #0
 8005130:	f04f 0200 	mov.w	r2, #0
 8005134:	f04f 0300 	mov.w	r3, #0
 8005138:	020b      	lsls	r3, r1, #8
 800513a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800513e:	0202      	lsls	r2, r0, #8
 8005140:	6879      	ldr	r1, [r7, #4]
 8005142:	6849      	ldr	r1, [r1, #4]
 8005144:	0849      	lsrs	r1, r1, #1
 8005146:	4608      	mov	r0, r1
 8005148:	f04f 0100 	mov.w	r1, #0
 800514c:	1814      	adds	r4, r2, r0
 800514e:	eb43 0501 	adc.w	r5, r3, r1
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	461a      	mov	r2, r3
 8005158:	f04f 0300 	mov.w	r3, #0
 800515c:	4620      	mov	r0, r4
 800515e:	4629      	mov	r1, r5
 8005160:	f7fb f886 	bl	8000270 <__aeabi_uldivmod>
 8005164:	4602      	mov	r2, r0
 8005166:	460b      	mov	r3, r1
 8005168:	4613      	mov	r3, r2
 800516a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005172:	d308      	bcc.n	8005186 <UART_SetConfig+0x396>
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800517a:	d204      	bcs.n	8005186 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	60da      	str	r2, [r3, #12]
 8005184:	e0b0      	b.n	80052e8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	76bb      	strb	r3, [r7, #26]
 800518a:	e0ad      	b.n	80052e8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	69db      	ldr	r3, [r3, #28]
 8005190:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005194:	d15b      	bne.n	800524e <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8005196:	7efb      	ldrb	r3, [r7, #27]
 8005198:	2b08      	cmp	r3, #8
 800519a:	d828      	bhi.n	80051ee <UART_SetConfig+0x3fe>
 800519c:	a201      	add	r2, pc, #4	; (adr r2, 80051a4 <UART_SetConfig+0x3b4>)
 800519e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a2:	bf00      	nop
 80051a4:	080051c9 	.word	0x080051c9
 80051a8:	080051d1 	.word	0x080051d1
 80051ac:	080051d9 	.word	0x080051d9
 80051b0:	080051ef 	.word	0x080051ef
 80051b4:	080051df 	.word	0x080051df
 80051b8:	080051ef 	.word	0x080051ef
 80051bc:	080051ef 	.word	0x080051ef
 80051c0:	080051ef 	.word	0x080051ef
 80051c4:	080051e7 	.word	0x080051e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051c8:	f7fd ff94 	bl	80030f4 <HAL_RCC_GetPCLK1Freq>
 80051cc:	6178      	str	r0, [r7, #20]
        break;
 80051ce:	e013      	b.n	80051f8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051d0:	f7fd ffa6 	bl	8003120 <HAL_RCC_GetPCLK2Freq>
 80051d4:	6178      	str	r0, [r7, #20]
        break;
 80051d6:	e00f      	b.n	80051f8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051d8:	4b49      	ldr	r3, [pc, #292]	; (8005300 <UART_SetConfig+0x510>)
 80051da:	617b      	str	r3, [r7, #20]
        break;
 80051dc:	e00c      	b.n	80051f8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051de:	f7fd fef1 	bl	8002fc4 <HAL_RCC_GetSysClockFreq>
 80051e2:	6178      	str	r0, [r7, #20]
        break;
 80051e4:	e008      	b.n	80051f8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051ea:	617b      	str	r3, [r7, #20]
        break;
 80051ec:	e004      	b.n	80051f8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80051ee:	2300      	movs	r3, #0
 80051f0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	76bb      	strb	r3, [r7, #26]
        break;
 80051f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d074      	beq.n	80052e8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	005a      	lsls	r2, r3, #1
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	085b      	lsrs	r3, r3, #1
 8005208:	441a      	add	r2, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005212:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	2b0f      	cmp	r3, #15
 8005218:	d916      	bls.n	8005248 <UART_SetConfig+0x458>
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005220:	d212      	bcs.n	8005248 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	b29b      	uxth	r3, r3
 8005226:	f023 030f 	bic.w	r3, r3, #15
 800522a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	085b      	lsrs	r3, r3, #1
 8005230:	b29b      	uxth	r3, r3
 8005232:	f003 0307 	and.w	r3, r3, #7
 8005236:	b29a      	uxth	r2, r3
 8005238:	89fb      	ldrh	r3, [r7, #14]
 800523a:	4313      	orrs	r3, r2
 800523c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	89fa      	ldrh	r2, [r7, #14]
 8005244:	60da      	str	r2, [r3, #12]
 8005246:	e04f      	b.n	80052e8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	76bb      	strb	r3, [r7, #26]
 800524c:	e04c      	b.n	80052e8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800524e:	7efb      	ldrb	r3, [r7, #27]
 8005250:	2b08      	cmp	r3, #8
 8005252:	d828      	bhi.n	80052a6 <UART_SetConfig+0x4b6>
 8005254:	a201      	add	r2, pc, #4	; (adr r2, 800525c <UART_SetConfig+0x46c>)
 8005256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525a:	bf00      	nop
 800525c:	08005281 	.word	0x08005281
 8005260:	08005289 	.word	0x08005289
 8005264:	08005291 	.word	0x08005291
 8005268:	080052a7 	.word	0x080052a7
 800526c:	08005297 	.word	0x08005297
 8005270:	080052a7 	.word	0x080052a7
 8005274:	080052a7 	.word	0x080052a7
 8005278:	080052a7 	.word	0x080052a7
 800527c:	0800529f 	.word	0x0800529f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005280:	f7fd ff38 	bl	80030f4 <HAL_RCC_GetPCLK1Freq>
 8005284:	6178      	str	r0, [r7, #20]
        break;
 8005286:	e013      	b.n	80052b0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005288:	f7fd ff4a 	bl	8003120 <HAL_RCC_GetPCLK2Freq>
 800528c:	6178      	str	r0, [r7, #20]
        break;
 800528e:	e00f      	b.n	80052b0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005290:	4b1b      	ldr	r3, [pc, #108]	; (8005300 <UART_SetConfig+0x510>)
 8005292:	617b      	str	r3, [r7, #20]
        break;
 8005294:	e00c      	b.n	80052b0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005296:	f7fd fe95 	bl	8002fc4 <HAL_RCC_GetSysClockFreq>
 800529a:	6178      	str	r0, [r7, #20]
        break;
 800529c:	e008      	b.n	80052b0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800529e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052a2:	617b      	str	r3, [r7, #20]
        break;
 80052a4:	e004      	b.n	80052b0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80052a6:	2300      	movs	r3, #0
 80052a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	76bb      	strb	r3, [r7, #26]
        break;
 80052ae:	bf00      	nop
    }

    if (pclk != 0U)
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d018      	beq.n	80052e8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	085a      	lsrs	r2, r3, #1
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	441a      	add	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	2b0f      	cmp	r3, #15
 80052ce:	d909      	bls.n	80052e4 <UART_SetConfig+0x4f4>
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052d6:	d205      	bcs.n	80052e4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	b29a      	uxth	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	60da      	str	r2, [r3, #12]
 80052e2:	e001      	b.n	80052e8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80052f4:	7ebb      	ldrb	r3, [r7, #26]
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3720      	adds	r7, #32
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bdb0      	pop	{r4, r5, r7, pc}
 80052fe:	bf00      	nop
 8005300:	00f42400 	.word	0x00f42400

08005304 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005310:	f003 0301 	and.w	r3, r3, #1
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00a      	beq.n	800532e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	430a      	orrs	r2, r1
 800532c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005332:	f003 0302 	and.w	r3, r3, #2
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00a      	beq.n	8005350 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	430a      	orrs	r2, r1
 800534e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005354:	f003 0304 	and.w	r3, r3, #4
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00a      	beq.n	8005372 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	430a      	orrs	r2, r1
 8005370:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005376:	f003 0308 	and.w	r3, r3, #8
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00a      	beq.n	8005394 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	430a      	orrs	r2, r1
 8005392:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005398:	f003 0310 	and.w	r3, r3, #16
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00a      	beq.n	80053b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	430a      	orrs	r2, r1
 80053b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ba:	f003 0320 	and.w	r3, r3, #32
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00a      	beq.n	80053d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	430a      	orrs	r2, r1
 80053d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d01a      	beq.n	800541a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	430a      	orrs	r2, r1
 80053f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005402:	d10a      	bne.n	800541a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	430a      	orrs	r2, r1
 8005418:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00a      	beq.n	800543c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	430a      	orrs	r2, r1
 800543a:	605a      	str	r2, [r3, #4]
  }
}
 800543c:	bf00      	nop
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b086      	sub	sp, #24
 800544c:	af02      	add	r7, sp, #8
 800544e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005458:	f7fb fdd6 	bl	8001008 <HAL_GetTick>
 800545c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0308 	and.w	r3, r3, #8
 8005468:	2b08      	cmp	r3, #8
 800546a:	d10e      	bne.n	800548a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800546c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005470:	9300      	str	r3, [sp, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f82d 	bl	80054da <UART_WaitOnFlagUntilTimeout>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d001      	beq.n	800548a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e023      	b.n	80054d2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0304 	and.w	r3, r3, #4
 8005494:	2b04      	cmp	r3, #4
 8005496:	d10e      	bne.n	80054b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005498:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800549c:	9300      	str	r3, [sp, #0]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f817 	bl	80054da <UART_WaitOnFlagUntilTimeout>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e00d      	b.n	80054d2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2220      	movs	r2, #32
 80054ba:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2220      	movs	r2, #32
 80054c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3710      	adds	r7, #16
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b09c      	sub	sp, #112	; 0x70
 80054de:	af00      	add	r7, sp, #0
 80054e0:	60f8      	str	r0, [r7, #12]
 80054e2:	60b9      	str	r1, [r7, #8]
 80054e4:	603b      	str	r3, [r7, #0]
 80054e6:	4613      	mov	r3, r2
 80054e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054ea:	e0a5      	b.n	8005638 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f2:	f000 80a1 	beq.w	8005638 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054f6:	f7fb fd87 	bl	8001008 <HAL_GetTick>
 80054fa:	4602      	mov	r2, r0
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005502:	429a      	cmp	r2, r3
 8005504:	d302      	bcc.n	800550c <UART_WaitOnFlagUntilTimeout+0x32>
 8005506:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005508:	2b00      	cmp	r3, #0
 800550a:	d13e      	bne.n	800558a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005512:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005514:	e853 3f00 	ldrex	r3, [r3]
 8005518:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800551a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800551c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005520:	667b      	str	r3, [r7, #100]	; 0x64
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	461a      	mov	r2, r3
 8005528:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800552a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800552c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005530:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005532:	e841 2300 	strex	r3, r2, [r1]
 8005536:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005538:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1e6      	bne.n	800550c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	3308      	adds	r3, #8
 8005544:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005548:	e853 3f00 	ldrex	r3, [r3]
 800554c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800554e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005550:	f023 0301 	bic.w	r3, r3, #1
 8005554:	663b      	str	r3, [r7, #96]	; 0x60
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	3308      	adds	r3, #8
 800555c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800555e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005560:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005562:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005564:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005566:	e841 2300 	strex	r3, r2, [r1]
 800556a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800556c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1e5      	bne.n	800553e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2220      	movs	r2, #32
 8005576:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2220      	movs	r2, #32
 800557c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e067      	b.n	800565a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0304 	and.w	r3, r3, #4
 8005594:	2b00      	cmp	r3, #0
 8005596:	d04f      	beq.n	8005638 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	69db      	ldr	r3, [r3, #28]
 800559e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055a6:	d147      	bne.n	8005638 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055b0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ba:	e853 3f00 	ldrex	r3, [r3]
 80055be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	461a      	mov	r2, r3
 80055ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055d0:	637b      	str	r3, [r7, #52]	; 0x34
 80055d2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055d8:	e841 2300 	strex	r3, r2, [r1]
 80055dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80055de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1e6      	bne.n	80055b2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	3308      	adds	r3, #8
 80055ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	e853 3f00 	ldrex	r3, [r3]
 80055f2:	613b      	str	r3, [r7, #16]
   return(result);
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	f023 0301 	bic.w	r3, r3, #1
 80055fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	3308      	adds	r3, #8
 8005602:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005604:	623a      	str	r2, [r7, #32]
 8005606:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005608:	69f9      	ldr	r1, [r7, #28]
 800560a:	6a3a      	ldr	r2, [r7, #32]
 800560c:	e841 2300 	strex	r3, r2, [r1]
 8005610:	61bb      	str	r3, [r7, #24]
   return(result);
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d1e5      	bne.n	80055e4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2220      	movs	r2, #32
 800561c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2220      	movs	r2, #32
 8005622:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2220      	movs	r2, #32
 8005628:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e010      	b.n	800565a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	69da      	ldr	r2, [r3, #28]
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	4013      	ands	r3, r2
 8005642:	68ba      	ldr	r2, [r7, #8]
 8005644:	429a      	cmp	r2, r3
 8005646:	bf0c      	ite	eq
 8005648:	2301      	moveq	r3, #1
 800564a:	2300      	movne	r3, #0
 800564c:	b2db      	uxtb	r3, r3
 800564e:	461a      	mov	r2, r3
 8005650:	79fb      	ldrb	r3, [r7, #7]
 8005652:	429a      	cmp	r2, r3
 8005654:	f43f af4a 	beq.w	80054ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3770      	adds	r7, #112	; 0x70
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
	...

08005664 <__errno>:
 8005664:	4b01      	ldr	r3, [pc, #4]	; (800566c <__errno+0x8>)
 8005666:	6818      	ldr	r0, [r3, #0]
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	2000000c 	.word	0x2000000c

08005670 <__libc_init_array>:
 8005670:	b570      	push	{r4, r5, r6, lr}
 8005672:	4d0d      	ldr	r5, [pc, #52]	; (80056a8 <__libc_init_array+0x38>)
 8005674:	4c0d      	ldr	r4, [pc, #52]	; (80056ac <__libc_init_array+0x3c>)
 8005676:	1b64      	subs	r4, r4, r5
 8005678:	10a4      	asrs	r4, r4, #2
 800567a:	2600      	movs	r6, #0
 800567c:	42a6      	cmp	r6, r4
 800567e:	d109      	bne.n	8005694 <__libc_init_array+0x24>
 8005680:	4d0b      	ldr	r5, [pc, #44]	; (80056b0 <__libc_init_array+0x40>)
 8005682:	4c0c      	ldr	r4, [pc, #48]	; (80056b4 <__libc_init_array+0x44>)
 8005684:	f000 ff76 	bl	8006574 <_init>
 8005688:	1b64      	subs	r4, r4, r5
 800568a:	10a4      	asrs	r4, r4, #2
 800568c:	2600      	movs	r6, #0
 800568e:	42a6      	cmp	r6, r4
 8005690:	d105      	bne.n	800569e <__libc_init_array+0x2e>
 8005692:	bd70      	pop	{r4, r5, r6, pc}
 8005694:	f855 3b04 	ldr.w	r3, [r5], #4
 8005698:	4798      	blx	r3
 800569a:	3601      	adds	r6, #1
 800569c:	e7ee      	b.n	800567c <__libc_init_array+0xc>
 800569e:	f855 3b04 	ldr.w	r3, [r5], #4
 80056a2:	4798      	blx	r3
 80056a4:	3601      	adds	r6, #1
 80056a6:	e7f2      	b.n	800568e <__libc_init_array+0x1e>
 80056a8:	080066b8 	.word	0x080066b8
 80056ac:	080066b8 	.word	0x080066b8
 80056b0:	080066b8 	.word	0x080066b8
 80056b4:	080066bc 	.word	0x080066bc

080056b8 <memset>:
 80056b8:	4402      	add	r2, r0
 80056ba:	4603      	mov	r3, r0
 80056bc:	4293      	cmp	r3, r2
 80056be:	d100      	bne.n	80056c2 <memset+0xa>
 80056c0:	4770      	bx	lr
 80056c2:	f803 1b01 	strb.w	r1, [r3], #1
 80056c6:	e7f9      	b.n	80056bc <memset+0x4>

080056c8 <iprintf>:
 80056c8:	b40f      	push	{r0, r1, r2, r3}
 80056ca:	4b0a      	ldr	r3, [pc, #40]	; (80056f4 <iprintf+0x2c>)
 80056cc:	b513      	push	{r0, r1, r4, lr}
 80056ce:	681c      	ldr	r4, [r3, #0]
 80056d0:	b124      	cbz	r4, 80056dc <iprintf+0x14>
 80056d2:	69a3      	ldr	r3, [r4, #24]
 80056d4:	b913      	cbnz	r3, 80056dc <iprintf+0x14>
 80056d6:	4620      	mov	r0, r4
 80056d8:	f000 f866 	bl	80057a8 <__sinit>
 80056dc:	ab05      	add	r3, sp, #20
 80056de:	9a04      	ldr	r2, [sp, #16]
 80056e0:	68a1      	ldr	r1, [r4, #8]
 80056e2:	9301      	str	r3, [sp, #4]
 80056e4:	4620      	mov	r0, r4
 80056e6:	f000 f983 	bl	80059f0 <_vfiprintf_r>
 80056ea:	b002      	add	sp, #8
 80056ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056f0:	b004      	add	sp, #16
 80056f2:	4770      	bx	lr
 80056f4:	2000000c 	.word	0x2000000c

080056f8 <std>:
 80056f8:	2300      	movs	r3, #0
 80056fa:	b510      	push	{r4, lr}
 80056fc:	4604      	mov	r4, r0
 80056fe:	e9c0 3300 	strd	r3, r3, [r0]
 8005702:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005706:	6083      	str	r3, [r0, #8]
 8005708:	8181      	strh	r1, [r0, #12]
 800570a:	6643      	str	r3, [r0, #100]	; 0x64
 800570c:	81c2      	strh	r2, [r0, #14]
 800570e:	6183      	str	r3, [r0, #24]
 8005710:	4619      	mov	r1, r3
 8005712:	2208      	movs	r2, #8
 8005714:	305c      	adds	r0, #92	; 0x5c
 8005716:	f7ff ffcf 	bl	80056b8 <memset>
 800571a:	4b05      	ldr	r3, [pc, #20]	; (8005730 <std+0x38>)
 800571c:	6263      	str	r3, [r4, #36]	; 0x24
 800571e:	4b05      	ldr	r3, [pc, #20]	; (8005734 <std+0x3c>)
 8005720:	62a3      	str	r3, [r4, #40]	; 0x28
 8005722:	4b05      	ldr	r3, [pc, #20]	; (8005738 <std+0x40>)
 8005724:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005726:	4b05      	ldr	r3, [pc, #20]	; (800573c <std+0x44>)
 8005728:	6224      	str	r4, [r4, #32]
 800572a:	6323      	str	r3, [r4, #48]	; 0x30
 800572c:	bd10      	pop	{r4, pc}
 800572e:	bf00      	nop
 8005730:	08005f99 	.word	0x08005f99
 8005734:	08005fbb 	.word	0x08005fbb
 8005738:	08005ff3 	.word	0x08005ff3
 800573c:	08006017 	.word	0x08006017

08005740 <_cleanup_r>:
 8005740:	4901      	ldr	r1, [pc, #4]	; (8005748 <_cleanup_r+0x8>)
 8005742:	f000 b8af 	b.w	80058a4 <_fwalk_reent>
 8005746:	bf00      	nop
 8005748:	080062f1 	.word	0x080062f1

0800574c <__sfmoreglue>:
 800574c:	b570      	push	{r4, r5, r6, lr}
 800574e:	1e4a      	subs	r2, r1, #1
 8005750:	2568      	movs	r5, #104	; 0x68
 8005752:	4355      	muls	r5, r2
 8005754:	460e      	mov	r6, r1
 8005756:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800575a:	f000 f8c5 	bl	80058e8 <_malloc_r>
 800575e:	4604      	mov	r4, r0
 8005760:	b140      	cbz	r0, 8005774 <__sfmoreglue+0x28>
 8005762:	2100      	movs	r1, #0
 8005764:	e9c0 1600 	strd	r1, r6, [r0]
 8005768:	300c      	adds	r0, #12
 800576a:	60a0      	str	r0, [r4, #8]
 800576c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005770:	f7ff ffa2 	bl	80056b8 <memset>
 8005774:	4620      	mov	r0, r4
 8005776:	bd70      	pop	{r4, r5, r6, pc}

08005778 <__sfp_lock_acquire>:
 8005778:	4801      	ldr	r0, [pc, #4]	; (8005780 <__sfp_lock_acquire+0x8>)
 800577a:	f000 b8b3 	b.w	80058e4 <__retarget_lock_acquire_recursive>
 800577e:	bf00      	nop
 8005780:	200001e0 	.word	0x200001e0

08005784 <__sfp_lock_release>:
 8005784:	4801      	ldr	r0, [pc, #4]	; (800578c <__sfp_lock_release+0x8>)
 8005786:	f000 b8ae 	b.w	80058e6 <__retarget_lock_release_recursive>
 800578a:	bf00      	nop
 800578c:	200001e0 	.word	0x200001e0

08005790 <__sinit_lock_acquire>:
 8005790:	4801      	ldr	r0, [pc, #4]	; (8005798 <__sinit_lock_acquire+0x8>)
 8005792:	f000 b8a7 	b.w	80058e4 <__retarget_lock_acquire_recursive>
 8005796:	bf00      	nop
 8005798:	200001db 	.word	0x200001db

0800579c <__sinit_lock_release>:
 800579c:	4801      	ldr	r0, [pc, #4]	; (80057a4 <__sinit_lock_release+0x8>)
 800579e:	f000 b8a2 	b.w	80058e6 <__retarget_lock_release_recursive>
 80057a2:	bf00      	nop
 80057a4:	200001db 	.word	0x200001db

080057a8 <__sinit>:
 80057a8:	b510      	push	{r4, lr}
 80057aa:	4604      	mov	r4, r0
 80057ac:	f7ff fff0 	bl	8005790 <__sinit_lock_acquire>
 80057b0:	69a3      	ldr	r3, [r4, #24]
 80057b2:	b11b      	cbz	r3, 80057bc <__sinit+0x14>
 80057b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057b8:	f7ff bff0 	b.w	800579c <__sinit_lock_release>
 80057bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80057c0:	6523      	str	r3, [r4, #80]	; 0x50
 80057c2:	4b13      	ldr	r3, [pc, #76]	; (8005810 <__sinit+0x68>)
 80057c4:	4a13      	ldr	r2, [pc, #76]	; (8005814 <__sinit+0x6c>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80057ca:	42a3      	cmp	r3, r4
 80057cc:	bf04      	itt	eq
 80057ce:	2301      	moveq	r3, #1
 80057d0:	61a3      	streq	r3, [r4, #24]
 80057d2:	4620      	mov	r0, r4
 80057d4:	f000 f820 	bl	8005818 <__sfp>
 80057d8:	6060      	str	r0, [r4, #4]
 80057da:	4620      	mov	r0, r4
 80057dc:	f000 f81c 	bl	8005818 <__sfp>
 80057e0:	60a0      	str	r0, [r4, #8]
 80057e2:	4620      	mov	r0, r4
 80057e4:	f000 f818 	bl	8005818 <__sfp>
 80057e8:	2200      	movs	r2, #0
 80057ea:	60e0      	str	r0, [r4, #12]
 80057ec:	2104      	movs	r1, #4
 80057ee:	6860      	ldr	r0, [r4, #4]
 80057f0:	f7ff ff82 	bl	80056f8 <std>
 80057f4:	68a0      	ldr	r0, [r4, #8]
 80057f6:	2201      	movs	r2, #1
 80057f8:	2109      	movs	r1, #9
 80057fa:	f7ff ff7d 	bl	80056f8 <std>
 80057fe:	68e0      	ldr	r0, [r4, #12]
 8005800:	2202      	movs	r2, #2
 8005802:	2112      	movs	r1, #18
 8005804:	f7ff ff78 	bl	80056f8 <std>
 8005808:	2301      	movs	r3, #1
 800580a:	61a3      	str	r3, [r4, #24]
 800580c:	e7d2      	b.n	80057b4 <__sinit+0xc>
 800580e:	bf00      	nop
 8005810:	08006618 	.word	0x08006618
 8005814:	08005741 	.word	0x08005741

08005818 <__sfp>:
 8005818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800581a:	4607      	mov	r7, r0
 800581c:	f7ff ffac 	bl	8005778 <__sfp_lock_acquire>
 8005820:	4b1e      	ldr	r3, [pc, #120]	; (800589c <__sfp+0x84>)
 8005822:	681e      	ldr	r6, [r3, #0]
 8005824:	69b3      	ldr	r3, [r6, #24]
 8005826:	b913      	cbnz	r3, 800582e <__sfp+0x16>
 8005828:	4630      	mov	r0, r6
 800582a:	f7ff ffbd 	bl	80057a8 <__sinit>
 800582e:	3648      	adds	r6, #72	; 0x48
 8005830:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005834:	3b01      	subs	r3, #1
 8005836:	d503      	bpl.n	8005840 <__sfp+0x28>
 8005838:	6833      	ldr	r3, [r6, #0]
 800583a:	b30b      	cbz	r3, 8005880 <__sfp+0x68>
 800583c:	6836      	ldr	r6, [r6, #0]
 800583e:	e7f7      	b.n	8005830 <__sfp+0x18>
 8005840:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005844:	b9d5      	cbnz	r5, 800587c <__sfp+0x64>
 8005846:	4b16      	ldr	r3, [pc, #88]	; (80058a0 <__sfp+0x88>)
 8005848:	60e3      	str	r3, [r4, #12]
 800584a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800584e:	6665      	str	r5, [r4, #100]	; 0x64
 8005850:	f000 f847 	bl	80058e2 <__retarget_lock_init_recursive>
 8005854:	f7ff ff96 	bl	8005784 <__sfp_lock_release>
 8005858:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800585c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005860:	6025      	str	r5, [r4, #0]
 8005862:	61a5      	str	r5, [r4, #24]
 8005864:	2208      	movs	r2, #8
 8005866:	4629      	mov	r1, r5
 8005868:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800586c:	f7ff ff24 	bl	80056b8 <memset>
 8005870:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005874:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005878:	4620      	mov	r0, r4
 800587a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800587c:	3468      	adds	r4, #104	; 0x68
 800587e:	e7d9      	b.n	8005834 <__sfp+0x1c>
 8005880:	2104      	movs	r1, #4
 8005882:	4638      	mov	r0, r7
 8005884:	f7ff ff62 	bl	800574c <__sfmoreglue>
 8005888:	4604      	mov	r4, r0
 800588a:	6030      	str	r0, [r6, #0]
 800588c:	2800      	cmp	r0, #0
 800588e:	d1d5      	bne.n	800583c <__sfp+0x24>
 8005890:	f7ff ff78 	bl	8005784 <__sfp_lock_release>
 8005894:	230c      	movs	r3, #12
 8005896:	603b      	str	r3, [r7, #0]
 8005898:	e7ee      	b.n	8005878 <__sfp+0x60>
 800589a:	bf00      	nop
 800589c:	08006618 	.word	0x08006618
 80058a0:	ffff0001 	.word	0xffff0001

080058a4 <_fwalk_reent>:
 80058a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058a8:	4606      	mov	r6, r0
 80058aa:	4688      	mov	r8, r1
 80058ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80058b0:	2700      	movs	r7, #0
 80058b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80058b6:	f1b9 0901 	subs.w	r9, r9, #1
 80058ba:	d505      	bpl.n	80058c8 <_fwalk_reent+0x24>
 80058bc:	6824      	ldr	r4, [r4, #0]
 80058be:	2c00      	cmp	r4, #0
 80058c0:	d1f7      	bne.n	80058b2 <_fwalk_reent+0xe>
 80058c2:	4638      	mov	r0, r7
 80058c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058c8:	89ab      	ldrh	r3, [r5, #12]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d907      	bls.n	80058de <_fwalk_reent+0x3a>
 80058ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80058d2:	3301      	adds	r3, #1
 80058d4:	d003      	beq.n	80058de <_fwalk_reent+0x3a>
 80058d6:	4629      	mov	r1, r5
 80058d8:	4630      	mov	r0, r6
 80058da:	47c0      	blx	r8
 80058dc:	4307      	orrs	r7, r0
 80058de:	3568      	adds	r5, #104	; 0x68
 80058e0:	e7e9      	b.n	80058b6 <_fwalk_reent+0x12>

080058e2 <__retarget_lock_init_recursive>:
 80058e2:	4770      	bx	lr

080058e4 <__retarget_lock_acquire_recursive>:
 80058e4:	4770      	bx	lr

080058e6 <__retarget_lock_release_recursive>:
 80058e6:	4770      	bx	lr

080058e8 <_malloc_r>:
 80058e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ea:	1ccd      	adds	r5, r1, #3
 80058ec:	f025 0503 	bic.w	r5, r5, #3
 80058f0:	3508      	adds	r5, #8
 80058f2:	2d0c      	cmp	r5, #12
 80058f4:	bf38      	it	cc
 80058f6:	250c      	movcc	r5, #12
 80058f8:	2d00      	cmp	r5, #0
 80058fa:	4606      	mov	r6, r0
 80058fc:	db01      	blt.n	8005902 <_malloc_r+0x1a>
 80058fe:	42a9      	cmp	r1, r5
 8005900:	d903      	bls.n	800590a <_malloc_r+0x22>
 8005902:	230c      	movs	r3, #12
 8005904:	6033      	str	r3, [r6, #0]
 8005906:	2000      	movs	r0, #0
 8005908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800590a:	f000 fda3 	bl	8006454 <__malloc_lock>
 800590e:	4921      	ldr	r1, [pc, #132]	; (8005994 <_malloc_r+0xac>)
 8005910:	680a      	ldr	r2, [r1, #0]
 8005912:	4614      	mov	r4, r2
 8005914:	b99c      	cbnz	r4, 800593e <_malloc_r+0x56>
 8005916:	4f20      	ldr	r7, [pc, #128]	; (8005998 <_malloc_r+0xb0>)
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	b923      	cbnz	r3, 8005926 <_malloc_r+0x3e>
 800591c:	4621      	mov	r1, r4
 800591e:	4630      	mov	r0, r6
 8005920:	f000 fb2a 	bl	8005f78 <_sbrk_r>
 8005924:	6038      	str	r0, [r7, #0]
 8005926:	4629      	mov	r1, r5
 8005928:	4630      	mov	r0, r6
 800592a:	f000 fb25 	bl	8005f78 <_sbrk_r>
 800592e:	1c43      	adds	r3, r0, #1
 8005930:	d123      	bne.n	800597a <_malloc_r+0x92>
 8005932:	230c      	movs	r3, #12
 8005934:	6033      	str	r3, [r6, #0]
 8005936:	4630      	mov	r0, r6
 8005938:	f000 fd92 	bl	8006460 <__malloc_unlock>
 800593c:	e7e3      	b.n	8005906 <_malloc_r+0x1e>
 800593e:	6823      	ldr	r3, [r4, #0]
 8005940:	1b5b      	subs	r3, r3, r5
 8005942:	d417      	bmi.n	8005974 <_malloc_r+0x8c>
 8005944:	2b0b      	cmp	r3, #11
 8005946:	d903      	bls.n	8005950 <_malloc_r+0x68>
 8005948:	6023      	str	r3, [r4, #0]
 800594a:	441c      	add	r4, r3
 800594c:	6025      	str	r5, [r4, #0]
 800594e:	e004      	b.n	800595a <_malloc_r+0x72>
 8005950:	6863      	ldr	r3, [r4, #4]
 8005952:	42a2      	cmp	r2, r4
 8005954:	bf0c      	ite	eq
 8005956:	600b      	streq	r3, [r1, #0]
 8005958:	6053      	strne	r3, [r2, #4]
 800595a:	4630      	mov	r0, r6
 800595c:	f000 fd80 	bl	8006460 <__malloc_unlock>
 8005960:	f104 000b 	add.w	r0, r4, #11
 8005964:	1d23      	adds	r3, r4, #4
 8005966:	f020 0007 	bic.w	r0, r0, #7
 800596a:	1ac2      	subs	r2, r0, r3
 800596c:	d0cc      	beq.n	8005908 <_malloc_r+0x20>
 800596e:	1a1b      	subs	r3, r3, r0
 8005970:	50a3      	str	r3, [r4, r2]
 8005972:	e7c9      	b.n	8005908 <_malloc_r+0x20>
 8005974:	4622      	mov	r2, r4
 8005976:	6864      	ldr	r4, [r4, #4]
 8005978:	e7cc      	b.n	8005914 <_malloc_r+0x2c>
 800597a:	1cc4      	adds	r4, r0, #3
 800597c:	f024 0403 	bic.w	r4, r4, #3
 8005980:	42a0      	cmp	r0, r4
 8005982:	d0e3      	beq.n	800594c <_malloc_r+0x64>
 8005984:	1a21      	subs	r1, r4, r0
 8005986:	4630      	mov	r0, r6
 8005988:	f000 faf6 	bl	8005f78 <_sbrk_r>
 800598c:	3001      	adds	r0, #1
 800598e:	d1dd      	bne.n	800594c <_malloc_r+0x64>
 8005990:	e7cf      	b.n	8005932 <_malloc_r+0x4a>
 8005992:	bf00      	nop
 8005994:	20000090 	.word	0x20000090
 8005998:	20000094 	.word	0x20000094

0800599c <__sfputc_r>:
 800599c:	6893      	ldr	r3, [r2, #8]
 800599e:	3b01      	subs	r3, #1
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	b410      	push	{r4}
 80059a4:	6093      	str	r3, [r2, #8]
 80059a6:	da08      	bge.n	80059ba <__sfputc_r+0x1e>
 80059a8:	6994      	ldr	r4, [r2, #24]
 80059aa:	42a3      	cmp	r3, r4
 80059ac:	db01      	blt.n	80059b2 <__sfputc_r+0x16>
 80059ae:	290a      	cmp	r1, #10
 80059b0:	d103      	bne.n	80059ba <__sfputc_r+0x1e>
 80059b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059b6:	f000 bb33 	b.w	8006020 <__swbuf_r>
 80059ba:	6813      	ldr	r3, [r2, #0]
 80059bc:	1c58      	adds	r0, r3, #1
 80059be:	6010      	str	r0, [r2, #0]
 80059c0:	7019      	strb	r1, [r3, #0]
 80059c2:	4608      	mov	r0, r1
 80059c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059c8:	4770      	bx	lr

080059ca <__sfputs_r>:
 80059ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059cc:	4606      	mov	r6, r0
 80059ce:	460f      	mov	r7, r1
 80059d0:	4614      	mov	r4, r2
 80059d2:	18d5      	adds	r5, r2, r3
 80059d4:	42ac      	cmp	r4, r5
 80059d6:	d101      	bne.n	80059dc <__sfputs_r+0x12>
 80059d8:	2000      	movs	r0, #0
 80059da:	e007      	b.n	80059ec <__sfputs_r+0x22>
 80059dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059e0:	463a      	mov	r2, r7
 80059e2:	4630      	mov	r0, r6
 80059e4:	f7ff ffda 	bl	800599c <__sfputc_r>
 80059e8:	1c43      	adds	r3, r0, #1
 80059ea:	d1f3      	bne.n	80059d4 <__sfputs_r+0xa>
 80059ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080059f0 <_vfiprintf_r>:
 80059f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059f4:	460d      	mov	r5, r1
 80059f6:	b09d      	sub	sp, #116	; 0x74
 80059f8:	4614      	mov	r4, r2
 80059fa:	4698      	mov	r8, r3
 80059fc:	4606      	mov	r6, r0
 80059fe:	b118      	cbz	r0, 8005a08 <_vfiprintf_r+0x18>
 8005a00:	6983      	ldr	r3, [r0, #24]
 8005a02:	b90b      	cbnz	r3, 8005a08 <_vfiprintf_r+0x18>
 8005a04:	f7ff fed0 	bl	80057a8 <__sinit>
 8005a08:	4b89      	ldr	r3, [pc, #548]	; (8005c30 <_vfiprintf_r+0x240>)
 8005a0a:	429d      	cmp	r5, r3
 8005a0c:	d11b      	bne.n	8005a46 <_vfiprintf_r+0x56>
 8005a0e:	6875      	ldr	r5, [r6, #4]
 8005a10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a12:	07d9      	lsls	r1, r3, #31
 8005a14:	d405      	bmi.n	8005a22 <_vfiprintf_r+0x32>
 8005a16:	89ab      	ldrh	r3, [r5, #12]
 8005a18:	059a      	lsls	r2, r3, #22
 8005a1a:	d402      	bmi.n	8005a22 <_vfiprintf_r+0x32>
 8005a1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a1e:	f7ff ff61 	bl	80058e4 <__retarget_lock_acquire_recursive>
 8005a22:	89ab      	ldrh	r3, [r5, #12]
 8005a24:	071b      	lsls	r3, r3, #28
 8005a26:	d501      	bpl.n	8005a2c <_vfiprintf_r+0x3c>
 8005a28:	692b      	ldr	r3, [r5, #16]
 8005a2a:	b9eb      	cbnz	r3, 8005a68 <_vfiprintf_r+0x78>
 8005a2c:	4629      	mov	r1, r5
 8005a2e:	4630      	mov	r0, r6
 8005a30:	f000 fb5a 	bl	80060e8 <__swsetup_r>
 8005a34:	b1c0      	cbz	r0, 8005a68 <_vfiprintf_r+0x78>
 8005a36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a38:	07dc      	lsls	r4, r3, #31
 8005a3a:	d50e      	bpl.n	8005a5a <_vfiprintf_r+0x6a>
 8005a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a40:	b01d      	add	sp, #116	; 0x74
 8005a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a46:	4b7b      	ldr	r3, [pc, #492]	; (8005c34 <_vfiprintf_r+0x244>)
 8005a48:	429d      	cmp	r5, r3
 8005a4a:	d101      	bne.n	8005a50 <_vfiprintf_r+0x60>
 8005a4c:	68b5      	ldr	r5, [r6, #8]
 8005a4e:	e7df      	b.n	8005a10 <_vfiprintf_r+0x20>
 8005a50:	4b79      	ldr	r3, [pc, #484]	; (8005c38 <_vfiprintf_r+0x248>)
 8005a52:	429d      	cmp	r5, r3
 8005a54:	bf08      	it	eq
 8005a56:	68f5      	ldreq	r5, [r6, #12]
 8005a58:	e7da      	b.n	8005a10 <_vfiprintf_r+0x20>
 8005a5a:	89ab      	ldrh	r3, [r5, #12]
 8005a5c:	0598      	lsls	r0, r3, #22
 8005a5e:	d4ed      	bmi.n	8005a3c <_vfiprintf_r+0x4c>
 8005a60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a62:	f7ff ff40 	bl	80058e6 <__retarget_lock_release_recursive>
 8005a66:	e7e9      	b.n	8005a3c <_vfiprintf_r+0x4c>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	9309      	str	r3, [sp, #36]	; 0x24
 8005a6c:	2320      	movs	r3, #32
 8005a6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a72:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a76:	2330      	movs	r3, #48	; 0x30
 8005a78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005c3c <_vfiprintf_r+0x24c>
 8005a7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a80:	f04f 0901 	mov.w	r9, #1
 8005a84:	4623      	mov	r3, r4
 8005a86:	469a      	mov	sl, r3
 8005a88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a8c:	b10a      	cbz	r2, 8005a92 <_vfiprintf_r+0xa2>
 8005a8e:	2a25      	cmp	r2, #37	; 0x25
 8005a90:	d1f9      	bne.n	8005a86 <_vfiprintf_r+0x96>
 8005a92:	ebba 0b04 	subs.w	fp, sl, r4
 8005a96:	d00b      	beq.n	8005ab0 <_vfiprintf_r+0xc0>
 8005a98:	465b      	mov	r3, fp
 8005a9a:	4622      	mov	r2, r4
 8005a9c:	4629      	mov	r1, r5
 8005a9e:	4630      	mov	r0, r6
 8005aa0:	f7ff ff93 	bl	80059ca <__sfputs_r>
 8005aa4:	3001      	adds	r0, #1
 8005aa6:	f000 80aa 	beq.w	8005bfe <_vfiprintf_r+0x20e>
 8005aaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005aac:	445a      	add	r2, fp
 8005aae:	9209      	str	r2, [sp, #36]	; 0x24
 8005ab0:	f89a 3000 	ldrb.w	r3, [sl]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f000 80a2 	beq.w	8005bfe <_vfiprintf_r+0x20e>
 8005aba:	2300      	movs	r3, #0
 8005abc:	f04f 32ff 	mov.w	r2, #4294967295
 8005ac0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ac4:	f10a 0a01 	add.w	sl, sl, #1
 8005ac8:	9304      	str	r3, [sp, #16]
 8005aca:	9307      	str	r3, [sp, #28]
 8005acc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ad0:	931a      	str	r3, [sp, #104]	; 0x68
 8005ad2:	4654      	mov	r4, sl
 8005ad4:	2205      	movs	r2, #5
 8005ad6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ada:	4858      	ldr	r0, [pc, #352]	; (8005c3c <_vfiprintf_r+0x24c>)
 8005adc:	f7fa fb78 	bl	80001d0 <memchr>
 8005ae0:	9a04      	ldr	r2, [sp, #16]
 8005ae2:	b9d8      	cbnz	r0, 8005b1c <_vfiprintf_r+0x12c>
 8005ae4:	06d1      	lsls	r1, r2, #27
 8005ae6:	bf44      	itt	mi
 8005ae8:	2320      	movmi	r3, #32
 8005aea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005aee:	0713      	lsls	r3, r2, #28
 8005af0:	bf44      	itt	mi
 8005af2:	232b      	movmi	r3, #43	; 0x2b
 8005af4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005af8:	f89a 3000 	ldrb.w	r3, [sl]
 8005afc:	2b2a      	cmp	r3, #42	; 0x2a
 8005afe:	d015      	beq.n	8005b2c <_vfiprintf_r+0x13c>
 8005b00:	9a07      	ldr	r2, [sp, #28]
 8005b02:	4654      	mov	r4, sl
 8005b04:	2000      	movs	r0, #0
 8005b06:	f04f 0c0a 	mov.w	ip, #10
 8005b0a:	4621      	mov	r1, r4
 8005b0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b10:	3b30      	subs	r3, #48	; 0x30
 8005b12:	2b09      	cmp	r3, #9
 8005b14:	d94e      	bls.n	8005bb4 <_vfiprintf_r+0x1c4>
 8005b16:	b1b0      	cbz	r0, 8005b46 <_vfiprintf_r+0x156>
 8005b18:	9207      	str	r2, [sp, #28]
 8005b1a:	e014      	b.n	8005b46 <_vfiprintf_r+0x156>
 8005b1c:	eba0 0308 	sub.w	r3, r0, r8
 8005b20:	fa09 f303 	lsl.w	r3, r9, r3
 8005b24:	4313      	orrs	r3, r2
 8005b26:	9304      	str	r3, [sp, #16]
 8005b28:	46a2      	mov	sl, r4
 8005b2a:	e7d2      	b.n	8005ad2 <_vfiprintf_r+0xe2>
 8005b2c:	9b03      	ldr	r3, [sp, #12]
 8005b2e:	1d19      	adds	r1, r3, #4
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	9103      	str	r1, [sp, #12]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	bfbb      	ittet	lt
 8005b38:	425b      	neglt	r3, r3
 8005b3a:	f042 0202 	orrlt.w	r2, r2, #2
 8005b3e:	9307      	strge	r3, [sp, #28]
 8005b40:	9307      	strlt	r3, [sp, #28]
 8005b42:	bfb8      	it	lt
 8005b44:	9204      	strlt	r2, [sp, #16]
 8005b46:	7823      	ldrb	r3, [r4, #0]
 8005b48:	2b2e      	cmp	r3, #46	; 0x2e
 8005b4a:	d10c      	bne.n	8005b66 <_vfiprintf_r+0x176>
 8005b4c:	7863      	ldrb	r3, [r4, #1]
 8005b4e:	2b2a      	cmp	r3, #42	; 0x2a
 8005b50:	d135      	bne.n	8005bbe <_vfiprintf_r+0x1ce>
 8005b52:	9b03      	ldr	r3, [sp, #12]
 8005b54:	1d1a      	adds	r2, r3, #4
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	9203      	str	r2, [sp, #12]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	bfb8      	it	lt
 8005b5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b62:	3402      	adds	r4, #2
 8005b64:	9305      	str	r3, [sp, #20]
 8005b66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005c4c <_vfiprintf_r+0x25c>
 8005b6a:	7821      	ldrb	r1, [r4, #0]
 8005b6c:	2203      	movs	r2, #3
 8005b6e:	4650      	mov	r0, sl
 8005b70:	f7fa fb2e 	bl	80001d0 <memchr>
 8005b74:	b140      	cbz	r0, 8005b88 <_vfiprintf_r+0x198>
 8005b76:	2340      	movs	r3, #64	; 0x40
 8005b78:	eba0 000a 	sub.w	r0, r0, sl
 8005b7c:	fa03 f000 	lsl.w	r0, r3, r0
 8005b80:	9b04      	ldr	r3, [sp, #16]
 8005b82:	4303      	orrs	r3, r0
 8005b84:	3401      	adds	r4, #1
 8005b86:	9304      	str	r3, [sp, #16]
 8005b88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b8c:	482c      	ldr	r0, [pc, #176]	; (8005c40 <_vfiprintf_r+0x250>)
 8005b8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b92:	2206      	movs	r2, #6
 8005b94:	f7fa fb1c 	bl	80001d0 <memchr>
 8005b98:	2800      	cmp	r0, #0
 8005b9a:	d03f      	beq.n	8005c1c <_vfiprintf_r+0x22c>
 8005b9c:	4b29      	ldr	r3, [pc, #164]	; (8005c44 <_vfiprintf_r+0x254>)
 8005b9e:	bb1b      	cbnz	r3, 8005be8 <_vfiprintf_r+0x1f8>
 8005ba0:	9b03      	ldr	r3, [sp, #12]
 8005ba2:	3307      	adds	r3, #7
 8005ba4:	f023 0307 	bic.w	r3, r3, #7
 8005ba8:	3308      	adds	r3, #8
 8005baa:	9303      	str	r3, [sp, #12]
 8005bac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bae:	443b      	add	r3, r7
 8005bb0:	9309      	str	r3, [sp, #36]	; 0x24
 8005bb2:	e767      	b.n	8005a84 <_vfiprintf_r+0x94>
 8005bb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bb8:	460c      	mov	r4, r1
 8005bba:	2001      	movs	r0, #1
 8005bbc:	e7a5      	b.n	8005b0a <_vfiprintf_r+0x11a>
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	3401      	adds	r4, #1
 8005bc2:	9305      	str	r3, [sp, #20]
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	f04f 0c0a 	mov.w	ip, #10
 8005bca:	4620      	mov	r0, r4
 8005bcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bd0:	3a30      	subs	r2, #48	; 0x30
 8005bd2:	2a09      	cmp	r2, #9
 8005bd4:	d903      	bls.n	8005bde <_vfiprintf_r+0x1ee>
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d0c5      	beq.n	8005b66 <_vfiprintf_r+0x176>
 8005bda:	9105      	str	r1, [sp, #20]
 8005bdc:	e7c3      	b.n	8005b66 <_vfiprintf_r+0x176>
 8005bde:	fb0c 2101 	mla	r1, ip, r1, r2
 8005be2:	4604      	mov	r4, r0
 8005be4:	2301      	movs	r3, #1
 8005be6:	e7f0      	b.n	8005bca <_vfiprintf_r+0x1da>
 8005be8:	ab03      	add	r3, sp, #12
 8005bea:	9300      	str	r3, [sp, #0]
 8005bec:	462a      	mov	r2, r5
 8005bee:	4b16      	ldr	r3, [pc, #88]	; (8005c48 <_vfiprintf_r+0x258>)
 8005bf0:	a904      	add	r1, sp, #16
 8005bf2:	4630      	mov	r0, r6
 8005bf4:	f3af 8000 	nop.w
 8005bf8:	4607      	mov	r7, r0
 8005bfa:	1c78      	adds	r0, r7, #1
 8005bfc:	d1d6      	bne.n	8005bac <_vfiprintf_r+0x1bc>
 8005bfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c00:	07d9      	lsls	r1, r3, #31
 8005c02:	d405      	bmi.n	8005c10 <_vfiprintf_r+0x220>
 8005c04:	89ab      	ldrh	r3, [r5, #12]
 8005c06:	059a      	lsls	r2, r3, #22
 8005c08:	d402      	bmi.n	8005c10 <_vfiprintf_r+0x220>
 8005c0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c0c:	f7ff fe6b 	bl	80058e6 <__retarget_lock_release_recursive>
 8005c10:	89ab      	ldrh	r3, [r5, #12]
 8005c12:	065b      	lsls	r3, r3, #25
 8005c14:	f53f af12 	bmi.w	8005a3c <_vfiprintf_r+0x4c>
 8005c18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c1a:	e711      	b.n	8005a40 <_vfiprintf_r+0x50>
 8005c1c:	ab03      	add	r3, sp, #12
 8005c1e:	9300      	str	r3, [sp, #0]
 8005c20:	462a      	mov	r2, r5
 8005c22:	4b09      	ldr	r3, [pc, #36]	; (8005c48 <_vfiprintf_r+0x258>)
 8005c24:	a904      	add	r1, sp, #16
 8005c26:	4630      	mov	r0, r6
 8005c28:	f000 f880 	bl	8005d2c <_printf_i>
 8005c2c:	e7e4      	b.n	8005bf8 <_vfiprintf_r+0x208>
 8005c2e:	bf00      	nop
 8005c30:	0800663c 	.word	0x0800663c
 8005c34:	0800665c 	.word	0x0800665c
 8005c38:	0800661c 	.word	0x0800661c
 8005c3c:	0800667c 	.word	0x0800667c
 8005c40:	08006686 	.word	0x08006686
 8005c44:	00000000 	.word	0x00000000
 8005c48:	080059cb 	.word	0x080059cb
 8005c4c:	08006682 	.word	0x08006682

08005c50 <_printf_common>:
 8005c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c54:	4616      	mov	r6, r2
 8005c56:	4699      	mov	r9, r3
 8005c58:	688a      	ldr	r2, [r1, #8]
 8005c5a:	690b      	ldr	r3, [r1, #16]
 8005c5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c60:	4293      	cmp	r3, r2
 8005c62:	bfb8      	it	lt
 8005c64:	4613      	movlt	r3, r2
 8005c66:	6033      	str	r3, [r6, #0]
 8005c68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c6c:	4607      	mov	r7, r0
 8005c6e:	460c      	mov	r4, r1
 8005c70:	b10a      	cbz	r2, 8005c76 <_printf_common+0x26>
 8005c72:	3301      	adds	r3, #1
 8005c74:	6033      	str	r3, [r6, #0]
 8005c76:	6823      	ldr	r3, [r4, #0]
 8005c78:	0699      	lsls	r1, r3, #26
 8005c7a:	bf42      	ittt	mi
 8005c7c:	6833      	ldrmi	r3, [r6, #0]
 8005c7e:	3302      	addmi	r3, #2
 8005c80:	6033      	strmi	r3, [r6, #0]
 8005c82:	6825      	ldr	r5, [r4, #0]
 8005c84:	f015 0506 	ands.w	r5, r5, #6
 8005c88:	d106      	bne.n	8005c98 <_printf_common+0x48>
 8005c8a:	f104 0a19 	add.w	sl, r4, #25
 8005c8e:	68e3      	ldr	r3, [r4, #12]
 8005c90:	6832      	ldr	r2, [r6, #0]
 8005c92:	1a9b      	subs	r3, r3, r2
 8005c94:	42ab      	cmp	r3, r5
 8005c96:	dc26      	bgt.n	8005ce6 <_printf_common+0x96>
 8005c98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c9c:	1e13      	subs	r3, r2, #0
 8005c9e:	6822      	ldr	r2, [r4, #0]
 8005ca0:	bf18      	it	ne
 8005ca2:	2301      	movne	r3, #1
 8005ca4:	0692      	lsls	r2, r2, #26
 8005ca6:	d42b      	bmi.n	8005d00 <_printf_common+0xb0>
 8005ca8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cac:	4649      	mov	r1, r9
 8005cae:	4638      	mov	r0, r7
 8005cb0:	47c0      	blx	r8
 8005cb2:	3001      	adds	r0, #1
 8005cb4:	d01e      	beq.n	8005cf4 <_printf_common+0xa4>
 8005cb6:	6823      	ldr	r3, [r4, #0]
 8005cb8:	68e5      	ldr	r5, [r4, #12]
 8005cba:	6832      	ldr	r2, [r6, #0]
 8005cbc:	f003 0306 	and.w	r3, r3, #6
 8005cc0:	2b04      	cmp	r3, #4
 8005cc2:	bf08      	it	eq
 8005cc4:	1aad      	subeq	r5, r5, r2
 8005cc6:	68a3      	ldr	r3, [r4, #8]
 8005cc8:	6922      	ldr	r2, [r4, #16]
 8005cca:	bf0c      	ite	eq
 8005ccc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cd0:	2500      	movne	r5, #0
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	bfc4      	itt	gt
 8005cd6:	1a9b      	subgt	r3, r3, r2
 8005cd8:	18ed      	addgt	r5, r5, r3
 8005cda:	2600      	movs	r6, #0
 8005cdc:	341a      	adds	r4, #26
 8005cde:	42b5      	cmp	r5, r6
 8005ce0:	d11a      	bne.n	8005d18 <_printf_common+0xc8>
 8005ce2:	2000      	movs	r0, #0
 8005ce4:	e008      	b.n	8005cf8 <_printf_common+0xa8>
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	4652      	mov	r2, sl
 8005cea:	4649      	mov	r1, r9
 8005cec:	4638      	mov	r0, r7
 8005cee:	47c0      	blx	r8
 8005cf0:	3001      	adds	r0, #1
 8005cf2:	d103      	bne.n	8005cfc <_printf_common+0xac>
 8005cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cfc:	3501      	adds	r5, #1
 8005cfe:	e7c6      	b.n	8005c8e <_printf_common+0x3e>
 8005d00:	18e1      	adds	r1, r4, r3
 8005d02:	1c5a      	adds	r2, r3, #1
 8005d04:	2030      	movs	r0, #48	; 0x30
 8005d06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d0a:	4422      	add	r2, r4
 8005d0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d14:	3302      	adds	r3, #2
 8005d16:	e7c7      	b.n	8005ca8 <_printf_common+0x58>
 8005d18:	2301      	movs	r3, #1
 8005d1a:	4622      	mov	r2, r4
 8005d1c:	4649      	mov	r1, r9
 8005d1e:	4638      	mov	r0, r7
 8005d20:	47c0      	blx	r8
 8005d22:	3001      	adds	r0, #1
 8005d24:	d0e6      	beq.n	8005cf4 <_printf_common+0xa4>
 8005d26:	3601      	adds	r6, #1
 8005d28:	e7d9      	b.n	8005cde <_printf_common+0x8e>
	...

08005d2c <_printf_i>:
 8005d2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d30:	460c      	mov	r4, r1
 8005d32:	4691      	mov	r9, r2
 8005d34:	7e27      	ldrb	r7, [r4, #24]
 8005d36:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005d38:	2f78      	cmp	r7, #120	; 0x78
 8005d3a:	4680      	mov	r8, r0
 8005d3c:	469a      	mov	sl, r3
 8005d3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d42:	d807      	bhi.n	8005d54 <_printf_i+0x28>
 8005d44:	2f62      	cmp	r7, #98	; 0x62
 8005d46:	d80a      	bhi.n	8005d5e <_printf_i+0x32>
 8005d48:	2f00      	cmp	r7, #0
 8005d4a:	f000 80d8 	beq.w	8005efe <_printf_i+0x1d2>
 8005d4e:	2f58      	cmp	r7, #88	; 0x58
 8005d50:	f000 80a3 	beq.w	8005e9a <_printf_i+0x16e>
 8005d54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005d58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d5c:	e03a      	b.n	8005dd4 <_printf_i+0xa8>
 8005d5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d62:	2b15      	cmp	r3, #21
 8005d64:	d8f6      	bhi.n	8005d54 <_printf_i+0x28>
 8005d66:	a001      	add	r0, pc, #4	; (adr r0, 8005d6c <_printf_i+0x40>)
 8005d68:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005d6c:	08005dc5 	.word	0x08005dc5
 8005d70:	08005dd9 	.word	0x08005dd9
 8005d74:	08005d55 	.word	0x08005d55
 8005d78:	08005d55 	.word	0x08005d55
 8005d7c:	08005d55 	.word	0x08005d55
 8005d80:	08005d55 	.word	0x08005d55
 8005d84:	08005dd9 	.word	0x08005dd9
 8005d88:	08005d55 	.word	0x08005d55
 8005d8c:	08005d55 	.word	0x08005d55
 8005d90:	08005d55 	.word	0x08005d55
 8005d94:	08005d55 	.word	0x08005d55
 8005d98:	08005ee5 	.word	0x08005ee5
 8005d9c:	08005e09 	.word	0x08005e09
 8005da0:	08005ec7 	.word	0x08005ec7
 8005da4:	08005d55 	.word	0x08005d55
 8005da8:	08005d55 	.word	0x08005d55
 8005dac:	08005f07 	.word	0x08005f07
 8005db0:	08005d55 	.word	0x08005d55
 8005db4:	08005e09 	.word	0x08005e09
 8005db8:	08005d55 	.word	0x08005d55
 8005dbc:	08005d55 	.word	0x08005d55
 8005dc0:	08005ecf 	.word	0x08005ecf
 8005dc4:	680b      	ldr	r3, [r1, #0]
 8005dc6:	1d1a      	adds	r2, r3, #4
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	600a      	str	r2, [r1, #0]
 8005dcc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005dd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e0a3      	b.n	8005f20 <_printf_i+0x1f4>
 8005dd8:	6825      	ldr	r5, [r4, #0]
 8005dda:	6808      	ldr	r0, [r1, #0]
 8005ddc:	062e      	lsls	r6, r5, #24
 8005dde:	f100 0304 	add.w	r3, r0, #4
 8005de2:	d50a      	bpl.n	8005dfa <_printf_i+0xce>
 8005de4:	6805      	ldr	r5, [r0, #0]
 8005de6:	600b      	str	r3, [r1, #0]
 8005de8:	2d00      	cmp	r5, #0
 8005dea:	da03      	bge.n	8005df4 <_printf_i+0xc8>
 8005dec:	232d      	movs	r3, #45	; 0x2d
 8005dee:	426d      	negs	r5, r5
 8005df0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005df4:	485e      	ldr	r0, [pc, #376]	; (8005f70 <_printf_i+0x244>)
 8005df6:	230a      	movs	r3, #10
 8005df8:	e019      	b.n	8005e2e <_printf_i+0x102>
 8005dfa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005dfe:	6805      	ldr	r5, [r0, #0]
 8005e00:	600b      	str	r3, [r1, #0]
 8005e02:	bf18      	it	ne
 8005e04:	b22d      	sxthne	r5, r5
 8005e06:	e7ef      	b.n	8005de8 <_printf_i+0xbc>
 8005e08:	680b      	ldr	r3, [r1, #0]
 8005e0a:	6825      	ldr	r5, [r4, #0]
 8005e0c:	1d18      	adds	r0, r3, #4
 8005e0e:	6008      	str	r0, [r1, #0]
 8005e10:	0628      	lsls	r0, r5, #24
 8005e12:	d501      	bpl.n	8005e18 <_printf_i+0xec>
 8005e14:	681d      	ldr	r5, [r3, #0]
 8005e16:	e002      	b.n	8005e1e <_printf_i+0xf2>
 8005e18:	0669      	lsls	r1, r5, #25
 8005e1a:	d5fb      	bpl.n	8005e14 <_printf_i+0xe8>
 8005e1c:	881d      	ldrh	r5, [r3, #0]
 8005e1e:	4854      	ldr	r0, [pc, #336]	; (8005f70 <_printf_i+0x244>)
 8005e20:	2f6f      	cmp	r7, #111	; 0x6f
 8005e22:	bf0c      	ite	eq
 8005e24:	2308      	moveq	r3, #8
 8005e26:	230a      	movne	r3, #10
 8005e28:	2100      	movs	r1, #0
 8005e2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e2e:	6866      	ldr	r6, [r4, #4]
 8005e30:	60a6      	str	r6, [r4, #8]
 8005e32:	2e00      	cmp	r6, #0
 8005e34:	bfa2      	ittt	ge
 8005e36:	6821      	ldrge	r1, [r4, #0]
 8005e38:	f021 0104 	bicge.w	r1, r1, #4
 8005e3c:	6021      	strge	r1, [r4, #0]
 8005e3e:	b90d      	cbnz	r5, 8005e44 <_printf_i+0x118>
 8005e40:	2e00      	cmp	r6, #0
 8005e42:	d04d      	beq.n	8005ee0 <_printf_i+0x1b4>
 8005e44:	4616      	mov	r6, r2
 8005e46:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e4a:	fb03 5711 	mls	r7, r3, r1, r5
 8005e4e:	5dc7      	ldrb	r7, [r0, r7]
 8005e50:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e54:	462f      	mov	r7, r5
 8005e56:	42bb      	cmp	r3, r7
 8005e58:	460d      	mov	r5, r1
 8005e5a:	d9f4      	bls.n	8005e46 <_printf_i+0x11a>
 8005e5c:	2b08      	cmp	r3, #8
 8005e5e:	d10b      	bne.n	8005e78 <_printf_i+0x14c>
 8005e60:	6823      	ldr	r3, [r4, #0]
 8005e62:	07df      	lsls	r7, r3, #31
 8005e64:	d508      	bpl.n	8005e78 <_printf_i+0x14c>
 8005e66:	6923      	ldr	r3, [r4, #16]
 8005e68:	6861      	ldr	r1, [r4, #4]
 8005e6a:	4299      	cmp	r1, r3
 8005e6c:	bfde      	ittt	le
 8005e6e:	2330      	movle	r3, #48	; 0x30
 8005e70:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e74:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e78:	1b92      	subs	r2, r2, r6
 8005e7a:	6122      	str	r2, [r4, #16]
 8005e7c:	f8cd a000 	str.w	sl, [sp]
 8005e80:	464b      	mov	r3, r9
 8005e82:	aa03      	add	r2, sp, #12
 8005e84:	4621      	mov	r1, r4
 8005e86:	4640      	mov	r0, r8
 8005e88:	f7ff fee2 	bl	8005c50 <_printf_common>
 8005e8c:	3001      	adds	r0, #1
 8005e8e:	d14c      	bne.n	8005f2a <_printf_i+0x1fe>
 8005e90:	f04f 30ff 	mov.w	r0, #4294967295
 8005e94:	b004      	add	sp, #16
 8005e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e9a:	4835      	ldr	r0, [pc, #212]	; (8005f70 <_printf_i+0x244>)
 8005e9c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005ea0:	6823      	ldr	r3, [r4, #0]
 8005ea2:	680e      	ldr	r6, [r1, #0]
 8005ea4:	061f      	lsls	r7, r3, #24
 8005ea6:	f856 5b04 	ldr.w	r5, [r6], #4
 8005eaa:	600e      	str	r6, [r1, #0]
 8005eac:	d514      	bpl.n	8005ed8 <_printf_i+0x1ac>
 8005eae:	07d9      	lsls	r1, r3, #31
 8005eb0:	bf44      	itt	mi
 8005eb2:	f043 0320 	orrmi.w	r3, r3, #32
 8005eb6:	6023      	strmi	r3, [r4, #0]
 8005eb8:	b91d      	cbnz	r5, 8005ec2 <_printf_i+0x196>
 8005eba:	6823      	ldr	r3, [r4, #0]
 8005ebc:	f023 0320 	bic.w	r3, r3, #32
 8005ec0:	6023      	str	r3, [r4, #0]
 8005ec2:	2310      	movs	r3, #16
 8005ec4:	e7b0      	b.n	8005e28 <_printf_i+0xfc>
 8005ec6:	6823      	ldr	r3, [r4, #0]
 8005ec8:	f043 0320 	orr.w	r3, r3, #32
 8005ecc:	6023      	str	r3, [r4, #0]
 8005ece:	2378      	movs	r3, #120	; 0x78
 8005ed0:	4828      	ldr	r0, [pc, #160]	; (8005f74 <_printf_i+0x248>)
 8005ed2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ed6:	e7e3      	b.n	8005ea0 <_printf_i+0x174>
 8005ed8:	065e      	lsls	r6, r3, #25
 8005eda:	bf48      	it	mi
 8005edc:	b2ad      	uxthmi	r5, r5
 8005ede:	e7e6      	b.n	8005eae <_printf_i+0x182>
 8005ee0:	4616      	mov	r6, r2
 8005ee2:	e7bb      	b.n	8005e5c <_printf_i+0x130>
 8005ee4:	680b      	ldr	r3, [r1, #0]
 8005ee6:	6826      	ldr	r6, [r4, #0]
 8005ee8:	6960      	ldr	r0, [r4, #20]
 8005eea:	1d1d      	adds	r5, r3, #4
 8005eec:	600d      	str	r5, [r1, #0]
 8005eee:	0635      	lsls	r5, r6, #24
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	d501      	bpl.n	8005ef8 <_printf_i+0x1cc>
 8005ef4:	6018      	str	r0, [r3, #0]
 8005ef6:	e002      	b.n	8005efe <_printf_i+0x1d2>
 8005ef8:	0671      	lsls	r1, r6, #25
 8005efa:	d5fb      	bpl.n	8005ef4 <_printf_i+0x1c8>
 8005efc:	8018      	strh	r0, [r3, #0]
 8005efe:	2300      	movs	r3, #0
 8005f00:	6123      	str	r3, [r4, #16]
 8005f02:	4616      	mov	r6, r2
 8005f04:	e7ba      	b.n	8005e7c <_printf_i+0x150>
 8005f06:	680b      	ldr	r3, [r1, #0]
 8005f08:	1d1a      	adds	r2, r3, #4
 8005f0a:	600a      	str	r2, [r1, #0]
 8005f0c:	681e      	ldr	r6, [r3, #0]
 8005f0e:	6862      	ldr	r2, [r4, #4]
 8005f10:	2100      	movs	r1, #0
 8005f12:	4630      	mov	r0, r6
 8005f14:	f7fa f95c 	bl	80001d0 <memchr>
 8005f18:	b108      	cbz	r0, 8005f1e <_printf_i+0x1f2>
 8005f1a:	1b80      	subs	r0, r0, r6
 8005f1c:	6060      	str	r0, [r4, #4]
 8005f1e:	6863      	ldr	r3, [r4, #4]
 8005f20:	6123      	str	r3, [r4, #16]
 8005f22:	2300      	movs	r3, #0
 8005f24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f28:	e7a8      	b.n	8005e7c <_printf_i+0x150>
 8005f2a:	6923      	ldr	r3, [r4, #16]
 8005f2c:	4632      	mov	r2, r6
 8005f2e:	4649      	mov	r1, r9
 8005f30:	4640      	mov	r0, r8
 8005f32:	47d0      	blx	sl
 8005f34:	3001      	adds	r0, #1
 8005f36:	d0ab      	beq.n	8005e90 <_printf_i+0x164>
 8005f38:	6823      	ldr	r3, [r4, #0]
 8005f3a:	079b      	lsls	r3, r3, #30
 8005f3c:	d413      	bmi.n	8005f66 <_printf_i+0x23a>
 8005f3e:	68e0      	ldr	r0, [r4, #12]
 8005f40:	9b03      	ldr	r3, [sp, #12]
 8005f42:	4298      	cmp	r0, r3
 8005f44:	bfb8      	it	lt
 8005f46:	4618      	movlt	r0, r3
 8005f48:	e7a4      	b.n	8005e94 <_printf_i+0x168>
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	4632      	mov	r2, r6
 8005f4e:	4649      	mov	r1, r9
 8005f50:	4640      	mov	r0, r8
 8005f52:	47d0      	blx	sl
 8005f54:	3001      	adds	r0, #1
 8005f56:	d09b      	beq.n	8005e90 <_printf_i+0x164>
 8005f58:	3501      	adds	r5, #1
 8005f5a:	68e3      	ldr	r3, [r4, #12]
 8005f5c:	9903      	ldr	r1, [sp, #12]
 8005f5e:	1a5b      	subs	r3, r3, r1
 8005f60:	42ab      	cmp	r3, r5
 8005f62:	dcf2      	bgt.n	8005f4a <_printf_i+0x21e>
 8005f64:	e7eb      	b.n	8005f3e <_printf_i+0x212>
 8005f66:	2500      	movs	r5, #0
 8005f68:	f104 0619 	add.w	r6, r4, #25
 8005f6c:	e7f5      	b.n	8005f5a <_printf_i+0x22e>
 8005f6e:	bf00      	nop
 8005f70:	0800668d 	.word	0x0800668d
 8005f74:	0800669e 	.word	0x0800669e

08005f78 <_sbrk_r>:
 8005f78:	b538      	push	{r3, r4, r5, lr}
 8005f7a:	4d06      	ldr	r5, [pc, #24]	; (8005f94 <_sbrk_r+0x1c>)
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	4604      	mov	r4, r0
 8005f80:	4608      	mov	r0, r1
 8005f82:	602b      	str	r3, [r5, #0]
 8005f84:	f7fa ff4e 	bl	8000e24 <_sbrk>
 8005f88:	1c43      	adds	r3, r0, #1
 8005f8a:	d102      	bne.n	8005f92 <_sbrk_r+0x1a>
 8005f8c:	682b      	ldr	r3, [r5, #0]
 8005f8e:	b103      	cbz	r3, 8005f92 <_sbrk_r+0x1a>
 8005f90:	6023      	str	r3, [r4, #0]
 8005f92:	bd38      	pop	{r3, r4, r5, pc}
 8005f94:	200001e4 	.word	0x200001e4

08005f98 <__sread>:
 8005f98:	b510      	push	{r4, lr}
 8005f9a:	460c      	mov	r4, r1
 8005f9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fa0:	f000 fab4 	bl	800650c <_read_r>
 8005fa4:	2800      	cmp	r0, #0
 8005fa6:	bfab      	itete	ge
 8005fa8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005faa:	89a3      	ldrhlt	r3, [r4, #12]
 8005fac:	181b      	addge	r3, r3, r0
 8005fae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005fb2:	bfac      	ite	ge
 8005fb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8005fb6:	81a3      	strhlt	r3, [r4, #12]
 8005fb8:	bd10      	pop	{r4, pc}

08005fba <__swrite>:
 8005fba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fbe:	461f      	mov	r7, r3
 8005fc0:	898b      	ldrh	r3, [r1, #12]
 8005fc2:	05db      	lsls	r3, r3, #23
 8005fc4:	4605      	mov	r5, r0
 8005fc6:	460c      	mov	r4, r1
 8005fc8:	4616      	mov	r6, r2
 8005fca:	d505      	bpl.n	8005fd8 <__swrite+0x1e>
 8005fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fd0:	2302      	movs	r3, #2
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f000 f9c8 	bl	8006368 <_lseek_r>
 8005fd8:	89a3      	ldrh	r3, [r4, #12]
 8005fda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fe2:	81a3      	strh	r3, [r4, #12]
 8005fe4:	4632      	mov	r2, r6
 8005fe6:	463b      	mov	r3, r7
 8005fe8:	4628      	mov	r0, r5
 8005fea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fee:	f000 b869 	b.w	80060c4 <_write_r>

08005ff2 <__sseek>:
 8005ff2:	b510      	push	{r4, lr}
 8005ff4:	460c      	mov	r4, r1
 8005ff6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ffa:	f000 f9b5 	bl	8006368 <_lseek_r>
 8005ffe:	1c43      	adds	r3, r0, #1
 8006000:	89a3      	ldrh	r3, [r4, #12]
 8006002:	bf15      	itete	ne
 8006004:	6560      	strne	r0, [r4, #84]	; 0x54
 8006006:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800600a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800600e:	81a3      	strheq	r3, [r4, #12]
 8006010:	bf18      	it	ne
 8006012:	81a3      	strhne	r3, [r4, #12]
 8006014:	bd10      	pop	{r4, pc}

08006016 <__sclose>:
 8006016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800601a:	f000 b8d3 	b.w	80061c4 <_close_r>
	...

08006020 <__swbuf_r>:
 8006020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006022:	460e      	mov	r6, r1
 8006024:	4614      	mov	r4, r2
 8006026:	4605      	mov	r5, r0
 8006028:	b118      	cbz	r0, 8006032 <__swbuf_r+0x12>
 800602a:	6983      	ldr	r3, [r0, #24]
 800602c:	b90b      	cbnz	r3, 8006032 <__swbuf_r+0x12>
 800602e:	f7ff fbbb 	bl	80057a8 <__sinit>
 8006032:	4b21      	ldr	r3, [pc, #132]	; (80060b8 <__swbuf_r+0x98>)
 8006034:	429c      	cmp	r4, r3
 8006036:	d12b      	bne.n	8006090 <__swbuf_r+0x70>
 8006038:	686c      	ldr	r4, [r5, #4]
 800603a:	69a3      	ldr	r3, [r4, #24]
 800603c:	60a3      	str	r3, [r4, #8]
 800603e:	89a3      	ldrh	r3, [r4, #12]
 8006040:	071a      	lsls	r2, r3, #28
 8006042:	d52f      	bpl.n	80060a4 <__swbuf_r+0x84>
 8006044:	6923      	ldr	r3, [r4, #16]
 8006046:	b36b      	cbz	r3, 80060a4 <__swbuf_r+0x84>
 8006048:	6923      	ldr	r3, [r4, #16]
 800604a:	6820      	ldr	r0, [r4, #0]
 800604c:	1ac0      	subs	r0, r0, r3
 800604e:	6963      	ldr	r3, [r4, #20]
 8006050:	b2f6      	uxtb	r6, r6
 8006052:	4283      	cmp	r3, r0
 8006054:	4637      	mov	r7, r6
 8006056:	dc04      	bgt.n	8006062 <__swbuf_r+0x42>
 8006058:	4621      	mov	r1, r4
 800605a:	4628      	mov	r0, r5
 800605c:	f000 f948 	bl	80062f0 <_fflush_r>
 8006060:	bb30      	cbnz	r0, 80060b0 <__swbuf_r+0x90>
 8006062:	68a3      	ldr	r3, [r4, #8]
 8006064:	3b01      	subs	r3, #1
 8006066:	60a3      	str	r3, [r4, #8]
 8006068:	6823      	ldr	r3, [r4, #0]
 800606a:	1c5a      	adds	r2, r3, #1
 800606c:	6022      	str	r2, [r4, #0]
 800606e:	701e      	strb	r6, [r3, #0]
 8006070:	6963      	ldr	r3, [r4, #20]
 8006072:	3001      	adds	r0, #1
 8006074:	4283      	cmp	r3, r0
 8006076:	d004      	beq.n	8006082 <__swbuf_r+0x62>
 8006078:	89a3      	ldrh	r3, [r4, #12]
 800607a:	07db      	lsls	r3, r3, #31
 800607c:	d506      	bpl.n	800608c <__swbuf_r+0x6c>
 800607e:	2e0a      	cmp	r6, #10
 8006080:	d104      	bne.n	800608c <__swbuf_r+0x6c>
 8006082:	4621      	mov	r1, r4
 8006084:	4628      	mov	r0, r5
 8006086:	f000 f933 	bl	80062f0 <_fflush_r>
 800608a:	b988      	cbnz	r0, 80060b0 <__swbuf_r+0x90>
 800608c:	4638      	mov	r0, r7
 800608e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006090:	4b0a      	ldr	r3, [pc, #40]	; (80060bc <__swbuf_r+0x9c>)
 8006092:	429c      	cmp	r4, r3
 8006094:	d101      	bne.n	800609a <__swbuf_r+0x7a>
 8006096:	68ac      	ldr	r4, [r5, #8]
 8006098:	e7cf      	b.n	800603a <__swbuf_r+0x1a>
 800609a:	4b09      	ldr	r3, [pc, #36]	; (80060c0 <__swbuf_r+0xa0>)
 800609c:	429c      	cmp	r4, r3
 800609e:	bf08      	it	eq
 80060a0:	68ec      	ldreq	r4, [r5, #12]
 80060a2:	e7ca      	b.n	800603a <__swbuf_r+0x1a>
 80060a4:	4621      	mov	r1, r4
 80060a6:	4628      	mov	r0, r5
 80060a8:	f000 f81e 	bl	80060e8 <__swsetup_r>
 80060ac:	2800      	cmp	r0, #0
 80060ae:	d0cb      	beq.n	8006048 <__swbuf_r+0x28>
 80060b0:	f04f 37ff 	mov.w	r7, #4294967295
 80060b4:	e7ea      	b.n	800608c <__swbuf_r+0x6c>
 80060b6:	bf00      	nop
 80060b8:	0800663c 	.word	0x0800663c
 80060bc:	0800665c 	.word	0x0800665c
 80060c0:	0800661c 	.word	0x0800661c

080060c4 <_write_r>:
 80060c4:	b538      	push	{r3, r4, r5, lr}
 80060c6:	4d07      	ldr	r5, [pc, #28]	; (80060e4 <_write_r+0x20>)
 80060c8:	4604      	mov	r4, r0
 80060ca:	4608      	mov	r0, r1
 80060cc:	4611      	mov	r1, r2
 80060ce:	2200      	movs	r2, #0
 80060d0:	602a      	str	r2, [r5, #0]
 80060d2:	461a      	mov	r2, r3
 80060d4:	f7fa fe55 	bl	8000d82 <_write>
 80060d8:	1c43      	adds	r3, r0, #1
 80060da:	d102      	bne.n	80060e2 <_write_r+0x1e>
 80060dc:	682b      	ldr	r3, [r5, #0]
 80060de:	b103      	cbz	r3, 80060e2 <_write_r+0x1e>
 80060e0:	6023      	str	r3, [r4, #0]
 80060e2:	bd38      	pop	{r3, r4, r5, pc}
 80060e4:	200001e4 	.word	0x200001e4

080060e8 <__swsetup_r>:
 80060e8:	4b32      	ldr	r3, [pc, #200]	; (80061b4 <__swsetup_r+0xcc>)
 80060ea:	b570      	push	{r4, r5, r6, lr}
 80060ec:	681d      	ldr	r5, [r3, #0]
 80060ee:	4606      	mov	r6, r0
 80060f0:	460c      	mov	r4, r1
 80060f2:	b125      	cbz	r5, 80060fe <__swsetup_r+0x16>
 80060f4:	69ab      	ldr	r3, [r5, #24]
 80060f6:	b913      	cbnz	r3, 80060fe <__swsetup_r+0x16>
 80060f8:	4628      	mov	r0, r5
 80060fa:	f7ff fb55 	bl	80057a8 <__sinit>
 80060fe:	4b2e      	ldr	r3, [pc, #184]	; (80061b8 <__swsetup_r+0xd0>)
 8006100:	429c      	cmp	r4, r3
 8006102:	d10f      	bne.n	8006124 <__swsetup_r+0x3c>
 8006104:	686c      	ldr	r4, [r5, #4]
 8006106:	89a3      	ldrh	r3, [r4, #12]
 8006108:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800610c:	0719      	lsls	r1, r3, #28
 800610e:	d42c      	bmi.n	800616a <__swsetup_r+0x82>
 8006110:	06dd      	lsls	r5, r3, #27
 8006112:	d411      	bmi.n	8006138 <__swsetup_r+0x50>
 8006114:	2309      	movs	r3, #9
 8006116:	6033      	str	r3, [r6, #0]
 8006118:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800611c:	81a3      	strh	r3, [r4, #12]
 800611e:	f04f 30ff 	mov.w	r0, #4294967295
 8006122:	e03e      	b.n	80061a2 <__swsetup_r+0xba>
 8006124:	4b25      	ldr	r3, [pc, #148]	; (80061bc <__swsetup_r+0xd4>)
 8006126:	429c      	cmp	r4, r3
 8006128:	d101      	bne.n	800612e <__swsetup_r+0x46>
 800612a:	68ac      	ldr	r4, [r5, #8]
 800612c:	e7eb      	b.n	8006106 <__swsetup_r+0x1e>
 800612e:	4b24      	ldr	r3, [pc, #144]	; (80061c0 <__swsetup_r+0xd8>)
 8006130:	429c      	cmp	r4, r3
 8006132:	bf08      	it	eq
 8006134:	68ec      	ldreq	r4, [r5, #12]
 8006136:	e7e6      	b.n	8006106 <__swsetup_r+0x1e>
 8006138:	0758      	lsls	r0, r3, #29
 800613a:	d512      	bpl.n	8006162 <__swsetup_r+0x7a>
 800613c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800613e:	b141      	cbz	r1, 8006152 <__swsetup_r+0x6a>
 8006140:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006144:	4299      	cmp	r1, r3
 8006146:	d002      	beq.n	800614e <__swsetup_r+0x66>
 8006148:	4630      	mov	r0, r6
 800614a:	f000 f98f 	bl	800646c <_free_r>
 800614e:	2300      	movs	r3, #0
 8006150:	6363      	str	r3, [r4, #52]	; 0x34
 8006152:	89a3      	ldrh	r3, [r4, #12]
 8006154:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006158:	81a3      	strh	r3, [r4, #12]
 800615a:	2300      	movs	r3, #0
 800615c:	6063      	str	r3, [r4, #4]
 800615e:	6923      	ldr	r3, [r4, #16]
 8006160:	6023      	str	r3, [r4, #0]
 8006162:	89a3      	ldrh	r3, [r4, #12]
 8006164:	f043 0308 	orr.w	r3, r3, #8
 8006168:	81a3      	strh	r3, [r4, #12]
 800616a:	6923      	ldr	r3, [r4, #16]
 800616c:	b94b      	cbnz	r3, 8006182 <__swsetup_r+0x9a>
 800616e:	89a3      	ldrh	r3, [r4, #12]
 8006170:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006174:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006178:	d003      	beq.n	8006182 <__swsetup_r+0x9a>
 800617a:	4621      	mov	r1, r4
 800617c:	4630      	mov	r0, r6
 800617e:	f000 f929 	bl	80063d4 <__smakebuf_r>
 8006182:	89a0      	ldrh	r0, [r4, #12]
 8006184:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006188:	f010 0301 	ands.w	r3, r0, #1
 800618c:	d00a      	beq.n	80061a4 <__swsetup_r+0xbc>
 800618e:	2300      	movs	r3, #0
 8006190:	60a3      	str	r3, [r4, #8]
 8006192:	6963      	ldr	r3, [r4, #20]
 8006194:	425b      	negs	r3, r3
 8006196:	61a3      	str	r3, [r4, #24]
 8006198:	6923      	ldr	r3, [r4, #16]
 800619a:	b943      	cbnz	r3, 80061ae <__swsetup_r+0xc6>
 800619c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80061a0:	d1ba      	bne.n	8006118 <__swsetup_r+0x30>
 80061a2:	bd70      	pop	{r4, r5, r6, pc}
 80061a4:	0781      	lsls	r1, r0, #30
 80061a6:	bf58      	it	pl
 80061a8:	6963      	ldrpl	r3, [r4, #20]
 80061aa:	60a3      	str	r3, [r4, #8]
 80061ac:	e7f4      	b.n	8006198 <__swsetup_r+0xb0>
 80061ae:	2000      	movs	r0, #0
 80061b0:	e7f7      	b.n	80061a2 <__swsetup_r+0xba>
 80061b2:	bf00      	nop
 80061b4:	2000000c 	.word	0x2000000c
 80061b8:	0800663c 	.word	0x0800663c
 80061bc:	0800665c 	.word	0x0800665c
 80061c0:	0800661c 	.word	0x0800661c

080061c4 <_close_r>:
 80061c4:	b538      	push	{r3, r4, r5, lr}
 80061c6:	4d06      	ldr	r5, [pc, #24]	; (80061e0 <_close_r+0x1c>)
 80061c8:	2300      	movs	r3, #0
 80061ca:	4604      	mov	r4, r0
 80061cc:	4608      	mov	r0, r1
 80061ce:	602b      	str	r3, [r5, #0]
 80061d0:	f7fa fdf3 	bl	8000dba <_close>
 80061d4:	1c43      	adds	r3, r0, #1
 80061d6:	d102      	bne.n	80061de <_close_r+0x1a>
 80061d8:	682b      	ldr	r3, [r5, #0]
 80061da:	b103      	cbz	r3, 80061de <_close_r+0x1a>
 80061dc:	6023      	str	r3, [r4, #0]
 80061de:	bd38      	pop	{r3, r4, r5, pc}
 80061e0:	200001e4 	.word	0x200001e4

080061e4 <__sflush_r>:
 80061e4:	898a      	ldrh	r2, [r1, #12]
 80061e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061ea:	4605      	mov	r5, r0
 80061ec:	0710      	lsls	r0, r2, #28
 80061ee:	460c      	mov	r4, r1
 80061f0:	d458      	bmi.n	80062a4 <__sflush_r+0xc0>
 80061f2:	684b      	ldr	r3, [r1, #4]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	dc05      	bgt.n	8006204 <__sflush_r+0x20>
 80061f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	dc02      	bgt.n	8006204 <__sflush_r+0x20>
 80061fe:	2000      	movs	r0, #0
 8006200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006204:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006206:	2e00      	cmp	r6, #0
 8006208:	d0f9      	beq.n	80061fe <__sflush_r+0x1a>
 800620a:	2300      	movs	r3, #0
 800620c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006210:	682f      	ldr	r7, [r5, #0]
 8006212:	602b      	str	r3, [r5, #0]
 8006214:	d032      	beq.n	800627c <__sflush_r+0x98>
 8006216:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006218:	89a3      	ldrh	r3, [r4, #12]
 800621a:	075a      	lsls	r2, r3, #29
 800621c:	d505      	bpl.n	800622a <__sflush_r+0x46>
 800621e:	6863      	ldr	r3, [r4, #4]
 8006220:	1ac0      	subs	r0, r0, r3
 8006222:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006224:	b10b      	cbz	r3, 800622a <__sflush_r+0x46>
 8006226:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006228:	1ac0      	subs	r0, r0, r3
 800622a:	2300      	movs	r3, #0
 800622c:	4602      	mov	r2, r0
 800622e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006230:	6a21      	ldr	r1, [r4, #32]
 8006232:	4628      	mov	r0, r5
 8006234:	47b0      	blx	r6
 8006236:	1c43      	adds	r3, r0, #1
 8006238:	89a3      	ldrh	r3, [r4, #12]
 800623a:	d106      	bne.n	800624a <__sflush_r+0x66>
 800623c:	6829      	ldr	r1, [r5, #0]
 800623e:	291d      	cmp	r1, #29
 8006240:	d82c      	bhi.n	800629c <__sflush_r+0xb8>
 8006242:	4a2a      	ldr	r2, [pc, #168]	; (80062ec <__sflush_r+0x108>)
 8006244:	40ca      	lsrs	r2, r1
 8006246:	07d6      	lsls	r6, r2, #31
 8006248:	d528      	bpl.n	800629c <__sflush_r+0xb8>
 800624a:	2200      	movs	r2, #0
 800624c:	6062      	str	r2, [r4, #4]
 800624e:	04d9      	lsls	r1, r3, #19
 8006250:	6922      	ldr	r2, [r4, #16]
 8006252:	6022      	str	r2, [r4, #0]
 8006254:	d504      	bpl.n	8006260 <__sflush_r+0x7c>
 8006256:	1c42      	adds	r2, r0, #1
 8006258:	d101      	bne.n	800625e <__sflush_r+0x7a>
 800625a:	682b      	ldr	r3, [r5, #0]
 800625c:	b903      	cbnz	r3, 8006260 <__sflush_r+0x7c>
 800625e:	6560      	str	r0, [r4, #84]	; 0x54
 8006260:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006262:	602f      	str	r7, [r5, #0]
 8006264:	2900      	cmp	r1, #0
 8006266:	d0ca      	beq.n	80061fe <__sflush_r+0x1a>
 8006268:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800626c:	4299      	cmp	r1, r3
 800626e:	d002      	beq.n	8006276 <__sflush_r+0x92>
 8006270:	4628      	mov	r0, r5
 8006272:	f000 f8fb 	bl	800646c <_free_r>
 8006276:	2000      	movs	r0, #0
 8006278:	6360      	str	r0, [r4, #52]	; 0x34
 800627a:	e7c1      	b.n	8006200 <__sflush_r+0x1c>
 800627c:	6a21      	ldr	r1, [r4, #32]
 800627e:	2301      	movs	r3, #1
 8006280:	4628      	mov	r0, r5
 8006282:	47b0      	blx	r6
 8006284:	1c41      	adds	r1, r0, #1
 8006286:	d1c7      	bne.n	8006218 <__sflush_r+0x34>
 8006288:	682b      	ldr	r3, [r5, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d0c4      	beq.n	8006218 <__sflush_r+0x34>
 800628e:	2b1d      	cmp	r3, #29
 8006290:	d001      	beq.n	8006296 <__sflush_r+0xb2>
 8006292:	2b16      	cmp	r3, #22
 8006294:	d101      	bne.n	800629a <__sflush_r+0xb6>
 8006296:	602f      	str	r7, [r5, #0]
 8006298:	e7b1      	b.n	80061fe <__sflush_r+0x1a>
 800629a:	89a3      	ldrh	r3, [r4, #12]
 800629c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062a0:	81a3      	strh	r3, [r4, #12]
 80062a2:	e7ad      	b.n	8006200 <__sflush_r+0x1c>
 80062a4:	690f      	ldr	r7, [r1, #16]
 80062a6:	2f00      	cmp	r7, #0
 80062a8:	d0a9      	beq.n	80061fe <__sflush_r+0x1a>
 80062aa:	0793      	lsls	r3, r2, #30
 80062ac:	680e      	ldr	r6, [r1, #0]
 80062ae:	bf08      	it	eq
 80062b0:	694b      	ldreq	r3, [r1, #20]
 80062b2:	600f      	str	r7, [r1, #0]
 80062b4:	bf18      	it	ne
 80062b6:	2300      	movne	r3, #0
 80062b8:	eba6 0807 	sub.w	r8, r6, r7
 80062bc:	608b      	str	r3, [r1, #8]
 80062be:	f1b8 0f00 	cmp.w	r8, #0
 80062c2:	dd9c      	ble.n	80061fe <__sflush_r+0x1a>
 80062c4:	6a21      	ldr	r1, [r4, #32]
 80062c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80062c8:	4643      	mov	r3, r8
 80062ca:	463a      	mov	r2, r7
 80062cc:	4628      	mov	r0, r5
 80062ce:	47b0      	blx	r6
 80062d0:	2800      	cmp	r0, #0
 80062d2:	dc06      	bgt.n	80062e2 <__sflush_r+0xfe>
 80062d4:	89a3      	ldrh	r3, [r4, #12]
 80062d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062da:	81a3      	strh	r3, [r4, #12]
 80062dc:	f04f 30ff 	mov.w	r0, #4294967295
 80062e0:	e78e      	b.n	8006200 <__sflush_r+0x1c>
 80062e2:	4407      	add	r7, r0
 80062e4:	eba8 0800 	sub.w	r8, r8, r0
 80062e8:	e7e9      	b.n	80062be <__sflush_r+0xda>
 80062ea:	bf00      	nop
 80062ec:	20400001 	.word	0x20400001

080062f0 <_fflush_r>:
 80062f0:	b538      	push	{r3, r4, r5, lr}
 80062f2:	690b      	ldr	r3, [r1, #16]
 80062f4:	4605      	mov	r5, r0
 80062f6:	460c      	mov	r4, r1
 80062f8:	b913      	cbnz	r3, 8006300 <_fflush_r+0x10>
 80062fa:	2500      	movs	r5, #0
 80062fc:	4628      	mov	r0, r5
 80062fe:	bd38      	pop	{r3, r4, r5, pc}
 8006300:	b118      	cbz	r0, 800630a <_fflush_r+0x1a>
 8006302:	6983      	ldr	r3, [r0, #24]
 8006304:	b90b      	cbnz	r3, 800630a <_fflush_r+0x1a>
 8006306:	f7ff fa4f 	bl	80057a8 <__sinit>
 800630a:	4b14      	ldr	r3, [pc, #80]	; (800635c <_fflush_r+0x6c>)
 800630c:	429c      	cmp	r4, r3
 800630e:	d11b      	bne.n	8006348 <_fflush_r+0x58>
 8006310:	686c      	ldr	r4, [r5, #4]
 8006312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d0ef      	beq.n	80062fa <_fflush_r+0xa>
 800631a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800631c:	07d0      	lsls	r0, r2, #31
 800631e:	d404      	bmi.n	800632a <_fflush_r+0x3a>
 8006320:	0599      	lsls	r1, r3, #22
 8006322:	d402      	bmi.n	800632a <_fflush_r+0x3a>
 8006324:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006326:	f7ff fadd 	bl	80058e4 <__retarget_lock_acquire_recursive>
 800632a:	4628      	mov	r0, r5
 800632c:	4621      	mov	r1, r4
 800632e:	f7ff ff59 	bl	80061e4 <__sflush_r>
 8006332:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006334:	07da      	lsls	r2, r3, #31
 8006336:	4605      	mov	r5, r0
 8006338:	d4e0      	bmi.n	80062fc <_fflush_r+0xc>
 800633a:	89a3      	ldrh	r3, [r4, #12]
 800633c:	059b      	lsls	r3, r3, #22
 800633e:	d4dd      	bmi.n	80062fc <_fflush_r+0xc>
 8006340:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006342:	f7ff fad0 	bl	80058e6 <__retarget_lock_release_recursive>
 8006346:	e7d9      	b.n	80062fc <_fflush_r+0xc>
 8006348:	4b05      	ldr	r3, [pc, #20]	; (8006360 <_fflush_r+0x70>)
 800634a:	429c      	cmp	r4, r3
 800634c:	d101      	bne.n	8006352 <_fflush_r+0x62>
 800634e:	68ac      	ldr	r4, [r5, #8]
 8006350:	e7df      	b.n	8006312 <_fflush_r+0x22>
 8006352:	4b04      	ldr	r3, [pc, #16]	; (8006364 <_fflush_r+0x74>)
 8006354:	429c      	cmp	r4, r3
 8006356:	bf08      	it	eq
 8006358:	68ec      	ldreq	r4, [r5, #12]
 800635a:	e7da      	b.n	8006312 <_fflush_r+0x22>
 800635c:	0800663c 	.word	0x0800663c
 8006360:	0800665c 	.word	0x0800665c
 8006364:	0800661c 	.word	0x0800661c

08006368 <_lseek_r>:
 8006368:	b538      	push	{r3, r4, r5, lr}
 800636a:	4d07      	ldr	r5, [pc, #28]	; (8006388 <_lseek_r+0x20>)
 800636c:	4604      	mov	r4, r0
 800636e:	4608      	mov	r0, r1
 8006370:	4611      	mov	r1, r2
 8006372:	2200      	movs	r2, #0
 8006374:	602a      	str	r2, [r5, #0]
 8006376:	461a      	mov	r2, r3
 8006378:	f7fa fd46 	bl	8000e08 <_lseek>
 800637c:	1c43      	adds	r3, r0, #1
 800637e:	d102      	bne.n	8006386 <_lseek_r+0x1e>
 8006380:	682b      	ldr	r3, [r5, #0]
 8006382:	b103      	cbz	r3, 8006386 <_lseek_r+0x1e>
 8006384:	6023      	str	r3, [r4, #0]
 8006386:	bd38      	pop	{r3, r4, r5, pc}
 8006388:	200001e4 	.word	0x200001e4

0800638c <__swhatbuf_r>:
 800638c:	b570      	push	{r4, r5, r6, lr}
 800638e:	460e      	mov	r6, r1
 8006390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006394:	2900      	cmp	r1, #0
 8006396:	b096      	sub	sp, #88	; 0x58
 8006398:	4614      	mov	r4, r2
 800639a:	461d      	mov	r5, r3
 800639c:	da07      	bge.n	80063ae <__swhatbuf_r+0x22>
 800639e:	2300      	movs	r3, #0
 80063a0:	602b      	str	r3, [r5, #0]
 80063a2:	89b3      	ldrh	r3, [r6, #12]
 80063a4:	061a      	lsls	r2, r3, #24
 80063a6:	d410      	bmi.n	80063ca <__swhatbuf_r+0x3e>
 80063a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063ac:	e00e      	b.n	80063cc <__swhatbuf_r+0x40>
 80063ae:	466a      	mov	r2, sp
 80063b0:	f000 f8be 	bl	8006530 <_fstat_r>
 80063b4:	2800      	cmp	r0, #0
 80063b6:	dbf2      	blt.n	800639e <__swhatbuf_r+0x12>
 80063b8:	9a01      	ldr	r2, [sp, #4]
 80063ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80063be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80063c2:	425a      	negs	r2, r3
 80063c4:	415a      	adcs	r2, r3
 80063c6:	602a      	str	r2, [r5, #0]
 80063c8:	e7ee      	b.n	80063a8 <__swhatbuf_r+0x1c>
 80063ca:	2340      	movs	r3, #64	; 0x40
 80063cc:	2000      	movs	r0, #0
 80063ce:	6023      	str	r3, [r4, #0]
 80063d0:	b016      	add	sp, #88	; 0x58
 80063d2:	bd70      	pop	{r4, r5, r6, pc}

080063d4 <__smakebuf_r>:
 80063d4:	898b      	ldrh	r3, [r1, #12]
 80063d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80063d8:	079d      	lsls	r5, r3, #30
 80063da:	4606      	mov	r6, r0
 80063dc:	460c      	mov	r4, r1
 80063de:	d507      	bpl.n	80063f0 <__smakebuf_r+0x1c>
 80063e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80063e4:	6023      	str	r3, [r4, #0]
 80063e6:	6123      	str	r3, [r4, #16]
 80063e8:	2301      	movs	r3, #1
 80063ea:	6163      	str	r3, [r4, #20]
 80063ec:	b002      	add	sp, #8
 80063ee:	bd70      	pop	{r4, r5, r6, pc}
 80063f0:	ab01      	add	r3, sp, #4
 80063f2:	466a      	mov	r2, sp
 80063f4:	f7ff ffca 	bl	800638c <__swhatbuf_r>
 80063f8:	9900      	ldr	r1, [sp, #0]
 80063fa:	4605      	mov	r5, r0
 80063fc:	4630      	mov	r0, r6
 80063fe:	f7ff fa73 	bl	80058e8 <_malloc_r>
 8006402:	b948      	cbnz	r0, 8006418 <__smakebuf_r+0x44>
 8006404:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006408:	059a      	lsls	r2, r3, #22
 800640a:	d4ef      	bmi.n	80063ec <__smakebuf_r+0x18>
 800640c:	f023 0303 	bic.w	r3, r3, #3
 8006410:	f043 0302 	orr.w	r3, r3, #2
 8006414:	81a3      	strh	r3, [r4, #12]
 8006416:	e7e3      	b.n	80063e0 <__smakebuf_r+0xc>
 8006418:	4b0d      	ldr	r3, [pc, #52]	; (8006450 <__smakebuf_r+0x7c>)
 800641a:	62b3      	str	r3, [r6, #40]	; 0x28
 800641c:	89a3      	ldrh	r3, [r4, #12]
 800641e:	6020      	str	r0, [r4, #0]
 8006420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006424:	81a3      	strh	r3, [r4, #12]
 8006426:	9b00      	ldr	r3, [sp, #0]
 8006428:	6163      	str	r3, [r4, #20]
 800642a:	9b01      	ldr	r3, [sp, #4]
 800642c:	6120      	str	r0, [r4, #16]
 800642e:	b15b      	cbz	r3, 8006448 <__smakebuf_r+0x74>
 8006430:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006434:	4630      	mov	r0, r6
 8006436:	f000 f88d 	bl	8006554 <_isatty_r>
 800643a:	b128      	cbz	r0, 8006448 <__smakebuf_r+0x74>
 800643c:	89a3      	ldrh	r3, [r4, #12]
 800643e:	f023 0303 	bic.w	r3, r3, #3
 8006442:	f043 0301 	orr.w	r3, r3, #1
 8006446:	81a3      	strh	r3, [r4, #12]
 8006448:	89a0      	ldrh	r0, [r4, #12]
 800644a:	4305      	orrs	r5, r0
 800644c:	81a5      	strh	r5, [r4, #12]
 800644e:	e7cd      	b.n	80063ec <__smakebuf_r+0x18>
 8006450:	08005741 	.word	0x08005741

08006454 <__malloc_lock>:
 8006454:	4801      	ldr	r0, [pc, #4]	; (800645c <__malloc_lock+0x8>)
 8006456:	f7ff ba45 	b.w	80058e4 <__retarget_lock_acquire_recursive>
 800645a:	bf00      	nop
 800645c:	200001dc 	.word	0x200001dc

08006460 <__malloc_unlock>:
 8006460:	4801      	ldr	r0, [pc, #4]	; (8006468 <__malloc_unlock+0x8>)
 8006462:	f7ff ba40 	b.w	80058e6 <__retarget_lock_release_recursive>
 8006466:	bf00      	nop
 8006468:	200001dc 	.word	0x200001dc

0800646c <_free_r>:
 800646c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800646e:	2900      	cmp	r1, #0
 8006470:	d048      	beq.n	8006504 <_free_r+0x98>
 8006472:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006476:	9001      	str	r0, [sp, #4]
 8006478:	2b00      	cmp	r3, #0
 800647a:	f1a1 0404 	sub.w	r4, r1, #4
 800647e:	bfb8      	it	lt
 8006480:	18e4      	addlt	r4, r4, r3
 8006482:	f7ff ffe7 	bl	8006454 <__malloc_lock>
 8006486:	4a20      	ldr	r2, [pc, #128]	; (8006508 <_free_r+0x9c>)
 8006488:	9801      	ldr	r0, [sp, #4]
 800648a:	6813      	ldr	r3, [r2, #0]
 800648c:	4615      	mov	r5, r2
 800648e:	b933      	cbnz	r3, 800649e <_free_r+0x32>
 8006490:	6063      	str	r3, [r4, #4]
 8006492:	6014      	str	r4, [r2, #0]
 8006494:	b003      	add	sp, #12
 8006496:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800649a:	f7ff bfe1 	b.w	8006460 <__malloc_unlock>
 800649e:	42a3      	cmp	r3, r4
 80064a0:	d90b      	bls.n	80064ba <_free_r+0x4e>
 80064a2:	6821      	ldr	r1, [r4, #0]
 80064a4:	1862      	adds	r2, r4, r1
 80064a6:	4293      	cmp	r3, r2
 80064a8:	bf04      	itt	eq
 80064aa:	681a      	ldreq	r2, [r3, #0]
 80064ac:	685b      	ldreq	r3, [r3, #4]
 80064ae:	6063      	str	r3, [r4, #4]
 80064b0:	bf04      	itt	eq
 80064b2:	1852      	addeq	r2, r2, r1
 80064b4:	6022      	streq	r2, [r4, #0]
 80064b6:	602c      	str	r4, [r5, #0]
 80064b8:	e7ec      	b.n	8006494 <_free_r+0x28>
 80064ba:	461a      	mov	r2, r3
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	b10b      	cbz	r3, 80064c4 <_free_r+0x58>
 80064c0:	42a3      	cmp	r3, r4
 80064c2:	d9fa      	bls.n	80064ba <_free_r+0x4e>
 80064c4:	6811      	ldr	r1, [r2, #0]
 80064c6:	1855      	adds	r5, r2, r1
 80064c8:	42a5      	cmp	r5, r4
 80064ca:	d10b      	bne.n	80064e4 <_free_r+0x78>
 80064cc:	6824      	ldr	r4, [r4, #0]
 80064ce:	4421      	add	r1, r4
 80064d0:	1854      	adds	r4, r2, r1
 80064d2:	42a3      	cmp	r3, r4
 80064d4:	6011      	str	r1, [r2, #0]
 80064d6:	d1dd      	bne.n	8006494 <_free_r+0x28>
 80064d8:	681c      	ldr	r4, [r3, #0]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	6053      	str	r3, [r2, #4]
 80064de:	4421      	add	r1, r4
 80064e0:	6011      	str	r1, [r2, #0]
 80064e2:	e7d7      	b.n	8006494 <_free_r+0x28>
 80064e4:	d902      	bls.n	80064ec <_free_r+0x80>
 80064e6:	230c      	movs	r3, #12
 80064e8:	6003      	str	r3, [r0, #0]
 80064ea:	e7d3      	b.n	8006494 <_free_r+0x28>
 80064ec:	6825      	ldr	r5, [r4, #0]
 80064ee:	1961      	adds	r1, r4, r5
 80064f0:	428b      	cmp	r3, r1
 80064f2:	bf04      	itt	eq
 80064f4:	6819      	ldreq	r1, [r3, #0]
 80064f6:	685b      	ldreq	r3, [r3, #4]
 80064f8:	6063      	str	r3, [r4, #4]
 80064fa:	bf04      	itt	eq
 80064fc:	1949      	addeq	r1, r1, r5
 80064fe:	6021      	streq	r1, [r4, #0]
 8006500:	6054      	str	r4, [r2, #4]
 8006502:	e7c7      	b.n	8006494 <_free_r+0x28>
 8006504:	b003      	add	sp, #12
 8006506:	bd30      	pop	{r4, r5, pc}
 8006508:	20000090 	.word	0x20000090

0800650c <_read_r>:
 800650c:	b538      	push	{r3, r4, r5, lr}
 800650e:	4d07      	ldr	r5, [pc, #28]	; (800652c <_read_r+0x20>)
 8006510:	4604      	mov	r4, r0
 8006512:	4608      	mov	r0, r1
 8006514:	4611      	mov	r1, r2
 8006516:	2200      	movs	r2, #0
 8006518:	602a      	str	r2, [r5, #0]
 800651a:	461a      	mov	r2, r3
 800651c:	f7fa fc14 	bl	8000d48 <_read>
 8006520:	1c43      	adds	r3, r0, #1
 8006522:	d102      	bne.n	800652a <_read_r+0x1e>
 8006524:	682b      	ldr	r3, [r5, #0]
 8006526:	b103      	cbz	r3, 800652a <_read_r+0x1e>
 8006528:	6023      	str	r3, [r4, #0]
 800652a:	bd38      	pop	{r3, r4, r5, pc}
 800652c:	200001e4 	.word	0x200001e4

08006530 <_fstat_r>:
 8006530:	b538      	push	{r3, r4, r5, lr}
 8006532:	4d07      	ldr	r5, [pc, #28]	; (8006550 <_fstat_r+0x20>)
 8006534:	2300      	movs	r3, #0
 8006536:	4604      	mov	r4, r0
 8006538:	4608      	mov	r0, r1
 800653a:	4611      	mov	r1, r2
 800653c:	602b      	str	r3, [r5, #0]
 800653e:	f7fa fc48 	bl	8000dd2 <_fstat>
 8006542:	1c43      	adds	r3, r0, #1
 8006544:	d102      	bne.n	800654c <_fstat_r+0x1c>
 8006546:	682b      	ldr	r3, [r5, #0]
 8006548:	b103      	cbz	r3, 800654c <_fstat_r+0x1c>
 800654a:	6023      	str	r3, [r4, #0]
 800654c:	bd38      	pop	{r3, r4, r5, pc}
 800654e:	bf00      	nop
 8006550:	200001e4 	.word	0x200001e4

08006554 <_isatty_r>:
 8006554:	b538      	push	{r3, r4, r5, lr}
 8006556:	4d06      	ldr	r5, [pc, #24]	; (8006570 <_isatty_r+0x1c>)
 8006558:	2300      	movs	r3, #0
 800655a:	4604      	mov	r4, r0
 800655c:	4608      	mov	r0, r1
 800655e:	602b      	str	r3, [r5, #0]
 8006560:	f7fa fc47 	bl	8000df2 <_isatty>
 8006564:	1c43      	adds	r3, r0, #1
 8006566:	d102      	bne.n	800656e <_isatty_r+0x1a>
 8006568:	682b      	ldr	r3, [r5, #0]
 800656a:	b103      	cbz	r3, 800656e <_isatty_r+0x1a>
 800656c:	6023      	str	r3, [r4, #0]
 800656e:	bd38      	pop	{r3, r4, r5, pc}
 8006570:	200001e4 	.word	0x200001e4

08006574 <_init>:
 8006574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006576:	bf00      	nop
 8006578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800657a:	bc08      	pop	{r3}
 800657c:	469e      	mov	lr, r3
 800657e:	4770      	bx	lr

08006580 <_fini>:
 8006580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006582:	bf00      	nop
 8006584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006586:	bc08      	pop	{r3}
 8006588:	469e      	mov	lr, r3
 800658a:	4770      	bx	lr
