
1DOF_Bench.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006054  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  080061e4  080061e4  000161e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006308  08006308  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006308  08006308  00016308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006310  08006310  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006310  08006310  00016310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006314  08006314  00016314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006318  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000070  08006388  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  08006388  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017ed9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002878  00000000  00000000  00037f79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001308  00000000  00000000  0003a7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001210  00000000  00000000  0003bb00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002997e  00000000  00000000  0003cd10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000151d4  00000000  00000000  0006668e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109f31  00000000  00000000  0007b862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00185793  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000592c  00000000  00000000  001857e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080061cc 	.word	0x080061cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080061cc 	.word	0x080061cc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0

	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800056c:	f000 fcd0 	bl	8000f10 <HAL_Init>
	/* Configure the system clock */
	SystemClock_Config();
 8000570:	f000 f81e 	bl	80005b0 <SystemClock_Config>
	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000574:	f000 f98c 	bl	8000890 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000578:	f000 f95a 	bl	8000830 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 800057c:	f000 f86a 	bl	8000654 <MX_ADC1_Init>
	MX_TIM17_Init();
 8000580:	f000 f8de 	bl	8000740 <MX_TIM17_Init>
	/* USER CODE BEGIN 2 */
	// Light up green led
	setGreenLed();
 8000584:	f000 fa1a 	bl	80009bc <setGreenLed>
	// blink green led
	blinkGreenLed(10, 100);
 8000588:	2164      	movs	r1, #100	; 0x64
 800058a:	200a      	movs	r0, #10
 800058c:	f000 fa20 	bl	80009d0 <blinkGreenLed>
	// Welcome message on UART
	sendWelcomeMsgRS232(&huart2);
 8000590:	4805      	ldr	r0, [pc, #20]	; (80005a8 <main+0x40>)
 8000592:	f000 fa57 	bl	8000a44 <sendWelcomeMsgRS232>
	printf("Hello from main\n\r");
 8000596:	4805      	ldr	r0, [pc, #20]	; (80005ac <main+0x44>)
 8000598:	f004 fec2 	bl	8005320 <iprintf>



	while (1) {
		// set green led if push button
		setGreenLedViaButton();
 800059c:	f000 fa36 	bl	8000a0c <setGreenLedViaButton>
		sendbackRS232(&huart2);
 80005a0:	4801      	ldr	r0, [pc, #4]	; (80005a8 <main+0x40>)
 80005a2:	f000 fa69 	bl	8000a78 <sendbackRS232>
		setGreenLedViaButton();
 80005a6:	e7f9      	b.n	800059c <main+0x34>
 80005a8:	20000150 	.word	0x20000150
 80005ac:	080061e4 	.word	0x080061e4

080005b0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b096      	sub	sp, #88	; 0x58
 80005b4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	2244      	movs	r2, #68	; 0x44
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f004 fea6 	bl	8005310 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005c4:	463b      	mov	r3, r7
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80005d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005d6:	f001 ffcb 	bl	8002570 <HAL_PWREx_ControlVoltageScaling>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 80005e0:	f000 f9bc 	bl	800095c <Error_Handler>
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e4:	2302      	movs	r3, #2
 80005e6:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005ec:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ee:	2310      	movs	r3, #16
 80005f0:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f2:	2302      	movs	r3, #2
 80005f4:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005f6:	2302      	movs	r3, #2
 80005f8:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80005fa:	2301      	movs	r3, #1
 80005fc:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 80005fe:	230a      	movs	r3, #10
 8000600:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000602:	2307      	movs	r3, #7
 8000604:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000606:	2302      	movs	r3, #2
 8000608:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800060a:	2302      	movs	r3, #2
 800060c:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	4618      	mov	r0, r3
 8000614:	f002 f802 	bl	800261c <HAL_RCC_OscConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x72>
		Error_Handler();
 800061e:	f000 f99d 	bl	800095c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000622:	230f      	movs	r3, #15
 8000624:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000626:	2303      	movs	r3, #3
 8000628:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000636:	463b      	mov	r3, r7
 8000638:	2104      	movs	r1, #4
 800063a:	4618      	mov	r0, r3
 800063c:	f002 fbd4 	bl	8002de8 <HAL_RCC_ClockConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0x9a>
		Error_Handler();
 8000646:	f000 f989 	bl	800095c <Error_Handler>
	}
}
 800064a:	bf00      	nop
 800064c:	3758      	adds	r7, #88	; 0x58
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b08a      	sub	sp, #40	; 0x28
 8000658:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 800065a:	f107 031c 	add.w	r3, r7, #28
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]
 8000674:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000676:	4b2f      	ldr	r3, [pc, #188]	; (8000734 <MX_ADC1_Init+0xe0>)
 8000678:	4a2f      	ldr	r2, [pc, #188]	; (8000738 <MX_ADC1_Init+0xe4>)
 800067a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800067c:	4b2d      	ldr	r3, [pc, #180]	; (8000734 <MX_ADC1_Init+0xe0>)
 800067e:	2200      	movs	r2, #0
 8000680:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000682:	4b2c      	ldr	r3, [pc, #176]	; (8000734 <MX_ADC1_Init+0xe0>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000688:	4b2a      	ldr	r3, [pc, #168]	; (8000734 <MX_ADC1_Init+0xe0>)
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800068e:	4b29      	ldr	r3, [pc, #164]	; (8000734 <MX_ADC1_Init+0xe0>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000694:	4b27      	ldr	r3, [pc, #156]	; (8000734 <MX_ADC1_Init+0xe0>)
 8000696:	2204      	movs	r2, #4
 8000698:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 800069a:	4b26      	ldr	r3, [pc, #152]	; (8000734 <MX_ADC1_Init+0xe0>)
 800069c:	2200      	movs	r2, #0
 800069e:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80006a0:	4b24      	ldr	r3, [pc, #144]	; (8000734 <MX_ADC1_Init+0xe0>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 80006a6:	4b23      	ldr	r3, [pc, #140]	; (8000734 <MX_ADC1_Init+0xe0>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ac:	4b21      	ldr	r3, [pc, #132]	; (8000734 <MX_ADC1_Init+0xe0>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006b4:	4b1f      	ldr	r3, [pc, #124]	; (8000734 <MX_ADC1_Init+0xe0>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ba:	4b1e      	ldr	r3, [pc, #120]	; (8000734 <MX_ADC1_Init+0xe0>)
 80006bc:	2200      	movs	r2, #0
 80006be:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80006c0:	4b1c      	ldr	r3, [pc, #112]	; (8000734 <MX_ADC1_Init+0xe0>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006c8:	4b1a      	ldr	r3, [pc, #104]	; (8000734 <MX_ADC1_Init+0xe0>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 80006ce:	4b19      	ldr	r3, [pc, #100]	; (8000734 <MX_ADC1_Init+0xe0>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80006d6:	4817      	ldr	r0, [pc, #92]	; (8000734 <MX_ADC1_Init+0xe0>)
 80006d8:	f000 fe46 	bl	8001368 <HAL_ADC_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_ADC1_Init+0x92>
		Error_Handler();
 80006e2:	f000 f93b 	bl	800095c <Error_Handler>
	}
	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 80006ea:	f107 031c 	add.w	r3, r7, #28
 80006ee:	4619      	mov	r1, r3
 80006f0:	4810      	ldr	r0, [pc, #64]	; (8000734 <MX_ADC1_Init+0xe0>)
 80006f2:	f001 fba5 	bl	8001e40 <HAL_ADCEx_MultiModeConfigChannel>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_ADC1_Init+0xac>
		Error_Handler();
 80006fc:	f000 f92e 	bl	800095c <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8000700:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_ADC1_Init+0xe8>)
 8000702:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000704:	2306      	movs	r3, #6
 8000706:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000708:	2300      	movs	r3, #0
 800070a:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800070c:	237f      	movs	r3, #127	; 0x7f
 800070e:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000710:	2304      	movs	r3, #4
 8000712:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	4619      	mov	r1, r3
 800071c:	4805      	ldr	r0, [pc, #20]	; (8000734 <MX_ADC1_Init+0xe0>)
 800071e:	f000 ff79 	bl	8001614 <HAL_ADC_ConfigChannel>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_ADC1_Init+0xd8>
		Error_Handler();
 8000728:	f000 f918 	bl	800095c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800072c:	bf00      	nop
 800072e:	3728      	adds	r7, #40	; 0x28
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	200000e8 	.word	0x200000e8
 8000738:	50040000 	.word	0x50040000
 800073c:	14f00020 	.word	0x14f00020

08000740 <MX_TIM17_Init>:
/**
 * @brief TIM17 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM17_Init(void) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b092      	sub	sp, #72	; 0x48
 8000744:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM17_Init 0 */

	/* USER CODE END TIM17_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000746:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]
 8000756:	615a      	str	r2, [r3, #20]
 8000758:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800075a:	463b      	mov	r3, r7
 800075c:	222c      	movs	r2, #44	; 0x2c
 800075e:	2100      	movs	r1, #0
 8000760:	4618      	mov	r0, r3
 8000762:	f004 fdd5 	bl	8005310 <memset>

	/* USER CODE BEGIN TIM17_Init 1 */

	/* USER CODE END TIM17_Init 1 */
	htim17.Instance = TIM17;
 8000766:	4b30      	ldr	r3, [pc, #192]	; (8000828 <MX_TIM17_Init+0xe8>)
 8000768:	4a30      	ldr	r2, [pc, #192]	; (800082c <MX_TIM17_Init+0xec>)
 800076a:	601a      	str	r2, [r3, #0]
	htim17.Init.Prescaler = 0;
 800076c:	4b2e      	ldr	r3, [pc, #184]	; (8000828 <MX_TIM17_Init+0xe8>)
 800076e:	2200      	movs	r2, #0
 8000770:	605a      	str	r2, [r3, #4]
	htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000772:	4b2d      	ldr	r3, [pc, #180]	; (8000828 <MX_TIM17_Init+0xe8>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
	htim17.Init.Period = 4096;
 8000778:	4b2b      	ldr	r3, [pc, #172]	; (8000828 <MX_TIM17_Init+0xe8>)
 800077a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800077e:	60da      	str	r2, [r3, #12]
	htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000780:	4b29      	ldr	r3, [pc, #164]	; (8000828 <MX_TIM17_Init+0xe8>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
	htim17.Init.RepetitionCounter = 0;
 8000786:	4b28      	ldr	r3, [pc, #160]	; (8000828 <MX_TIM17_Init+0xe8>)
 8000788:	2200      	movs	r2, #0
 800078a:	615a      	str	r2, [r3, #20]
	htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800078c:	4b26      	ldr	r3, [pc, #152]	; (8000828 <MX_TIM17_Init+0xe8>)
 800078e:	2200      	movs	r2, #0
 8000790:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim17) != HAL_OK) {
 8000792:	4825      	ldr	r0, [pc, #148]	; (8000828 <MX_TIM17_Init+0xe8>)
 8000794:	f003 f9ea 	bl	8003b6c <HAL_TIM_Base_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_TIM17_Init+0x62>
		Error_Handler();
 800079e:	f000 f8dd 	bl	800095c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim17) != HAL_OK) {
 80007a2:	4821      	ldr	r0, [pc, #132]	; (8000828 <MX_TIM17_Init+0xe8>)
 80007a4:	f003 fa39 	bl	8003c1a <HAL_TIM_PWM_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_TIM17_Init+0x72>
		Error_Handler();
 80007ae:	f000 f8d5 	bl	800095c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007b2:	2360      	movs	r3, #96	; 0x60
 80007b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.Pulse = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007ba:	2300      	movs	r3, #0
 80007bc:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007be:	2300      	movs	r3, #0
 80007c0:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007c2:	2300      	movs	r3, #0
 80007c4:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007c6:	2300      	movs	r3, #0
 80007c8:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007ca:	2300      	movs	r3, #0
 80007cc:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1)
 80007ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007d2:	2200      	movs	r2, #0
 80007d4:	4619      	mov	r1, r3
 80007d6:	4814      	ldr	r0, [pc, #80]	; (8000828 <MX_TIM17_Init+0xe8>)
 80007d8:	f003 fa80 	bl	8003cdc <HAL_TIM_PWM_ConfigChannel>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM17_Init+0xa6>
			!= HAL_OK) {
		Error_Handler();
 80007e2:	f000 f8bb 	bl	800095c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007e6:	2300      	movs	r3, #0
 80007e8:	603b      	str	r3, [r7, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007ee:	2300      	movs	r3, #0
 80007f0:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007f6:	2300      	movs	r3, #0
 80007f8:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007fe:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000800:	2300      	movs	r3, #0
 8000802:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig)
 8000804:	463b      	mov	r3, r7
 8000806:	4619      	mov	r1, r3
 8000808:	4807      	ldr	r0, [pc, #28]	; (8000828 <MX_TIM17_Init+0xe8>)
 800080a:	f003 feeb 	bl	80045e4 <HAL_TIMEx_ConfigBreakDeadTime>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM17_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 8000814:	f000 f8a2 	bl	800095c <Error_Handler>
	}
	/* USER CODE BEGIN TIM17_Init 2 */

	/* USER CODE END TIM17_Init 2 */
	HAL_TIM_MspPostInit(&htim17);
 8000818:	4803      	ldr	r0, [pc, #12]	; (8000828 <MX_TIM17_Init+0xe8>)
 800081a:	f000 f9f7 	bl	8000c0c <HAL_TIM_MspPostInit>

}
 800081e:	bf00      	nop
 8000820:	3748      	adds	r7, #72	; 0x48
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000098 	.word	0x20000098
 800082c:	40014800 	.word	0x40014800

08000830 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000834:	4b14      	ldr	r3, [pc, #80]	; (8000888 <MX_USART2_UART_Init+0x58>)
 8000836:	4a15      	ldr	r2, [pc, #84]	; (800088c <MX_USART2_UART_Init+0x5c>)
 8000838:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800083a:	4b13      	ldr	r3, [pc, #76]	; (8000888 <MX_USART2_UART_Init+0x58>)
 800083c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000840:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_USART2_UART_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_USART2_UART_Init+0x58>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_USART2_UART_Init+0x58>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_USART2_UART_Init+0x58>)
 8000856:	220c      	movs	r2, #12
 8000858:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MX_USART2_UART_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_USART2_UART_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <MX_USART2_UART_Init+0x58>)
 8000868:	2200      	movs	r2, #0
 800086a:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_USART2_UART_Init+0x58>)
 800086e:	2200      	movs	r2, #0
 8000870:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_USART2_UART_Init+0x58>)
 8000874:	f003 ff34 	bl	80046e0 <HAL_UART_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 800087e:	f000 f86d 	bl	800095c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000150 	.word	0x20000150
 800088c:	40004400 	.word	0x40004400

08000890 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000890:	b580      	push	{r7, lr}
 8000892:	b08a      	sub	sp, #40	; 0x28
 8000894:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
 80008a4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80008a6:	4b2b      	ldr	r3, [pc, #172]	; (8000954 <MX_GPIO_Init+0xc4>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008aa:	4a2a      	ldr	r2, [pc, #168]	; (8000954 <MX_GPIO_Init+0xc4>)
 80008ac:	f043 0304 	orr.w	r3, r3, #4
 80008b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b2:	4b28      	ldr	r3, [pc, #160]	; (8000954 <MX_GPIO_Init+0xc4>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	f003 0304 	and.w	r3, r3, #4
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80008be:	4b25      	ldr	r3, [pc, #148]	; (8000954 <MX_GPIO_Init+0xc4>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	4a24      	ldr	r2, [pc, #144]	; (8000954 <MX_GPIO_Init+0xc4>)
 80008c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ca:	4b22      	ldr	r3, [pc, #136]	; (8000954 <MX_GPIO_Init+0xc4>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	4b1f      	ldr	r3, [pc, #124]	; (8000954 <MX_GPIO_Init+0xc4>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008da:	4a1e      	ldr	r2, [pc, #120]	; (8000954 <MX_GPIO_Init+0xc4>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e2:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <MX_GPIO_Init+0xc4>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008ee:	4b19      	ldr	r3, [pc, #100]	; (8000954 <MX_GPIO_Init+0xc4>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	4a18      	ldr	r2, [pc, #96]	; (8000954 <MX_GPIO_Init+0xc4>)
 80008f4:	f043 0302 	orr.w	r3, r3, #2
 80008f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fa:	4b16      	ldr	r3, [pc, #88]	; (8000954 <MX_GPIO_Init+0xc4>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fe:	f003 0302 	and.w	r3, r3, #2
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	2120      	movs	r1, #32
 800090a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800090e:	f001 fdef 	bl	80024f0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000912:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000916:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000918:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800091c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	4619      	mov	r1, r3
 8000928:	480b      	ldr	r0, [pc, #44]	; (8000958 <MX_GPIO_Init+0xc8>)
 800092a:	f001 fc1f 	bl	800216c <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 800092e:	2320      	movs	r3, #32
 8000930:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000932:	2301      	movs	r3, #1
 8000934:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	4619      	mov	r1, r3
 8000944:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000948:	f001 fc10 	bl	800216c <HAL_GPIO_Init>

}
 800094c:	bf00      	nop
 800094e:	3728      	adds	r7, #40	; 0x28
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40021000 	.word	0x40021000
 8000958:	48000800 	.word	0x48000800

0800095c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000960:	b672      	cpsid	i
}
 8000962:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000964:	e7fe      	b.n	8000964 <Error_Handler+0x8>
	...

08000968 <_write>:
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

// Redefine _write function for printf
int _write(int file, char *data, int len) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	607a      	str	r2, [r7, #4]
	if ((file != STDOUT_FILENO) && (file != STDERR_FILENO)) {
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d00a      	beq.n	8000990 <_write+0x28>
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	2b02      	cmp	r3, #2
 800097e:	d007      	beq.n	8000990 <_write+0x28>
		errno = EBADF;
 8000980:	f004 fc9c 	bl	80052bc <__errno>
 8000984:	4603      	mov	r3, r0
 8000986:	2209      	movs	r2, #9
 8000988:	601a      	str	r2, [r3, #0]
		return -1;
 800098a:	f04f 33ff 	mov.w	r3, #4294967295
 800098e:	e00f      	b.n	80009b0 <_write+0x48>
	}

	// arbitrary timeout 1000
	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2, (uint8_t*) data, len,
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	b29a      	uxth	r2, r3
 8000994:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000998:	68b9      	ldr	r1, [r7, #8]
 800099a:	4807      	ldr	r0, [pc, #28]	; (80009b8 <_write+0x50>)
 800099c:	f003 feee 	bl	800477c <HAL_UART_Transmit>
 80009a0:	4603      	mov	r3, r0
 80009a2:	75fb      	strb	r3, [r7, #23]
			1000);

	// return # of bytes written - as best we can tell
	return (status == HAL_OK ? len : 0);
 80009a4:	7dfb      	ldrb	r3, [r7, #23]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d101      	bne.n	80009ae <_write+0x46>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	e000      	b.n	80009b0 <_write+0x48>
 80009ae:	2300      	movs	r3, #0
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3718      	adds	r7, #24
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20000150 	.word	0x20000150

080009bc <setGreenLed>:
 */

#include "remi.h"

// On board green LED On
void setGreenLed() {
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	2120      	movs	r1, #32
 80009c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c8:	f001 fd92 	bl	80024f0 <HAL_GPIO_WritePin>
}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <blinkGreenLed>:

// On board green LED blink
void blinkGreenLed(int nb, int delay) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < nb; i++) {
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	e00b      	b.n	80009f8 <blinkGreenLed+0x28>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80009e0:	2120      	movs	r1, #32
 80009e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e6:	f001 fd9b 	bl	8002520 <HAL_GPIO_TogglePin>
		HAL_Delay(delay);
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f000 fb0b 	bl	8001008 <HAL_Delay>
	for (int i = 0; i < nb; i++) {
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	3301      	adds	r3, #1
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fa      	ldr	r2, [r7, #12]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	dbef      	blt.n	80009e0 <blinkGreenLed+0x10>
	}
}
 8000a00:	bf00      	nop
 8000a02:	bf00      	nop
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
	...

08000a0c <setGreenLedViaButton>:

// set green led if blue push button is pressed
void setGreenLedViaButton() {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
	// Gpio, push button
	// by default, PUSH_BUTTON is at 1
	//PinState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1)
 8000a10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a14:	480a      	ldr	r0, [pc, #40]	; (8000a40 <setGreenLedViaButton+0x34>)
 8000a16:	f001 fd53 	bl	80024c0 <HAL_GPIO_ReadPin>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d106      	bne.n	8000a2e <setGreenLedViaButton+0x22>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8000a20:	2200      	movs	r2, #0
 8000a22:	2120      	movs	r1, #32
 8000a24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a28:	f001 fd62 	bl	80024f0 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);

}
 8000a2c:	e005      	b.n	8000a3a <setGreenLedViaButton+0x2e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8000a2e:	2201      	movs	r2, #1
 8000a30:	2120      	movs	r1, #32
 8000a32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a36:	f001 fd5b 	bl	80024f0 <HAL_GPIO_WritePin>
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	48000800 	.word	0x48000800

08000a44 <sendWelcomeMsgRS232>:

// Welcome Message On RS232
void sendWelcomeMsgRS232(UART_HandleTypeDef *huart) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	printf("Hello from remi\n\r");
 8000a4c:	4808      	ldr	r0, [pc, #32]	; (8000a70 <sendWelcomeMsgRS232+0x2c>)
 8000a4e:	f004 fc67 	bl	8005320 <iprintf>
	if (HAL_UART_Transmit(huart, "Nucleo L476RG connected\n\r", 25, 100)
 8000a52:	2364      	movs	r3, #100	; 0x64
 8000a54:	2219      	movs	r2, #25
 8000a56:	4907      	ldr	r1, [pc, #28]	; (8000a74 <sendWelcomeMsgRS232+0x30>)
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f003 fe8f 	bl	800477c <HAL_UART_Transmit>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <sendWelcomeMsgRS232+0x24>
			!= HAL_OK)
		Error_Handler();
 8000a64:	f7ff ff7a 	bl	800095c <Error_Handler>
}
 8000a68:	bf00      	nop
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	080061f8 	.word	0x080061f8
 8000a74:	0800620c 	.word	0x0800620c

08000a78 <sendbackRS232>:


// Welcome Message On RS232
void sendbackRS232(UART_HandleTypeDef *huart) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	if (HAL_UART_Receive(huart, rx_buffer, 1, 10) == HAL_OK) {
 8000a80:	230a      	movs	r3, #10
 8000a82:	2201      	movs	r2, #1
 8000a84:	490a      	ldr	r1, [pc, #40]	; (8000ab0 <sendbackRS232+0x38>)
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	f003 ff0c 	bl	80048a4 <HAL_UART_Receive>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d106      	bne.n	8000aa0 <sendbackRS232+0x28>
		HAL_UART_Transmit(huart, rx_buffer, 1, 10);
 8000a92:	230a      	movs	r3, #10
 8000a94:	2201      	movs	r2, #1
 8000a96:	4906      	ldr	r1, [pc, #24]	; (8000ab0 <sendbackRS232+0x38>)
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f003 fe6f 	bl	800477c <HAL_UART_Transmit>
	} else {
		__HAL_UART_CLEAR_OREFLAG(huart);
	}
}
 8000a9e:	e003      	b.n	8000aa8 <sendbackRS232+0x30>
		__HAL_UART_CLEAR_OREFLAG(huart);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2208      	movs	r2, #8
 8000aa6:	621a      	str	r2, [r3, #32]
}
 8000aa8:	bf00      	nop
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	200000e4 	.word	0x200000e4

08000ab4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aba:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <HAL_MspInit+0x44>)
 8000abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000abe:	4a0e      	ldr	r2, [pc, #56]	; (8000af8 <HAL_MspInit+0x44>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <HAL_MspInit+0x44>)
 8000ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <HAL_MspInit+0x44>)
 8000ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ad6:	4a08      	ldr	r2, [pc, #32]	; (8000af8 <HAL_MspInit+0x44>)
 8000ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000adc:	6593      	str	r3, [r2, #88]	; 0x58
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <HAL_MspInit+0x44>)
 8000ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	40021000 	.word	0x40021000

08000afc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b0ac      	sub	sp, #176	; 0xb0
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	2288      	movs	r2, #136	; 0x88
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f004 fbf7 	bl	8005310 <memset>
  if(hadc->Instance==ADC1)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a27      	ldr	r2, [pc, #156]	; (8000bc4 <HAL_ADC_MspInit+0xc8>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d147      	bne.n	8000bbc <HAL_ADC_MspInit+0xc0>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b30:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000b32:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000b42:	2308      	movs	r3, #8
 8000b44:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000b46:	2307      	movs	r3, #7
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000b52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b56:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f002 fb49 	bl	80031f4 <HAL_RCCEx_PeriphCLKConfig>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000b68:	f7ff fef8 	bl	800095c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b6c:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <HAL_ADC_MspInit+0xcc>)
 8000b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b70:	4a15      	ldr	r2, [pc, #84]	; (8000bc8 <HAL_ADC_MspInit+0xcc>)
 8000b72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b78:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <HAL_ADC_MspInit+0xcc>)
 8000b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b80:	613b      	str	r3, [r7, #16]
 8000b82:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b84:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <HAL_ADC_MspInit+0xcc>)
 8000b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b88:	4a0f      	ldr	r2, [pc, #60]	; (8000bc8 <HAL_ADC_MspInit+0xcc>)
 8000b8a:	f043 0301 	orr.w	r3, r3, #1
 8000b8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b90:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <HAL_ADC_MspInit+0xcc>)
 8000b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b94:	f003 0301 	and.w	r3, r3, #1
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ba2:	230b      	movs	r3, #11
 8000ba4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb8:	f001 fad8 	bl	800216c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bbc:	bf00      	nop
 8000bbe:	37b0      	adds	r7, #176	; 0xb0
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	50040000 	.word	0x50040000
 8000bc8:	40021000 	.word	0x40021000

08000bcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a0a      	ldr	r2, [pc, #40]	; (8000c04 <HAL_TIM_Base_MspInit+0x38>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d10b      	bne.n	8000bf6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000bde:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <HAL_TIM_Base_MspInit+0x3c>)
 8000be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000be2:	4a09      	ldr	r2, [pc, #36]	; (8000c08 <HAL_TIM_Base_MspInit+0x3c>)
 8000be4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000be8:	6613      	str	r3, [r2, #96]	; 0x60
 8000bea:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <HAL_TIM_Base_MspInit+0x3c>)
 8000bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000bf6:	bf00      	nop
 8000bf8:	3714      	adds	r7, #20
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	40014800 	.word	0x40014800
 8000c08:	40021000 	.word	0x40021000

08000c0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b088      	sub	sp, #32
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	f107 030c 	add.w	r3, r7, #12
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM17)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a11      	ldr	r2, [pc, #68]	; (8000c70 <HAL_TIM_MspPostInit+0x64>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d11b      	bne.n	8000c66 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM17_MspPostInit 0 */

  /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <HAL_TIM_MspPostInit+0x68>)
 8000c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c32:	4a10      	ldr	r2, [pc, #64]	; (8000c74 <HAL_TIM_MspPostInit+0x68>)
 8000c34:	f043 0302 	orr.w	r3, r3, #2
 8000c38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <HAL_TIM_MspPostInit+0x68>)
 8000c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PB7     ------> TIM17_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c46:	2380      	movs	r3, #128	; 0x80
 8000c48:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 8000c56:	230e      	movs	r3, #14
 8000c58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5a:	f107 030c 	add.w	r3, r7, #12
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4805      	ldr	r0, [pc, #20]	; (8000c78 <HAL_TIM_MspPostInit+0x6c>)
 8000c62:	f001 fa83 	bl	800216c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8000c66:	bf00      	nop
 8000c68:	3720      	adds	r7, #32
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40014800 	.word	0x40014800
 8000c74:	40021000 	.word	0x40021000
 8000c78:	48000400 	.word	0x48000400

08000c7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b0ac      	sub	sp, #176	; 0xb0
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	2288      	movs	r2, #136	; 0x88
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f004 fb37 	bl	8005310 <memset>
  if(huart->Instance==USART2)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a21      	ldr	r2, [pc, #132]	; (8000d2c <HAL_UART_MspInit+0xb0>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d13b      	bne.n	8000d24 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cac:	2302      	movs	r3, #2
 8000cae:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f002 fa9b 	bl	80031f4 <HAL_RCCEx_PeriphCLKConfig>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cc4:	f7ff fe4a 	bl	800095c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cc8:	4b19      	ldr	r3, [pc, #100]	; (8000d30 <HAL_UART_MspInit+0xb4>)
 8000cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ccc:	4a18      	ldr	r2, [pc, #96]	; (8000d30 <HAL_UART_MspInit+0xb4>)
 8000cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd2:	6593      	str	r3, [r2, #88]	; 0x58
 8000cd4:	4b16      	ldr	r3, [pc, #88]	; (8000d30 <HAL_UART_MspInit+0xb4>)
 8000cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cdc:	613b      	str	r3, [r7, #16]
 8000cde:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce0:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <HAL_UART_MspInit+0xb4>)
 8000ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce4:	4a12      	ldr	r2, [pc, #72]	; (8000d30 <HAL_UART_MspInit+0xb4>)
 8000ce6:	f043 0301 	orr.w	r3, r3, #1
 8000cea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cec:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <HAL_UART_MspInit+0xb4>)
 8000cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf0:	f003 0301 	and.w	r3, r3, #1
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cf8:	230c      	movs	r3, #12
 8000cfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d10:	2307      	movs	r3, #7
 8000d12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d16:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d20:	f001 fa24 	bl	800216c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d24:	bf00      	nop
 8000d26:	37b0      	adds	r7, #176	; 0xb0
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40004400 	.word	0x40004400
 8000d30:	40021000 	.word	0x40021000

08000d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <NMI_Handler+0x4>

08000d3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <HardFault_Handler+0x4>

08000d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <MemManage_Handler+0x4>

08000d46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d4a:	e7fe      	b.n	8000d4a <BusFault_Handler+0x4>

08000d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <UsageFault_Handler+0x4>

08000d52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d80:	f000 f922 	bl	8000fc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	e00a      	b.n	8000db0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d9a:	f3af 8000 	nop.w
 8000d9e:	4601      	mov	r1, r0
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	1c5a      	adds	r2, r3, #1
 8000da4:	60ba      	str	r2, [r7, #8]
 8000da6:	b2ca      	uxtb	r2, r1
 8000da8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	3301      	adds	r3, #1
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	697a      	ldr	r2, [r7, #20]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	dbf0      	blt.n	8000d9a <_read+0x12>
	}

return len;
 8000db8:	687b      	ldr	r3, [r7, #4]
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3718      	adds	r7, #24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	b083      	sub	sp, #12
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
	return -1;
 8000dca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	b083      	sub	sp, #12
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
 8000de2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dea:	605a      	str	r2, [r3, #4]
	return 0;
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <_isatty>:

int _isatty(int file)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	b083      	sub	sp, #12
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
	return 1;
 8000e02:	2301      	movs	r3, #1
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
	return 0;
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3714      	adds	r7, #20
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
	...

08000e2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e34:	4a14      	ldr	r2, [pc, #80]	; (8000e88 <_sbrk+0x5c>)
 8000e36:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <_sbrk+0x60>)
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e40:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <_sbrk+0x64>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d102      	bne.n	8000e4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e48:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <_sbrk+0x64>)
 8000e4a:	4a12      	ldr	r2, [pc, #72]	; (8000e94 <_sbrk+0x68>)
 8000e4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e4e:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <_sbrk+0x64>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4413      	add	r3, r2
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d207      	bcs.n	8000e6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e5c:	f004 fa2e 	bl	80052bc <__errno>
 8000e60:	4603      	mov	r3, r0
 8000e62:	220c      	movs	r2, #12
 8000e64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e66:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6a:	e009      	b.n	8000e80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <_sbrk+0x64>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e72:	4b07      	ldr	r3, [pc, #28]	; (8000e90 <_sbrk+0x64>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4413      	add	r3, r2
 8000e7a:	4a05      	ldr	r2, [pc, #20]	; (8000e90 <_sbrk+0x64>)
 8000e7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3718      	adds	r7, #24
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20018000 	.word	0x20018000
 8000e8c:	00000400 	.word	0x00000400
 8000e90:	2000008c 	.word	0x2000008c
 8000e94:	200001e8 	.word	0x200001e8

08000e98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <SystemInit+0x20>)
 8000e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ea2:	4a05      	ldr	r2, [pc, #20]	; (8000eb8 <SystemInit+0x20>)
 8000ea4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <Reset_Handler>:
 8000ebc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ef4 <LoopForever+0x2>
 8000ec0:	f7ff ffea 	bl	8000e98 <SystemInit>
 8000ec4:	480c      	ldr	r0, [pc, #48]	; (8000ef8 <LoopForever+0x6>)
 8000ec6:	490d      	ldr	r1, [pc, #52]	; (8000efc <LoopForever+0xa>)
 8000ec8:	4a0d      	ldr	r2, [pc, #52]	; (8000f00 <LoopForever+0xe>)
 8000eca:	2300      	movs	r3, #0
 8000ecc:	e002      	b.n	8000ed4 <LoopCopyDataInit>

08000ece <CopyDataInit>:
 8000ece:	58d4      	ldr	r4, [r2, r3]
 8000ed0:	50c4      	str	r4, [r0, r3]
 8000ed2:	3304      	adds	r3, #4

08000ed4 <LoopCopyDataInit>:
 8000ed4:	18c4      	adds	r4, r0, r3
 8000ed6:	428c      	cmp	r4, r1
 8000ed8:	d3f9      	bcc.n	8000ece <CopyDataInit>
 8000eda:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <LoopForever+0x12>)
 8000edc:	4c0a      	ldr	r4, [pc, #40]	; (8000f08 <LoopForever+0x16>)
 8000ede:	2300      	movs	r3, #0
 8000ee0:	e001      	b.n	8000ee6 <LoopFillZerobss>

08000ee2 <FillZerobss>:
 8000ee2:	6013      	str	r3, [r2, #0]
 8000ee4:	3204      	adds	r2, #4

08000ee6 <LoopFillZerobss>:
 8000ee6:	42a2      	cmp	r2, r4
 8000ee8:	d3fb      	bcc.n	8000ee2 <FillZerobss>
 8000eea:	f004 f9ed 	bl	80052c8 <__libc_init_array>
 8000eee:	f7ff fb3b 	bl	8000568 <main>

08000ef2 <LoopForever>:
 8000ef2:	e7fe      	b.n	8000ef2 <LoopForever>
 8000ef4:	20018000 	.word	0x20018000
 8000ef8:	20000000 	.word	0x20000000
 8000efc:	20000070 	.word	0x20000070
 8000f00:	08006318 	.word	0x08006318
 8000f04:	20000070 	.word	0x20000070
 8000f08:	200001e8 	.word	0x200001e8

08000f0c <ADC1_2_IRQHandler>:
 8000f0c:	e7fe      	b.n	8000f0c <ADC1_2_IRQHandler>
	...

08000f10 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f16:	2300      	movs	r3, #0
 8000f18:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f1a:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <HAL_Init+0x3c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a0b      	ldr	r2, [pc, #44]	; (8000f4c <HAL_Init+0x3c>)
 8000f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f24:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f26:	2003      	movs	r0, #3
 8000f28:	f001 f8ec 	bl	8002104 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	f000 f80f 	bl	8000f50 <HAL_InitTick>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d002      	beq.n	8000f3e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	71fb      	strb	r3, [r7, #7]
 8000f3c:	e001      	b.n	8000f42 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f3e:	f7ff fdb9 	bl	8000ab4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f42:	79fb      	ldrb	r3, [r7, #7]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40022000 	.word	0x40022000

08000f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f5c:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <HAL_InitTick+0x6c>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d023      	beq.n	8000fac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f64:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <HAL_InitTick+0x70>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <HAL_InitTick+0x6c>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f001 f8e9 	bl	8002152 <HAL_SYSTICK_Config>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d10f      	bne.n	8000fa6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b0f      	cmp	r3, #15
 8000f8a:	d809      	bhi.n	8000fa0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	6879      	ldr	r1, [r7, #4]
 8000f90:	f04f 30ff 	mov.w	r0, #4294967295
 8000f94:	f001 f8c1 	bl	800211a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f98:	4a0a      	ldr	r2, [pc, #40]	; (8000fc4 <HAL_InitTick+0x74>)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6013      	str	r3, [r2, #0]
 8000f9e:	e007      	b.n	8000fb0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	73fb      	strb	r3, [r7, #15]
 8000fa4:	e004      	b.n	8000fb0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	73fb      	strb	r3, [r7, #15]
 8000faa:	e001      	b.n	8000fb0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000008 	.word	0x20000008
 8000fc0:	20000000 	.word	0x20000000
 8000fc4:	20000004 	.word	0x20000004

08000fc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <HAL_IncTick+0x20>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_IncTick+0x24>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	4a04      	ldr	r2, [pc, #16]	; (8000fec <HAL_IncTick+0x24>)
 8000fda:	6013      	str	r3, [r2, #0]
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	20000008 	.word	0x20000008
 8000fec:	200001d4 	.word	0x200001d4

08000ff0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff4:	4b03      	ldr	r3, [pc, #12]	; (8001004 <HAL_GetTick+0x14>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	200001d4 	.word	0x200001d4

08001008 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001010:	f7ff ffee 	bl	8000ff0 <HAL_GetTick>
 8001014:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001020:	d005      	beq.n	800102e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001022:	4b0a      	ldr	r3, [pc, #40]	; (800104c <HAL_Delay+0x44>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4413      	add	r3, r2
 800102c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800102e:	bf00      	nop
 8001030:	f7ff ffde 	bl	8000ff0 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	429a      	cmp	r2, r3
 800103e:	d8f7      	bhi.n	8001030 <HAL_Delay+0x28>
  {
  }
}
 8001040:	bf00      	nop
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000008 	.word	0x20000008

08001050 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	431a      	orrs	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	609a      	str	r2, [r3, #8]
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
 800107e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	431a      	orrs	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	609a      	str	r2, [r3, #8]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b087      	sub	sp, #28
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	3360      	adds	r3, #96	; 0x60
 80010ca:	461a      	mov	r2, r3
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4413      	add	r3, r2
 80010d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4b08      	ldr	r3, [pc, #32]	; (80010fc <LL_ADC_SetOffset+0x44>)
 80010da:	4013      	ands	r3, r2
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80010e2:	683a      	ldr	r2, [r7, #0]
 80010e4:	430a      	orrs	r2, r1
 80010e6:	4313      	orrs	r3, r2
 80010e8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80010f0:	bf00      	nop
 80010f2:	371c      	adds	r7, #28
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	03fff000 	.word	0x03fff000

08001100 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	3360      	adds	r3, #96	; 0x60
 800110e:	461a      	mov	r2, r3
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	4413      	add	r3, r2
 8001116:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001120:	4618      	mov	r0, r3
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800112c:	b480      	push	{r7}
 800112e:	b087      	sub	sp, #28
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	3360      	adds	r3, #96	; 0x60
 800113c:	461a      	mov	r2, r3
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4413      	add	r3, r2
 8001144:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	431a      	orrs	r2, r3
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001156:	bf00      	nop
 8001158:	371c      	adds	r7, #28
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001162:	b480      	push	{r7}
 8001164:	b087      	sub	sp, #28
 8001166:	af00      	add	r7, sp, #0
 8001168:	60f8      	str	r0, [r7, #12]
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	3330      	adds	r3, #48	; 0x30
 8001172:	461a      	mov	r2, r3
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	0a1b      	lsrs	r3, r3, #8
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	f003 030c 	and.w	r3, r3, #12
 800117e:	4413      	add	r3, r2
 8001180:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	f003 031f 	and.w	r3, r3, #31
 800118c:	211f      	movs	r1, #31
 800118e:	fa01 f303 	lsl.w	r3, r1, r3
 8001192:	43db      	mvns	r3, r3
 8001194:	401a      	ands	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	0e9b      	lsrs	r3, r3, #26
 800119a:	f003 011f 	and.w	r1, r3, #31
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	f003 031f 	and.w	r3, r3, #31
 80011a4:	fa01 f303 	lsl.w	r3, r1, r3
 80011a8:	431a      	orrs	r2, r3
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80011ae:	bf00      	nop
 80011b0:	371c      	adds	r7, #28
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b087      	sub	sp, #28
 80011be:	af00      	add	r7, sp, #0
 80011c0:	60f8      	str	r0, [r7, #12]
 80011c2:	60b9      	str	r1, [r7, #8]
 80011c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	3314      	adds	r3, #20
 80011ca:	461a      	mov	r2, r3
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	0e5b      	lsrs	r3, r3, #25
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	f003 0304 	and.w	r3, r3, #4
 80011d6:	4413      	add	r3, r2
 80011d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	0d1b      	lsrs	r3, r3, #20
 80011e2:	f003 031f 	and.w	r3, r3, #31
 80011e6:	2107      	movs	r1, #7
 80011e8:	fa01 f303 	lsl.w	r3, r1, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	401a      	ands	r2, r3
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	0d1b      	lsrs	r3, r3, #20
 80011f4:	f003 031f 	and.w	r3, r3, #31
 80011f8:	6879      	ldr	r1, [r7, #4]
 80011fa:	fa01 f303 	lsl.w	r3, r1, r3
 80011fe:	431a      	orrs	r2, r3
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001204:	bf00      	nop
 8001206:	371c      	adds	r7, #28
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001228:	43db      	mvns	r3, r3
 800122a:	401a      	ands	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f003 0318 	and.w	r3, r3, #24
 8001232:	4908      	ldr	r1, [pc, #32]	; (8001254 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001234:	40d9      	lsrs	r1, r3
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	400b      	ands	r3, r1
 800123a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800123e:	431a      	orrs	r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001246:	bf00      	nop
 8001248:	3714      	adds	r7, #20
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	0007ffff 	.word	0x0007ffff

08001258 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001268:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	6093      	str	r3, [r2, #8]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800128c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001290:	d101      	bne.n	8001296 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001292:	2301      	movs	r3, #1
 8001294:	e000      	b.n	8001298 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80012b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80012e0:	d101      	bne.n	80012e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80012e2:	2301      	movs	r3, #1
 80012e4:	e000      	b.n	80012e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	2b01      	cmp	r3, #1
 8001306:	d101      	bne.n	800130c <LL_ADC_IsEnabled+0x18>
 8001308:	2301      	movs	r3, #1
 800130a:	e000      	b.n	800130e <LL_ADC_IsEnabled+0x1a>
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800131a:	b480      	push	{r7}
 800131c:	b083      	sub	sp, #12
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 0304 	and.w	r3, r3, #4
 800132a:	2b04      	cmp	r3, #4
 800132c:	d101      	bne.n	8001332 <LL_ADC_REG_IsConversionOngoing+0x18>
 800132e:	2301      	movs	r3, #1
 8001330:	e000      	b.n	8001334 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001332:	2300      	movs	r3, #0
}
 8001334:	4618      	mov	r0, r3
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	f003 0308 	and.w	r3, r3, #8
 8001350:	2b08      	cmp	r3, #8
 8001352:	d101      	bne.n	8001358 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001354:	2301      	movs	r3, #1
 8001356:	e000      	b.n	800135a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
	...

08001368 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001368:	b590      	push	{r4, r7, lr}
 800136a:	b089      	sub	sp, #36	; 0x24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001370:	2300      	movs	r3, #0
 8001372:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001374:	2300      	movs	r3, #0
 8001376:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d101      	bne.n	8001382 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e136      	b.n	80015f0 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	691b      	ldr	r3, [r3, #16]
 8001386:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800138c:	2b00      	cmp	r3, #0
 800138e:	d109      	bne.n	80013a4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff fbb3 	bl	8000afc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff67 	bl	800127c <LL_ADC_IsDeepPowerDownEnabled>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d004      	beq.n	80013be <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff ff4d 	bl	8001258 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff ff82 	bl	80012cc <LL_ADC_IsInternalRegulatorEnabled>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d115      	bne.n	80013fa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff ff66 	bl	80012a4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80013d8:	4b87      	ldr	r3, [pc, #540]	; (80015f8 <HAL_ADC_Init+0x290>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	099b      	lsrs	r3, r3, #6
 80013de:	4a87      	ldr	r2, [pc, #540]	; (80015fc <HAL_ADC_Init+0x294>)
 80013e0:	fba2 2303 	umull	r2, r3, r2, r3
 80013e4:	099b      	lsrs	r3, r3, #6
 80013e6:	3301      	adds	r3, #1
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80013ec:	e002      	b.n	80013f4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	3b01      	subs	r3, #1
 80013f2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f9      	bne.n	80013ee <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff ff64 	bl	80012cc <LL_ADC_IsInternalRegulatorEnabled>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d10d      	bne.n	8001426 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800140e:	f043 0210 	orr.w	r2, r3, #16
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800141a:	f043 0201 	orr.w	r2, r3, #1
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff ff75 	bl	800131a <LL_ADC_REG_IsConversionOngoing>
 8001430:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001436:	f003 0310 	and.w	r3, r3, #16
 800143a:	2b00      	cmp	r3, #0
 800143c:	f040 80cf 	bne.w	80015de <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	2b00      	cmp	r3, #0
 8001444:	f040 80cb 	bne.w	80015de <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800144c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001450:	f043 0202 	orr.w	r2, r3, #2
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff49 	bl	80012f4 <LL_ADC_IsEnabled>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d115      	bne.n	8001494 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001468:	4865      	ldr	r0, [pc, #404]	; (8001600 <HAL_ADC_Init+0x298>)
 800146a:	f7ff ff43 	bl	80012f4 <LL_ADC_IsEnabled>
 800146e:	4604      	mov	r4, r0
 8001470:	4864      	ldr	r0, [pc, #400]	; (8001604 <HAL_ADC_Init+0x29c>)
 8001472:	f7ff ff3f 	bl	80012f4 <LL_ADC_IsEnabled>
 8001476:	4603      	mov	r3, r0
 8001478:	431c      	orrs	r4, r3
 800147a:	4863      	ldr	r0, [pc, #396]	; (8001608 <HAL_ADC_Init+0x2a0>)
 800147c:	f7ff ff3a 	bl	80012f4 <LL_ADC_IsEnabled>
 8001480:	4603      	mov	r3, r0
 8001482:	4323      	orrs	r3, r4
 8001484:	2b00      	cmp	r3, #0
 8001486:	d105      	bne.n	8001494 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	4619      	mov	r1, r3
 800148e:	485f      	ldr	r0, [pc, #380]	; (800160c <HAL_ADC_Init+0x2a4>)
 8001490:	f7ff fdde 	bl	8001050 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	7e5b      	ldrb	r3, [r3, #25]
 8001498:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800149e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80014a4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80014aa:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014b2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014b4:	4313      	orrs	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d106      	bne.n	80014d0 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c6:	3b01      	subs	r3, #1
 80014c8:	045b      	lsls	r3, r3, #17
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d009      	beq.n	80014ec <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014dc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	68da      	ldr	r2, [r3, #12]
 80014f2:	4b47      	ldr	r3, [pc, #284]	; (8001610 <HAL_ADC_Init+0x2a8>)
 80014f4:	4013      	ands	r3, r2
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	6812      	ldr	r2, [r2, #0]
 80014fa:	69b9      	ldr	r1, [r7, #24]
 80014fc:	430b      	orrs	r3, r1
 80014fe:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ff08 	bl	800131a <LL_ADC_REG_IsConversionOngoing>
 800150a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff ff15 	bl	8001340 <LL_ADC_INJ_IsConversionOngoing>
 8001516:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d13d      	bne.n	800159a <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d13a      	bne.n	800159a <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001528:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001530:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001532:	4313      	orrs	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001540:	f023 0302 	bic.w	r3, r3, #2
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	6812      	ldr	r2, [r2, #0]
 8001548:	69b9      	ldr	r1, [r7, #24]
 800154a:	430b      	orrs	r3, r1
 800154c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001554:	2b01      	cmp	r3, #1
 8001556:	d118      	bne.n	800158a <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	691b      	ldr	r3, [r3, #16]
 800155e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001562:	f023 0304 	bic.w	r3, r3, #4
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800156e:	4311      	orrs	r1, r2
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001574:	4311      	orrs	r1, r2
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800157a:	430a      	orrs	r2, r1
 800157c:	431a      	orrs	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f042 0201 	orr.w	r2, r2, #1
 8001586:	611a      	str	r2, [r3, #16]
 8001588:	e007      	b.n	800159a <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	691a      	ldr	r2, [r3, #16]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f022 0201 	bic.w	r2, r2, #1
 8001598:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d10c      	bne.n	80015bc <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a8:	f023 010f 	bic.w	r1, r3, #15
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	69db      	ldr	r3, [r3, #28]
 80015b0:	1e5a      	subs	r2, r3, #1
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	430a      	orrs	r2, r1
 80015b8:	631a      	str	r2, [r3, #48]	; 0x30
 80015ba:	e007      	b.n	80015cc <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f022 020f 	bic.w	r2, r2, #15
 80015ca:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d0:	f023 0303 	bic.w	r3, r3, #3
 80015d4:	f043 0201 	orr.w	r2, r3, #1
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	655a      	str	r2, [r3, #84]	; 0x54
 80015dc:	e007      	b.n	80015ee <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015e2:	f043 0210 	orr.w	r2, r3, #16
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80015ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3724      	adds	r7, #36	; 0x24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd90      	pop	{r4, r7, pc}
 80015f8:	20000000 	.word	0x20000000
 80015fc:	053e2d63 	.word	0x053e2d63
 8001600:	50040000 	.word	0x50040000
 8001604:	50040100 	.word	0x50040100
 8001608:	50040200 	.word	0x50040200
 800160c:	50040300 	.word	0x50040300
 8001610:	fff0c007 	.word	0xfff0c007

08001614 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b0b6      	sub	sp, #216	; 0xd8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800161e:	2300      	movs	r3, #0
 8001620:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001624:	2300      	movs	r3, #0
 8001626:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800162e:	2b01      	cmp	r3, #1
 8001630:	d101      	bne.n	8001636 <HAL_ADC_ConfigChannel+0x22>
 8001632:	2302      	movs	r3, #2
 8001634:	e3c7      	b.n	8001dc6 <HAL_ADC_ConfigChannel+0x7b2>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2201      	movs	r2, #1
 800163a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff fe69 	bl	800131a <LL_ADC_REG_IsConversionOngoing>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	f040 83a8 	bne.w	8001da0 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	2b05      	cmp	r3, #5
 8001656:	d824      	bhi.n	80016a2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	3b02      	subs	r3, #2
 800165e:	2b03      	cmp	r3, #3
 8001660:	d81b      	bhi.n	800169a <HAL_ADC_ConfigChannel+0x86>
 8001662:	a201      	add	r2, pc, #4	; (adr r2, 8001668 <HAL_ADC_ConfigChannel+0x54>)
 8001664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001668:	08001679 	.word	0x08001679
 800166c:	08001681 	.word	0x08001681
 8001670:	08001689 	.word	0x08001689
 8001674:	08001691 	.word	0x08001691
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	220c      	movs	r2, #12
 800167c:	605a      	str	r2, [r3, #4]
          break;
 800167e:	e011      	b.n	80016a4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	2212      	movs	r2, #18
 8001684:	605a      	str	r2, [r3, #4]
          break;
 8001686:	e00d      	b.n	80016a4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	2218      	movs	r2, #24
 800168c:	605a      	str	r2, [r3, #4]
          break;
 800168e:	e009      	b.n	80016a4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001696:	605a      	str	r2, [r3, #4]
          break;
 8001698:	e004      	b.n	80016a4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	2206      	movs	r2, #6
 800169e:	605a      	str	r2, [r3, #4]
          break;
 80016a0:	e000      	b.n	80016a4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80016a2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6818      	ldr	r0, [r3, #0]
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	6859      	ldr	r1, [r3, #4]
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	461a      	mov	r2, r3
 80016b2:	f7ff fd56 	bl	8001162 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff fe2d 	bl	800131a <LL_ADC_REG_IsConversionOngoing>
 80016c0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fe39 	bl	8001340 <LL_ADC_INJ_IsConversionOngoing>
 80016ce:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f040 81a6 	bne.w	8001a28 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f040 81a1 	bne.w	8001a28 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6818      	ldr	r0, [r3, #0]
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	6819      	ldr	r1, [r3, #0]
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	461a      	mov	r2, r3
 80016f4:	f7ff fd61 	bl	80011ba <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	695a      	ldr	r2, [r3, #20]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	08db      	lsrs	r3, r3, #3
 8001704:	f003 0303 	and.w	r3, r3, #3
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	2b04      	cmp	r3, #4
 8001718:	d00a      	beq.n	8001730 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6818      	ldr	r0, [r3, #0]
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	6919      	ldr	r1, [r3, #16]
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800172a:	f7ff fcc5 	bl	80010b8 <LL_ADC_SetOffset>
 800172e:	e17b      	b.n	8001a28 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2100      	movs	r1, #0
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fce2 	bl	8001100 <LL_ADC_GetOffsetChannel>
 800173c:	4603      	mov	r3, r0
 800173e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001742:	2b00      	cmp	r3, #0
 8001744:	d10a      	bne.n	800175c <HAL_ADC_ConfigChannel+0x148>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2100      	movs	r1, #0
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff fcd7 	bl	8001100 <LL_ADC_GetOffsetChannel>
 8001752:	4603      	mov	r3, r0
 8001754:	0e9b      	lsrs	r3, r3, #26
 8001756:	f003 021f 	and.w	r2, r3, #31
 800175a:	e01e      	b.n	800179a <HAL_ADC_ConfigChannel+0x186>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2100      	movs	r1, #0
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff fccc 	bl	8001100 <LL_ADC_GetOffsetChannel>
 8001768:	4603      	mov	r3, r0
 800176a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001772:	fa93 f3a3 	rbit	r3, r3
 8001776:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800177a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800177e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001782:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800178a:	2320      	movs	r3, #32
 800178c:	e004      	b.n	8001798 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800178e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001792:	fab3 f383 	clz	r3, r3
 8001796:	b2db      	uxtb	r3, r3
 8001798:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d105      	bne.n	80017b2 <HAL_ADC_ConfigChannel+0x19e>
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	0e9b      	lsrs	r3, r3, #26
 80017ac:	f003 031f 	and.w	r3, r3, #31
 80017b0:	e018      	b.n	80017e4 <HAL_ADC_ConfigChannel+0x1d0>
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80017be:	fa93 f3a3 	rbit	r3, r3
 80017c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80017c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80017ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d101      	bne.n	80017da <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80017d6:	2320      	movs	r3, #32
 80017d8:	e004      	b.n	80017e4 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80017da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80017de:	fab3 f383 	clz	r3, r3
 80017e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d106      	bne.n	80017f6 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2200      	movs	r2, #0
 80017ee:	2100      	movs	r1, #0
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fc9b 	bl	800112c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2101      	movs	r1, #1
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fc7f 	bl	8001100 <LL_ADC_GetOffsetChannel>
 8001802:	4603      	mov	r3, r0
 8001804:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001808:	2b00      	cmp	r3, #0
 800180a:	d10a      	bne.n	8001822 <HAL_ADC_ConfigChannel+0x20e>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2101      	movs	r1, #1
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff fc74 	bl	8001100 <LL_ADC_GetOffsetChannel>
 8001818:	4603      	mov	r3, r0
 800181a:	0e9b      	lsrs	r3, r3, #26
 800181c:	f003 021f 	and.w	r2, r3, #31
 8001820:	e01e      	b.n	8001860 <HAL_ADC_ConfigChannel+0x24c>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2101      	movs	r1, #1
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff fc69 	bl	8001100 <LL_ADC_GetOffsetChannel>
 800182e:	4603      	mov	r3, r0
 8001830:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001834:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001838:	fa93 f3a3 	rbit	r3, r3
 800183c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001840:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001844:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001848:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800184c:	2b00      	cmp	r3, #0
 800184e:	d101      	bne.n	8001854 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001850:	2320      	movs	r3, #32
 8001852:	e004      	b.n	800185e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001854:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001858:	fab3 f383 	clz	r3, r3
 800185c:	b2db      	uxtb	r3, r3
 800185e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001868:	2b00      	cmp	r3, #0
 800186a:	d105      	bne.n	8001878 <HAL_ADC_ConfigChannel+0x264>
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	0e9b      	lsrs	r3, r3, #26
 8001872:	f003 031f 	and.w	r3, r3, #31
 8001876:	e018      	b.n	80018aa <HAL_ADC_ConfigChannel+0x296>
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001880:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001884:	fa93 f3a3 	rbit	r3, r3
 8001888:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800188c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001890:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001894:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001898:	2b00      	cmp	r3, #0
 800189a:	d101      	bne.n	80018a0 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 800189c:	2320      	movs	r3, #32
 800189e:	e004      	b.n	80018aa <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80018a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80018a4:	fab3 f383 	clz	r3, r3
 80018a8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d106      	bne.n	80018bc <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2200      	movs	r2, #0
 80018b4:	2101      	movs	r1, #1
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff fc38 	bl	800112c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2102      	movs	r1, #2
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fc1c 	bl	8001100 <LL_ADC_GetOffsetChannel>
 80018c8:	4603      	mov	r3, r0
 80018ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d10a      	bne.n	80018e8 <HAL_ADC_ConfigChannel+0x2d4>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2102      	movs	r1, #2
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff fc11 	bl	8001100 <LL_ADC_GetOffsetChannel>
 80018de:	4603      	mov	r3, r0
 80018e0:	0e9b      	lsrs	r3, r3, #26
 80018e2:	f003 021f 	and.w	r2, r3, #31
 80018e6:	e01e      	b.n	8001926 <HAL_ADC_ConfigChannel+0x312>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2102      	movs	r1, #2
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff fc06 	bl	8001100 <LL_ADC_GetOffsetChannel>
 80018f4:	4603      	mov	r3, r0
 80018f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80018fe:	fa93 f3a3 	rbit	r3, r3
 8001902:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001906:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800190a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800190e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001916:	2320      	movs	r3, #32
 8001918:	e004      	b.n	8001924 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800191a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800191e:	fab3 f383 	clz	r3, r3
 8001922:	b2db      	uxtb	r3, r3
 8001924:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800192e:	2b00      	cmp	r3, #0
 8001930:	d105      	bne.n	800193e <HAL_ADC_ConfigChannel+0x32a>
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	0e9b      	lsrs	r3, r3, #26
 8001938:	f003 031f 	and.w	r3, r3, #31
 800193c:	e016      	b.n	800196c <HAL_ADC_ConfigChannel+0x358>
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001946:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800194a:	fa93 f3a3 	rbit	r3, r3
 800194e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001950:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001952:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001956:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800195e:	2320      	movs	r3, #32
 8001960:	e004      	b.n	800196c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001962:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001966:	fab3 f383 	clz	r3, r3
 800196a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800196c:	429a      	cmp	r2, r3
 800196e:	d106      	bne.n	800197e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2200      	movs	r2, #0
 8001976:	2102      	movs	r1, #2
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff fbd7 	bl	800112c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2103      	movs	r1, #3
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff fbbb 	bl	8001100 <LL_ADC_GetOffsetChannel>
 800198a:	4603      	mov	r3, r0
 800198c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001990:	2b00      	cmp	r3, #0
 8001992:	d10a      	bne.n	80019aa <HAL_ADC_ConfigChannel+0x396>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2103      	movs	r1, #3
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff fbb0 	bl	8001100 <LL_ADC_GetOffsetChannel>
 80019a0:	4603      	mov	r3, r0
 80019a2:	0e9b      	lsrs	r3, r3, #26
 80019a4:	f003 021f 	and.w	r2, r3, #31
 80019a8:	e017      	b.n	80019da <HAL_ADC_ConfigChannel+0x3c6>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2103      	movs	r1, #3
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff fba5 	bl	8001100 <LL_ADC_GetOffsetChannel>
 80019b6:	4603      	mov	r3, r0
 80019b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019bc:	fa93 f3a3 	rbit	r3, r3
 80019c0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80019c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019c4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80019c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d101      	bne.n	80019d0 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80019cc:	2320      	movs	r3, #32
 80019ce:	e003      	b.n	80019d8 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80019d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019d2:	fab3 f383 	clz	r3, r3
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d105      	bne.n	80019f2 <HAL_ADC_ConfigChannel+0x3de>
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	0e9b      	lsrs	r3, r3, #26
 80019ec:	f003 031f 	and.w	r3, r3, #31
 80019f0:	e011      	b.n	8001a16 <HAL_ADC_ConfigChannel+0x402>
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019fa:	fa93 f3a3 	rbit	r3, r3
 80019fe:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001a00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a02:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001a0a:	2320      	movs	r3, #32
 8001a0c:	e003      	b.n	8001a16 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a10:	fab3 f383 	clz	r3, r3
 8001a14:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d106      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2103      	movs	r1, #3
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff fb82 	bl	800112c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff fc61 	bl	80012f4 <LL_ADC_IsEnabled>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f040 813f 	bne.w	8001cb8 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6818      	ldr	r0, [r3, #0]
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	6819      	ldr	r1, [r3, #0]
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	461a      	mov	r2, r3
 8001a48:	f7ff fbe2 	bl	8001210 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	4a8e      	ldr	r2, [pc, #568]	; (8001c8c <HAL_ADC_ConfigChannel+0x678>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	f040 8130 	bne.w	8001cb8 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d10b      	bne.n	8001a80 <HAL_ADC_ConfigChannel+0x46c>
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	0e9b      	lsrs	r3, r3, #26
 8001a6e:	3301      	adds	r3, #1
 8001a70:	f003 031f 	and.w	r3, r3, #31
 8001a74:	2b09      	cmp	r3, #9
 8001a76:	bf94      	ite	ls
 8001a78:	2301      	movls	r3, #1
 8001a7a:	2300      	movhi	r3, #0
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	e019      	b.n	8001ab4 <HAL_ADC_ConfigChannel+0x4a0>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a88:	fa93 f3a3 	rbit	r3, r3
 8001a8c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001a8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a90:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001a92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d101      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001a98:	2320      	movs	r3, #32
 8001a9a:	e003      	b.n	8001aa4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001a9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a9e:	fab3 f383 	clz	r3, r3
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	f003 031f 	and.w	r3, r3, #31
 8001aaa:	2b09      	cmp	r3, #9
 8001aac:	bf94      	ite	ls
 8001aae:	2301      	movls	r3, #1
 8001ab0:	2300      	movhi	r3, #0
 8001ab2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d079      	beq.n	8001bac <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d107      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x4c0>
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	0e9b      	lsrs	r3, r3, #26
 8001aca:	3301      	adds	r3, #1
 8001acc:	069b      	lsls	r3, r3, #26
 8001ace:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ad2:	e015      	b.n	8001b00 <HAL_ADC_ConfigChannel+0x4ec>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001adc:	fa93 f3a3 	rbit	r3, r3
 8001ae0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ae4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001ae6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d101      	bne.n	8001af0 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001aec:	2320      	movs	r3, #32
 8001aee:	e003      	b.n	8001af8 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001af0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001af2:	fab3 f383 	clz	r3, r3
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	3301      	adds	r3, #1
 8001afa:	069b      	lsls	r3, r3, #26
 8001afc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d109      	bne.n	8001b20 <HAL_ADC_ConfigChannel+0x50c>
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	0e9b      	lsrs	r3, r3, #26
 8001b12:	3301      	adds	r3, #1
 8001b14:	f003 031f 	and.w	r3, r3, #31
 8001b18:	2101      	movs	r1, #1
 8001b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1e:	e017      	b.n	8001b50 <HAL_ADC_ConfigChannel+0x53c>
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b28:	fa93 f3a3 	rbit	r3, r3
 8001b2c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001b2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b30:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001b32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d101      	bne.n	8001b3c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001b38:	2320      	movs	r3, #32
 8001b3a:	e003      	b.n	8001b44 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001b3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b3e:	fab3 f383 	clz	r3, r3
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	3301      	adds	r3, #1
 8001b46:	f003 031f 	and.w	r3, r3, #31
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b50:	ea42 0103 	orr.w	r1, r2, r3
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d10a      	bne.n	8001b76 <HAL_ADC_ConfigChannel+0x562>
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	0e9b      	lsrs	r3, r3, #26
 8001b66:	3301      	adds	r3, #1
 8001b68:	f003 021f 	and.w	r2, r3, #31
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	4413      	add	r3, r2
 8001b72:	051b      	lsls	r3, r3, #20
 8001b74:	e018      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x594>
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b7e:	fa93 f3a3 	rbit	r3, r3
 8001b82:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b86:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001b8e:	2320      	movs	r3, #32
 8001b90:	e003      	b.n	8001b9a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001b92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b94:	fab3 f383 	clz	r3, r3
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	f003 021f 	and.w	r2, r3, #31
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	4413      	add	r3, r2
 8001ba6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ba8:	430b      	orrs	r3, r1
 8001baa:	e080      	b.n	8001cae <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d107      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x5b4>
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	0e9b      	lsrs	r3, r3, #26
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	069b      	lsls	r3, r3, #26
 8001bc2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bc6:	e015      	b.n	8001bf4 <HAL_ADC_ConfigChannel+0x5e0>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd0:	fa93 f3a3 	rbit	r3, r3
 8001bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d101      	bne.n	8001be4 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001be0:	2320      	movs	r3, #32
 8001be2:	e003      	b.n	8001bec <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001be6:	fab3 f383 	clz	r3, r3
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	3301      	adds	r3, #1
 8001bee:	069b      	lsls	r3, r3, #26
 8001bf0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d109      	bne.n	8001c14 <HAL_ADC_ConfigChannel+0x600>
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	0e9b      	lsrs	r3, r3, #26
 8001c06:	3301      	adds	r3, #1
 8001c08:	f003 031f 	and.w	r3, r3, #31
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c12:	e017      	b.n	8001c44 <HAL_ADC_ConfigChannel+0x630>
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1a:	6a3b      	ldr	r3, [r7, #32]
 8001c1c:	fa93 f3a3 	rbit	r3, r3
 8001c20:	61fb      	str	r3, [r7, #28]
  return result;
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d101      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001c2c:	2320      	movs	r3, #32
 8001c2e:	e003      	b.n	8001c38 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c32:	fab3 f383 	clz	r3, r3
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	3301      	adds	r3, #1
 8001c3a:	f003 031f 	and.w	r3, r3, #31
 8001c3e:	2101      	movs	r1, #1
 8001c40:	fa01 f303 	lsl.w	r3, r1, r3
 8001c44:	ea42 0103 	orr.w	r1, r2, r3
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d10d      	bne.n	8001c70 <HAL_ADC_ConfigChannel+0x65c>
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	0e9b      	lsrs	r3, r3, #26
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	f003 021f 	and.w	r2, r3, #31
 8001c60:	4613      	mov	r3, r2
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	4413      	add	r3, r2
 8001c66:	3b1e      	subs	r3, #30
 8001c68:	051b      	lsls	r3, r3, #20
 8001c6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c6e:	e01d      	b.n	8001cac <HAL_ADC_ConfigChannel+0x698>
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	fa93 f3a3 	rbit	r3, r3
 8001c7c:	613b      	str	r3, [r7, #16]
  return result;
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d103      	bne.n	8001c90 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001c88:	2320      	movs	r3, #32
 8001c8a:	e005      	b.n	8001c98 <HAL_ADC_ConfigChannel+0x684>
 8001c8c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	fab3 f383 	clz	r3, r3
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	3301      	adds	r3, #1
 8001c9a:	f003 021f 	and.w	r2, r3, #31
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	4413      	add	r3, r2
 8001ca4:	3b1e      	subs	r3, #30
 8001ca6:	051b      	lsls	r3, r3, #20
 8001ca8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cac:	430b      	orrs	r3, r1
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	6892      	ldr	r2, [r2, #8]
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	f7ff fa81 	bl	80011ba <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	4b44      	ldr	r3, [pc, #272]	; (8001dd0 <HAL_ADC_ConfigChannel+0x7bc>)
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d07a      	beq.n	8001dba <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cc4:	4843      	ldr	r0, [pc, #268]	; (8001dd4 <HAL_ADC_ConfigChannel+0x7c0>)
 8001cc6:	f7ff f9e9 	bl	800109c <LL_ADC_GetCommonPathInternalCh>
 8001cca:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a41      	ldr	r2, [pc, #260]	; (8001dd8 <HAL_ADC_ConfigChannel+0x7c4>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d12c      	bne.n	8001d32 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001cd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d126      	bne.n	8001d32 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a3c      	ldr	r2, [pc, #240]	; (8001ddc <HAL_ADC_ConfigChannel+0x7c8>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d004      	beq.n	8001cf8 <HAL_ADC_ConfigChannel+0x6e4>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a3b      	ldr	r2, [pc, #236]	; (8001de0 <HAL_ADC_ConfigChannel+0x7cc>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d15d      	bne.n	8001db4 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cf8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cfc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d00:	4619      	mov	r1, r3
 8001d02:	4834      	ldr	r0, [pc, #208]	; (8001dd4 <HAL_ADC_ConfigChannel+0x7c0>)
 8001d04:	f7ff f9b7 	bl	8001076 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d08:	4b36      	ldr	r3, [pc, #216]	; (8001de4 <HAL_ADC_ConfigChannel+0x7d0>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	099b      	lsrs	r3, r3, #6
 8001d0e:	4a36      	ldr	r2, [pc, #216]	; (8001de8 <HAL_ADC_ConfigChannel+0x7d4>)
 8001d10:	fba2 2303 	umull	r2, r3, r2, r3
 8001d14:	099b      	lsrs	r3, r3, #6
 8001d16:	1c5a      	adds	r2, r3, #1
 8001d18:	4613      	mov	r3, r2
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	4413      	add	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d22:	e002      	b.n	8001d2a <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	3b01      	subs	r3, #1
 8001d28:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1f9      	bne.n	8001d24 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d30:	e040      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a2d      	ldr	r2, [pc, #180]	; (8001dec <HAL_ADC_ConfigChannel+0x7d8>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d118      	bne.n	8001d6e <HAL_ADC_ConfigChannel+0x75a>
 8001d3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d112      	bne.n	8001d6e <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a23      	ldr	r2, [pc, #140]	; (8001ddc <HAL_ADC_ConfigChannel+0x7c8>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d004      	beq.n	8001d5c <HAL_ADC_ConfigChannel+0x748>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a22      	ldr	r2, [pc, #136]	; (8001de0 <HAL_ADC_ConfigChannel+0x7cc>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d12d      	bne.n	8001db8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d64:	4619      	mov	r1, r3
 8001d66:	481b      	ldr	r0, [pc, #108]	; (8001dd4 <HAL_ADC_ConfigChannel+0x7c0>)
 8001d68:	f7ff f985 	bl	8001076 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d6c:	e024      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a1f      	ldr	r2, [pc, #124]	; (8001df0 <HAL_ADC_ConfigChannel+0x7dc>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d120      	bne.n	8001dba <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001d78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d11a      	bne.n	8001dba <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a14      	ldr	r2, [pc, #80]	; (8001ddc <HAL_ADC_ConfigChannel+0x7c8>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d115      	bne.n	8001dba <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d92:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d96:	4619      	mov	r1, r3
 8001d98:	480e      	ldr	r0, [pc, #56]	; (8001dd4 <HAL_ADC_ConfigChannel+0x7c0>)
 8001d9a:	f7ff f96c 	bl	8001076 <LL_ADC_SetCommonPathInternalCh>
 8001d9e:	e00c      	b.n	8001dba <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da4:	f043 0220 	orr.w	r2, r3, #32
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001db2:	e002      	b.n	8001dba <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001db4:	bf00      	nop
 8001db6:	e000      	b.n	8001dba <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001db8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001dc2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	37d8      	adds	r7, #216	; 0xd8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	80080000 	.word	0x80080000
 8001dd4:	50040300 	.word	0x50040300
 8001dd8:	c7520000 	.word	0xc7520000
 8001ddc:	50040000 	.word	0x50040000
 8001de0:	50040200 	.word	0x50040200
 8001de4:	20000000 	.word	0x20000000
 8001de8:	053e2d63 	.word	0x053e2d63
 8001dec:	cb840000 	.word	0xcb840000
 8001df0:	80000001 	.word	0x80000001

08001df4 <LL_ADC_IsEnabled>:
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d101      	bne.n	8001e0c <LL_ADC_IsEnabled+0x18>
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e000      	b.n	8001e0e <LL_ADC_IsEnabled+0x1a>
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <LL_ADC_REG_IsConversionOngoing>:
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b083      	sub	sp, #12
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 0304 	and.w	r3, r3, #4
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	d101      	bne.n	8001e32 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001e40:	b590      	push	{r4, r7, lr}
 8001e42:	b09f      	sub	sp, #124	; 0x7c
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d101      	bne.n	8001e5e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	e093      	b.n	8001f86 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001e66:	2300      	movs	r3, #0
 8001e68:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a47      	ldr	r2, [pc, #284]	; (8001f90 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d102      	bne.n	8001e7e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001e78:	4b46      	ldr	r3, [pc, #280]	; (8001f94 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001e7a:	60bb      	str	r3, [r7, #8]
 8001e7c:	e001      	b.n	8001e82 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d10b      	bne.n	8001ea0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e8c:	f043 0220 	orr.w	r2, r3, #32
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e072      	b.n	8001f86 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff ffb9 	bl	8001e1a <LL_ADC_REG_IsConversionOngoing>
 8001ea8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff ffb3 	bl	8001e1a <LL_ADC_REG_IsConversionOngoing>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d154      	bne.n	8001f64 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001eba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d151      	bne.n	8001f64 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001ec0:	4b35      	ldr	r3, [pc, #212]	; (8001f98 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001ec2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d02c      	beq.n	8001f26 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001ecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	6859      	ldr	r1, [r3, #4]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ede:	035b      	lsls	r3, r3, #13
 8001ee0:	430b      	orrs	r3, r1
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ee6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ee8:	4829      	ldr	r0, [pc, #164]	; (8001f90 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001eea:	f7ff ff83 	bl	8001df4 <LL_ADC_IsEnabled>
 8001eee:	4604      	mov	r4, r0
 8001ef0:	4828      	ldr	r0, [pc, #160]	; (8001f94 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001ef2:	f7ff ff7f 	bl	8001df4 <LL_ADC_IsEnabled>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	431c      	orrs	r4, r3
 8001efa:	4828      	ldr	r0, [pc, #160]	; (8001f9c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001efc:	f7ff ff7a 	bl	8001df4 <LL_ADC_IsEnabled>
 8001f00:	4603      	mov	r3, r0
 8001f02:	4323      	orrs	r3, r4
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d137      	bne.n	8001f78 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001f10:	f023 030f 	bic.w	r3, r3, #15
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	6811      	ldr	r1, [r2, #0]
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	6892      	ldr	r2, [r2, #8]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f22:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f24:	e028      	b.n	8001f78 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f30:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f32:	4817      	ldr	r0, [pc, #92]	; (8001f90 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001f34:	f7ff ff5e 	bl	8001df4 <LL_ADC_IsEnabled>
 8001f38:	4604      	mov	r4, r0
 8001f3a:	4816      	ldr	r0, [pc, #88]	; (8001f94 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001f3c:	f7ff ff5a 	bl	8001df4 <LL_ADC_IsEnabled>
 8001f40:	4603      	mov	r3, r0
 8001f42:	431c      	orrs	r4, r3
 8001f44:	4815      	ldr	r0, [pc, #84]	; (8001f9c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001f46:	f7ff ff55 	bl	8001df4 <LL_ADC_IsEnabled>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	4323      	orrs	r3, r4
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d112      	bne.n	8001f78 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001f5a:	f023 030f 	bic.w	r3, r3, #15
 8001f5e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001f60:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f62:	e009      	b.n	8001f78 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f68:	f043 0220 	orr.w	r2, r3, #32
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001f76:	e000      	b.n	8001f7a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f78:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001f82:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	377c      	adds	r7, #124	; 0x7c
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd90      	pop	{r4, r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	50040000 	.word	0x50040000
 8001f94:	50040100 	.word	0x50040100
 8001f98:	50040300 	.word	0x50040300
 8001f9c:	50040200 	.word	0x50040200

08001fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fb0:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fd2:	4a04      	ldr	r2, [pc, #16]	; (8001fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	60d3      	str	r3, [r2, #12]
}
 8001fd8:	bf00      	nop
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fec:	4b04      	ldr	r3, [pc, #16]	; (8002000 <__NVIC_GetPriorityGrouping+0x18>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	0a1b      	lsrs	r3, r3, #8
 8001ff2:	f003 0307 	and.w	r3, r3, #7
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	6039      	str	r1, [r7, #0]
 800200e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002014:	2b00      	cmp	r3, #0
 8002016:	db0a      	blt.n	800202e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	b2da      	uxtb	r2, r3
 800201c:	490c      	ldr	r1, [pc, #48]	; (8002050 <__NVIC_SetPriority+0x4c>)
 800201e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002022:	0112      	lsls	r2, r2, #4
 8002024:	b2d2      	uxtb	r2, r2
 8002026:	440b      	add	r3, r1
 8002028:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800202c:	e00a      	b.n	8002044 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	b2da      	uxtb	r2, r3
 8002032:	4908      	ldr	r1, [pc, #32]	; (8002054 <__NVIC_SetPriority+0x50>)
 8002034:	79fb      	ldrb	r3, [r7, #7]
 8002036:	f003 030f 	and.w	r3, r3, #15
 800203a:	3b04      	subs	r3, #4
 800203c:	0112      	lsls	r2, r2, #4
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	440b      	add	r3, r1
 8002042:	761a      	strb	r2, [r3, #24]
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	e000e100 	.word	0xe000e100
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002058:	b480      	push	{r7}
 800205a:	b089      	sub	sp, #36	; 0x24
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	f1c3 0307 	rsb	r3, r3, #7
 8002072:	2b04      	cmp	r3, #4
 8002074:	bf28      	it	cs
 8002076:	2304      	movcs	r3, #4
 8002078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	3304      	adds	r3, #4
 800207e:	2b06      	cmp	r3, #6
 8002080:	d902      	bls.n	8002088 <NVIC_EncodePriority+0x30>
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	3b03      	subs	r3, #3
 8002086:	e000      	b.n	800208a <NVIC_EncodePriority+0x32>
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800208c:	f04f 32ff 	mov.w	r2, #4294967295
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43da      	mvns	r2, r3
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	401a      	ands	r2, r3
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020a0:	f04f 31ff 	mov.w	r1, #4294967295
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	fa01 f303 	lsl.w	r3, r1, r3
 80020aa:	43d9      	mvns	r1, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b0:	4313      	orrs	r3, r2
         );
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3724      	adds	r7, #36	; 0x24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
	...

080020c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020d0:	d301      	bcc.n	80020d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020d2:	2301      	movs	r3, #1
 80020d4:	e00f      	b.n	80020f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020d6:	4a0a      	ldr	r2, [pc, #40]	; (8002100 <SysTick_Config+0x40>)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3b01      	subs	r3, #1
 80020dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020de:	210f      	movs	r1, #15
 80020e0:	f04f 30ff 	mov.w	r0, #4294967295
 80020e4:	f7ff ff8e 	bl	8002004 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020e8:	4b05      	ldr	r3, [pc, #20]	; (8002100 <SysTick_Config+0x40>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ee:	4b04      	ldr	r3, [pc, #16]	; (8002100 <SysTick_Config+0x40>)
 80020f0:	2207      	movs	r2, #7
 80020f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	e000e010 	.word	0xe000e010

08002104 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7ff ff47 	bl	8001fa0 <__NVIC_SetPriorityGrouping>
}
 8002112:	bf00      	nop
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b086      	sub	sp, #24
 800211e:	af00      	add	r7, sp, #0
 8002120:	4603      	mov	r3, r0
 8002122:	60b9      	str	r1, [r7, #8]
 8002124:	607a      	str	r2, [r7, #4]
 8002126:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800212c:	f7ff ff5c 	bl	8001fe8 <__NVIC_GetPriorityGrouping>
 8002130:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	68b9      	ldr	r1, [r7, #8]
 8002136:	6978      	ldr	r0, [r7, #20]
 8002138:	f7ff ff8e 	bl	8002058 <NVIC_EncodePriority>
 800213c:	4602      	mov	r2, r0
 800213e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002142:	4611      	mov	r1, r2
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff ff5d 	bl	8002004 <__NVIC_SetPriority>
}
 800214a:	bf00      	nop
 800214c:	3718      	adds	r7, #24
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b082      	sub	sp, #8
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7ff ffb0 	bl	80020c0 <SysTick_Config>
 8002160:	4603      	mov	r3, r0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
	...

0800216c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800216c:	b480      	push	{r7}
 800216e:	b087      	sub	sp, #28
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002176:	2300      	movs	r3, #0
 8002178:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800217a:	e17f      	b.n	800247c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	2101      	movs	r1, #1
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	fa01 f303 	lsl.w	r3, r1, r3
 8002188:	4013      	ands	r3, r2
 800218a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2b00      	cmp	r3, #0
 8002190:	f000 8171 	beq.w	8002476 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 0303 	and.w	r3, r3, #3
 800219c:	2b01      	cmp	r3, #1
 800219e:	d005      	beq.n	80021ac <HAL_GPIO_Init+0x40>
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 0303 	and.w	r3, r3, #3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d130      	bne.n	800220e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	2203      	movs	r2, #3
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	4013      	ands	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	68da      	ldr	r2, [r3, #12]
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021e2:	2201      	movs	r2, #1
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	43db      	mvns	r3, r3
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	4013      	ands	r3, r2
 80021f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	091b      	lsrs	r3, r3, #4
 80021f8:	f003 0201 	and.w	r2, r3, #1
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	4313      	orrs	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	2b03      	cmp	r3, #3
 8002218:	d118      	bne.n	800224c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002220:	2201      	movs	r2, #1
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	4013      	ands	r3, r2
 800222e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	08db      	lsrs	r3, r3, #3
 8002236:	f003 0201 	and.w	r2, r3, #1
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	4313      	orrs	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 0303 	and.w	r3, r3, #3
 8002254:	2b03      	cmp	r3, #3
 8002256:	d017      	beq.n	8002288 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	2203      	movs	r2, #3
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	4013      	ands	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	4313      	orrs	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 0303 	and.w	r3, r3, #3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d123      	bne.n	80022dc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	08da      	lsrs	r2, r3, #3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3208      	adds	r2, #8
 800229c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	220f      	movs	r2, #15
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	4013      	ands	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	691a      	ldr	r2, [r3, #16]
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	08da      	lsrs	r2, r3, #3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	3208      	adds	r2, #8
 80022d6:	6939      	ldr	r1, [r7, #16]
 80022d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	2203      	movs	r2, #3
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	4013      	ands	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f003 0203 	and.w	r2, r3, #3
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	4313      	orrs	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 80ac 	beq.w	8002476 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800231e:	4b5f      	ldr	r3, [pc, #380]	; (800249c <HAL_GPIO_Init+0x330>)
 8002320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002322:	4a5e      	ldr	r2, [pc, #376]	; (800249c <HAL_GPIO_Init+0x330>)
 8002324:	f043 0301 	orr.w	r3, r3, #1
 8002328:	6613      	str	r3, [r2, #96]	; 0x60
 800232a:	4b5c      	ldr	r3, [pc, #368]	; (800249c <HAL_GPIO_Init+0x330>)
 800232c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	60bb      	str	r3, [r7, #8]
 8002334:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002336:	4a5a      	ldr	r2, [pc, #360]	; (80024a0 <HAL_GPIO_Init+0x334>)
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	089b      	lsrs	r3, r3, #2
 800233c:	3302      	adds	r3, #2
 800233e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002342:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	f003 0303 	and.w	r3, r3, #3
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	220f      	movs	r2, #15
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43db      	mvns	r3, r3
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	4013      	ands	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002360:	d025      	beq.n	80023ae <HAL_GPIO_Init+0x242>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a4f      	ldr	r2, [pc, #316]	; (80024a4 <HAL_GPIO_Init+0x338>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d01f      	beq.n	80023aa <HAL_GPIO_Init+0x23e>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a4e      	ldr	r2, [pc, #312]	; (80024a8 <HAL_GPIO_Init+0x33c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d019      	beq.n	80023a6 <HAL_GPIO_Init+0x23a>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a4d      	ldr	r2, [pc, #308]	; (80024ac <HAL_GPIO_Init+0x340>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d013      	beq.n	80023a2 <HAL_GPIO_Init+0x236>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a4c      	ldr	r2, [pc, #304]	; (80024b0 <HAL_GPIO_Init+0x344>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d00d      	beq.n	800239e <HAL_GPIO_Init+0x232>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a4b      	ldr	r2, [pc, #300]	; (80024b4 <HAL_GPIO_Init+0x348>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d007      	beq.n	800239a <HAL_GPIO_Init+0x22e>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a4a      	ldr	r2, [pc, #296]	; (80024b8 <HAL_GPIO_Init+0x34c>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d101      	bne.n	8002396 <HAL_GPIO_Init+0x22a>
 8002392:	2306      	movs	r3, #6
 8002394:	e00c      	b.n	80023b0 <HAL_GPIO_Init+0x244>
 8002396:	2307      	movs	r3, #7
 8002398:	e00a      	b.n	80023b0 <HAL_GPIO_Init+0x244>
 800239a:	2305      	movs	r3, #5
 800239c:	e008      	b.n	80023b0 <HAL_GPIO_Init+0x244>
 800239e:	2304      	movs	r3, #4
 80023a0:	e006      	b.n	80023b0 <HAL_GPIO_Init+0x244>
 80023a2:	2303      	movs	r3, #3
 80023a4:	e004      	b.n	80023b0 <HAL_GPIO_Init+0x244>
 80023a6:	2302      	movs	r3, #2
 80023a8:	e002      	b.n	80023b0 <HAL_GPIO_Init+0x244>
 80023aa:	2301      	movs	r3, #1
 80023ac:	e000      	b.n	80023b0 <HAL_GPIO_Init+0x244>
 80023ae:	2300      	movs	r3, #0
 80023b0:	697a      	ldr	r2, [r7, #20]
 80023b2:	f002 0203 	and.w	r2, r2, #3
 80023b6:	0092      	lsls	r2, r2, #2
 80023b8:	4093      	lsls	r3, r2
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4313      	orrs	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023c0:	4937      	ldr	r1, [pc, #220]	; (80024a0 <HAL_GPIO_Init+0x334>)
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	089b      	lsrs	r3, r3, #2
 80023c6:	3302      	adds	r3, #2
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023ce:	4b3b      	ldr	r3, [pc, #236]	; (80024bc <HAL_GPIO_Init+0x350>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	43db      	mvns	r3, r3
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	4013      	ands	r3, r2
 80023dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023f2:	4a32      	ldr	r2, [pc, #200]	; (80024bc <HAL_GPIO_Init+0x350>)
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023f8:	4b30      	ldr	r3, [pc, #192]	; (80024bc <HAL_GPIO_Init+0x350>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	43db      	mvns	r3, r3
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	4013      	ands	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d003      	beq.n	800241c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	4313      	orrs	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800241c:	4a27      	ldr	r2, [pc, #156]	; (80024bc <HAL_GPIO_Init+0x350>)
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002422:	4b26      	ldr	r3, [pc, #152]	; (80024bc <HAL_GPIO_Init+0x350>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	43db      	mvns	r3, r3
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	4013      	ands	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d003      	beq.n	8002446 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	4313      	orrs	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002446:	4a1d      	ldr	r2, [pc, #116]	; (80024bc <HAL_GPIO_Init+0x350>)
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800244c:	4b1b      	ldr	r3, [pc, #108]	; (80024bc <HAL_GPIO_Init+0x350>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	43db      	mvns	r3, r3
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	4013      	ands	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d003      	beq.n	8002470 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	4313      	orrs	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002470:	4a12      	ldr	r2, [pc, #72]	; (80024bc <HAL_GPIO_Init+0x350>)
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	3301      	adds	r3, #1
 800247a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	fa22 f303 	lsr.w	r3, r2, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	f47f ae78 	bne.w	800217c <HAL_GPIO_Init+0x10>
  }
}
 800248c:	bf00      	nop
 800248e:	bf00      	nop
 8002490:	371c      	adds	r7, #28
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	40021000 	.word	0x40021000
 80024a0:	40010000 	.word	0x40010000
 80024a4:	48000400 	.word	0x48000400
 80024a8:	48000800 	.word	0x48000800
 80024ac:	48000c00 	.word	0x48000c00
 80024b0:	48001000 	.word	0x48001000
 80024b4:	48001400 	.word	0x48001400
 80024b8:	48001800 	.word	0x48001800
 80024bc:	40010400 	.word	0x40010400

080024c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	460b      	mov	r3, r1
 80024ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	691a      	ldr	r2, [r3, #16]
 80024d0:	887b      	ldrh	r3, [r7, #2]
 80024d2:	4013      	ands	r3, r2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d002      	beq.n	80024de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024d8:	2301      	movs	r3, #1
 80024da:	73fb      	strb	r3, [r7, #15]
 80024dc:	e001      	b.n	80024e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024de:	2300      	movs	r3, #0
 80024e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	460b      	mov	r3, r1
 80024fa:	807b      	strh	r3, [r7, #2]
 80024fc:	4613      	mov	r3, r2
 80024fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002500:	787b      	ldrb	r3, [r7, #1]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002506:	887a      	ldrh	r2, [r7, #2]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800250c:	e002      	b.n	8002514 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800250e:	887a      	ldrh	r2, [r7, #2]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	460b      	mov	r3, r1
 800252a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	695b      	ldr	r3, [r3, #20]
 8002530:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002532:	887a      	ldrh	r2, [r7, #2]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4013      	ands	r3, r2
 8002538:	041a      	lsls	r2, r3, #16
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	43d9      	mvns	r1, r3
 800253e:	887b      	ldrh	r3, [r7, #2]
 8002540:	400b      	ands	r3, r1
 8002542:	431a      	orrs	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	619a      	str	r2, [r3, #24]
}
 8002548:	bf00      	nop
 800254a:	3714      	adds	r7, #20
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002558:	4b04      	ldr	r3, [pc, #16]	; (800256c <HAL_PWREx_GetVoltageRange+0x18>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002560:	4618      	mov	r0, r3
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	40007000 	.word	0x40007000

08002570 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800257e:	d130      	bne.n	80025e2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002580:	4b23      	ldr	r3, [pc, #140]	; (8002610 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002588:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800258c:	d038      	beq.n	8002600 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800258e:	4b20      	ldr	r3, [pc, #128]	; (8002610 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002596:	4a1e      	ldr	r2, [pc, #120]	; (8002610 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002598:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800259c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800259e:	4b1d      	ldr	r3, [pc, #116]	; (8002614 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2232      	movs	r2, #50	; 0x32
 80025a4:	fb02 f303 	mul.w	r3, r2, r3
 80025a8:	4a1b      	ldr	r2, [pc, #108]	; (8002618 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80025aa:	fba2 2303 	umull	r2, r3, r2, r3
 80025ae:	0c9b      	lsrs	r3, r3, #18
 80025b0:	3301      	adds	r3, #1
 80025b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025b4:	e002      	b.n	80025bc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	3b01      	subs	r3, #1
 80025ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025bc:	4b14      	ldr	r3, [pc, #80]	; (8002610 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025c8:	d102      	bne.n	80025d0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1f2      	bne.n	80025b6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025d0:	4b0f      	ldr	r3, [pc, #60]	; (8002610 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025dc:	d110      	bne.n	8002600 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e00f      	b.n	8002602 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80025e2:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ee:	d007      	beq.n	8002600 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80025f0:	4b07      	ldr	r3, [pc, #28]	; (8002610 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025f8:	4a05      	ldr	r2, [pc, #20]	; (8002610 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025fe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3714      	adds	r7, #20
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	40007000 	.word	0x40007000
 8002614:	20000000 	.word	0x20000000
 8002618:	431bde83 	.word	0x431bde83

0800261c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b088      	sub	sp, #32
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e3d4      	b.n	8002dd8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800262e:	4ba1      	ldr	r3, [pc, #644]	; (80028b4 <HAL_RCC_OscConfig+0x298>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 030c 	and.w	r3, r3, #12
 8002636:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002638:	4b9e      	ldr	r3, [pc, #632]	; (80028b4 <HAL_RCC_OscConfig+0x298>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	f003 0303 	and.w	r3, r3, #3
 8002640:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0310 	and.w	r3, r3, #16
 800264a:	2b00      	cmp	r3, #0
 800264c:	f000 80e4 	beq.w	8002818 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d007      	beq.n	8002666 <HAL_RCC_OscConfig+0x4a>
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	2b0c      	cmp	r3, #12
 800265a:	f040 808b 	bne.w	8002774 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	2b01      	cmp	r3, #1
 8002662:	f040 8087 	bne.w	8002774 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002666:	4b93      	ldr	r3, [pc, #588]	; (80028b4 <HAL_RCC_OscConfig+0x298>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d005      	beq.n	800267e <HAL_RCC_OscConfig+0x62>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e3ac      	b.n	8002dd8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a1a      	ldr	r2, [r3, #32]
 8002682:	4b8c      	ldr	r3, [pc, #560]	; (80028b4 <HAL_RCC_OscConfig+0x298>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0308 	and.w	r3, r3, #8
 800268a:	2b00      	cmp	r3, #0
 800268c:	d004      	beq.n	8002698 <HAL_RCC_OscConfig+0x7c>
 800268e:	4b89      	ldr	r3, [pc, #548]	; (80028b4 <HAL_RCC_OscConfig+0x298>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002696:	e005      	b.n	80026a4 <HAL_RCC_OscConfig+0x88>
 8002698:	4b86      	ldr	r3, [pc, #536]	; (80028b4 <HAL_RCC_OscConfig+0x298>)
 800269a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800269e:	091b      	lsrs	r3, r3, #4
 80026a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d223      	bcs.n	80026f0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f000 fd41 	bl	8003134 <RCC_SetFlashLatencyFromMSIRange>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e38d      	b.n	8002dd8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026bc:	4b7d      	ldr	r3, [pc, #500]	; (80028b4 <HAL_RCC_OscConfig+0x298>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a7c      	ldr	r2, [pc, #496]	; (80028b4 <HAL_RCC_OscConfig+0x298>)
 80026c2:	f043 0308 	orr.w	r3, r3, #8
 80026c6:	6013      	str	r3, [r2, #0]
 80026c8:	4b7a      	ldr	r3, [pc, #488]	; (80028b4 <HAL_RCC_OscConfig+0x298>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	4977      	ldr	r1, [pc, #476]	; (80028b4 <HAL_RCC_OscConfig+0x298>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026da:	4b76      	ldr	r3, [pc, #472]	; (80028b4 <HAL_RCC_OscConfig+0x298>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	021b      	lsls	r3, r3, #8
 80026e8:	4972      	ldr	r1, [pc, #456]	; (80028b4 <HAL_RCC_OscConfig+0x298>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	604b      	str	r3, [r1, #4]
 80026ee:	e025      	b.n	800273c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026f0:	4b70      	ldr	r3, [pc, #448]	; (80028b4 <HAL_RCC_OscConfig+0x298>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a6f      	ldr	r2, [pc, #444]	; (80028b4 <HAL_RCC_OscConfig+0x298>)
 80026f6:	f043 0308 	orr.w	r3, r3, #8
 80026fa:	6013      	str	r3, [r2, #0]
 80026fc:	4b6d      	ldr	r3, [pc, #436]	; (80028b4 <HAL_RCC_OscConfig+0x298>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	496a      	ldr	r1, [pc, #424]	; (80028b4 <HAL_RCC_OscConfig+0x298>)
 800270a:	4313      	orrs	r3, r2
 800270c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800270e:	4b69      	ldr	r3, [pc, #420]	; (80028b4 <HAL_RCC_OscConfig+0x298>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	021b      	lsls	r3, r3, #8
 800271c:	4965      	ldr	r1, [pc, #404]	; (80028b4 <HAL_RCC_OscConfig+0x298>)
 800271e:	4313      	orrs	r3, r2
 8002720:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d109      	bne.n	800273c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	4618      	mov	r0, r3
 800272e:	f000 fd01 	bl	8003134 <RCC_SetFlashLatencyFromMSIRange>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e34d      	b.n	8002dd8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800273c:	f000 fc36 	bl	8002fac <HAL_RCC_GetSysClockFreq>
 8002740:	4602      	mov	r2, r0
 8002742:	4b5c      	ldr	r3, [pc, #368]	; (80028b4 <HAL_RCC_OscConfig+0x298>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	091b      	lsrs	r3, r3, #4
 8002748:	f003 030f 	and.w	r3, r3, #15
 800274c:	495a      	ldr	r1, [pc, #360]	; (80028b8 <HAL_RCC_OscConfig+0x29c>)
 800274e:	5ccb      	ldrb	r3, [r1, r3]
 8002750:	f003 031f 	and.w	r3, r3, #31
 8002754:	fa22 f303 	lsr.w	r3, r2, r3
 8002758:	4a58      	ldr	r2, [pc, #352]	; (80028bc <HAL_RCC_OscConfig+0x2a0>)
 800275a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800275c:	4b58      	ldr	r3, [pc, #352]	; (80028c0 <HAL_RCC_OscConfig+0x2a4>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f7fe fbf5 	bl	8000f50 <HAL_InitTick>
 8002766:	4603      	mov	r3, r0
 8002768:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800276a:	7bfb      	ldrb	r3, [r7, #15]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d052      	beq.n	8002816 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002770:	7bfb      	ldrb	r3, [r7, #15]
 8002772:	e331      	b.n	8002dd8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d032      	beq.n	80027e2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800277c:	4b4d      	ldr	r3, [pc, #308]	; (80028b4 <HAL_RCC_OscConfig+0x298>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a4c      	ldr	r2, [pc, #304]	; (80028b4 <HAL_RCC_OscConfig+0x298>)
 8002782:	f043 0301 	orr.w	r3, r3, #1
 8002786:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002788:	f7fe fc32 	bl	8000ff0 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002790:	f7fe fc2e 	bl	8000ff0 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e31a      	b.n	8002dd8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027a2:	4b44      	ldr	r3, [pc, #272]	; (80028b4 <HAL_RCC_OscConfig+0x298>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0f0      	beq.n	8002790 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027ae:	4b41      	ldr	r3, [pc, #260]	; (80028b4 <HAL_RCC_OscConfig+0x298>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a40      	ldr	r2, [pc, #256]	; (80028b4 <HAL_RCC_OscConfig+0x298>)
 80027b4:	f043 0308 	orr.w	r3, r3, #8
 80027b8:	6013      	str	r3, [r2, #0]
 80027ba:	4b3e      	ldr	r3, [pc, #248]	; (80028b4 <HAL_RCC_OscConfig+0x298>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	493b      	ldr	r1, [pc, #236]	; (80028b4 <HAL_RCC_OscConfig+0x298>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027cc:	4b39      	ldr	r3, [pc, #228]	; (80028b4 <HAL_RCC_OscConfig+0x298>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	69db      	ldr	r3, [r3, #28]
 80027d8:	021b      	lsls	r3, r3, #8
 80027da:	4936      	ldr	r1, [pc, #216]	; (80028b4 <HAL_RCC_OscConfig+0x298>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	604b      	str	r3, [r1, #4]
 80027e0:	e01a      	b.n	8002818 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027e2:	4b34      	ldr	r3, [pc, #208]	; (80028b4 <HAL_RCC_OscConfig+0x298>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a33      	ldr	r2, [pc, #204]	; (80028b4 <HAL_RCC_OscConfig+0x298>)
 80027e8:	f023 0301 	bic.w	r3, r3, #1
 80027ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027ee:	f7fe fbff 	bl	8000ff0 <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027f6:	f7fe fbfb 	bl	8000ff0 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e2e7      	b.n	8002dd8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002808:	4b2a      	ldr	r3, [pc, #168]	; (80028b4 <HAL_RCC_OscConfig+0x298>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1f0      	bne.n	80027f6 <HAL_RCC_OscConfig+0x1da>
 8002814:	e000      	b.n	8002818 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002816:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b00      	cmp	r3, #0
 8002822:	d074      	beq.n	800290e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	2b08      	cmp	r3, #8
 8002828:	d005      	beq.n	8002836 <HAL_RCC_OscConfig+0x21a>
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	2b0c      	cmp	r3, #12
 800282e:	d10e      	bne.n	800284e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	2b03      	cmp	r3, #3
 8002834:	d10b      	bne.n	800284e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002836:	4b1f      	ldr	r3, [pc, #124]	; (80028b4 <HAL_RCC_OscConfig+0x298>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d064      	beq.n	800290c <HAL_RCC_OscConfig+0x2f0>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d160      	bne.n	800290c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e2c4      	b.n	8002dd8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002856:	d106      	bne.n	8002866 <HAL_RCC_OscConfig+0x24a>
 8002858:	4b16      	ldr	r3, [pc, #88]	; (80028b4 <HAL_RCC_OscConfig+0x298>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a15      	ldr	r2, [pc, #84]	; (80028b4 <HAL_RCC_OscConfig+0x298>)
 800285e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002862:	6013      	str	r3, [r2, #0]
 8002864:	e01d      	b.n	80028a2 <HAL_RCC_OscConfig+0x286>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800286e:	d10c      	bne.n	800288a <HAL_RCC_OscConfig+0x26e>
 8002870:	4b10      	ldr	r3, [pc, #64]	; (80028b4 <HAL_RCC_OscConfig+0x298>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a0f      	ldr	r2, [pc, #60]	; (80028b4 <HAL_RCC_OscConfig+0x298>)
 8002876:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800287a:	6013      	str	r3, [r2, #0]
 800287c:	4b0d      	ldr	r3, [pc, #52]	; (80028b4 <HAL_RCC_OscConfig+0x298>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a0c      	ldr	r2, [pc, #48]	; (80028b4 <HAL_RCC_OscConfig+0x298>)
 8002882:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002886:	6013      	str	r3, [r2, #0]
 8002888:	e00b      	b.n	80028a2 <HAL_RCC_OscConfig+0x286>
 800288a:	4b0a      	ldr	r3, [pc, #40]	; (80028b4 <HAL_RCC_OscConfig+0x298>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a09      	ldr	r2, [pc, #36]	; (80028b4 <HAL_RCC_OscConfig+0x298>)
 8002890:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002894:	6013      	str	r3, [r2, #0]
 8002896:	4b07      	ldr	r3, [pc, #28]	; (80028b4 <HAL_RCC_OscConfig+0x298>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a06      	ldr	r2, [pc, #24]	; (80028b4 <HAL_RCC_OscConfig+0x298>)
 800289c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028a0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d01c      	beq.n	80028e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028aa:	f7fe fba1 	bl	8000ff0 <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028b0:	e011      	b.n	80028d6 <HAL_RCC_OscConfig+0x2ba>
 80028b2:	bf00      	nop
 80028b4:	40021000 	.word	0x40021000
 80028b8:	08006228 	.word	0x08006228
 80028bc:	20000000 	.word	0x20000000
 80028c0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028c4:	f7fe fb94 	bl	8000ff0 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b64      	cmp	r3, #100	; 0x64
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e280      	b.n	8002dd8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028d6:	4baf      	ldr	r3, [pc, #700]	; (8002b94 <HAL_RCC_OscConfig+0x578>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0f0      	beq.n	80028c4 <HAL_RCC_OscConfig+0x2a8>
 80028e2:	e014      	b.n	800290e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e4:	f7fe fb84 	bl	8000ff0 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028ec:	f7fe fb80 	bl	8000ff0 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b64      	cmp	r3, #100	; 0x64
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e26c      	b.n	8002dd8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028fe:	4ba5      	ldr	r3, [pc, #660]	; (8002b94 <HAL_RCC_OscConfig+0x578>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f0      	bne.n	80028ec <HAL_RCC_OscConfig+0x2d0>
 800290a:	e000      	b.n	800290e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800290c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d060      	beq.n	80029dc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	2b04      	cmp	r3, #4
 800291e:	d005      	beq.n	800292c <HAL_RCC_OscConfig+0x310>
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	2b0c      	cmp	r3, #12
 8002924:	d119      	bne.n	800295a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	2b02      	cmp	r3, #2
 800292a:	d116      	bne.n	800295a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800292c:	4b99      	ldr	r3, [pc, #612]	; (8002b94 <HAL_RCC_OscConfig+0x578>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002934:	2b00      	cmp	r3, #0
 8002936:	d005      	beq.n	8002944 <HAL_RCC_OscConfig+0x328>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e249      	b.n	8002dd8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002944:	4b93      	ldr	r3, [pc, #588]	; (8002b94 <HAL_RCC_OscConfig+0x578>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	061b      	lsls	r3, r3, #24
 8002952:	4990      	ldr	r1, [pc, #576]	; (8002b94 <HAL_RCC_OscConfig+0x578>)
 8002954:	4313      	orrs	r3, r2
 8002956:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002958:	e040      	b.n	80029dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d023      	beq.n	80029aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002962:	4b8c      	ldr	r3, [pc, #560]	; (8002b94 <HAL_RCC_OscConfig+0x578>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a8b      	ldr	r2, [pc, #556]	; (8002b94 <HAL_RCC_OscConfig+0x578>)
 8002968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800296c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296e:	f7fe fb3f 	bl	8000ff0 <HAL_GetTick>
 8002972:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002974:	e008      	b.n	8002988 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002976:	f7fe fb3b 	bl	8000ff0 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e227      	b.n	8002dd8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002988:	4b82      	ldr	r3, [pc, #520]	; (8002b94 <HAL_RCC_OscConfig+0x578>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0f0      	beq.n	8002976 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002994:	4b7f      	ldr	r3, [pc, #508]	; (8002b94 <HAL_RCC_OscConfig+0x578>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	061b      	lsls	r3, r3, #24
 80029a2:	497c      	ldr	r1, [pc, #496]	; (8002b94 <HAL_RCC_OscConfig+0x578>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	604b      	str	r3, [r1, #4]
 80029a8:	e018      	b.n	80029dc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029aa:	4b7a      	ldr	r3, [pc, #488]	; (8002b94 <HAL_RCC_OscConfig+0x578>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a79      	ldr	r2, [pc, #484]	; (8002b94 <HAL_RCC_OscConfig+0x578>)
 80029b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b6:	f7fe fb1b 	bl	8000ff0 <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029be:	f7fe fb17 	bl	8000ff0 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e203      	b.n	8002dd8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029d0:	4b70      	ldr	r3, [pc, #448]	; (8002b94 <HAL_RCC_OscConfig+0x578>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1f0      	bne.n	80029be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0308 	and.w	r3, r3, #8
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d03c      	beq.n	8002a62 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	695b      	ldr	r3, [r3, #20]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d01c      	beq.n	8002a2a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029f0:	4b68      	ldr	r3, [pc, #416]	; (8002b94 <HAL_RCC_OscConfig+0x578>)
 80029f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029f6:	4a67      	ldr	r2, [pc, #412]	; (8002b94 <HAL_RCC_OscConfig+0x578>)
 80029f8:	f043 0301 	orr.w	r3, r3, #1
 80029fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a00:	f7fe faf6 	bl	8000ff0 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a08:	f7fe faf2 	bl	8000ff0 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e1de      	b.n	8002dd8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a1a:	4b5e      	ldr	r3, [pc, #376]	; (8002b94 <HAL_RCC_OscConfig+0x578>)
 8002a1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0ef      	beq.n	8002a08 <HAL_RCC_OscConfig+0x3ec>
 8002a28:	e01b      	b.n	8002a62 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a2a:	4b5a      	ldr	r3, [pc, #360]	; (8002b94 <HAL_RCC_OscConfig+0x578>)
 8002a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a30:	4a58      	ldr	r2, [pc, #352]	; (8002b94 <HAL_RCC_OscConfig+0x578>)
 8002a32:	f023 0301 	bic.w	r3, r3, #1
 8002a36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a3a:	f7fe fad9 	bl	8000ff0 <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a40:	e008      	b.n	8002a54 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a42:	f7fe fad5 	bl	8000ff0 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e1c1      	b.n	8002dd8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a54:	4b4f      	ldr	r3, [pc, #316]	; (8002b94 <HAL_RCC_OscConfig+0x578>)
 8002a56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1ef      	bne.n	8002a42 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0304 	and.w	r3, r3, #4
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 80a6 	beq.w	8002bbc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a70:	2300      	movs	r3, #0
 8002a72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a74:	4b47      	ldr	r3, [pc, #284]	; (8002b94 <HAL_RCC_OscConfig+0x578>)
 8002a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d10d      	bne.n	8002a9c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a80:	4b44      	ldr	r3, [pc, #272]	; (8002b94 <HAL_RCC_OscConfig+0x578>)
 8002a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a84:	4a43      	ldr	r2, [pc, #268]	; (8002b94 <HAL_RCC_OscConfig+0x578>)
 8002a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a8a:	6593      	str	r3, [r2, #88]	; 0x58
 8002a8c:	4b41      	ldr	r3, [pc, #260]	; (8002b94 <HAL_RCC_OscConfig+0x578>)
 8002a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a94:	60bb      	str	r3, [r7, #8]
 8002a96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a9c:	4b3e      	ldr	r3, [pc, #248]	; (8002b98 <HAL_RCC_OscConfig+0x57c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d118      	bne.n	8002ada <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002aa8:	4b3b      	ldr	r3, [pc, #236]	; (8002b98 <HAL_RCC_OscConfig+0x57c>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a3a      	ldr	r2, [pc, #232]	; (8002b98 <HAL_RCC_OscConfig+0x57c>)
 8002aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ab4:	f7fe fa9c 	bl	8000ff0 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002abc:	f7fe fa98 	bl	8000ff0 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e184      	b.n	8002dd8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ace:	4b32      	ldr	r3, [pc, #200]	; (8002b98 <HAL_RCC_OscConfig+0x57c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0f0      	beq.n	8002abc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d108      	bne.n	8002af4 <HAL_RCC_OscConfig+0x4d8>
 8002ae2:	4b2c      	ldr	r3, [pc, #176]	; (8002b94 <HAL_RCC_OscConfig+0x578>)
 8002ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae8:	4a2a      	ldr	r2, [pc, #168]	; (8002b94 <HAL_RCC_OscConfig+0x578>)
 8002aea:	f043 0301 	orr.w	r3, r3, #1
 8002aee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002af2:	e024      	b.n	8002b3e <HAL_RCC_OscConfig+0x522>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	2b05      	cmp	r3, #5
 8002afa:	d110      	bne.n	8002b1e <HAL_RCC_OscConfig+0x502>
 8002afc:	4b25      	ldr	r3, [pc, #148]	; (8002b94 <HAL_RCC_OscConfig+0x578>)
 8002afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b02:	4a24      	ldr	r2, [pc, #144]	; (8002b94 <HAL_RCC_OscConfig+0x578>)
 8002b04:	f043 0304 	orr.w	r3, r3, #4
 8002b08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b0c:	4b21      	ldr	r3, [pc, #132]	; (8002b94 <HAL_RCC_OscConfig+0x578>)
 8002b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b12:	4a20      	ldr	r2, [pc, #128]	; (8002b94 <HAL_RCC_OscConfig+0x578>)
 8002b14:	f043 0301 	orr.w	r3, r3, #1
 8002b18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b1c:	e00f      	b.n	8002b3e <HAL_RCC_OscConfig+0x522>
 8002b1e:	4b1d      	ldr	r3, [pc, #116]	; (8002b94 <HAL_RCC_OscConfig+0x578>)
 8002b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b24:	4a1b      	ldr	r2, [pc, #108]	; (8002b94 <HAL_RCC_OscConfig+0x578>)
 8002b26:	f023 0301 	bic.w	r3, r3, #1
 8002b2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b2e:	4b19      	ldr	r3, [pc, #100]	; (8002b94 <HAL_RCC_OscConfig+0x578>)
 8002b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b34:	4a17      	ldr	r2, [pc, #92]	; (8002b94 <HAL_RCC_OscConfig+0x578>)
 8002b36:	f023 0304 	bic.w	r3, r3, #4
 8002b3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d016      	beq.n	8002b74 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b46:	f7fe fa53 	bl	8000ff0 <HAL_GetTick>
 8002b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b4c:	e00a      	b.n	8002b64 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b4e:	f7fe fa4f 	bl	8000ff0 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e139      	b.n	8002dd8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b64:	4b0b      	ldr	r3, [pc, #44]	; (8002b94 <HAL_RCC_OscConfig+0x578>)
 8002b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0ed      	beq.n	8002b4e <HAL_RCC_OscConfig+0x532>
 8002b72:	e01a      	b.n	8002baa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b74:	f7fe fa3c 	bl	8000ff0 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b7a:	e00f      	b.n	8002b9c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b7c:	f7fe fa38 	bl	8000ff0 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d906      	bls.n	8002b9c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e122      	b.n	8002dd8 <HAL_RCC_OscConfig+0x7bc>
 8002b92:	bf00      	nop
 8002b94:	40021000 	.word	0x40021000
 8002b98:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b9c:	4b90      	ldr	r3, [pc, #576]	; (8002de0 <HAL_RCC_OscConfig+0x7c4>)
 8002b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1e8      	bne.n	8002b7c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002baa:	7ffb      	ldrb	r3, [r7, #31]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d105      	bne.n	8002bbc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bb0:	4b8b      	ldr	r3, [pc, #556]	; (8002de0 <HAL_RCC_OscConfig+0x7c4>)
 8002bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb4:	4a8a      	ldr	r2, [pc, #552]	; (8002de0 <HAL_RCC_OscConfig+0x7c4>)
 8002bb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bba:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 8108 	beq.w	8002dd6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	f040 80d0 	bne.w	8002d70 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002bd0:	4b83      	ldr	r3, [pc, #524]	; (8002de0 <HAL_RCC_OscConfig+0x7c4>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	f003 0203 	and.w	r2, r3, #3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d130      	bne.n	8002c46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d127      	bne.n	8002c46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c00:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d11f      	bne.n	8002c46 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c10:	2a07      	cmp	r2, #7
 8002c12:	bf14      	ite	ne
 8002c14:	2201      	movne	r2, #1
 8002c16:	2200      	moveq	r2, #0
 8002c18:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d113      	bne.n	8002c46 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c28:	085b      	lsrs	r3, r3, #1
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d109      	bne.n	8002c46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3c:	085b      	lsrs	r3, r3, #1
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d06e      	beq.n	8002d24 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	2b0c      	cmp	r3, #12
 8002c4a:	d069      	beq.n	8002d20 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c4c:	4b64      	ldr	r3, [pc, #400]	; (8002de0 <HAL_RCC_OscConfig+0x7c4>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d105      	bne.n	8002c64 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c58:	4b61      	ldr	r3, [pc, #388]	; (8002de0 <HAL_RCC_OscConfig+0x7c4>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e0b7      	b.n	8002dd8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c68:	4b5d      	ldr	r3, [pc, #372]	; (8002de0 <HAL_RCC_OscConfig+0x7c4>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a5c      	ldr	r2, [pc, #368]	; (8002de0 <HAL_RCC_OscConfig+0x7c4>)
 8002c6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c72:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c74:	f7fe f9bc 	bl	8000ff0 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c7c:	f7fe f9b8 	bl	8000ff0 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e0a4      	b.n	8002dd8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c8e:	4b54      	ldr	r3, [pc, #336]	; (8002de0 <HAL_RCC_OscConfig+0x7c4>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1f0      	bne.n	8002c7c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c9a:	4b51      	ldr	r3, [pc, #324]	; (8002de0 <HAL_RCC_OscConfig+0x7c4>)
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	4b51      	ldr	r3, [pc, #324]	; (8002de4 <HAL_RCC_OscConfig+0x7c8>)
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002caa:	3a01      	subs	r2, #1
 8002cac:	0112      	lsls	r2, r2, #4
 8002cae:	4311      	orrs	r1, r2
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002cb4:	0212      	lsls	r2, r2, #8
 8002cb6:	4311      	orrs	r1, r2
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002cbc:	0852      	lsrs	r2, r2, #1
 8002cbe:	3a01      	subs	r2, #1
 8002cc0:	0552      	lsls	r2, r2, #21
 8002cc2:	4311      	orrs	r1, r2
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002cc8:	0852      	lsrs	r2, r2, #1
 8002cca:	3a01      	subs	r2, #1
 8002ccc:	0652      	lsls	r2, r2, #25
 8002cce:	4311      	orrs	r1, r2
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002cd4:	0912      	lsrs	r2, r2, #4
 8002cd6:	0452      	lsls	r2, r2, #17
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	4941      	ldr	r1, [pc, #260]	; (8002de0 <HAL_RCC_OscConfig+0x7c4>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ce0:	4b3f      	ldr	r3, [pc, #252]	; (8002de0 <HAL_RCC_OscConfig+0x7c4>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a3e      	ldr	r2, [pc, #248]	; (8002de0 <HAL_RCC_OscConfig+0x7c4>)
 8002ce6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cec:	4b3c      	ldr	r3, [pc, #240]	; (8002de0 <HAL_RCC_OscConfig+0x7c4>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	4a3b      	ldr	r2, [pc, #236]	; (8002de0 <HAL_RCC_OscConfig+0x7c4>)
 8002cf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cf6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cf8:	f7fe f97a 	bl	8000ff0 <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d00:	f7fe f976 	bl	8000ff0 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e062      	b.n	8002dd8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d12:	4b33      	ldr	r3, [pc, #204]	; (8002de0 <HAL_RCC_OscConfig+0x7c4>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d0f0      	beq.n	8002d00 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d1e:	e05a      	b.n	8002dd6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e059      	b.n	8002dd8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d24:	4b2e      	ldr	r3, [pc, #184]	; (8002de0 <HAL_RCC_OscConfig+0x7c4>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d152      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d30:	4b2b      	ldr	r3, [pc, #172]	; (8002de0 <HAL_RCC_OscConfig+0x7c4>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a2a      	ldr	r2, [pc, #168]	; (8002de0 <HAL_RCC_OscConfig+0x7c4>)
 8002d36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d3a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d3c:	4b28      	ldr	r3, [pc, #160]	; (8002de0 <HAL_RCC_OscConfig+0x7c4>)
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	4a27      	ldr	r2, [pc, #156]	; (8002de0 <HAL_RCC_OscConfig+0x7c4>)
 8002d42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d46:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d48:	f7fe f952 	bl	8000ff0 <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d50:	f7fe f94e 	bl	8000ff0 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e03a      	b.n	8002dd8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d62:	4b1f      	ldr	r3, [pc, #124]	; (8002de0 <HAL_RCC_OscConfig+0x7c4>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d0f0      	beq.n	8002d50 <HAL_RCC_OscConfig+0x734>
 8002d6e:	e032      	b.n	8002dd6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	2b0c      	cmp	r3, #12
 8002d74:	d02d      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d76:	4b1a      	ldr	r3, [pc, #104]	; (8002de0 <HAL_RCC_OscConfig+0x7c4>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a19      	ldr	r2, [pc, #100]	; (8002de0 <HAL_RCC_OscConfig+0x7c4>)
 8002d7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d80:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002d82:	4b17      	ldr	r3, [pc, #92]	; (8002de0 <HAL_RCC_OscConfig+0x7c4>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d105      	bne.n	8002d9a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002d8e:	4b14      	ldr	r3, [pc, #80]	; (8002de0 <HAL_RCC_OscConfig+0x7c4>)
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	4a13      	ldr	r2, [pc, #76]	; (8002de0 <HAL_RCC_OscConfig+0x7c4>)
 8002d94:	f023 0303 	bic.w	r3, r3, #3
 8002d98:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d9a:	4b11      	ldr	r3, [pc, #68]	; (8002de0 <HAL_RCC_OscConfig+0x7c4>)
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	4a10      	ldr	r2, [pc, #64]	; (8002de0 <HAL_RCC_OscConfig+0x7c4>)
 8002da0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002da4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002da8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002daa:	f7fe f921 	bl	8000ff0 <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db2:	f7fe f91d 	bl	8000ff0 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e009      	b.n	8002dd8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dc4:	4b06      	ldr	r3, [pc, #24]	; (8002de0 <HAL_RCC_OscConfig+0x7c4>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1f0      	bne.n	8002db2 <HAL_RCC_OscConfig+0x796>
 8002dd0:	e001      	b.n	8002dd6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3720      	adds	r7, #32
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40021000 	.word	0x40021000
 8002de4:	f99d808c 	.word	0xf99d808c

08002de8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e0c8      	b.n	8002f8e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dfc:	4b66      	ldr	r3, [pc, #408]	; (8002f98 <HAL_RCC_ClockConfig+0x1b0>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0307 	and.w	r3, r3, #7
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d910      	bls.n	8002e2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e0a:	4b63      	ldr	r3, [pc, #396]	; (8002f98 <HAL_RCC_ClockConfig+0x1b0>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f023 0207 	bic.w	r2, r3, #7
 8002e12:	4961      	ldr	r1, [pc, #388]	; (8002f98 <HAL_RCC_ClockConfig+0x1b0>)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e1a:	4b5f      	ldr	r3, [pc, #380]	; (8002f98 <HAL_RCC_ClockConfig+0x1b0>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d001      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e0b0      	b.n	8002f8e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d04c      	beq.n	8002ed2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	2b03      	cmp	r3, #3
 8002e3e:	d107      	bne.n	8002e50 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e40:	4b56      	ldr	r3, [pc, #344]	; (8002f9c <HAL_RCC_ClockConfig+0x1b4>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d121      	bne.n	8002e90 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e09e      	b.n	8002f8e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d107      	bne.n	8002e68 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e58:	4b50      	ldr	r3, [pc, #320]	; (8002f9c <HAL_RCC_ClockConfig+0x1b4>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d115      	bne.n	8002e90 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e092      	b.n	8002f8e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d107      	bne.n	8002e80 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e70:	4b4a      	ldr	r3, [pc, #296]	; (8002f9c <HAL_RCC_ClockConfig+0x1b4>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d109      	bne.n	8002e90 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e086      	b.n	8002f8e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e80:	4b46      	ldr	r3, [pc, #280]	; (8002f9c <HAL_RCC_ClockConfig+0x1b4>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d101      	bne.n	8002e90 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e07e      	b.n	8002f8e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e90:	4b42      	ldr	r3, [pc, #264]	; (8002f9c <HAL_RCC_ClockConfig+0x1b4>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f023 0203 	bic.w	r2, r3, #3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	493f      	ldr	r1, [pc, #252]	; (8002f9c <HAL_RCC_ClockConfig+0x1b4>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ea2:	f7fe f8a5 	bl	8000ff0 <HAL_GetTick>
 8002ea6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea8:	e00a      	b.n	8002ec0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eaa:	f7fe f8a1 	bl	8000ff0 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e066      	b.n	8002f8e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec0:	4b36      	ldr	r3, [pc, #216]	; (8002f9c <HAL_RCC_ClockConfig+0x1b4>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 020c 	and.w	r2, r3, #12
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d1eb      	bne.n	8002eaa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d008      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ede:	4b2f      	ldr	r3, [pc, #188]	; (8002f9c <HAL_RCC_ClockConfig+0x1b4>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	492c      	ldr	r1, [pc, #176]	; (8002f9c <HAL_RCC_ClockConfig+0x1b4>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ef0:	4b29      	ldr	r3, [pc, #164]	; (8002f98 <HAL_RCC_ClockConfig+0x1b0>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0307 	and.w	r3, r3, #7
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d210      	bcs.n	8002f20 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002efe:	4b26      	ldr	r3, [pc, #152]	; (8002f98 <HAL_RCC_ClockConfig+0x1b0>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f023 0207 	bic.w	r2, r3, #7
 8002f06:	4924      	ldr	r1, [pc, #144]	; (8002f98 <HAL_RCC_ClockConfig+0x1b0>)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f0e:	4b22      	ldr	r3, [pc, #136]	; (8002f98 <HAL_RCC_ClockConfig+0x1b0>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0307 	and.w	r3, r3, #7
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d001      	beq.n	8002f20 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e036      	b.n	8002f8e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0304 	and.w	r3, r3, #4
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d008      	beq.n	8002f3e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f2c:	4b1b      	ldr	r3, [pc, #108]	; (8002f9c <HAL_RCC_ClockConfig+0x1b4>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	4918      	ldr	r1, [pc, #96]	; (8002f9c <HAL_RCC_ClockConfig+0x1b4>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0308 	and.w	r3, r3, #8
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d009      	beq.n	8002f5e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f4a:	4b14      	ldr	r3, [pc, #80]	; (8002f9c <HAL_RCC_ClockConfig+0x1b4>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	4910      	ldr	r1, [pc, #64]	; (8002f9c <HAL_RCC_ClockConfig+0x1b4>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f5e:	f000 f825 	bl	8002fac <HAL_RCC_GetSysClockFreq>
 8002f62:	4602      	mov	r2, r0
 8002f64:	4b0d      	ldr	r3, [pc, #52]	; (8002f9c <HAL_RCC_ClockConfig+0x1b4>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	091b      	lsrs	r3, r3, #4
 8002f6a:	f003 030f 	and.w	r3, r3, #15
 8002f6e:	490c      	ldr	r1, [pc, #48]	; (8002fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f70:	5ccb      	ldrb	r3, [r1, r3]
 8002f72:	f003 031f 	and.w	r3, r3, #31
 8002f76:	fa22 f303 	lsr.w	r3, r2, r3
 8002f7a:	4a0a      	ldr	r2, [pc, #40]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f7e:	4b0a      	ldr	r3, [pc, #40]	; (8002fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7fd ffe4 	bl	8000f50 <HAL_InitTick>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f8c:	7afb      	ldrb	r3, [r7, #11]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	40022000 	.word	0x40022000
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	08006228 	.word	0x08006228
 8002fa4:	20000000 	.word	0x20000000
 8002fa8:	20000004 	.word	0x20000004

08002fac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b089      	sub	sp, #36	; 0x24
 8002fb0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	61fb      	str	r3, [r7, #28]
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fba:	4b3e      	ldr	r3, [pc, #248]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 030c 	and.w	r3, r3, #12
 8002fc2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fc4:	4b3b      	ldr	r3, [pc, #236]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	f003 0303 	and.w	r3, r3, #3
 8002fcc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d005      	beq.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x34>
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	2b0c      	cmp	r3, #12
 8002fd8:	d121      	bne.n	800301e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d11e      	bne.n	800301e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002fe0:	4b34      	ldr	r3, [pc, #208]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0308 	and.w	r3, r3, #8
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d107      	bne.n	8002ffc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002fec:	4b31      	ldr	r3, [pc, #196]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ff2:	0a1b      	lsrs	r3, r3, #8
 8002ff4:	f003 030f 	and.w	r3, r3, #15
 8002ff8:	61fb      	str	r3, [r7, #28]
 8002ffa:	e005      	b.n	8003008 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ffc:	4b2d      	ldr	r3, [pc, #180]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	091b      	lsrs	r3, r3, #4
 8003002:	f003 030f 	and.w	r3, r3, #15
 8003006:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003008:	4a2b      	ldr	r2, [pc, #172]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003010:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d10d      	bne.n	8003034 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800301c:	e00a      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	2b04      	cmp	r3, #4
 8003022:	d102      	bne.n	800302a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003024:	4b25      	ldr	r3, [pc, #148]	; (80030bc <HAL_RCC_GetSysClockFreq+0x110>)
 8003026:	61bb      	str	r3, [r7, #24]
 8003028:	e004      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	2b08      	cmp	r3, #8
 800302e:	d101      	bne.n	8003034 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003030:	4b23      	ldr	r3, [pc, #140]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003032:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	2b0c      	cmp	r3, #12
 8003038:	d134      	bne.n	80030a4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800303a:	4b1e      	ldr	r3, [pc, #120]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	f003 0303 	and.w	r3, r3, #3
 8003042:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	2b02      	cmp	r3, #2
 8003048:	d003      	beq.n	8003052 <HAL_RCC_GetSysClockFreq+0xa6>
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	2b03      	cmp	r3, #3
 800304e:	d003      	beq.n	8003058 <HAL_RCC_GetSysClockFreq+0xac>
 8003050:	e005      	b.n	800305e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003052:	4b1a      	ldr	r3, [pc, #104]	; (80030bc <HAL_RCC_GetSysClockFreq+0x110>)
 8003054:	617b      	str	r3, [r7, #20]
      break;
 8003056:	e005      	b.n	8003064 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003058:	4b19      	ldr	r3, [pc, #100]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x114>)
 800305a:	617b      	str	r3, [r7, #20]
      break;
 800305c:	e002      	b.n	8003064 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	617b      	str	r3, [r7, #20]
      break;
 8003062:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003064:	4b13      	ldr	r3, [pc, #76]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	091b      	lsrs	r3, r3, #4
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	3301      	adds	r3, #1
 8003070:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003072:	4b10      	ldr	r3, [pc, #64]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	0a1b      	lsrs	r3, r3, #8
 8003078:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	fb02 f203 	mul.w	r2, r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	fbb2 f3f3 	udiv	r3, r2, r3
 8003088:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800308a:	4b0a      	ldr	r3, [pc, #40]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	0e5b      	lsrs	r3, r3, #25
 8003090:	f003 0303 	and.w	r3, r3, #3
 8003094:	3301      	adds	r3, #1
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80030a4:	69bb      	ldr	r3, [r7, #24]
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3724      	adds	r7, #36	; 0x24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	40021000 	.word	0x40021000
 80030b8:	08006240 	.word	0x08006240
 80030bc:	00f42400 	.word	0x00f42400
 80030c0:	007a1200 	.word	0x007a1200

080030c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030c8:	4b03      	ldr	r3, [pc, #12]	; (80030d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80030ca:	681b      	ldr	r3, [r3, #0]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	20000000 	.word	0x20000000

080030dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80030e0:	f7ff fff0 	bl	80030c4 <HAL_RCC_GetHCLKFreq>
 80030e4:	4602      	mov	r2, r0
 80030e6:	4b06      	ldr	r3, [pc, #24]	; (8003100 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	0a1b      	lsrs	r3, r3, #8
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	4904      	ldr	r1, [pc, #16]	; (8003104 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030f2:	5ccb      	ldrb	r3, [r1, r3]
 80030f4:	f003 031f 	and.w	r3, r3, #31
 80030f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40021000 	.word	0x40021000
 8003104:	08006238 	.word	0x08006238

08003108 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800310c:	f7ff ffda 	bl	80030c4 <HAL_RCC_GetHCLKFreq>
 8003110:	4602      	mov	r2, r0
 8003112:	4b06      	ldr	r3, [pc, #24]	; (800312c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	0adb      	lsrs	r3, r3, #11
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	4904      	ldr	r1, [pc, #16]	; (8003130 <HAL_RCC_GetPCLK2Freq+0x28>)
 800311e:	5ccb      	ldrb	r3, [r1, r3]
 8003120:	f003 031f 	and.w	r3, r3, #31
 8003124:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003128:	4618      	mov	r0, r3
 800312a:	bd80      	pop	{r7, pc}
 800312c:	40021000 	.word	0x40021000
 8003130:	08006238 	.word	0x08006238

08003134 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800313c:	2300      	movs	r3, #0
 800313e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003140:	4b2a      	ldr	r3, [pc, #168]	; (80031ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d003      	beq.n	8003154 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800314c:	f7ff fa02 	bl	8002554 <HAL_PWREx_GetVoltageRange>
 8003150:	6178      	str	r0, [r7, #20]
 8003152:	e014      	b.n	800317e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003154:	4b25      	ldr	r3, [pc, #148]	; (80031ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003158:	4a24      	ldr	r2, [pc, #144]	; (80031ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800315a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800315e:	6593      	str	r3, [r2, #88]	; 0x58
 8003160:	4b22      	ldr	r3, [pc, #136]	; (80031ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003168:	60fb      	str	r3, [r7, #12]
 800316a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800316c:	f7ff f9f2 	bl	8002554 <HAL_PWREx_GetVoltageRange>
 8003170:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003172:	4b1e      	ldr	r3, [pc, #120]	; (80031ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003176:	4a1d      	ldr	r2, [pc, #116]	; (80031ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003178:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800317c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003184:	d10b      	bne.n	800319e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b80      	cmp	r3, #128	; 0x80
 800318a:	d919      	bls.n	80031c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2ba0      	cmp	r3, #160	; 0xa0
 8003190:	d902      	bls.n	8003198 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003192:	2302      	movs	r3, #2
 8003194:	613b      	str	r3, [r7, #16]
 8003196:	e013      	b.n	80031c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003198:	2301      	movs	r3, #1
 800319a:	613b      	str	r3, [r7, #16]
 800319c:	e010      	b.n	80031c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b80      	cmp	r3, #128	; 0x80
 80031a2:	d902      	bls.n	80031aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80031a4:	2303      	movs	r3, #3
 80031a6:	613b      	str	r3, [r7, #16]
 80031a8:	e00a      	b.n	80031c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2b80      	cmp	r3, #128	; 0x80
 80031ae:	d102      	bne.n	80031b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031b0:	2302      	movs	r3, #2
 80031b2:	613b      	str	r3, [r7, #16]
 80031b4:	e004      	b.n	80031c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2b70      	cmp	r3, #112	; 0x70
 80031ba:	d101      	bne.n	80031c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031bc:	2301      	movs	r3, #1
 80031be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031c0:	4b0b      	ldr	r3, [pc, #44]	; (80031f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f023 0207 	bic.w	r2, r3, #7
 80031c8:	4909      	ldr	r1, [pc, #36]	; (80031f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031d0:	4b07      	ldr	r3, [pc, #28]	; (80031f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0307 	and.w	r3, r3, #7
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d001      	beq.n	80031e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e000      	b.n	80031e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3718      	adds	r7, #24
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40021000 	.word	0x40021000
 80031f0:	40022000 	.word	0x40022000

080031f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031fc:	2300      	movs	r3, #0
 80031fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003200:	2300      	movs	r3, #0
 8003202:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800320c:	2b00      	cmp	r3, #0
 800320e:	d041      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003214:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003218:	d02a      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800321a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800321e:	d824      	bhi.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003220:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003224:	d008      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003226:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800322a:	d81e      	bhi.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00a      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003230:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003234:	d010      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003236:	e018      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003238:	4b86      	ldr	r3, [pc, #536]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	4a85      	ldr	r2, [pc, #532]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800323e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003242:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003244:	e015      	b.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	3304      	adds	r3, #4
 800324a:	2100      	movs	r1, #0
 800324c:	4618      	mov	r0, r3
 800324e:	f000 fabb 	bl	80037c8 <RCCEx_PLLSAI1_Config>
 8003252:	4603      	mov	r3, r0
 8003254:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003256:	e00c      	b.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3320      	adds	r3, #32
 800325c:	2100      	movs	r1, #0
 800325e:	4618      	mov	r0, r3
 8003260:	f000 fba6 	bl	80039b0 <RCCEx_PLLSAI2_Config>
 8003264:	4603      	mov	r3, r0
 8003266:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003268:	e003      	b.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	74fb      	strb	r3, [r7, #19]
      break;
 800326e:	e000      	b.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003270:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003272:	7cfb      	ldrb	r3, [r7, #19]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d10b      	bne.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003278:	4b76      	ldr	r3, [pc, #472]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800327a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003286:	4973      	ldr	r1, [pc, #460]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003288:	4313      	orrs	r3, r2
 800328a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800328e:	e001      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003290:	7cfb      	ldrb	r3, [r7, #19]
 8003292:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d041      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032a8:	d02a      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80032aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032ae:	d824      	bhi.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032b4:	d008      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80032b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032ba:	d81e      	bhi.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00a      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80032c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032c4:	d010      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032c6:	e018      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032c8:	4b62      	ldr	r3, [pc, #392]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	4a61      	ldr	r2, [pc, #388]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032d4:	e015      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	3304      	adds	r3, #4
 80032da:	2100      	movs	r1, #0
 80032dc:	4618      	mov	r0, r3
 80032de:	f000 fa73 	bl	80037c8 <RCCEx_PLLSAI1_Config>
 80032e2:	4603      	mov	r3, r0
 80032e4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032e6:	e00c      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	3320      	adds	r3, #32
 80032ec:	2100      	movs	r1, #0
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 fb5e 	bl	80039b0 <RCCEx_PLLSAI2_Config>
 80032f4:	4603      	mov	r3, r0
 80032f6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032f8:	e003      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	74fb      	strb	r3, [r7, #19]
      break;
 80032fe:	e000      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003300:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003302:	7cfb      	ldrb	r3, [r7, #19]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d10b      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003308:	4b52      	ldr	r3, [pc, #328]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800330a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800330e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003316:	494f      	ldr	r1, [pc, #316]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003318:	4313      	orrs	r3, r2
 800331a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800331e:	e001      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003320:	7cfb      	ldrb	r3, [r7, #19]
 8003322:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332c:	2b00      	cmp	r3, #0
 800332e:	f000 80a0 	beq.w	8003472 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003332:	2300      	movs	r3, #0
 8003334:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003336:	4b47      	ldr	r3, [pc, #284]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800333a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003342:	2301      	movs	r3, #1
 8003344:	e000      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003346:	2300      	movs	r3, #0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00d      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800334c:	4b41      	ldr	r3, [pc, #260]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800334e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003350:	4a40      	ldr	r2, [pc, #256]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003352:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003356:	6593      	str	r3, [r2, #88]	; 0x58
 8003358:	4b3e      	ldr	r3, [pc, #248]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800335a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003360:	60bb      	str	r3, [r7, #8]
 8003362:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003364:	2301      	movs	r3, #1
 8003366:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003368:	4b3b      	ldr	r3, [pc, #236]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a3a      	ldr	r2, [pc, #232]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800336e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003372:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003374:	f7fd fe3c 	bl	8000ff0 <HAL_GetTick>
 8003378:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800337a:	e009      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800337c:	f7fd fe38 	bl	8000ff0 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d902      	bls.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	74fb      	strb	r3, [r7, #19]
        break;
 800338e:	e005      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003390:	4b31      	ldr	r3, [pc, #196]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0ef      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800339c:	7cfb      	ldrb	r3, [r7, #19]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d15c      	bne.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033a2:	4b2c      	ldr	r3, [pc, #176]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d01f      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d019      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033c0:	4b24      	ldr	r3, [pc, #144]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033cc:	4b21      	ldr	r3, [pc, #132]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d2:	4a20      	ldr	r2, [pc, #128]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033dc:	4b1d      	ldr	r3, [pc, #116]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e2:	4a1c      	ldr	r2, [pc, #112]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033ec:	4a19      	ldr	r2, [pc, #100]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d016      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fe:	f7fd fdf7 	bl	8000ff0 <HAL_GetTick>
 8003402:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003404:	e00b      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003406:	f7fd fdf3 	bl	8000ff0 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	f241 3288 	movw	r2, #5000	; 0x1388
 8003414:	4293      	cmp	r3, r2
 8003416:	d902      	bls.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	74fb      	strb	r3, [r7, #19]
            break;
 800341c:	e006      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800341e:	4b0d      	ldr	r3, [pc, #52]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d0ec      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800342c:	7cfb      	ldrb	r3, [r7, #19]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10c      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003432:	4b08      	ldr	r3, [pc, #32]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003438:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003442:	4904      	ldr	r1, [pc, #16]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003444:	4313      	orrs	r3, r2
 8003446:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800344a:	e009      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800344c:	7cfb      	ldrb	r3, [r7, #19]
 800344e:	74bb      	strb	r3, [r7, #18]
 8003450:	e006      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003452:	bf00      	nop
 8003454:	40021000 	.word	0x40021000
 8003458:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800345c:	7cfb      	ldrb	r3, [r7, #19]
 800345e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003460:	7c7b      	ldrb	r3, [r7, #17]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d105      	bne.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003466:	4b9e      	ldr	r3, [pc, #632]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346a:	4a9d      	ldr	r2, [pc, #628]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800346c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003470:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00a      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800347e:	4b98      	ldr	r3, [pc, #608]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003484:	f023 0203 	bic.w	r2, r3, #3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348c:	4994      	ldr	r1, [pc, #592]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348e:	4313      	orrs	r3, r2
 8003490:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00a      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034a0:	4b8f      	ldr	r3, [pc, #572]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a6:	f023 020c 	bic.w	r2, r3, #12
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ae:	498c      	ldr	r1, [pc, #560]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0304 	and.w	r3, r3, #4
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00a      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034c2:	4b87      	ldr	r3, [pc, #540]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d0:	4983      	ldr	r1, [pc, #524]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0308 	and.w	r3, r3, #8
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00a      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034e4:	4b7e      	ldr	r3, [pc, #504]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f2:	497b      	ldr	r1, [pc, #492]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0310 	and.w	r3, r3, #16
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00a      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003506:	4b76      	ldr	r3, [pc, #472]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003514:	4972      	ldr	r1, [pc, #456]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003516:	4313      	orrs	r3, r2
 8003518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0320 	and.w	r3, r3, #32
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00a      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003528:	4b6d      	ldr	r3, [pc, #436]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800352a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003536:	496a      	ldr	r1, [pc, #424]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003538:	4313      	orrs	r3, r2
 800353a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00a      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800354a:	4b65      	ldr	r3, [pc, #404]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800354c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003550:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003558:	4961      	ldr	r1, [pc, #388]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800355a:	4313      	orrs	r3, r2
 800355c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00a      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800356c:	4b5c      	ldr	r3, [pc, #368]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800356e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003572:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800357a:	4959      	ldr	r1, [pc, #356]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800357c:	4313      	orrs	r3, r2
 800357e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00a      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800358e:	4b54      	ldr	r3, [pc, #336]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003594:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800359c:	4950      	ldr	r1, [pc, #320]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00a      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035b0:	4b4b      	ldr	r3, [pc, #300]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035be:	4948      	ldr	r1, [pc, #288]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00a      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035d2:	4b43      	ldr	r3, [pc, #268]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e0:	493f      	ldr	r1, [pc, #252]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d028      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035f4:	4b3a      	ldr	r3, [pc, #232]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003602:	4937      	ldr	r1, [pc, #220]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003604:	4313      	orrs	r3, r2
 8003606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800360e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003612:	d106      	bne.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003614:	4b32      	ldr	r3, [pc, #200]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	4a31      	ldr	r2, [pc, #196]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800361e:	60d3      	str	r3, [r2, #12]
 8003620:	e011      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003626:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800362a:	d10c      	bne.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3304      	adds	r3, #4
 8003630:	2101      	movs	r1, #1
 8003632:	4618      	mov	r0, r3
 8003634:	f000 f8c8 	bl	80037c8 <RCCEx_PLLSAI1_Config>
 8003638:	4603      	mov	r3, r0
 800363a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800363c:	7cfb      	ldrb	r3, [r7, #19]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003642:	7cfb      	ldrb	r3, [r7, #19]
 8003644:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d028      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003652:	4b23      	ldr	r3, [pc, #140]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003658:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003660:	491f      	ldr	r1, [pc, #124]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003662:	4313      	orrs	r3, r2
 8003664:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003670:	d106      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003672:	4b1b      	ldr	r3, [pc, #108]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	4a1a      	ldr	r2, [pc, #104]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003678:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800367c:	60d3      	str	r3, [r2, #12]
 800367e:	e011      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003684:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003688:	d10c      	bne.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	3304      	adds	r3, #4
 800368e:	2101      	movs	r1, #1
 8003690:	4618      	mov	r0, r3
 8003692:	f000 f899 	bl	80037c8 <RCCEx_PLLSAI1_Config>
 8003696:	4603      	mov	r3, r0
 8003698:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800369a:	7cfb      	ldrb	r3, [r7, #19]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d001      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80036a0:	7cfb      	ldrb	r3, [r7, #19]
 80036a2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d02b      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036b0:	4b0b      	ldr	r3, [pc, #44]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036be:	4908      	ldr	r1, [pc, #32]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036ce:	d109      	bne.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036d0:	4b03      	ldr	r3, [pc, #12]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	4a02      	ldr	r2, [pc, #8]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036da:	60d3      	str	r3, [r2, #12]
 80036dc:	e014      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80036de:	bf00      	nop
 80036e0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036ec:	d10c      	bne.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	3304      	adds	r3, #4
 80036f2:	2101      	movs	r1, #1
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 f867 	bl	80037c8 <RCCEx_PLLSAI1_Config>
 80036fa:	4603      	mov	r3, r0
 80036fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036fe:	7cfb      	ldrb	r3, [r7, #19]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003704:	7cfb      	ldrb	r3, [r7, #19]
 8003706:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d02f      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003714:	4b2b      	ldr	r3, [pc, #172]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003722:	4928      	ldr	r1, [pc, #160]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003724:	4313      	orrs	r3, r2
 8003726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800372e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003732:	d10d      	bne.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3304      	adds	r3, #4
 8003738:	2102      	movs	r1, #2
 800373a:	4618      	mov	r0, r3
 800373c:	f000 f844 	bl	80037c8 <RCCEx_PLLSAI1_Config>
 8003740:	4603      	mov	r3, r0
 8003742:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003744:	7cfb      	ldrb	r3, [r7, #19]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d014      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800374a:	7cfb      	ldrb	r3, [r7, #19]
 800374c:	74bb      	strb	r3, [r7, #18]
 800374e:	e011      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003754:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003758:	d10c      	bne.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	3320      	adds	r3, #32
 800375e:	2102      	movs	r1, #2
 8003760:	4618      	mov	r0, r3
 8003762:	f000 f925 	bl	80039b0 <RCCEx_PLLSAI2_Config>
 8003766:	4603      	mov	r3, r0
 8003768:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800376a:	7cfb      	ldrb	r3, [r7, #19]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003770:	7cfb      	ldrb	r3, [r7, #19]
 8003772:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00a      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003780:	4b10      	ldr	r3, [pc, #64]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003786:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800378e:	490d      	ldr	r1, [pc, #52]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003790:	4313      	orrs	r3, r2
 8003792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00b      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037a2:	4b08      	ldr	r3, [pc, #32]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037b2:	4904      	ldr	r1, [pc, #16]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80037ba:	7cbb      	ldrb	r3, [r7, #18]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3718      	adds	r7, #24
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	40021000 	.word	0x40021000

080037c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037d2:	2300      	movs	r3, #0
 80037d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037d6:	4b75      	ldr	r3, [pc, #468]	; (80039ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	f003 0303 	and.w	r3, r3, #3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d018      	beq.n	8003814 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80037e2:	4b72      	ldr	r3, [pc, #456]	; (80039ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f003 0203 	and.w	r2, r3, #3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d10d      	bne.n	800380e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
       ||
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d009      	beq.n	800380e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80037fa:	4b6c      	ldr	r3, [pc, #432]	; (80039ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	091b      	lsrs	r3, r3, #4
 8003800:	f003 0307 	and.w	r3, r3, #7
 8003804:	1c5a      	adds	r2, r3, #1
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
       ||
 800380a:	429a      	cmp	r2, r3
 800380c:	d047      	beq.n	800389e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	73fb      	strb	r3, [r7, #15]
 8003812:	e044      	b.n	800389e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2b03      	cmp	r3, #3
 800381a:	d018      	beq.n	800384e <RCCEx_PLLSAI1_Config+0x86>
 800381c:	2b03      	cmp	r3, #3
 800381e:	d825      	bhi.n	800386c <RCCEx_PLLSAI1_Config+0xa4>
 8003820:	2b01      	cmp	r3, #1
 8003822:	d002      	beq.n	800382a <RCCEx_PLLSAI1_Config+0x62>
 8003824:	2b02      	cmp	r3, #2
 8003826:	d009      	beq.n	800383c <RCCEx_PLLSAI1_Config+0x74>
 8003828:	e020      	b.n	800386c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800382a:	4b60      	ldr	r3, [pc, #384]	; (80039ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d11d      	bne.n	8003872 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800383a:	e01a      	b.n	8003872 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800383c:	4b5b      	ldr	r3, [pc, #364]	; (80039ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003844:	2b00      	cmp	r3, #0
 8003846:	d116      	bne.n	8003876 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800384c:	e013      	b.n	8003876 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800384e:	4b57      	ldr	r3, [pc, #348]	; (80039ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10f      	bne.n	800387a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800385a:	4b54      	ldr	r3, [pc, #336]	; (80039ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d109      	bne.n	800387a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800386a:	e006      	b.n	800387a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	73fb      	strb	r3, [r7, #15]
      break;
 8003870:	e004      	b.n	800387c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003872:	bf00      	nop
 8003874:	e002      	b.n	800387c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003876:	bf00      	nop
 8003878:	e000      	b.n	800387c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800387a:	bf00      	nop
    }

    if(status == HAL_OK)
 800387c:	7bfb      	ldrb	r3, [r7, #15]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10d      	bne.n	800389e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003882:	4b4a      	ldr	r3, [pc, #296]	; (80039ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6819      	ldr	r1, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	3b01      	subs	r3, #1
 8003894:	011b      	lsls	r3, r3, #4
 8003896:	430b      	orrs	r3, r1
 8003898:	4944      	ldr	r1, [pc, #272]	; (80039ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800389a:	4313      	orrs	r3, r2
 800389c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800389e:	7bfb      	ldrb	r3, [r7, #15]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d17d      	bne.n	80039a0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80038a4:	4b41      	ldr	r3, [pc, #260]	; (80039ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a40      	ldr	r2, [pc, #256]	; (80039ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80038aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038b0:	f7fd fb9e 	bl	8000ff0 <HAL_GetTick>
 80038b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038b6:	e009      	b.n	80038cc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038b8:	f7fd fb9a 	bl	8000ff0 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d902      	bls.n	80038cc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	73fb      	strb	r3, [r7, #15]
        break;
 80038ca:	e005      	b.n	80038d8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038cc:	4b37      	ldr	r3, [pc, #220]	; (80039ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1ef      	bne.n	80038b8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038d8:	7bfb      	ldrb	r3, [r7, #15]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d160      	bne.n	80039a0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d111      	bne.n	8003908 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038e4:	4b31      	ldr	r3, [pc, #196]	; (80039ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80038ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	6892      	ldr	r2, [r2, #8]
 80038f4:	0211      	lsls	r1, r2, #8
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	68d2      	ldr	r2, [r2, #12]
 80038fa:	0912      	lsrs	r2, r2, #4
 80038fc:	0452      	lsls	r2, r2, #17
 80038fe:	430a      	orrs	r2, r1
 8003900:	492a      	ldr	r1, [pc, #168]	; (80039ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003902:	4313      	orrs	r3, r2
 8003904:	610b      	str	r3, [r1, #16]
 8003906:	e027      	b.n	8003958 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d112      	bne.n	8003934 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800390e:	4b27      	ldr	r3, [pc, #156]	; (80039ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003916:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	6892      	ldr	r2, [r2, #8]
 800391e:	0211      	lsls	r1, r2, #8
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	6912      	ldr	r2, [r2, #16]
 8003924:	0852      	lsrs	r2, r2, #1
 8003926:	3a01      	subs	r2, #1
 8003928:	0552      	lsls	r2, r2, #21
 800392a:	430a      	orrs	r2, r1
 800392c:	491f      	ldr	r1, [pc, #124]	; (80039ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800392e:	4313      	orrs	r3, r2
 8003930:	610b      	str	r3, [r1, #16]
 8003932:	e011      	b.n	8003958 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003934:	4b1d      	ldr	r3, [pc, #116]	; (80039ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800393c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	6892      	ldr	r2, [r2, #8]
 8003944:	0211      	lsls	r1, r2, #8
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6952      	ldr	r2, [r2, #20]
 800394a:	0852      	lsrs	r2, r2, #1
 800394c:	3a01      	subs	r2, #1
 800394e:	0652      	lsls	r2, r2, #25
 8003950:	430a      	orrs	r2, r1
 8003952:	4916      	ldr	r1, [pc, #88]	; (80039ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003954:	4313      	orrs	r3, r2
 8003956:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003958:	4b14      	ldr	r3, [pc, #80]	; (80039ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a13      	ldr	r2, [pc, #76]	; (80039ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800395e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003962:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003964:	f7fd fb44 	bl	8000ff0 <HAL_GetTick>
 8003968:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800396a:	e009      	b.n	8003980 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800396c:	f7fd fb40 	bl	8000ff0 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d902      	bls.n	8003980 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	73fb      	strb	r3, [r7, #15]
          break;
 800397e:	e005      	b.n	800398c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003980:	4b0a      	ldr	r3, [pc, #40]	; (80039ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d0ef      	beq.n	800396c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800398c:	7bfb      	ldrb	r3, [r7, #15]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d106      	bne.n	80039a0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003992:	4b06      	ldr	r3, [pc, #24]	; (80039ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003994:	691a      	ldr	r2, [r3, #16]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	4904      	ldr	r1, [pc, #16]	; (80039ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800399c:	4313      	orrs	r3, r2
 800399e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80039a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	40021000 	.word	0x40021000

080039b0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039ba:	2300      	movs	r3, #0
 80039bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039be:	4b6a      	ldr	r3, [pc, #424]	; (8003b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	f003 0303 	and.w	r3, r3, #3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d018      	beq.n	80039fc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80039ca:	4b67      	ldr	r3, [pc, #412]	; (8003b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	f003 0203 	and.w	r2, r3, #3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d10d      	bne.n	80039f6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
       ||
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d009      	beq.n	80039f6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80039e2:	4b61      	ldr	r3, [pc, #388]	; (8003b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	091b      	lsrs	r3, r3, #4
 80039e8:	f003 0307 	and.w	r3, r3, #7
 80039ec:	1c5a      	adds	r2, r3, #1
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
       ||
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d047      	beq.n	8003a86 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	73fb      	strb	r3, [r7, #15]
 80039fa:	e044      	b.n	8003a86 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2b03      	cmp	r3, #3
 8003a02:	d018      	beq.n	8003a36 <RCCEx_PLLSAI2_Config+0x86>
 8003a04:	2b03      	cmp	r3, #3
 8003a06:	d825      	bhi.n	8003a54 <RCCEx_PLLSAI2_Config+0xa4>
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d002      	beq.n	8003a12 <RCCEx_PLLSAI2_Config+0x62>
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d009      	beq.n	8003a24 <RCCEx_PLLSAI2_Config+0x74>
 8003a10:	e020      	b.n	8003a54 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a12:	4b55      	ldr	r3, [pc, #340]	; (8003b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d11d      	bne.n	8003a5a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a22:	e01a      	b.n	8003a5a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a24:	4b50      	ldr	r3, [pc, #320]	; (8003b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d116      	bne.n	8003a5e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a34:	e013      	b.n	8003a5e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a36:	4b4c      	ldr	r3, [pc, #304]	; (8003b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10f      	bne.n	8003a62 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a42:	4b49      	ldr	r3, [pc, #292]	; (8003b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d109      	bne.n	8003a62 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a52:	e006      	b.n	8003a62 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	73fb      	strb	r3, [r7, #15]
      break;
 8003a58:	e004      	b.n	8003a64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a5a:	bf00      	nop
 8003a5c:	e002      	b.n	8003a64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a5e:	bf00      	nop
 8003a60:	e000      	b.n	8003a64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a62:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10d      	bne.n	8003a86 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a6a:	4b3f      	ldr	r3, [pc, #252]	; (8003b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6819      	ldr	r1, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	011b      	lsls	r3, r3, #4
 8003a7e:	430b      	orrs	r3, r1
 8003a80:	4939      	ldr	r1, [pc, #228]	; (8003b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a86:	7bfb      	ldrb	r3, [r7, #15]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d167      	bne.n	8003b5c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a8c:	4b36      	ldr	r3, [pc, #216]	; (8003b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a35      	ldr	r2, [pc, #212]	; (8003b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a98:	f7fd faaa 	bl	8000ff0 <HAL_GetTick>
 8003a9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a9e:	e009      	b.n	8003ab4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003aa0:	f7fd faa6 	bl	8000ff0 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d902      	bls.n	8003ab4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	73fb      	strb	r3, [r7, #15]
        break;
 8003ab2:	e005      	b.n	8003ac0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ab4:	4b2c      	ldr	r3, [pc, #176]	; (8003b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1ef      	bne.n	8003aa0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ac0:	7bfb      	ldrb	r3, [r7, #15]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d14a      	bne.n	8003b5c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d111      	bne.n	8003af0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003acc:	4b26      	ldr	r3, [pc, #152]	; (8003b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003ad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	6892      	ldr	r2, [r2, #8]
 8003adc:	0211      	lsls	r1, r2, #8
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	68d2      	ldr	r2, [r2, #12]
 8003ae2:	0912      	lsrs	r2, r2, #4
 8003ae4:	0452      	lsls	r2, r2, #17
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	491f      	ldr	r1, [pc, #124]	; (8003b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	614b      	str	r3, [r1, #20]
 8003aee:	e011      	b.n	8003b14 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003af0:	4b1d      	ldr	r3, [pc, #116]	; (8003b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003af8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	6892      	ldr	r2, [r2, #8]
 8003b00:	0211      	lsls	r1, r2, #8
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	6912      	ldr	r2, [r2, #16]
 8003b06:	0852      	lsrs	r2, r2, #1
 8003b08:	3a01      	subs	r2, #1
 8003b0a:	0652      	lsls	r2, r2, #25
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	4916      	ldr	r1, [pc, #88]	; (8003b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b14:	4b14      	ldr	r3, [pc, #80]	; (8003b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a13      	ldr	r2, [pc, #76]	; (8003b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b20:	f7fd fa66 	bl	8000ff0 <HAL_GetTick>
 8003b24:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b26:	e009      	b.n	8003b3c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b28:	f7fd fa62 	bl	8000ff0 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d902      	bls.n	8003b3c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	73fb      	strb	r3, [r7, #15]
          break;
 8003b3a:	e005      	b.n	8003b48 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b3c:	4b0a      	ldr	r3, [pc, #40]	; (8003b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d0ef      	beq.n	8003b28 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003b48:	7bfb      	ldrb	r3, [r7, #15]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d106      	bne.n	8003b5c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b4e:	4b06      	ldr	r3, [pc, #24]	; (8003b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b50:	695a      	ldr	r2, [r3, #20]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	4904      	ldr	r1, [pc, #16]	; (8003b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	40021000 	.word	0x40021000

08003b6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e049      	b.n	8003c12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d106      	bne.n	8003b98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7fd f81a 	bl	8000bcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	3304      	adds	r3, #4
 8003ba8:	4619      	mov	r1, r3
 8003baa:	4610      	mov	r0, r2
 8003bac:	f000 f9aa 	bl	8003f04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b082      	sub	sp, #8
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d101      	bne.n	8003c2c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e049      	b.n	8003cc0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d106      	bne.n	8003c46 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 f841 	bl	8003cc8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2202      	movs	r2, #2
 8003c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	3304      	adds	r3, #4
 8003c56:	4619      	mov	r1, r3
 8003c58:	4610      	mov	r0, r2
 8003c5a:	f000 f953 	bl	8003f04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3708      	adds	r7, #8
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d101      	bne.n	8003cfa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	e0ff      	b.n	8003efa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2b14      	cmp	r3, #20
 8003d06:	f200 80f0 	bhi.w	8003eea <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003d0a:	a201      	add	r2, pc, #4	; (adr r2, 8003d10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d10:	08003d65 	.word	0x08003d65
 8003d14:	08003eeb 	.word	0x08003eeb
 8003d18:	08003eeb 	.word	0x08003eeb
 8003d1c:	08003eeb 	.word	0x08003eeb
 8003d20:	08003da5 	.word	0x08003da5
 8003d24:	08003eeb 	.word	0x08003eeb
 8003d28:	08003eeb 	.word	0x08003eeb
 8003d2c:	08003eeb 	.word	0x08003eeb
 8003d30:	08003de7 	.word	0x08003de7
 8003d34:	08003eeb 	.word	0x08003eeb
 8003d38:	08003eeb 	.word	0x08003eeb
 8003d3c:	08003eeb 	.word	0x08003eeb
 8003d40:	08003e27 	.word	0x08003e27
 8003d44:	08003eeb 	.word	0x08003eeb
 8003d48:	08003eeb 	.word	0x08003eeb
 8003d4c:	08003eeb 	.word	0x08003eeb
 8003d50:	08003e69 	.word	0x08003e69
 8003d54:	08003eeb 	.word	0x08003eeb
 8003d58:	08003eeb 	.word	0x08003eeb
 8003d5c:	08003eeb 	.word	0x08003eeb
 8003d60:	08003ea9 	.word	0x08003ea9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68b9      	ldr	r1, [r7, #8]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 f964 	bl	8004038 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	699a      	ldr	r2, [r3, #24]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f042 0208 	orr.w	r2, r2, #8
 8003d7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	699a      	ldr	r2, [r3, #24]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f022 0204 	bic.w	r2, r2, #4
 8003d8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	6999      	ldr	r1, [r3, #24]
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	691a      	ldr	r2, [r3, #16]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	619a      	str	r2, [r3, #24]
      break;
 8003da2:	e0a5      	b.n	8003ef0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68b9      	ldr	r1, [r7, #8]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f000 f9d4 	bl	8004158 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	699a      	ldr	r2, [r3, #24]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	699a      	ldr	r2, [r3, #24]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	6999      	ldr	r1, [r3, #24]
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	021a      	lsls	r2, r3, #8
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	619a      	str	r2, [r3, #24]
      break;
 8003de4:	e084      	b.n	8003ef0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68b9      	ldr	r1, [r7, #8]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 fa3d 	bl	800426c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	69da      	ldr	r2, [r3, #28]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f042 0208 	orr.w	r2, r2, #8
 8003e00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	69da      	ldr	r2, [r3, #28]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f022 0204 	bic.w	r2, r2, #4
 8003e10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	69d9      	ldr	r1, [r3, #28]
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	691a      	ldr	r2, [r3, #16]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	61da      	str	r2, [r3, #28]
      break;
 8003e24:	e064      	b.n	8003ef0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68b9      	ldr	r1, [r7, #8]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f000 faa5 	bl	800437c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	69da      	ldr	r2, [r3, #28]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	69da      	ldr	r2, [r3, #28]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	69d9      	ldr	r1, [r3, #28]
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	021a      	lsls	r2, r3, #8
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	430a      	orrs	r2, r1
 8003e64:	61da      	str	r2, [r3, #28]
      break;
 8003e66:	e043      	b.n	8003ef0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68b9      	ldr	r1, [r7, #8]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 faee 	bl	8004450 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f042 0208 	orr.w	r2, r2, #8
 8003e82:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 0204 	bic.w	r2, r2, #4
 8003e92:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	691a      	ldr	r2, [r3, #16]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003ea6:	e023      	b.n	8003ef0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68b9      	ldr	r1, [r7, #8]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 fb32 	bl	8004518 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ec2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ed2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	021a      	lsls	r2, r3, #8
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003ee8:	e002      	b.n	8003ef0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	75fb      	strb	r3, [r7, #23]
      break;
 8003eee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ef8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3718      	adds	r7, #24
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop

08003f04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a40      	ldr	r2, [pc, #256]	; (8004018 <TIM_Base_SetConfig+0x114>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d013      	beq.n	8003f44 <TIM_Base_SetConfig+0x40>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f22:	d00f      	beq.n	8003f44 <TIM_Base_SetConfig+0x40>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a3d      	ldr	r2, [pc, #244]	; (800401c <TIM_Base_SetConfig+0x118>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d00b      	beq.n	8003f44 <TIM_Base_SetConfig+0x40>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a3c      	ldr	r2, [pc, #240]	; (8004020 <TIM_Base_SetConfig+0x11c>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d007      	beq.n	8003f44 <TIM_Base_SetConfig+0x40>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a3b      	ldr	r2, [pc, #236]	; (8004024 <TIM_Base_SetConfig+0x120>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d003      	beq.n	8003f44 <TIM_Base_SetConfig+0x40>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a3a      	ldr	r2, [pc, #232]	; (8004028 <TIM_Base_SetConfig+0x124>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d108      	bne.n	8003f56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a2f      	ldr	r2, [pc, #188]	; (8004018 <TIM_Base_SetConfig+0x114>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d01f      	beq.n	8003f9e <TIM_Base_SetConfig+0x9a>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f64:	d01b      	beq.n	8003f9e <TIM_Base_SetConfig+0x9a>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a2c      	ldr	r2, [pc, #176]	; (800401c <TIM_Base_SetConfig+0x118>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d017      	beq.n	8003f9e <TIM_Base_SetConfig+0x9a>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a2b      	ldr	r2, [pc, #172]	; (8004020 <TIM_Base_SetConfig+0x11c>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d013      	beq.n	8003f9e <TIM_Base_SetConfig+0x9a>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a2a      	ldr	r2, [pc, #168]	; (8004024 <TIM_Base_SetConfig+0x120>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d00f      	beq.n	8003f9e <TIM_Base_SetConfig+0x9a>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a29      	ldr	r2, [pc, #164]	; (8004028 <TIM_Base_SetConfig+0x124>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d00b      	beq.n	8003f9e <TIM_Base_SetConfig+0x9a>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a28      	ldr	r2, [pc, #160]	; (800402c <TIM_Base_SetConfig+0x128>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d007      	beq.n	8003f9e <TIM_Base_SetConfig+0x9a>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a27      	ldr	r2, [pc, #156]	; (8004030 <TIM_Base_SetConfig+0x12c>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d003      	beq.n	8003f9e <TIM_Base_SetConfig+0x9a>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a26      	ldr	r2, [pc, #152]	; (8004034 <TIM_Base_SetConfig+0x130>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d108      	bne.n	8003fb0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	689a      	ldr	r2, [r3, #8]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a10      	ldr	r2, [pc, #64]	; (8004018 <TIM_Base_SetConfig+0x114>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d00f      	beq.n	8003ffc <TIM_Base_SetConfig+0xf8>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a12      	ldr	r2, [pc, #72]	; (8004028 <TIM_Base_SetConfig+0x124>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d00b      	beq.n	8003ffc <TIM_Base_SetConfig+0xf8>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a11      	ldr	r2, [pc, #68]	; (800402c <TIM_Base_SetConfig+0x128>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d007      	beq.n	8003ffc <TIM_Base_SetConfig+0xf8>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a10      	ldr	r2, [pc, #64]	; (8004030 <TIM_Base_SetConfig+0x12c>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d003      	beq.n	8003ffc <TIM_Base_SetConfig+0xf8>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a0f      	ldr	r2, [pc, #60]	; (8004034 <TIM_Base_SetConfig+0x130>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d103      	bne.n	8004004 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	691a      	ldr	r2, [r3, #16]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	615a      	str	r2, [r3, #20]
}
 800400a:	bf00      	nop
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	40012c00 	.word	0x40012c00
 800401c:	40000400 	.word	0x40000400
 8004020:	40000800 	.word	0x40000800
 8004024:	40000c00 	.word	0x40000c00
 8004028:	40013400 	.word	0x40013400
 800402c:	40014000 	.word	0x40014000
 8004030:	40014400 	.word	0x40014400
 8004034:	40014800 	.word	0x40014800

08004038 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004038:	b480      	push	{r7}
 800403a:	b087      	sub	sp, #28
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	f023 0201 	bic.w	r2, r3, #1
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800406a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f023 0303 	bic.w	r3, r3, #3
 8004072:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	4313      	orrs	r3, r2
 800407c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f023 0302 	bic.w	r3, r3, #2
 8004084:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	4313      	orrs	r3, r2
 800408e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a2c      	ldr	r2, [pc, #176]	; (8004144 <TIM_OC1_SetConfig+0x10c>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d00f      	beq.n	80040b8 <TIM_OC1_SetConfig+0x80>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a2b      	ldr	r2, [pc, #172]	; (8004148 <TIM_OC1_SetConfig+0x110>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d00b      	beq.n	80040b8 <TIM_OC1_SetConfig+0x80>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a2a      	ldr	r2, [pc, #168]	; (800414c <TIM_OC1_SetConfig+0x114>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d007      	beq.n	80040b8 <TIM_OC1_SetConfig+0x80>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a29      	ldr	r2, [pc, #164]	; (8004150 <TIM_OC1_SetConfig+0x118>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d003      	beq.n	80040b8 <TIM_OC1_SetConfig+0x80>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a28      	ldr	r2, [pc, #160]	; (8004154 <TIM_OC1_SetConfig+0x11c>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d10c      	bne.n	80040d2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	f023 0308 	bic.w	r3, r3, #8
 80040be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	697a      	ldr	r2, [r7, #20]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f023 0304 	bic.w	r3, r3, #4
 80040d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a1b      	ldr	r2, [pc, #108]	; (8004144 <TIM_OC1_SetConfig+0x10c>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d00f      	beq.n	80040fa <TIM_OC1_SetConfig+0xc2>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a1a      	ldr	r2, [pc, #104]	; (8004148 <TIM_OC1_SetConfig+0x110>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d00b      	beq.n	80040fa <TIM_OC1_SetConfig+0xc2>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a19      	ldr	r2, [pc, #100]	; (800414c <TIM_OC1_SetConfig+0x114>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d007      	beq.n	80040fa <TIM_OC1_SetConfig+0xc2>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a18      	ldr	r2, [pc, #96]	; (8004150 <TIM_OC1_SetConfig+0x118>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d003      	beq.n	80040fa <TIM_OC1_SetConfig+0xc2>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a17      	ldr	r2, [pc, #92]	; (8004154 <TIM_OC1_SetConfig+0x11c>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d111      	bne.n	800411e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004100:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004108:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	4313      	orrs	r3, r2
 8004112:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	4313      	orrs	r3, r2
 800411c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685a      	ldr	r2, [r3, #4]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	621a      	str	r2, [r3, #32]
}
 8004138:	bf00      	nop
 800413a:	371c      	adds	r7, #28
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr
 8004144:	40012c00 	.word	0x40012c00
 8004148:	40013400 	.word	0x40013400
 800414c:	40014000 	.word	0x40014000
 8004150:	40014400 	.word	0x40014400
 8004154:	40014800 	.word	0x40014800

08004158 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004158:	b480      	push	{r7}
 800415a:	b087      	sub	sp, #28
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	f023 0210 	bic.w	r2, r3, #16
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800418a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004192:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	021b      	lsls	r3, r3, #8
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	4313      	orrs	r3, r2
 800419e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f023 0320 	bic.w	r3, r3, #32
 80041a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a28      	ldr	r2, [pc, #160]	; (8004258 <TIM_OC2_SetConfig+0x100>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d003      	beq.n	80041c4 <TIM_OC2_SetConfig+0x6c>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a27      	ldr	r2, [pc, #156]	; (800425c <TIM_OC2_SetConfig+0x104>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d10d      	bne.n	80041e0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	011b      	lsls	r3, r3, #4
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a1d      	ldr	r2, [pc, #116]	; (8004258 <TIM_OC2_SetConfig+0x100>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d00f      	beq.n	8004208 <TIM_OC2_SetConfig+0xb0>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a1c      	ldr	r2, [pc, #112]	; (800425c <TIM_OC2_SetConfig+0x104>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d00b      	beq.n	8004208 <TIM_OC2_SetConfig+0xb0>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a1b      	ldr	r2, [pc, #108]	; (8004260 <TIM_OC2_SetConfig+0x108>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d007      	beq.n	8004208 <TIM_OC2_SetConfig+0xb0>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a1a      	ldr	r2, [pc, #104]	; (8004264 <TIM_OC2_SetConfig+0x10c>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d003      	beq.n	8004208 <TIM_OC2_SetConfig+0xb0>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a19      	ldr	r2, [pc, #100]	; (8004268 <TIM_OC2_SetConfig+0x110>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d113      	bne.n	8004230 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800420e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004216:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	695b      	ldr	r3, [r3, #20]
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	4313      	orrs	r3, r2
 8004222:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	4313      	orrs	r3, r2
 800422e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	621a      	str	r2, [r3, #32]
}
 800424a:	bf00      	nop
 800424c:	371c      	adds	r7, #28
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	40012c00 	.word	0x40012c00
 800425c:	40013400 	.word	0x40013400
 8004260:	40014000 	.word	0x40014000
 8004264:	40014400 	.word	0x40014400
 8004268:	40014800 	.word	0x40014800

0800426c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800426c:	b480      	push	{r7}
 800426e:	b087      	sub	sp, #28
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	69db      	ldr	r3, [r3, #28]
 8004292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800429a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800429e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f023 0303 	bic.w	r3, r3, #3
 80042a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	021b      	lsls	r3, r3, #8
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a27      	ldr	r2, [pc, #156]	; (8004368 <TIM_OC3_SetConfig+0xfc>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d003      	beq.n	80042d6 <TIM_OC3_SetConfig+0x6a>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a26      	ldr	r2, [pc, #152]	; (800436c <TIM_OC3_SetConfig+0x100>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d10d      	bne.n	80042f2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	021b      	lsls	r3, r3, #8
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a1c      	ldr	r2, [pc, #112]	; (8004368 <TIM_OC3_SetConfig+0xfc>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d00f      	beq.n	800431a <TIM_OC3_SetConfig+0xae>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a1b      	ldr	r2, [pc, #108]	; (800436c <TIM_OC3_SetConfig+0x100>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d00b      	beq.n	800431a <TIM_OC3_SetConfig+0xae>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a1a      	ldr	r2, [pc, #104]	; (8004370 <TIM_OC3_SetConfig+0x104>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d007      	beq.n	800431a <TIM_OC3_SetConfig+0xae>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a19      	ldr	r2, [pc, #100]	; (8004374 <TIM_OC3_SetConfig+0x108>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d003      	beq.n	800431a <TIM_OC3_SetConfig+0xae>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a18      	ldr	r2, [pc, #96]	; (8004378 <TIM_OC3_SetConfig+0x10c>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d113      	bne.n	8004342 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004320:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004328:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	011b      	lsls	r3, r3, #4
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	4313      	orrs	r3, r2
 8004334:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	011b      	lsls	r3, r3, #4
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	4313      	orrs	r3, r2
 8004340:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	685a      	ldr	r2, [r3, #4]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	621a      	str	r2, [r3, #32]
}
 800435c:	bf00      	nop
 800435e:	371c      	adds	r7, #28
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr
 8004368:	40012c00 	.word	0x40012c00
 800436c:	40013400 	.word	0x40013400
 8004370:	40014000 	.word	0x40014000
 8004374:	40014400 	.word	0x40014400
 8004378:	40014800 	.word	0x40014800

0800437c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800437c:	b480      	push	{r7}
 800437e:	b087      	sub	sp, #28
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	021b      	lsls	r3, r3, #8
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	031b      	lsls	r3, r3, #12
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a18      	ldr	r2, [pc, #96]	; (800443c <TIM_OC4_SetConfig+0xc0>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d00f      	beq.n	8004400 <TIM_OC4_SetConfig+0x84>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a17      	ldr	r2, [pc, #92]	; (8004440 <TIM_OC4_SetConfig+0xc4>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d00b      	beq.n	8004400 <TIM_OC4_SetConfig+0x84>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a16      	ldr	r2, [pc, #88]	; (8004444 <TIM_OC4_SetConfig+0xc8>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d007      	beq.n	8004400 <TIM_OC4_SetConfig+0x84>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a15      	ldr	r2, [pc, #84]	; (8004448 <TIM_OC4_SetConfig+0xcc>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d003      	beq.n	8004400 <TIM_OC4_SetConfig+0x84>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a14      	ldr	r2, [pc, #80]	; (800444c <TIM_OC4_SetConfig+0xd0>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d109      	bne.n	8004414 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004406:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	695b      	ldr	r3, [r3, #20]
 800440c:	019b      	lsls	r3, r3, #6
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	4313      	orrs	r3, r2
 8004412:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	621a      	str	r2, [r3, #32]
}
 800442e:	bf00      	nop
 8004430:	371c      	adds	r7, #28
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	40012c00 	.word	0x40012c00
 8004440:	40013400 	.word	0x40013400
 8004444:	40014000 	.word	0x40014000
 8004448:	40014400 	.word	0x40014400
 800444c:	40014800 	.word	0x40014800

08004450 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004450:	b480      	push	{r7}
 8004452:	b087      	sub	sp, #28
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800447e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	4313      	orrs	r3, r2
 800448c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004494:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	041b      	lsls	r3, r3, #16
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	4313      	orrs	r3, r2
 80044a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a17      	ldr	r2, [pc, #92]	; (8004504 <TIM_OC5_SetConfig+0xb4>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d00f      	beq.n	80044ca <TIM_OC5_SetConfig+0x7a>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a16      	ldr	r2, [pc, #88]	; (8004508 <TIM_OC5_SetConfig+0xb8>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d00b      	beq.n	80044ca <TIM_OC5_SetConfig+0x7a>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a15      	ldr	r2, [pc, #84]	; (800450c <TIM_OC5_SetConfig+0xbc>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d007      	beq.n	80044ca <TIM_OC5_SetConfig+0x7a>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a14      	ldr	r2, [pc, #80]	; (8004510 <TIM_OC5_SetConfig+0xc0>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d003      	beq.n	80044ca <TIM_OC5_SetConfig+0x7a>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a13      	ldr	r2, [pc, #76]	; (8004514 <TIM_OC5_SetConfig+0xc4>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d109      	bne.n	80044de <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	021b      	lsls	r3, r3, #8
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	4313      	orrs	r3, r2
 80044dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	621a      	str	r2, [r3, #32]
}
 80044f8:	bf00      	nop
 80044fa:	371c      	adds	r7, #28
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	40012c00 	.word	0x40012c00
 8004508:	40013400 	.word	0x40013400
 800450c:	40014000 	.word	0x40014000
 8004510:	40014400 	.word	0x40014400
 8004514:	40014800 	.word	0x40014800

08004518 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004518:	b480      	push	{r7}
 800451a:	b087      	sub	sp, #28
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800453e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004546:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800454a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	021b      	lsls	r3, r3, #8
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	4313      	orrs	r3, r2
 8004556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800455e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	051b      	lsls	r3, r3, #20
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	4313      	orrs	r3, r2
 800456a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a18      	ldr	r2, [pc, #96]	; (80045d0 <TIM_OC6_SetConfig+0xb8>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d00f      	beq.n	8004594 <TIM_OC6_SetConfig+0x7c>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a17      	ldr	r2, [pc, #92]	; (80045d4 <TIM_OC6_SetConfig+0xbc>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d00b      	beq.n	8004594 <TIM_OC6_SetConfig+0x7c>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a16      	ldr	r2, [pc, #88]	; (80045d8 <TIM_OC6_SetConfig+0xc0>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d007      	beq.n	8004594 <TIM_OC6_SetConfig+0x7c>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a15      	ldr	r2, [pc, #84]	; (80045dc <TIM_OC6_SetConfig+0xc4>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d003      	beq.n	8004594 <TIM_OC6_SetConfig+0x7c>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a14      	ldr	r2, [pc, #80]	; (80045e0 <TIM_OC6_SetConfig+0xc8>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d109      	bne.n	80045a8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800459a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	029b      	lsls	r3, r3, #10
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	621a      	str	r2, [r3, #32]
}
 80045c2:	bf00      	nop
 80045c4:	371c      	adds	r7, #28
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	40012c00 	.word	0x40012c00
 80045d4:	40013400 	.word	0x40013400
 80045d8:	40014000 	.word	0x40014000
 80045dc:	40014400 	.word	0x40014400
 80045e0:	40014800 	.word	0x40014800

080045e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b085      	sub	sp, #20
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80045ee:	2300      	movs	r3, #0
 80045f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d101      	bne.n	8004600 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80045fc:	2302      	movs	r3, #2
 80045fe:	e065      	b.n	80046cc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	4313      	orrs	r3, r2
 8004614:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	4313      	orrs	r3, r2
 8004622:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	4313      	orrs	r3, r2
 8004630:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4313      	orrs	r3, r2
 800463e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	4313      	orrs	r3, r2
 800464c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	695b      	ldr	r3, [r3, #20]
 8004658:	4313      	orrs	r3, r2
 800465a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004666:	4313      	orrs	r3, r2
 8004668:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	041b      	lsls	r3, r3, #16
 8004676:	4313      	orrs	r3, r2
 8004678:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a16      	ldr	r2, [pc, #88]	; (80046d8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d004      	beq.n	800468e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a14      	ldr	r2, [pc, #80]	; (80046dc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d115      	bne.n	80046ba <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004698:	051b      	lsls	r3, r3, #20
 800469a:	4313      	orrs	r3, r2
 800469c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	69db      	ldr	r3, [r3, #28]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3714      	adds	r7, #20
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr
 80046d8:	40012c00 	.word	0x40012c00
 80046dc:	40013400 	.word	0x40013400

080046e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e040      	b.n	8004774 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d106      	bne.n	8004708 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7fc faba 	bl	8000c7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2224      	movs	r2, #36	; 0x24
 800470c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f022 0201 	bic.w	r2, r2, #1
 800471c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f992 	bl	8004a48 <UART_SetConfig>
 8004724:	4603      	mov	r3, r0
 8004726:	2b01      	cmp	r3, #1
 8004728:	d101      	bne.n	800472e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e022      	b.n	8004774 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004732:	2b00      	cmp	r3, #0
 8004734:	d002      	beq.n	800473c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 fc10 	bl	8004f5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	685a      	ldr	r2, [r3, #4]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800474a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	689a      	ldr	r2, [r3, #8]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800475a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f042 0201 	orr.w	r2, r2, #1
 800476a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 fc97 	bl	80050a0 <UART_CheckIdleState>
 8004772:	4603      	mov	r3, r0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3708      	adds	r7, #8
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b08a      	sub	sp, #40	; 0x28
 8004780:	af02      	add	r7, sp, #8
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	603b      	str	r3, [r7, #0]
 8004788:	4613      	mov	r3, r2
 800478a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004790:	2b20      	cmp	r3, #32
 8004792:	f040 8082 	bne.w	800489a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d002      	beq.n	80047a2 <HAL_UART_Transmit+0x26>
 800479c:	88fb      	ldrh	r3, [r7, #6]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e07a      	b.n	800489c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d101      	bne.n	80047b4 <HAL_UART_Transmit+0x38>
 80047b0:	2302      	movs	r3, #2
 80047b2:	e073      	b.n	800489c <HAL_UART_Transmit+0x120>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2221      	movs	r2, #33	; 0x21
 80047c8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047ca:	f7fc fc11 	bl	8000ff0 <HAL_GetTick>
 80047ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	88fa      	ldrh	r2, [r7, #6]
 80047d4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	88fa      	ldrh	r2, [r7, #6]
 80047dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047e8:	d108      	bne.n	80047fc <HAL_UART_Transmit+0x80>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d104      	bne.n	80047fc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80047f2:	2300      	movs	r3, #0
 80047f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	61bb      	str	r3, [r7, #24]
 80047fa:	e003      	b.n	8004804 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004800:	2300      	movs	r3, #0
 8004802:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800480c:	e02d      	b.n	800486a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	2200      	movs	r2, #0
 8004816:	2180      	movs	r1, #128	; 0x80
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f000 fc8a 	bl	8005132 <UART_WaitOnFlagUntilTimeout>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d001      	beq.n	8004828 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e039      	b.n	800489c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10b      	bne.n	8004846 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	881a      	ldrh	r2, [r3, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800483a:	b292      	uxth	r2, r2
 800483c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	3302      	adds	r3, #2
 8004842:	61bb      	str	r3, [r7, #24]
 8004844:	e008      	b.n	8004858 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	781a      	ldrb	r2, [r3, #0]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	b292      	uxth	r2, r2
 8004850:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	3301      	adds	r3, #1
 8004856:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800485e:	b29b      	uxth	r3, r3
 8004860:	3b01      	subs	r3, #1
 8004862:	b29a      	uxth	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004870:	b29b      	uxth	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1cb      	bne.n	800480e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	2200      	movs	r2, #0
 800487e:	2140      	movs	r1, #64	; 0x40
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f000 fc56 	bl	8005132 <UART_WaitOnFlagUntilTimeout>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d001      	beq.n	8004890 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e005      	b.n	800489c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2220      	movs	r2, #32
 8004894:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004896:	2300      	movs	r3, #0
 8004898:	e000      	b.n	800489c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800489a:	2302      	movs	r3, #2
  }
}
 800489c:	4618      	mov	r0, r3
 800489e:	3720      	adds	r7, #32
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b08a      	sub	sp, #40	; 0x28
 80048a8:	af02      	add	r7, sp, #8
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	603b      	str	r3, [r7, #0]
 80048b0:	4613      	mov	r3, r2
 80048b2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048b8:	2b20      	cmp	r3, #32
 80048ba:	f040 80bf 	bne.w	8004a3c <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d002      	beq.n	80048ca <HAL_UART_Receive+0x26>
 80048c4:	88fb      	ldrh	r3, [r7, #6]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d101      	bne.n	80048ce <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e0b7      	b.n	8004a3e <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d101      	bne.n	80048dc <HAL_UART_Receive+0x38>
 80048d8:	2302      	movs	r3, #2
 80048da:	e0b0      	b.n	8004a3e <HAL_UART_Receive+0x19a>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2222      	movs	r2, #34	; 0x22
 80048f0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048f8:	f7fc fb7a 	bl	8000ff0 <HAL_GetTick>
 80048fc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	88fa      	ldrh	r2, [r7, #6]
 8004902:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	88fa      	ldrh	r2, [r7, #6]
 800490a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004916:	d10e      	bne.n	8004936 <HAL_UART_Receive+0x92>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d105      	bne.n	800492c <HAL_UART_Receive+0x88>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004926:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800492a:	e02d      	b.n	8004988 <HAL_UART_Receive+0xe4>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	22ff      	movs	r2, #255	; 0xff
 8004930:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004934:	e028      	b.n	8004988 <HAL_UART_Receive+0xe4>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10d      	bne.n	800495a <HAL_UART_Receive+0xb6>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d104      	bne.n	8004950 <HAL_UART_Receive+0xac>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	22ff      	movs	r2, #255	; 0xff
 800494a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800494e:	e01b      	b.n	8004988 <HAL_UART_Receive+0xe4>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	227f      	movs	r2, #127	; 0x7f
 8004954:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004958:	e016      	b.n	8004988 <HAL_UART_Receive+0xe4>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004962:	d10d      	bne.n	8004980 <HAL_UART_Receive+0xdc>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d104      	bne.n	8004976 <HAL_UART_Receive+0xd2>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	227f      	movs	r2, #127	; 0x7f
 8004970:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004974:	e008      	b.n	8004988 <HAL_UART_Receive+0xe4>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	223f      	movs	r2, #63	; 0x3f
 800497a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800497e:	e003      	b.n	8004988 <HAL_UART_Receive+0xe4>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800498e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004998:	d108      	bne.n	80049ac <HAL_UART_Receive+0x108>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d104      	bne.n	80049ac <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80049a2:	2300      	movs	r3, #0
 80049a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	61bb      	str	r3, [r7, #24]
 80049aa:	e003      	b.n	80049b4 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049b0:	2300      	movs	r3, #0
 80049b2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80049bc:	e033      	b.n	8004a26 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	9300      	str	r3, [sp, #0]
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	2200      	movs	r2, #0
 80049c6:	2120      	movs	r1, #32
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f000 fbb2 	bl	8005132 <UART_WaitOnFlagUntilTimeout>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d001      	beq.n	80049d8 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e032      	b.n	8004a3e <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10c      	bne.n	80049f8 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	8a7b      	ldrh	r3, [r7, #18]
 80049e8:	4013      	ands	r3, r2
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	3302      	adds	r3, #2
 80049f4:	61bb      	str	r3, [r7, #24]
 80049f6:	e00d      	b.n	8004a14 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	b2da      	uxtb	r2, r3
 8004a02:	8a7b      	ldrh	r3, [r7, #18]
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	4013      	ands	r3, r2
 8004a08:	b2da      	uxtb	r2, r3
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	3301      	adds	r3, #1
 8004a12:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1c5      	bne.n	80049be <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2220      	movs	r2, #32
 8004a36:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	e000      	b.n	8004a3e <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8004a3c:	2302      	movs	r3, #2
  }
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3720      	adds	r7, #32
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
	...

08004a48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a48:	b5b0      	push	{r4, r5, r7, lr}
 8004a4a:	b088      	sub	sp, #32
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a50:	2300      	movs	r3, #0
 8004a52:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	689a      	ldr	r2, [r3, #8]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	431a      	orrs	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	69db      	ldr	r3, [r3, #28]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	4bad      	ldr	r3, [pc, #692]	; (8004d28 <UART_SetConfig+0x2e0>)
 8004a74:	4013      	ands	r3, r2
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	6812      	ldr	r2, [r2, #0]
 8004a7a:	69f9      	ldr	r1, [r7, #28]
 8004a7c:	430b      	orrs	r3, r1
 8004a7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	68da      	ldr	r2, [r3, #12]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4aa2      	ldr	r2, [pc, #648]	; (8004d2c <UART_SetConfig+0x2e4>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d004      	beq.n	8004ab0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	69fa      	ldr	r2, [r7, #28]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	69fa      	ldr	r2, [r7, #28]
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a99      	ldr	r2, [pc, #612]	; (8004d30 <UART_SetConfig+0x2e8>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d121      	bne.n	8004b12 <UART_SetConfig+0xca>
 8004ace:	4b99      	ldr	r3, [pc, #612]	; (8004d34 <UART_SetConfig+0x2ec>)
 8004ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad4:	f003 0303 	and.w	r3, r3, #3
 8004ad8:	2b03      	cmp	r3, #3
 8004ada:	d817      	bhi.n	8004b0c <UART_SetConfig+0xc4>
 8004adc:	a201      	add	r2, pc, #4	; (adr r2, 8004ae4 <UART_SetConfig+0x9c>)
 8004ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae2:	bf00      	nop
 8004ae4:	08004af5 	.word	0x08004af5
 8004ae8:	08004b01 	.word	0x08004b01
 8004aec:	08004afb 	.word	0x08004afb
 8004af0:	08004b07 	.word	0x08004b07
 8004af4:	2301      	movs	r3, #1
 8004af6:	76fb      	strb	r3, [r7, #27]
 8004af8:	e0e7      	b.n	8004cca <UART_SetConfig+0x282>
 8004afa:	2302      	movs	r3, #2
 8004afc:	76fb      	strb	r3, [r7, #27]
 8004afe:	e0e4      	b.n	8004cca <UART_SetConfig+0x282>
 8004b00:	2304      	movs	r3, #4
 8004b02:	76fb      	strb	r3, [r7, #27]
 8004b04:	e0e1      	b.n	8004cca <UART_SetConfig+0x282>
 8004b06:	2308      	movs	r3, #8
 8004b08:	76fb      	strb	r3, [r7, #27]
 8004b0a:	e0de      	b.n	8004cca <UART_SetConfig+0x282>
 8004b0c:	2310      	movs	r3, #16
 8004b0e:	76fb      	strb	r3, [r7, #27]
 8004b10:	e0db      	b.n	8004cca <UART_SetConfig+0x282>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a88      	ldr	r2, [pc, #544]	; (8004d38 <UART_SetConfig+0x2f0>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d132      	bne.n	8004b82 <UART_SetConfig+0x13a>
 8004b1c:	4b85      	ldr	r3, [pc, #532]	; (8004d34 <UART_SetConfig+0x2ec>)
 8004b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b22:	f003 030c 	and.w	r3, r3, #12
 8004b26:	2b0c      	cmp	r3, #12
 8004b28:	d828      	bhi.n	8004b7c <UART_SetConfig+0x134>
 8004b2a:	a201      	add	r2, pc, #4	; (adr r2, 8004b30 <UART_SetConfig+0xe8>)
 8004b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b30:	08004b65 	.word	0x08004b65
 8004b34:	08004b7d 	.word	0x08004b7d
 8004b38:	08004b7d 	.word	0x08004b7d
 8004b3c:	08004b7d 	.word	0x08004b7d
 8004b40:	08004b71 	.word	0x08004b71
 8004b44:	08004b7d 	.word	0x08004b7d
 8004b48:	08004b7d 	.word	0x08004b7d
 8004b4c:	08004b7d 	.word	0x08004b7d
 8004b50:	08004b6b 	.word	0x08004b6b
 8004b54:	08004b7d 	.word	0x08004b7d
 8004b58:	08004b7d 	.word	0x08004b7d
 8004b5c:	08004b7d 	.word	0x08004b7d
 8004b60:	08004b77 	.word	0x08004b77
 8004b64:	2300      	movs	r3, #0
 8004b66:	76fb      	strb	r3, [r7, #27]
 8004b68:	e0af      	b.n	8004cca <UART_SetConfig+0x282>
 8004b6a:	2302      	movs	r3, #2
 8004b6c:	76fb      	strb	r3, [r7, #27]
 8004b6e:	e0ac      	b.n	8004cca <UART_SetConfig+0x282>
 8004b70:	2304      	movs	r3, #4
 8004b72:	76fb      	strb	r3, [r7, #27]
 8004b74:	e0a9      	b.n	8004cca <UART_SetConfig+0x282>
 8004b76:	2308      	movs	r3, #8
 8004b78:	76fb      	strb	r3, [r7, #27]
 8004b7a:	e0a6      	b.n	8004cca <UART_SetConfig+0x282>
 8004b7c:	2310      	movs	r3, #16
 8004b7e:	76fb      	strb	r3, [r7, #27]
 8004b80:	e0a3      	b.n	8004cca <UART_SetConfig+0x282>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a6d      	ldr	r2, [pc, #436]	; (8004d3c <UART_SetConfig+0x2f4>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d120      	bne.n	8004bce <UART_SetConfig+0x186>
 8004b8c:	4b69      	ldr	r3, [pc, #420]	; (8004d34 <UART_SetConfig+0x2ec>)
 8004b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b92:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b96:	2b30      	cmp	r3, #48	; 0x30
 8004b98:	d013      	beq.n	8004bc2 <UART_SetConfig+0x17a>
 8004b9a:	2b30      	cmp	r3, #48	; 0x30
 8004b9c:	d814      	bhi.n	8004bc8 <UART_SetConfig+0x180>
 8004b9e:	2b20      	cmp	r3, #32
 8004ba0:	d009      	beq.n	8004bb6 <UART_SetConfig+0x16e>
 8004ba2:	2b20      	cmp	r3, #32
 8004ba4:	d810      	bhi.n	8004bc8 <UART_SetConfig+0x180>
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d002      	beq.n	8004bb0 <UART_SetConfig+0x168>
 8004baa:	2b10      	cmp	r3, #16
 8004bac:	d006      	beq.n	8004bbc <UART_SetConfig+0x174>
 8004bae:	e00b      	b.n	8004bc8 <UART_SetConfig+0x180>
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	76fb      	strb	r3, [r7, #27]
 8004bb4:	e089      	b.n	8004cca <UART_SetConfig+0x282>
 8004bb6:	2302      	movs	r3, #2
 8004bb8:	76fb      	strb	r3, [r7, #27]
 8004bba:	e086      	b.n	8004cca <UART_SetConfig+0x282>
 8004bbc:	2304      	movs	r3, #4
 8004bbe:	76fb      	strb	r3, [r7, #27]
 8004bc0:	e083      	b.n	8004cca <UART_SetConfig+0x282>
 8004bc2:	2308      	movs	r3, #8
 8004bc4:	76fb      	strb	r3, [r7, #27]
 8004bc6:	e080      	b.n	8004cca <UART_SetConfig+0x282>
 8004bc8:	2310      	movs	r3, #16
 8004bca:	76fb      	strb	r3, [r7, #27]
 8004bcc:	e07d      	b.n	8004cca <UART_SetConfig+0x282>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a5b      	ldr	r2, [pc, #364]	; (8004d40 <UART_SetConfig+0x2f8>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d120      	bne.n	8004c1a <UART_SetConfig+0x1d2>
 8004bd8:	4b56      	ldr	r3, [pc, #344]	; (8004d34 <UART_SetConfig+0x2ec>)
 8004bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bde:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004be2:	2bc0      	cmp	r3, #192	; 0xc0
 8004be4:	d013      	beq.n	8004c0e <UART_SetConfig+0x1c6>
 8004be6:	2bc0      	cmp	r3, #192	; 0xc0
 8004be8:	d814      	bhi.n	8004c14 <UART_SetConfig+0x1cc>
 8004bea:	2b80      	cmp	r3, #128	; 0x80
 8004bec:	d009      	beq.n	8004c02 <UART_SetConfig+0x1ba>
 8004bee:	2b80      	cmp	r3, #128	; 0x80
 8004bf0:	d810      	bhi.n	8004c14 <UART_SetConfig+0x1cc>
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d002      	beq.n	8004bfc <UART_SetConfig+0x1b4>
 8004bf6:	2b40      	cmp	r3, #64	; 0x40
 8004bf8:	d006      	beq.n	8004c08 <UART_SetConfig+0x1c0>
 8004bfa:	e00b      	b.n	8004c14 <UART_SetConfig+0x1cc>
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	76fb      	strb	r3, [r7, #27]
 8004c00:	e063      	b.n	8004cca <UART_SetConfig+0x282>
 8004c02:	2302      	movs	r3, #2
 8004c04:	76fb      	strb	r3, [r7, #27]
 8004c06:	e060      	b.n	8004cca <UART_SetConfig+0x282>
 8004c08:	2304      	movs	r3, #4
 8004c0a:	76fb      	strb	r3, [r7, #27]
 8004c0c:	e05d      	b.n	8004cca <UART_SetConfig+0x282>
 8004c0e:	2308      	movs	r3, #8
 8004c10:	76fb      	strb	r3, [r7, #27]
 8004c12:	e05a      	b.n	8004cca <UART_SetConfig+0x282>
 8004c14:	2310      	movs	r3, #16
 8004c16:	76fb      	strb	r3, [r7, #27]
 8004c18:	e057      	b.n	8004cca <UART_SetConfig+0x282>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a49      	ldr	r2, [pc, #292]	; (8004d44 <UART_SetConfig+0x2fc>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d125      	bne.n	8004c70 <UART_SetConfig+0x228>
 8004c24:	4b43      	ldr	r3, [pc, #268]	; (8004d34 <UART_SetConfig+0x2ec>)
 8004c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c32:	d017      	beq.n	8004c64 <UART_SetConfig+0x21c>
 8004c34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c38:	d817      	bhi.n	8004c6a <UART_SetConfig+0x222>
 8004c3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c3e:	d00b      	beq.n	8004c58 <UART_SetConfig+0x210>
 8004c40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c44:	d811      	bhi.n	8004c6a <UART_SetConfig+0x222>
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d003      	beq.n	8004c52 <UART_SetConfig+0x20a>
 8004c4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c4e:	d006      	beq.n	8004c5e <UART_SetConfig+0x216>
 8004c50:	e00b      	b.n	8004c6a <UART_SetConfig+0x222>
 8004c52:	2300      	movs	r3, #0
 8004c54:	76fb      	strb	r3, [r7, #27]
 8004c56:	e038      	b.n	8004cca <UART_SetConfig+0x282>
 8004c58:	2302      	movs	r3, #2
 8004c5a:	76fb      	strb	r3, [r7, #27]
 8004c5c:	e035      	b.n	8004cca <UART_SetConfig+0x282>
 8004c5e:	2304      	movs	r3, #4
 8004c60:	76fb      	strb	r3, [r7, #27]
 8004c62:	e032      	b.n	8004cca <UART_SetConfig+0x282>
 8004c64:	2308      	movs	r3, #8
 8004c66:	76fb      	strb	r3, [r7, #27]
 8004c68:	e02f      	b.n	8004cca <UART_SetConfig+0x282>
 8004c6a:	2310      	movs	r3, #16
 8004c6c:	76fb      	strb	r3, [r7, #27]
 8004c6e:	e02c      	b.n	8004cca <UART_SetConfig+0x282>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a2d      	ldr	r2, [pc, #180]	; (8004d2c <UART_SetConfig+0x2e4>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d125      	bne.n	8004cc6 <UART_SetConfig+0x27e>
 8004c7a:	4b2e      	ldr	r3, [pc, #184]	; (8004d34 <UART_SetConfig+0x2ec>)
 8004c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c88:	d017      	beq.n	8004cba <UART_SetConfig+0x272>
 8004c8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c8e:	d817      	bhi.n	8004cc0 <UART_SetConfig+0x278>
 8004c90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c94:	d00b      	beq.n	8004cae <UART_SetConfig+0x266>
 8004c96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c9a:	d811      	bhi.n	8004cc0 <UART_SetConfig+0x278>
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d003      	beq.n	8004ca8 <UART_SetConfig+0x260>
 8004ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ca4:	d006      	beq.n	8004cb4 <UART_SetConfig+0x26c>
 8004ca6:	e00b      	b.n	8004cc0 <UART_SetConfig+0x278>
 8004ca8:	2300      	movs	r3, #0
 8004caa:	76fb      	strb	r3, [r7, #27]
 8004cac:	e00d      	b.n	8004cca <UART_SetConfig+0x282>
 8004cae:	2302      	movs	r3, #2
 8004cb0:	76fb      	strb	r3, [r7, #27]
 8004cb2:	e00a      	b.n	8004cca <UART_SetConfig+0x282>
 8004cb4:	2304      	movs	r3, #4
 8004cb6:	76fb      	strb	r3, [r7, #27]
 8004cb8:	e007      	b.n	8004cca <UART_SetConfig+0x282>
 8004cba:	2308      	movs	r3, #8
 8004cbc:	76fb      	strb	r3, [r7, #27]
 8004cbe:	e004      	b.n	8004cca <UART_SetConfig+0x282>
 8004cc0:	2310      	movs	r3, #16
 8004cc2:	76fb      	strb	r3, [r7, #27]
 8004cc4:	e001      	b.n	8004cca <UART_SetConfig+0x282>
 8004cc6:	2310      	movs	r3, #16
 8004cc8:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a17      	ldr	r2, [pc, #92]	; (8004d2c <UART_SetConfig+0x2e4>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	f040 8087 	bne.w	8004de4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004cd6:	7efb      	ldrb	r3, [r7, #27]
 8004cd8:	2b08      	cmp	r3, #8
 8004cda:	d837      	bhi.n	8004d4c <UART_SetConfig+0x304>
 8004cdc:	a201      	add	r2, pc, #4	; (adr r2, 8004ce4 <UART_SetConfig+0x29c>)
 8004cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce2:	bf00      	nop
 8004ce4:	08004d09 	.word	0x08004d09
 8004ce8:	08004d4d 	.word	0x08004d4d
 8004cec:	08004d11 	.word	0x08004d11
 8004cf0:	08004d4d 	.word	0x08004d4d
 8004cf4:	08004d17 	.word	0x08004d17
 8004cf8:	08004d4d 	.word	0x08004d4d
 8004cfc:	08004d4d 	.word	0x08004d4d
 8004d00:	08004d4d 	.word	0x08004d4d
 8004d04:	08004d1f 	.word	0x08004d1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d08:	f7fe f9e8 	bl	80030dc <HAL_RCC_GetPCLK1Freq>
 8004d0c:	6178      	str	r0, [r7, #20]
        break;
 8004d0e:	e022      	b.n	8004d56 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d10:	4b0d      	ldr	r3, [pc, #52]	; (8004d48 <UART_SetConfig+0x300>)
 8004d12:	617b      	str	r3, [r7, #20]
        break;
 8004d14:	e01f      	b.n	8004d56 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d16:	f7fe f949 	bl	8002fac <HAL_RCC_GetSysClockFreq>
 8004d1a:	6178      	str	r0, [r7, #20]
        break;
 8004d1c:	e01b      	b.n	8004d56 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d22:	617b      	str	r3, [r7, #20]
        break;
 8004d24:	e017      	b.n	8004d56 <UART_SetConfig+0x30e>
 8004d26:	bf00      	nop
 8004d28:	efff69f3 	.word	0xefff69f3
 8004d2c:	40008000 	.word	0x40008000
 8004d30:	40013800 	.word	0x40013800
 8004d34:	40021000 	.word	0x40021000
 8004d38:	40004400 	.word	0x40004400
 8004d3c:	40004800 	.word	0x40004800
 8004d40:	40004c00 	.word	0x40004c00
 8004d44:	40005000 	.word	0x40005000
 8004d48:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	76bb      	strb	r3, [r7, #26]
        break;
 8004d54:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	f000 80f1 	beq.w	8004f40 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685a      	ldr	r2, [r3, #4]
 8004d62:	4613      	mov	r3, r2
 8004d64:	005b      	lsls	r3, r3, #1
 8004d66:	4413      	add	r3, r2
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d305      	bcc.n	8004d7a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d902      	bls.n	8004d80 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	76bb      	strb	r3, [r7, #26]
 8004d7e:	e0df      	b.n	8004f40 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f04f 0100 	mov.w	r1, #0
 8004d88:	f04f 0200 	mov.w	r2, #0
 8004d8c:	f04f 0300 	mov.w	r3, #0
 8004d90:	020b      	lsls	r3, r1, #8
 8004d92:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004d96:	0202      	lsls	r2, r0, #8
 8004d98:	6879      	ldr	r1, [r7, #4]
 8004d9a:	6849      	ldr	r1, [r1, #4]
 8004d9c:	0849      	lsrs	r1, r1, #1
 8004d9e:	4608      	mov	r0, r1
 8004da0:	f04f 0100 	mov.w	r1, #0
 8004da4:	1814      	adds	r4, r2, r0
 8004da6:	eb43 0501 	adc.w	r5, r3, r1
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	461a      	mov	r2, r3
 8004db0:	f04f 0300 	mov.w	r3, #0
 8004db4:	4620      	mov	r0, r4
 8004db6:	4629      	mov	r1, r5
 8004db8:	f7fb fa5a 	bl	8000270 <__aeabi_uldivmod>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dca:	d308      	bcc.n	8004dde <UART_SetConfig+0x396>
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dd2:	d204      	bcs.n	8004dde <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	60da      	str	r2, [r3, #12]
 8004ddc:	e0b0      	b.n	8004f40 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	76bb      	strb	r3, [r7, #26]
 8004de2:	e0ad      	b.n	8004f40 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	69db      	ldr	r3, [r3, #28]
 8004de8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dec:	d15b      	bne.n	8004ea6 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8004dee:	7efb      	ldrb	r3, [r7, #27]
 8004df0:	2b08      	cmp	r3, #8
 8004df2:	d828      	bhi.n	8004e46 <UART_SetConfig+0x3fe>
 8004df4:	a201      	add	r2, pc, #4	; (adr r2, 8004dfc <UART_SetConfig+0x3b4>)
 8004df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfa:	bf00      	nop
 8004dfc:	08004e21 	.word	0x08004e21
 8004e00:	08004e29 	.word	0x08004e29
 8004e04:	08004e31 	.word	0x08004e31
 8004e08:	08004e47 	.word	0x08004e47
 8004e0c:	08004e37 	.word	0x08004e37
 8004e10:	08004e47 	.word	0x08004e47
 8004e14:	08004e47 	.word	0x08004e47
 8004e18:	08004e47 	.word	0x08004e47
 8004e1c:	08004e3f 	.word	0x08004e3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e20:	f7fe f95c 	bl	80030dc <HAL_RCC_GetPCLK1Freq>
 8004e24:	6178      	str	r0, [r7, #20]
        break;
 8004e26:	e013      	b.n	8004e50 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e28:	f7fe f96e 	bl	8003108 <HAL_RCC_GetPCLK2Freq>
 8004e2c:	6178      	str	r0, [r7, #20]
        break;
 8004e2e:	e00f      	b.n	8004e50 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e30:	4b49      	ldr	r3, [pc, #292]	; (8004f58 <UART_SetConfig+0x510>)
 8004e32:	617b      	str	r3, [r7, #20]
        break;
 8004e34:	e00c      	b.n	8004e50 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e36:	f7fe f8b9 	bl	8002fac <HAL_RCC_GetSysClockFreq>
 8004e3a:	6178      	str	r0, [r7, #20]
        break;
 8004e3c:	e008      	b.n	8004e50 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e42:	617b      	str	r3, [r7, #20]
        break;
 8004e44:	e004      	b.n	8004e50 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004e46:	2300      	movs	r3, #0
 8004e48:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	76bb      	strb	r3, [r7, #26]
        break;
 8004e4e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d074      	beq.n	8004f40 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	005a      	lsls	r2, r3, #1
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	085b      	lsrs	r3, r3, #1
 8004e60:	441a      	add	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e6a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	2b0f      	cmp	r3, #15
 8004e70:	d916      	bls.n	8004ea0 <UART_SetConfig+0x458>
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e78:	d212      	bcs.n	8004ea0 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	f023 030f 	bic.w	r3, r3, #15
 8004e82:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	085b      	lsrs	r3, r3, #1
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	f003 0307 	and.w	r3, r3, #7
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	89fb      	ldrh	r3, [r7, #14]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	89fa      	ldrh	r2, [r7, #14]
 8004e9c:	60da      	str	r2, [r3, #12]
 8004e9e:	e04f      	b.n	8004f40 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	76bb      	strb	r3, [r7, #26]
 8004ea4:	e04c      	b.n	8004f40 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ea6:	7efb      	ldrb	r3, [r7, #27]
 8004ea8:	2b08      	cmp	r3, #8
 8004eaa:	d828      	bhi.n	8004efe <UART_SetConfig+0x4b6>
 8004eac:	a201      	add	r2, pc, #4	; (adr r2, 8004eb4 <UART_SetConfig+0x46c>)
 8004eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb2:	bf00      	nop
 8004eb4:	08004ed9 	.word	0x08004ed9
 8004eb8:	08004ee1 	.word	0x08004ee1
 8004ebc:	08004ee9 	.word	0x08004ee9
 8004ec0:	08004eff 	.word	0x08004eff
 8004ec4:	08004eef 	.word	0x08004eef
 8004ec8:	08004eff 	.word	0x08004eff
 8004ecc:	08004eff 	.word	0x08004eff
 8004ed0:	08004eff 	.word	0x08004eff
 8004ed4:	08004ef7 	.word	0x08004ef7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ed8:	f7fe f900 	bl	80030dc <HAL_RCC_GetPCLK1Freq>
 8004edc:	6178      	str	r0, [r7, #20]
        break;
 8004ede:	e013      	b.n	8004f08 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ee0:	f7fe f912 	bl	8003108 <HAL_RCC_GetPCLK2Freq>
 8004ee4:	6178      	str	r0, [r7, #20]
        break;
 8004ee6:	e00f      	b.n	8004f08 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ee8:	4b1b      	ldr	r3, [pc, #108]	; (8004f58 <UART_SetConfig+0x510>)
 8004eea:	617b      	str	r3, [r7, #20]
        break;
 8004eec:	e00c      	b.n	8004f08 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eee:	f7fe f85d 	bl	8002fac <HAL_RCC_GetSysClockFreq>
 8004ef2:	6178      	str	r0, [r7, #20]
        break;
 8004ef4:	e008      	b.n	8004f08 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ef6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004efa:	617b      	str	r3, [r7, #20]
        break;
 8004efc:	e004      	b.n	8004f08 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004efe:	2300      	movs	r3, #0
 8004f00:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	76bb      	strb	r3, [r7, #26]
        break;
 8004f06:	bf00      	nop
    }

    if (pclk != 0U)
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d018      	beq.n	8004f40 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	085a      	lsrs	r2, r3, #1
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	441a      	add	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f20:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	2b0f      	cmp	r3, #15
 8004f26:	d909      	bls.n	8004f3c <UART_SetConfig+0x4f4>
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f2e:	d205      	bcs.n	8004f3c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	60da      	str	r2, [r3, #12]
 8004f3a:	e001      	b.n	8004f40 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004f4c:	7ebb      	ldrb	r3, [r7, #26]
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3720      	adds	r7, #32
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bdb0      	pop	{r4, r5, r7, pc}
 8004f56:	bf00      	nop
 8004f58:	00f42400 	.word	0x00f42400

08004f5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	f003 0301 	and.w	r3, r3, #1
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00a      	beq.n	8004f86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	430a      	orrs	r2, r1
 8004f84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00a      	beq.n	8004fa8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fac:	f003 0304 	and.w	r3, r3, #4
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00a      	beq.n	8004fca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fce:	f003 0308 	and.w	r3, r3, #8
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00a      	beq.n	8004fec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	430a      	orrs	r2, r1
 8004fea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff0:	f003 0310 	and.w	r3, r3, #16
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00a      	beq.n	800500e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	430a      	orrs	r2, r1
 800500c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005012:	f003 0320 	and.w	r3, r3, #32
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00a      	beq.n	8005030 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	430a      	orrs	r2, r1
 800502e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005038:	2b00      	cmp	r3, #0
 800503a:	d01a      	beq.n	8005072 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	430a      	orrs	r2, r1
 8005050:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005056:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800505a:	d10a      	bne.n	8005072 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	430a      	orrs	r2, r1
 8005070:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00a      	beq.n	8005094 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	430a      	orrs	r2, r1
 8005092:	605a      	str	r2, [r3, #4]
  }
}
 8005094:	bf00      	nop
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af02      	add	r7, sp, #8
 80050a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050b0:	f7fb ff9e 	bl	8000ff0 <HAL_GetTick>
 80050b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0308 	and.w	r3, r3, #8
 80050c0:	2b08      	cmp	r3, #8
 80050c2:	d10e      	bne.n	80050e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050c8:	9300      	str	r3, [sp, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 f82d 	bl	8005132 <UART_WaitOnFlagUntilTimeout>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d001      	beq.n	80050e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e023      	b.n	800512a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0304 	and.w	r3, r3, #4
 80050ec:	2b04      	cmp	r3, #4
 80050ee:	d10e      	bne.n	800510e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050f4:	9300      	str	r3, [sp, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 f817 	bl	8005132 <UART_WaitOnFlagUntilTimeout>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d001      	beq.n	800510e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e00d      	b.n	800512a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2220      	movs	r2, #32
 8005112:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2220      	movs	r2, #32
 8005118:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3710      	adds	r7, #16
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b09c      	sub	sp, #112	; 0x70
 8005136:	af00      	add	r7, sp, #0
 8005138:	60f8      	str	r0, [r7, #12]
 800513a:	60b9      	str	r1, [r7, #8]
 800513c:	603b      	str	r3, [r7, #0]
 800513e:	4613      	mov	r3, r2
 8005140:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005142:	e0a5      	b.n	8005290 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005144:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514a:	f000 80a1 	beq.w	8005290 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800514e:	f7fb ff4f 	bl	8000ff0 <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800515a:	429a      	cmp	r2, r3
 800515c:	d302      	bcc.n	8005164 <UART_WaitOnFlagUntilTimeout+0x32>
 800515e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005160:	2b00      	cmp	r3, #0
 8005162:	d13e      	bne.n	80051e2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800516c:	e853 3f00 	ldrex	r3, [r3]
 8005170:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005174:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005178:	667b      	str	r3, [r7, #100]	; 0x64
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	461a      	mov	r2, r3
 8005180:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005182:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005184:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005186:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005188:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800518a:	e841 2300 	strex	r3, r2, [r1]
 800518e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005190:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1e6      	bne.n	8005164 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	3308      	adds	r3, #8
 800519c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051a0:	e853 3f00 	ldrex	r3, [r3]
 80051a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a8:	f023 0301 	bic.w	r3, r3, #1
 80051ac:	663b      	str	r3, [r7, #96]	; 0x60
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	3308      	adds	r3, #8
 80051b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80051b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80051b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80051bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051be:	e841 2300 	strex	r3, r2, [r1]
 80051c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80051c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1e5      	bne.n	8005196 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2220      	movs	r2, #32
 80051ce:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2220      	movs	r2, #32
 80051d4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e067      	b.n	80052b2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0304 	and.w	r3, r3, #4
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d04f      	beq.n	8005290 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	69db      	ldr	r3, [r3, #28]
 80051f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051fe:	d147      	bne.n	8005290 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005208:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005212:	e853 3f00 	ldrex	r3, [r3]
 8005216:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800521e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	461a      	mov	r2, r3
 8005226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005228:	637b      	str	r3, [r7, #52]	; 0x34
 800522a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800522e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005230:	e841 2300 	strex	r3, r2, [r1]
 8005234:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1e6      	bne.n	800520a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	3308      	adds	r3, #8
 8005242:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	e853 3f00 	ldrex	r3, [r3]
 800524a:	613b      	str	r3, [r7, #16]
   return(result);
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	f023 0301 	bic.w	r3, r3, #1
 8005252:	66bb      	str	r3, [r7, #104]	; 0x68
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	3308      	adds	r3, #8
 800525a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800525c:	623a      	str	r2, [r7, #32]
 800525e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005260:	69f9      	ldr	r1, [r7, #28]
 8005262:	6a3a      	ldr	r2, [r7, #32]
 8005264:	e841 2300 	strex	r3, r2, [r1]
 8005268:	61bb      	str	r3, [r7, #24]
   return(result);
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1e5      	bne.n	800523c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2220      	movs	r2, #32
 8005274:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2220      	movs	r2, #32
 800527a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2220      	movs	r2, #32
 8005280:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e010      	b.n	80052b2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	69da      	ldr	r2, [r3, #28]
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	4013      	ands	r3, r2
 800529a:	68ba      	ldr	r2, [r7, #8]
 800529c:	429a      	cmp	r2, r3
 800529e:	bf0c      	ite	eq
 80052a0:	2301      	moveq	r3, #1
 80052a2:	2300      	movne	r3, #0
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	461a      	mov	r2, r3
 80052a8:	79fb      	ldrb	r3, [r7, #7]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	f43f af4a 	beq.w	8005144 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3770      	adds	r7, #112	; 0x70
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
	...

080052bc <__errno>:
 80052bc:	4b01      	ldr	r3, [pc, #4]	; (80052c4 <__errno+0x8>)
 80052be:	6818      	ldr	r0, [r3, #0]
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	2000000c 	.word	0x2000000c

080052c8 <__libc_init_array>:
 80052c8:	b570      	push	{r4, r5, r6, lr}
 80052ca:	4d0d      	ldr	r5, [pc, #52]	; (8005300 <__libc_init_array+0x38>)
 80052cc:	4c0d      	ldr	r4, [pc, #52]	; (8005304 <__libc_init_array+0x3c>)
 80052ce:	1b64      	subs	r4, r4, r5
 80052d0:	10a4      	asrs	r4, r4, #2
 80052d2:	2600      	movs	r6, #0
 80052d4:	42a6      	cmp	r6, r4
 80052d6:	d109      	bne.n	80052ec <__libc_init_array+0x24>
 80052d8:	4d0b      	ldr	r5, [pc, #44]	; (8005308 <__libc_init_array+0x40>)
 80052da:	4c0c      	ldr	r4, [pc, #48]	; (800530c <__libc_init_array+0x44>)
 80052dc:	f000 ff76 	bl	80061cc <_init>
 80052e0:	1b64      	subs	r4, r4, r5
 80052e2:	10a4      	asrs	r4, r4, #2
 80052e4:	2600      	movs	r6, #0
 80052e6:	42a6      	cmp	r6, r4
 80052e8:	d105      	bne.n	80052f6 <__libc_init_array+0x2e>
 80052ea:	bd70      	pop	{r4, r5, r6, pc}
 80052ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80052f0:	4798      	blx	r3
 80052f2:	3601      	adds	r6, #1
 80052f4:	e7ee      	b.n	80052d4 <__libc_init_array+0xc>
 80052f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80052fa:	4798      	blx	r3
 80052fc:	3601      	adds	r6, #1
 80052fe:	e7f2      	b.n	80052e6 <__libc_init_array+0x1e>
 8005300:	08006310 	.word	0x08006310
 8005304:	08006310 	.word	0x08006310
 8005308:	08006310 	.word	0x08006310
 800530c:	08006314 	.word	0x08006314

08005310 <memset>:
 8005310:	4402      	add	r2, r0
 8005312:	4603      	mov	r3, r0
 8005314:	4293      	cmp	r3, r2
 8005316:	d100      	bne.n	800531a <memset+0xa>
 8005318:	4770      	bx	lr
 800531a:	f803 1b01 	strb.w	r1, [r3], #1
 800531e:	e7f9      	b.n	8005314 <memset+0x4>

08005320 <iprintf>:
 8005320:	b40f      	push	{r0, r1, r2, r3}
 8005322:	4b0a      	ldr	r3, [pc, #40]	; (800534c <iprintf+0x2c>)
 8005324:	b513      	push	{r0, r1, r4, lr}
 8005326:	681c      	ldr	r4, [r3, #0]
 8005328:	b124      	cbz	r4, 8005334 <iprintf+0x14>
 800532a:	69a3      	ldr	r3, [r4, #24]
 800532c:	b913      	cbnz	r3, 8005334 <iprintf+0x14>
 800532e:	4620      	mov	r0, r4
 8005330:	f000 f866 	bl	8005400 <__sinit>
 8005334:	ab05      	add	r3, sp, #20
 8005336:	9a04      	ldr	r2, [sp, #16]
 8005338:	68a1      	ldr	r1, [r4, #8]
 800533a:	9301      	str	r3, [sp, #4]
 800533c:	4620      	mov	r0, r4
 800533e:	f000 f983 	bl	8005648 <_vfiprintf_r>
 8005342:	b002      	add	sp, #8
 8005344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005348:	b004      	add	sp, #16
 800534a:	4770      	bx	lr
 800534c:	2000000c 	.word	0x2000000c

08005350 <std>:
 8005350:	2300      	movs	r3, #0
 8005352:	b510      	push	{r4, lr}
 8005354:	4604      	mov	r4, r0
 8005356:	e9c0 3300 	strd	r3, r3, [r0]
 800535a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800535e:	6083      	str	r3, [r0, #8]
 8005360:	8181      	strh	r1, [r0, #12]
 8005362:	6643      	str	r3, [r0, #100]	; 0x64
 8005364:	81c2      	strh	r2, [r0, #14]
 8005366:	6183      	str	r3, [r0, #24]
 8005368:	4619      	mov	r1, r3
 800536a:	2208      	movs	r2, #8
 800536c:	305c      	adds	r0, #92	; 0x5c
 800536e:	f7ff ffcf 	bl	8005310 <memset>
 8005372:	4b05      	ldr	r3, [pc, #20]	; (8005388 <std+0x38>)
 8005374:	6263      	str	r3, [r4, #36]	; 0x24
 8005376:	4b05      	ldr	r3, [pc, #20]	; (800538c <std+0x3c>)
 8005378:	62a3      	str	r3, [r4, #40]	; 0x28
 800537a:	4b05      	ldr	r3, [pc, #20]	; (8005390 <std+0x40>)
 800537c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800537e:	4b05      	ldr	r3, [pc, #20]	; (8005394 <std+0x44>)
 8005380:	6224      	str	r4, [r4, #32]
 8005382:	6323      	str	r3, [r4, #48]	; 0x30
 8005384:	bd10      	pop	{r4, pc}
 8005386:	bf00      	nop
 8005388:	08005bf1 	.word	0x08005bf1
 800538c:	08005c13 	.word	0x08005c13
 8005390:	08005c4b 	.word	0x08005c4b
 8005394:	08005c6f 	.word	0x08005c6f

08005398 <_cleanup_r>:
 8005398:	4901      	ldr	r1, [pc, #4]	; (80053a0 <_cleanup_r+0x8>)
 800539a:	f000 b8af 	b.w	80054fc <_fwalk_reent>
 800539e:	bf00      	nop
 80053a0:	08005f49 	.word	0x08005f49

080053a4 <__sfmoreglue>:
 80053a4:	b570      	push	{r4, r5, r6, lr}
 80053a6:	1e4a      	subs	r2, r1, #1
 80053a8:	2568      	movs	r5, #104	; 0x68
 80053aa:	4355      	muls	r5, r2
 80053ac:	460e      	mov	r6, r1
 80053ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80053b2:	f000 f8c5 	bl	8005540 <_malloc_r>
 80053b6:	4604      	mov	r4, r0
 80053b8:	b140      	cbz	r0, 80053cc <__sfmoreglue+0x28>
 80053ba:	2100      	movs	r1, #0
 80053bc:	e9c0 1600 	strd	r1, r6, [r0]
 80053c0:	300c      	adds	r0, #12
 80053c2:	60a0      	str	r0, [r4, #8]
 80053c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80053c8:	f7ff ffa2 	bl	8005310 <memset>
 80053cc:	4620      	mov	r0, r4
 80053ce:	bd70      	pop	{r4, r5, r6, pc}

080053d0 <__sfp_lock_acquire>:
 80053d0:	4801      	ldr	r0, [pc, #4]	; (80053d8 <__sfp_lock_acquire+0x8>)
 80053d2:	f000 b8b3 	b.w	800553c <__retarget_lock_acquire_recursive>
 80053d6:	bf00      	nop
 80053d8:	200001e0 	.word	0x200001e0

080053dc <__sfp_lock_release>:
 80053dc:	4801      	ldr	r0, [pc, #4]	; (80053e4 <__sfp_lock_release+0x8>)
 80053de:	f000 b8ae 	b.w	800553e <__retarget_lock_release_recursive>
 80053e2:	bf00      	nop
 80053e4:	200001e0 	.word	0x200001e0

080053e8 <__sinit_lock_acquire>:
 80053e8:	4801      	ldr	r0, [pc, #4]	; (80053f0 <__sinit_lock_acquire+0x8>)
 80053ea:	f000 b8a7 	b.w	800553c <__retarget_lock_acquire_recursive>
 80053ee:	bf00      	nop
 80053f0:	200001db 	.word	0x200001db

080053f4 <__sinit_lock_release>:
 80053f4:	4801      	ldr	r0, [pc, #4]	; (80053fc <__sinit_lock_release+0x8>)
 80053f6:	f000 b8a2 	b.w	800553e <__retarget_lock_release_recursive>
 80053fa:	bf00      	nop
 80053fc:	200001db 	.word	0x200001db

08005400 <__sinit>:
 8005400:	b510      	push	{r4, lr}
 8005402:	4604      	mov	r4, r0
 8005404:	f7ff fff0 	bl	80053e8 <__sinit_lock_acquire>
 8005408:	69a3      	ldr	r3, [r4, #24]
 800540a:	b11b      	cbz	r3, 8005414 <__sinit+0x14>
 800540c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005410:	f7ff bff0 	b.w	80053f4 <__sinit_lock_release>
 8005414:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005418:	6523      	str	r3, [r4, #80]	; 0x50
 800541a:	4b13      	ldr	r3, [pc, #76]	; (8005468 <__sinit+0x68>)
 800541c:	4a13      	ldr	r2, [pc, #76]	; (800546c <__sinit+0x6c>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	62a2      	str	r2, [r4, #40]	; 0x28
 8005422:	42a3      	cmp	r3, r4
 8005424:	bf04      	itt	eq
 8005426:	2301      	moveq	r3, #1
 8005428:	61a3      	streq	r3, [r4, #24]
 800542a:	4620      	mov	r0, r4
 800542c:	f000 f820 	bl	8005470 <__sfp>
 8005430:	6060      	str	r0, [r4, #4]
 8005432:	4620      	mov	r0, r4
 8005434:	f000 f81c 	bl	8005470 <__sfp>
 8005438:	60a0      	str	r0, [r4, #8]
 800543a:	4620      	mov	r0, r4
 800543c:	f000 f818 	bl	8005470 <__sfp>
 8005440:	2200      	movs	r2, #0
 8005442:	60e0      	str	r0, [r4, #12]
 8005444:	2104      	movs	r1, #4
 8005446:	6860      	ldr	r0, [r4, #4]
 8005448:	f7ff ff82 	bl	8005350 <std>
 800544c:	68a0      	ldr	r0, [r4, #8]
 800544e:	2201      	movs	r2, #1
 8005450:	2109      	movs	r1, #9
 8005452:	f7ff ff7d 	bl	8005350 <std>
 8005456:	68e0      	ldr	r0, [r4, #12]
 8005458:	2202      	movs	r2, #2
 800545a:	2112      	movs	r1, #18
 800545c:	f7ff ff78 	bl	8005350 <std>
 8005460:	2301      	movs	r3, #1
 8005462:	61a3      	str	r3, [r4, #24]
 8005464:	e7d2      	b.n	800540c <__sinit+0xc>
 8005466:	bf00      	nop
 8005468:	08006270 	.word	0x08006270
 800546c:	08005399 	.word	0x08005399

08005470 <__sfp>:
 8005470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005472:	4607      	mov	r7, r0
 8005474:	f7ff ffac 	bl	80053d0 <__sfp_lock_acquire>
 8005478:	4b1e      	ldr	r3, [pc, #120]	; (80054f4 <__sfp+0x84>)
 800547a:	681e      	ldr	r6, [r3, #0]
 800547c:	69b3      	ldr	r3, [r6, #24]
 800547e:	b913      	cbnz	r3, 8005486 <__sfp+0x16>
 8005480:	4630      	mov	r0, r6
 8005482:	f7ff ffbd 	bl	8005400 <__sinit>
 8005486:	3648      	adds	r6, #72	; 0x48
 8005488:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800548c:	3b01      	subs	r3, #1
 800548e:	d503      	bpl.n	8005498 <__sfp+0x28>
 8005490:	6833      	ldr	r3, [r6, #0]
 8005492:	b30b      	cbz	r3, 80054d8 <__sfp+0x68>
 8005494:	6836      	ldr	r6, [r6, #0]
 8005496:	e7f7      	b.n	8005488 <__sfp+0x18>
 8005498:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800549c:	b9d5      	cbnz	r5, 80054d4 <__sfp+0x64>
 800549e:	4b16      	ldr	r3, [pc, #88]	; (80054f8 <__sfp+0x88>)
 80054a0:	60e3      	str	r3, [r4, #12]
 80054a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80054a6:	6665      	str	r5, [r4, #100]	; 0x64
 80054a8:	f000 f847 	bl	800553a <__retarget_lock_init_recursive>
 80054ac:	f7ff ff96 	bl	80053dc <__sfp_lock_release>
 80054b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80054b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80054b8:	6025      	str	r5, [r4, #0]
 80054ba:	61a5      	str	r5, [r4, #24]
 80054bc:	2208      	movs	r2, #8
 80054be:	4629      	mov	r1, r5
 80054c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80054c4:	f7ff ff24 	bl	8005310 <memset>
 80054c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80054cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80054d0:	4620      	mov	r0, r4
 80054d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054d4:	3468      	adds	r4, #104	; 0x68
 80054d6:	e7d9      	b.n	800548c <__sfp+0x1c>
 80054d8:	2104      	movs	r1, #4
 80054da:	4638      	mov	r0, r7
 80054dc:	f7ff ff62 	bl	80053a4 <__sfmoreglue>
 80054e0:	4604      	mov	r4, r0
 80054e2:	6030      	str	r0, [r6, #0]
 80054e4:	2800      	cmp	r0, #0
 80054e6:	d1d5      	bne.n	8005494 <__sfp+0x24>
 80054e8:	f7ff ff78 	bl	80053dc <__sfp_lock_release>
 80054ec:	230c      	movs	r3, #12
 80054ee:	603b      	str	r3, [r7, #0]
 80054f0:	e7ee      	b.n	80054d0 <__sfp+0x60>
 80054f2:	bf00      	nop
 80054f4:	08006270 	.word	0x08006270
 80054f8:	ffff0001 	.word	0xffff0001

080054fc <_fwalk_reent>:
 80054fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005500:	4606      	mov	r6, r0
 8005502:	4688      	mov	r8, r1
 8005504:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005508:	2700      	movs	r7, #0
 800550a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800550e:	f1b9 0901 	subs.w	r9, r9, #1
 8005512:	d505      	bpl.n	8005520 <_fwalk_reent+0x24>
 8005514:	6824      	ldr	r4, [r4, #0]
 8005516:	2c00      	cmp	r4, #0
 8005518:	d1f7      	bne.n	800550a <_fwalk_reent+0xe>
 800551a:	4638      	mov	r0, r7
 800551c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005520:	89ab      	ldrh	r3, [r5, #12]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d907      	bls.n	8005536 <_fwalk_reent+0x3a>
 8005526:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800552a:	3301      	adds	r3, #1
 800552c:	d003      	beq.n	8005536 <_fwalk_reent+0x3a>
 800552e:	4629      	mov	r1, r5
 8005530:	4630      	mov	r0, r6
 8005532:	47c0      	blx	r8
 8005534:	4307      	orrs	r7, r0
 8005536:	3568      	adds	r5, #104	; 0x68
 8005538:	e7e9      	b.n	800550e <_fwalk_reent+0x12>

0800553a <__retarget_lock_init_recursive>:
 800553a:	4770      	bx	lr

0800553c <__retarget_lock_acquire_recursive>:
 800553c:	4770      	bx	lr

0800553e <__retarget_lock_release_recursive>:
 800553e:	4770      	bx	lr

08005540 <_malloc_r>:
 8005540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005542:	1ccd      	adds	r5, r1, #3
 8005544:	f025 0503 	bic.w	r5, r5, #3
 8005548:	3508      	adds	r5, #8
 800554a:	2d0c      	cmp	r5, #12
 800554c:	bf38      	it	cc
 800554e:	250c      	movcc	r5, #12
 8005550:	2d00      	cmp	r5, #0
 8005552:	4606      	mov	r6, r0
 8005554:	db01      	blt.n	800555a <_malloc_r+0x1a>
 8005556:	42a9      	cmp	r1, r5
 8005558:	d903      	bls.n	8005562 <_malloc_r+0x22>
 800555a:	230c      	movs	r3, #12
 800555c:	6033      	str	r3, [r6, #0]
 800555e:	2000      	movs	r0, #0
 8005560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005562:	f000 fda3 	bl	80060ac <__malloc_lock>
 8005566:	4921      	ldr	r1, [pc, #132]	; (80055ec <_malloc_r+0xac>)
 8005568:	680a      	ldr	r2, [r1, #0]
 800556a:	4614      	mov	r4, r2
 800556c:	b99c      	cbnz	r4, 8005596 <_malloc_r+0x56>
 800556e:	4f20      	ldr	r7, [pc, #128]	; (80055f0 <_malloc_r+0xb0>)
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	b923      	cbnz	r3, 800557e <_malloc_r+0x3e>
 8005574:	4621      	mov	r1, r4
 8005576:	4630      	mov	r0, r6
 8005578:	f000 fb2a 	bl	8005bd0 <_sbrk_r>
 800557c:	6038      	str	r0, [r7, #0]
 800557e:	4629      	mov	r1, r5
 8005580:	4630      	mov	r0, r6
 8005582:	f000 fb25 	bl	8005bd0 <_sbrk_r>
 8005586:	1c43      	adds	r3, r0, #1
 8005588:	d123      	bne.n	80055d2 <_malloc_r+0x92>
 800558a:	230c      	movs	r3, #12
 800558c:	6033      	str	r3, [r6, #0]
 800558e:	4630      	mov	r0, r6
 8005590:	f000 fd92 	bl	80060b8 <__malloc_unlock>
 8005594:	e7e3      	b.n	800555e <_malloc_r+0x1e>
 8005596:	6823      	ldr	r3, [r4, #0]
 8005598:	1b5b      	subs	r3, r3, r5
 800559a:	d417      	bmi.n	80055cc <_malloc_r+0x8c>
 800559c:	2b0b      	cmp	r3, #11
 800559e:	d903      	bls.n	80055a8 <_malloc_r+0x68>
 80055a0:	6023      	str	r3, [r4, #0]
 80055a2:	441c      	add	r4, r3
 80055a4:	6025      	str	r5, [r4, #0]
 80055a6:	e004      	b.n	80055b2 <_malloc_r+0x72>
 80055a8:	6863      	ldr	r3, [r4, #4]
 80055aa:	42a2      	cmp	r2, r4
 80055ac:	bf0c      	ite	eq
 80055ae:	600b      	streq	r3, [r1, #0]
 80055b0:	6053      	strne	r3, [r2, #4]
 80055b2:	4630      	mov	r0, r6
 80055b4:	f000 fd80 	bl	80060b8 <__malloc_unlock>
 80055b8:	f104 000b 	add.w	r0, r4, #11
 80055bc:	1d23      	adds	r3, r4, #4
 80055be:	f020 0007 	bic.w	r0, r0, #7
 80055c2:	1ac2      	subs	r2, r0, r3
 80055c4:	d0cc      	beq.n	8005560 <_malloc_r+0x20>
 80055c6:	1a1b      	subs	r3, r3, r0
 80055c8:	50a3      	str	r3, [r4, r2]
 80055ca:	e7c9      	b.n	8005560 <_malloc_r+0x20>
 80055cc:	4622      	mov	r2, r4
 80055ce:	6864      	ldr	r4, [r4, #4]
 80055d0:	e7cc      	b.n	800556c <_malloc_r+0x2c>
 80055d2:	1cc4      	adds	r4, r0, #3
 80055d4:	f024 0403 	bic.w	r4, r4, #3
 80055d8:	42a0      	cmp	r0, r4
 80055da:	d0e3      	beq.n	80055a4 <_malloc_r+0x64>
 80055dc:	1a21      	subs	r1, r4, r0
 80055de:	4630      	mov	r0, r6
 80055e0:	f000 faf6 	bl	8005bd0 <_sbrk_r>
 80055e4:	3001      	adds	r0, #1
 80055e6:	d1dd      	bne.n	80055a4 <_malloc_r+0x64>
 80055e8:	e7cf      	b.n	800558a <_malloc_r+0x4a>
 80055ea:	bf00      	nop
 80055ec:	20000090 	.word	0x20000090
 80055f0:	20000094 	.word	0x20000094

080055f4 <__sfputc_r>:
 80055f4:	6893      	ldr	r3, [r2, #8]
 80055f6:	3b01      	subs	r3, #1
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	b410      	push	{r4}
 80055fc:	6093      	str	r3, [r2, #8]
 80055fe:	da08      	bge.n	8005612 <__sfputc_r+0x1e>
 8005600:	6994      	ldr	r4, [r2, #24]
 8005602:	42a3      	cmp	r3, r4
 8005604:	db01      	blt.n	800560a <__sfputc_r+0x16>
 8005606:	290a      	cmp	r1, #10
 8005608:	d103      	bne.n	8005612 <__sfputc_r+0x1e>
 800560a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800560e:	f000 bb33 	b.w	8005c78 <__swbuf_r>
 8005612:	6813      	ldr	r3, [r2, #0]
 8005614:	1c58      	adds	r0, r3, #1
 8005616:	6010      	str	r0, [r2, #0]
 8005618:	7019      	strb	r1, [r3, #0]
 800561a:	4608      	mov	r0, r1
 800561c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005620:	4770      	bx	lr

08005622 <__sfputs_r>:
 8005622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005624:	4606      	mov	r6, r0
 8005626:	460f      	mov	r7, r1
 8005628:	4614      	mov	r4, r2
 800562a:	18d5      	adds	r5, r2, r3
 800562c:	42ac      	cmp	r4, r5
 800562e:	d101      	bne.n	8005634 <__sfputs_r+0x12>
 8005630:	2000      	movs	r0, #0
 8005632:	e007      	b.n	8005644 <__sfputs_r+0x22>
 8005634:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005638:	463a      	mov	r2, r7
 800563a:	4630      	mov	r0, r6
 800563c:	f7ff ffda 	bl	80055f4 <__sfputc_r>
 8005640:	1c43      	adds	r3, r0, #1
 8005642:	d1f3      	bne.n	800562c <__sfputs_r+0xa>
 8005644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005648 <_vfiprintf_r>:
 8005648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800564c:	460d      	mov	r5, r1
 800564e:	b09d      	sub	sp, #116	; 0x74
 8005650:	4614      	mov	r4, r2
 8005652:	4698      	mov	r8, r3
 8005654:	4606      	mov	r6, r0
 8005656:	b118      	cbz	r0, 8005660 <_vfiprintf_r+0x18>
 8005658:	6983      	ldr	r3, [r0, #24]
 800565a:	b90b      	cbnz	r3, 8005660 <_vfiprintf_r+0x18>
 800565c:	f7ff fed0 	bl	8005400 <__sinit>
 8005660:	4b89      	ldr	r3, [pc, #548]	; (8005888 <_vfiprintf_r+0x240>)
 8005662:	429d      	cmp	r5, r3
 8005664:	d11b      	bne.n	800569e <_vfiprintf_r+0x56>
 8005666:	6875      	ldr	r5, [r6, #4]
 8005668:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800566a:	07d9      	lsls	r1, r3, #31
 800566c:	d405      	bmi.n	800567a <_vfiprintf_r+0x32>
 800566e:	89ab      	ldrh	r3, [r5, #12]
 8005670:	059a      	lsls	r2, r3, #22
 8005672:	d402      	bmi.n	800567a <_vfiprintf_r+0x32>
 8005674:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005676:	f7ff ff61 	bl	800553c <__retarget_lock_acquire_recursive>
 800567a:	89ab      	ldrh	r3, [r5, #12]
 800567c:	071b      	lsls	r3, r3, #28
 800567e:	d501      	bpl.n	8005684 <_vfiprintf_r+0x3c>
 8005680:	692b      	ldr	r3, [r5, #16]
 8005682:	b9eb      	cbnz	r3, 80056c0 <_vfiprintf_r+0x78>
 8005684:	4629      	mov	r1, r5
 8005686:	4630      	mov	r0, r6
 8005688:	f000 fb5a 	bl	8005d40 <__swsetup_r>
 800568c:	b1c0      	cbz	r0, 80056c0 <_vfiprintf_r+0x78>
 800568e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005690:	07dc      	lsls	r4, r3, #31
 8005692:	d50e      	bpl.n	80056b2 <_vfiprintf_r+0x6a>
 8005694:	f04f 30ff 	mov.w	r0, #4294967295
 8005698:	b01d      	add	sp, #116	; 0x74
 800569a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800569e:	4b7b      	ldr	r3, [pc, #492]	; (800588c <_vfiprintf_r+0x244>)
 80056a0:	429d      	cmp	r5, r3
 80056a2:	d101      	bne.n	80056a8 <_vfiprintf_r+0x60>
 80056a4:	68b5      	ldr	r5, [r6, #8]
 80056a6:	e7df      	b.n	8005668 <_vfiprintf_r+0x20>
 80056a8:	4b79      	ldr	r3, [pc, #484]	; (8005890 <_vfiprintf_r+0x248>)
 80056aa:	429d      	cmp	r5, r3
 80056ac:	bf08      	it	eq
 80056ae:	68f5      	ldreq	r5, [r6, #12]
 80056b0:	e7da      	b.n	8005668 <_vfiprintf_r+0x20>
 80056b2:	89ab      	ldrh	r3, [r5, #12]
 80056b4:	0598      	lsls	r0, r3, #22
 80056b6:	d4ed      	bmi.n	8005694 <_vfiprintf_r+0x4c>
 80056b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056ba:	f7ff ff40 	bl	800553e <__retarget_lock_release_recursive>
 80056be:	e7e9      	b.n	8005694 <_vfiprintf_r+0x4c>
 80056c0:	2300      	movs	r3, #0
 80056c2:	9309      	str	r3, [sp, #36]	; 0x24
 80056c4:	2320      	movs	r3, #32
 80056c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80056ce:	2330      	movs	r3, #48	; 0x30
 80056d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005894 <_vfiprintf_r+0x24c>
 80056d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80056d8:	f04f 0901 	mov.w	r9, #1
 80056dc:	4623      	mov	r3, r4
 80056de:	469a      	mov	sl, r3
 80056e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056e4:	b10a      	cbz	r2, 80056ea <_vfiprintf_r+0xa2>
 80056e6:	2a25      	cmp	r2, #37	; 0x25
 80056e8:	d1f9      	bne.n	80056de <_vfiprintf_r+0x96>
 80056ea:	ebba 0b04 	subs.w	fp, sl, r4
 80056ee:	d00b      	beq.n	8005708 <_vfiprintf_r+0xc0>
 80056f0:	465b      	mov	r3, fp
 80056f2:	4622      	mov	r2, r4
 80056f4:	4629      	mov	r1, r5
 80056f6:	4630      	mov	r0, r6
 80056f8:	f7ff ff93 	bl	8005622 <__sfputs_r>
 80056fc:	3001      	adds	r0, #1
 80056fe:	f000 80aa 	beq.w	8005856 <_vfiprintf_r+0x20e>
 8005702:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005704:	445a      	add	r2, fp
 8005706:	9209      	str	r2, [sp, #36]	; 0x24
 8005708:	f89a 3000 	ldrb.w	r3, [sl]
 800570c:	2b00      	cmp	r3, #0
 800570e:	f000 80a2 	beq.w	8005856 <_vfiprintf_r+0x20e>
 8005712:	2300      	movs	r3, #0
 8005714:	f04f 32ff 	mov.w	r2, #4294967295
 8005718:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800571c:	f10a 0a01 	add.w	sl, sl, #1
 8005720:	9304      	str	r3, [sp, #16]
 8005722:	9307      	str	r3, [sp, #28]
 8005724:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005728:	931a      	str	r3, [sp, #104]	; 0x68
 800572a:	4654      	mov	r4, sl
 800572c:	2205      	movs	r2, #5
 800572e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005732:	4858      	ldr	r0, [pc, #352]	; (8005894 <_vfiprintf_r+0x24c>)
 8005734:	f7fa fd4c 	bl	80001d0 <memchr>
 8005738:	9a04      	ldr	r2, [sp, #16]
 800573a:	b9d8      	cbnz	r0, 8005774 <_vfiprintf_r+0x12c>
 800573c:	06d1      	lsls	r1, r2, #27
 800573e:	bf44      	itt	mi
 8005740:	2320      	movmi	r3, #32
 8005742:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005746:	0713      	lsls	r3, r2, #28
 8005748:	bf44      	itt	mi
 800574a:	232b      	movmi	r3, #43	; 0x2b
 800574c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005750:	f89a 3000 	ldrb.w	r3, [sl]
 8005754:	2b2a      	cmp	r3, #42	; 0x2a
 8005756:	d015      	beq.n	8005784 <_vfiprintf_r+0x13c>
 8005758:	9a07      	ldr	r2, [sp, #28]
 800575a:	4654      	mov	r4, sl
 800575c:	2000      	movs	r0, #0
 800575e:	f04f 0c0a 	mov.w	ip, #10
 8005762:	4621      	mov	r1, r4
 8005764:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005768:	3b30      	subs	r3, #48	; 0x30
 800576a:	2b09      	cmp	r3, #9
 800576c:	d94e      	bls.n	800580c <_vfiprintf_r+0x1c4>
 800576e:	b1b0      	cbz	r0, 800579e <_vfiprintf_r+0x156>
 8005770:	9207      	str	r2, [sp, #28]
 8005772:	e014      	b.n	800579e <_vfiprintf_r+0x156>
 8005774:	eba0 0308 	sub.w	r3, r0, r8
 8005778:	fa09 f303 	lsl.w	r3, r9, r3
 800577c:	4313      	orrs	r3, r2
 800577e:	9304      	str	r3, [sp, #16]
 8005780:	46a2      	mov	sl, r4
 8005782:	e7d2      	b.n	800572a <_vfiprintf_r+0xe2>
 8005784:	9b03      	ldr	r3, [sp, #12]
 8005786:	1d19      	adds	r1, r3, #4
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	9103      	str	r1, [sp, #12]
 800578c:	2b00      	cmp	r3, #0
 800578e:	bfbb      	ittet	lt
 8005790:	425b      	neglt	r3, r3
 8005792:	f042 0202 	orrlt.w	r2, r2, #2
 8005796:	9307      	strge	r3, [sp, #28]
 8005798:	9307      	strlt	r3, [sp, #28]
 800579a:	bfb8      	it	lt
 800579c:	9204      	strlt	r2, [sp, #16]
 800579e:	7823      	ldrb	r3, [r4, #0]
 80057a0:	2b2e      	cmp	r3, #46	; 0x2e
 80057a2:	d10c      	bne.n	80057be <_vfiprintf_r+0x176>
 80057a4:	7863      	ldrb	r3, [r4, #1]
 80057a6:	2b2a      	cmp	r3, #42	; 0x2a
 80057a8:	d135      	bne.n	8005816 <_vfiprintf_r+0x1ce>
 80057aa:	9b03      	ldr	r3, [sp, #12]
 80057ac:	1d1a      	adds	r2, r3, #4
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	9203      	str	r2, [sp, #12]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	bfb8      	it	lt
 80057b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80057ba:	3402      	adds	r4, #2
 80057bc:	9305      	str	r3, [sp, #20]
 80057be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80058a4 <_vfiprintf_r+0x25c>
 80057c2:	7821      	ldrb	r1, [r4, #0]
 80057c4:	2203      	movs	r2, #3
 80057c6:	4650      	mov	r0, sl
 80057c8:	f7fa fd02 	bl	80001d0 <memchr>
 80057cc:	b140      	cbz	r0, 80057e0 <_vfiprintf_r+0x198>
 80057ce:	2340      	movs	r3, #64	; 0x40
 80057d0:	eba0 000a 	sub.w	r0, r0, sl
 80057d4:	fa03 f000 	lsl.w	r0, r3, r0
 80057d8:	9b04      	ldr	r3, [sp, #16]
 80057da:	4303      	orrs	r3, r0
 80057dc:	3401      	adds	r4, #1
 80057de:	9304      	str	r3, [sp, #16]
 80057e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057e4:	482c      	ldr	r0, [pc, #176]	; (8005898 <_vfiprintf_r+0x250>)
 80057e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80057ea:	2206      	movs	r2, #6
 80057ec:	f7fa fcf0 	bl	80001d0 <memchr>
 80057f0:	2800      	cmp	r0, #0
 80057f2:	d03f      	beq.n	8005874 <_vfiprintf_r+0x22c>
 80057f4:	4b29      	ldr	r3, [pc, #164]	; (800589c <_vfiprintf_r+0x254>)
 80057f6:	bb1b      	cbnz	r3, 8005840 <_vfiprintf_r+0x1f8>
 80057f8:	9b03      	ldr	r3, [sp, #12]
 80057fa:	3307      	adds	r3, #7
 80057fc:	f023 0307 	bic.w	r3, r3, #7
 8005800:	3308      	adds	r3, #8
 8005802:	9303      	str	r3, [sp, #12]
 8005804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005806:	443b      	add	r3, r7
 8005808:	9309      	str	r3, [sp, #36]	; 0x24
 800580a:	e767      	b.n	80056dc <_vfiprintf_r+0x94>
 800580c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005810:	460c      	mov	r4, r1
 8005812:	2001      	movs	r0, #1
 8005814:	e7a5      	b.n	8005762 <_vfiprintf_r+0x11a>
 8005816:	2300      	movs	r3, #0
 8005818:	3401      	adds	r4, #1
 800581a:	9305      	str	r3, [sp, #20]
 800581c:	4619      	mov	r1, r3
 800581e:	f04f 0c0a 	mov.w	ip, #10
 8005822:	4620      	mov	r0, r4
 8005824:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005828:	3a30      	subs	r2, #48	; 0x30
 800582a:	2a09      	cmp	r2, #9
 800582c:	d903      	bls.n	8005836 <_vfiprintf_r+0x1ee>
 800582e:	2b00      	cmp	r3, #0
 8005830:	d0c5      	beq.n	80057be <_vfiprintf_r+0x176>
 8005832:	9105      	str	r1, [sp, #20]
 8005834:	e7c3      	b.n	80057be <_vfiprintf_r+0x176>
 8005836:	fb0c 2101 	mla	r1, ip, r1, r2
 800583a:	4604      	mov	r4, r0
 800583c:	2301      	movs	r3, #1
 800583e:	e7f0      	b.n	8005822 <_vfiprintf_r+0x1da>
 8005840:	ab03      	add	r3, sp, #12
 8005842:	9300      	str	r3, [sp, #0]
 8005844:	462a      	mov	r2, r5
 8005846:	4b16      	ldr	r3, [pc, #88]	; (80058a0 <_vfiprintf_r+0x258>)
 8005848:	a904      	add	r1, sp, #16
 800584a:	4630      	mov	r0, r6
 800584c:	f3af 8000 	nop.w
 8005850:	4607      	mov	r7, r0
 8005852:	1c78      	adds	r0, r7, #1
 8005854:	d1d6      	bne.n	8005804 <_vfiprintf_r+0x1bc>
 8005856:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005858:	07d9      	lsls	r1, r3, #31
 800585a:	d405      	bmi.n	8005868 <_vfiprintf_r+0x220>
 800585c:	89ab      	ldrh	r3, [r5, #12]
 800585e:	059a      	lsls	r2, r3, #22
 8005860:	d402      	bmi.n	8005868 <_vfiprintf_r+0x220>
 8005862:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005864:	f7ff fe6b 	bl	800553e <__retarget_lock_release_recursive>
 8005868:	89ab      	ldrh	r3, [r5, #12]
 800586a:	065b      	lsls	r3, r3, #25
 800586c:	f53f af12 	bmi.w	8005694 <_vfiprintf_r+0x4c>
 8005870:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005872:	e711      	b.n	8005698 <_vfiprintf_r+0x50>
 8005874:	ab03      	add	r3, sp, #12
 8005876:	9300      	str	r3, [sp, #0]
 8005878:	462a      	mov	r2, r5
 800587a:	4b09      	ldr	r3, [pc, #36]	; (80058a0 <_vfiprintf_r+0x258>)
 800587c:	a904      	add	r1, sp, #16
 800587e:	4630      	mov	r0, r6
 8005880:	f000 f880 	bl	8005984 <_printf_i>
 8005884:	e7e4      	b.n	8005850 <_vfiprintf_r+0x208>
 8005886:	bf00      	nop
 8005888:	08006294 	.word	0x08006294
 800588c:	080062b4 	.word	0x080062b4
 8005890:	08006274 	.word	0x08006274
 8005894:	080062d4 	.word	0x080062d4
 8005898:	080062de 	.word	0x080062de
 800589c:	00000000 	.word	0x00000000
 80058a0:	08005623 	.word	0x08005623
 80058a4:	080062da 	.word	0x080062da

080058a8 <_printf_common>:
 80058a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058ac:	4616      	mov	r6, r2
 80058ae:	4699      	mov	r9, r3
 80058b0:	688a      	ldr	r2, [r1, #8]
 80058b2:	690b      	ldr	r3, [r1, #16]
 80058b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058b8:	4293      	cmp	r3, r2
 80058ba:	bfb8      	it	lt
 80058bc:	4613      	movlt	r3, r2
 80058be:	6033      	str	r3, [r6, #0]
 80058c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80058c4:	4607      	mov	r7, r0
 80058c6:	460c      	mov	r4, r1
 80058c8:	b10a      	cbz	r2, 80058ce <_printf_common+0x26>
 80058ca:	3301      	adds	r3, #1
 80058cc:	6033      	str	r3, [r6, #0]
 80058ce:	6823      	ldr	r3, [r4, #0]
 80058d0:	0699      	lsls	r1, r3, #26
 80058d2:	bf42      	ittt	mi
 80058d4:	6833      	ldrmi	r3, [r6, #0]
 80058d6:	3302      	addmi	r3, #2
 80058d8:	6033      	strmi	r3, [r6, #0]
 80058da:	6825      	ldr	r5, [r4, #0]
 80058dc:	f015 0506 	ands.w	r5, r5, #6
 80058e0:	d106      	bne.n	80058f0 <_printf_common+0x48>
 80058e2:	f104 0a19 	add.w	sl, r4, #25
 80058e6:	68e3      	ldr	r3, [r4, #12]
 80058e8:	6832      	ldr	r2, [r6, #0]
 80058ea:	1a9b      	subs	r3, r3, r2
 80058ec:	42ab      	cmp	r3, r5
 80058ee:	dc26      	bgt.n	800593e <_printf_common+0x96>
 80058f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80058f4:	1e13      	subs	r3, r2, #0
 80058f6:	6822      	ldr	r2, [r4, #0]
 80058f8:	bf18      	it	ne
 80058fa:	2301      	movne	r3, #1
 80058fc:	0692      	lsls	r2, r2, #26
 80058fe:	d42b      	bmi.n	8005958 <_printf_common+0xb0>
 8005900:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005904:	4649      	mov	r1, r9
 8005906:	4638      	mov	r0, r7
 8005908:	47c0      	blx	r8
 800590a:	3001      	adds	r0, #1
 800590c:	d01e      	beq.n	800594c <_printf_common+0xa4>
 800590e:	6823      	ldr	r3, [r4, #0]
 8005910:	68e5      	ldr	r5, [r4, #12]
 8005912:	6832      	ldr	r2, [r6, #0]
 8005914:	f003 0306 	and.w	r3, r3, #6
 8005918:	2b04      	cmp	r3, #4
 800591a:	bf08      	it	eq
 800591c:	1aad      	subeq	r5, r5, r2
 800591e:	68a3      	ldr	r3, [r4, #8]
 8005920:	6922      	ldr	r2, [r4, #16]
 8005922:	bf0c      	ite	eq
 8005924:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005928:	2500      	movne	r5, #0
 800592a:	4293      	cmp	r3, r2
 800592c:	bfc4      	itt	gt
 800592e:	1a9b      	subgt	r3, r3, r2
 8005930:	18ed      	addgt	r5, r5, r3
 8005932:	2600      	movs	r6, #0
 8005934:	341a      	adds	r4, #26
 8005936:	42b5      	cmp	r5, r6
 8005938:	d11a      	bne.n	8005970 <_printf_common+0xc8>
 800593a:	2000      	movs	r0, #0
 800593c:	e008      	b.n	8005950 <_printf_common+0xa8>
 800593e:	2301      	movs	r3, #1
 8005940:	4652      	mov	r2, sl
 8005942:	4649      	mov	r1, r9
 8005944:	4638      	mov	r0, r7
 8005946:	47c0      	blx	r8
 8005948:	3001      	adds	r0, #1
 800594a:	d103      	bne.n	8005954 <_printf_common+0xac>
 800594c:	f04f 30ff 	mov.w	r0, #4294967295
 8005950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005954:	3501      	adds	r5, #1
 8005956:	e7c6      	b.n	80058e6 <_printf_common+0x3e>
 8005958:	18e1      	adds	r1, r4, r3
 800595a:	1c5a      	adds	r2, r3, #1
 800595c:	2030      	movs	r0, #48	; 0x30
 800595e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005962:	4422      	add	r2, r4
 8005964:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005968:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800596c:	3302      	adds	r3, #2
 800596e:	e7c7      	b.n	8005900 <_printf_common+0x58>
 8005970:	2301      	movs	r3, #1
 8005972:	4622      	mov	r2, r4
 8005974:	4649      	mov	r1, r9
 8005976:	4638      	mov	r0, r7
 8005978:	47c0      	blx	r8
 800597a:	3001      	adds	r0, #1
 800597c:	d0e6      	beq.n	800594c <_printf_common+0xa4>
 800597e:	3601      	adds	r6, #1
 8005980:	e7d9      	b.n	8005936 <_printf_common+0x8e>
	...

08005984 <_printf_i>:
 8005984:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005988:	460c      	mov	r4, r1
 800598a:	4691      	mov	r9, r2
 800598c:	7e27      	ldrb	r7, [r4, #24]
 800598e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005990:	2f78      	cmp	r7, #120	; 0x78
 8005992:	4680      	mov	r8, r0
 8005994:	469a      	mov	sl, r3
 8005996:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800599a:	d807      	bhi.n	80059ac <_printf_i+0x28>
 800599c:	2f62      	cmp	r7, #98	; 0x62
 800599e:	d80a      	bhi.n	80059b6 <_printf_i+0x32>
 80059a0:	2f00      	cmp	r7, #0
 80059a2:	f000 80d8 	beq.w	8005b56 <_printf_i+0x1d2>
 80059a6:	2f58      	cmp	r7, #88	; 0x58
 80059a8:	f000 80a3 	beq.w	8005af2 <_printf_i+0x16e>
 80059ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80059b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80059b4:	e03a      	b.n	8005a2c <_printf_i+0xa8>
 80059b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80059ba:	2b15      	cmp	r3, #21
 80059bc:	d8f6      	bhi.n	80059ac <_printf_i+0x28>
 80059be:	a001      	add	r0, pc, #4	; (adr r0, 80059c4 <_printf_i+0x40>)
 80059c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80059c4:	08005a1d 	.word	0x08005a1d
 80059c8:	08005a31 	.word	0x08005a31
 80059cc:	080059ad 	.word	0x080059ad
 80059d0:	080059ad 	.word	0x080059ad
 80059d4:	080059ad 	.word	0x080059ad
 80059d8:	080059ad 	.word	0x080059ad
 80059dc:	08005a31 	.word	0x08005a31
 80059e0:	080059ad 	.word	0x080059ad
 80059e4:	080059ad 	.word	0x080059ad
 80059e8:	080059ad 	.word	0x080059ad
 80059ec:	080059ad 	.word	0x080059ad
 80059f0:	08005b3d 	.word	0x08005b3d
 80059f4:	08005a61 	.word	0x08005a61
 80059f8:	08005b1f 	.word	0x08005b1f
 80059fc:	080059ad 	.word	0x080059ad
 8005a00:	080059ad 	.word	0x080059ad
 8005a04:	08005b5f 	.word	0x08005b5f
 8005a08:	080059ad 	.word	0x080059ad
 8005a0c:	08005a61 	.word	0x08005a61
 8005a10:	080059ad 	.word	0x080059ad
 8005a14:	080059ad 	.word	0x080059ad
 8005a18:	08005b27 	.word	0x08005b27
 8005a1c:	680b      	ldr	r3, [r1, #0]
 8005a1e:	1d1a      	adds	r2, r3, #4
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	600a      	str	r2, [r1, #0]
 8005a24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005a28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e0a3      	b.n	8005b78 <_printf_i+0x1f4>
 8005a30:	6825      	ldr	r5, [r4, #0]
 8005a32:	6808      	ldr	r0, [r1, #0]
 8005a34:	062e      	lsls	r6, r5, #24
 8005a36:	f100 0304 	add.w	r3, r0, #4
 8005a3a:	d50a      	bpl.n	8005a52 <_printf_i+0xce>
 8005a3c:	6805      	ldr	r5, [r0, #0]
 8005a3e:	600b      	str	r3, [r1, #0]
 8005a40:	2d00      	cmp	r5, #0
 8005a42:	da03      	bge.n	8005a4c <_printf_i+0xc8>
 8005a44:	232d      	movs	r3, #45	; 0x2d
 8005a46:	426d      	negs	r5, r5
 8005a48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a4c:	485e      	ldr	r0, [pc, #376]	; (8005bc8 <_printf_i+0x244>)
 8005a4e:	230a      	movs	r3, #10
 8005a50:	e019      	b.n	8005a86 <_printf_i+0x102>
 8005a52:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005a56:	6805      	ldr	r5, [r0, #0]
 8005a58:	600b      	str	r3, [r1, #0]
 8005a5a:	bf18      	it	ne
 8005a5c:	b22d      	sxthne	r5, r5
 8005a5e:	e7ef      	b.n	8005a40 <_printf_i+0xbc>
 8005a60:	680b      	ldr	r3, [r1, #0]
 8005a62:	6825      	ldr	r5, [r4, #0]
 8005a64:	1d18      	adds	r0, r3, #4
 8005a66:	6008      	str	r0, [r1, #0]
 8005a68:	0628      	lsls	r0, r5, #24
 8005a6a:	d501      	bpl.n	8005a70 <_printf_i+0xec>
 8005a6c:	681d      	ldr	r5, [r3, #0]
 8005a6e:	e002      	b.n	8005a76 <_printf_i+0xf2>
 8005a70:	0669      	lsls	r1, r5, #25
 8005a72:	d5fb      	bpl.n	8005a6c <_printf_i+0xe8>
 8005a74:	881d      	ldrh	r5, [r3, #0]
 8005a76:	4854      	ldr	r0, [pc, #336]	; (8005bc8 <_printf_i+0x244>)
 8005a78:	2f6f      	cmp	r7, #111	; 0x6f
 8005a7a:	bf0c      	ite	eq
 8005a7c:	2308      	moveq	r3, #8
 8005a7e:	230a      	movne	r3, #10
 8005a80:	2100      	movs	r1, #0
 8005a82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a86:	6866      	ldr	r6, [r4, #4]
 8005a88:	60a6      	str	r6, [r4, #8]
 8005a8a:	2e00      	cmp	r6, #0
 8005a8c:	bfa2      	ittt	ge
 8005a8e:	6821      	ldrge	r1, [r4, #0]
 8005a90:	f021 0104 	bicge.w	r1, r1, #4
 8005a94:	6021      	strge	r1, [r4, #0]
 8005a96:	b90d      	cbnz	r5, 8005a9c <_printf_i+0x118>
 8005a98:	2e00      	cmp	r6, #0
 8005a9a:	d04d      	beq.n	8005b38 <_printf_i+0x1b4>
 8005a9c:	4616      	mov	r6, r2
 8005a9e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005aa2:	fb03 5711 	mls	r7, r3, r1, r5
 8005aa6:	5dc7      	ldrb	r7, [r0, r7]
 8005aa8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005aac:	462f      	mov	r7, r5
 8005aae:	42bb      	cmp	r3, r7
 8005ab0:	460d      	mov	r5, r1
 8005ab2:	d9f4      	bls.n	8005a9e <_printf_i+0x11a>
 8005ab4:	2b08      	cmp	r3, #8
 8005ab6:	d10b      	bne.n	8005ad0 <_printf_i+0x14c>
 8005ab8:	6823      	ldr	r3, [r4, #0]
 8005aba:	07df      	lsls	r7, r3, #31
 8005abc:	d508      	bpl.n	8005ad0 <_printf_i+0x14c>
 8005abe:	6923      	ldr	r3, [r4, #16]
 8005ac0:	6861      	ldr	r1, [r4, #4]
 8005ac2:	4299      	cmp	r1, r3
 8005ac4:	bfde      	ittt	le
 8005ac6:	2330      	movle	r3, #48	; 0x30
 8005ac8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005acc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005ad0:	1b92      	subs	r2, r2, r6
 8005ad2:	6122      	str	r2, [r4, #16]
 8005ad4:	f8cd a000 	str.w	sl, [sp]
 8005ad8:	464b      	mov	r3, r9
 8005ada:	aa03      	add	r2, sp, #12
 8005adc:	4621      	mov	r1, r4
 8005ade:	4640      	mov	r0, r8
 8005ae0:	f7ff fee2 	bl	80058a8 <_printf_common>
 8005ae4:	3001      	adds	r0, #1
 8005ae6:	d14c      	bne.n	8005b82 <_printf_i+0x1fe>
 8005ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8005aec:	b004      	add	sp, #16
 8005aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005af2:	4835      	ldr	r0, [pc, #212]	; (8005bc8 <_printf_i+0x244>)
 8005af4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005af8:	6823      	ldr	r3, [r4, #0]
 8005afa:	680e      	ldr	r6, [r1, #0]
 8005afc:	061f      	lsls	r7, r3, #24
 8005afe:	f856 5b04 	ldr.w	r5, [r6], #4
 8005b02:	600e      	str	r6, [r1, #0]
 8005b04:	d514      	bpl.n	8005b30 <_printf_i+0x1ac>
 8005b06:	07d9      	lsls	r1, r3, #31
 8005b08:	bf44      	itt	mi
 8005b0a:	f043 0320 	orrmi.w	r3, r3, #32
 8005b0e:	6023      	strmi	r3, [r4, #0]
 8005b10:	b91d      	cbnz	r5, 8005b1a <_printf_i+0x196>
 8005b12:	6823      	ldr	r3, [r4, #0]
 8005b14:	f023 0320 	bic.w	r3, r3, #32
 8005b18:	6023      	str	r3, [r4, #0]
 8005b1a:	2310      	movs	r3, #16
 8005b1c:	e7b0      	b.n	8005a80 <_printf_i+0xfc>
 8005b1e:	6823      	ldr	r3, [r4, #0]
 8005b20:	f043 0320 	orr.w	r3, r3, #32
 8005b24:	6023      	str	r3, [r4, #0]
 8005b26:	2378      	movs	r3, #120	; 0x78
 8005b28:	4828      	ldr	r0, [pc, #160]	; (8005bcc <_printf_i+0x248>)
 8005b2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b2e:	e7e3      	b.n	8005af8 <_printf_i+0x174>
 8005b30:	065e      	lsls	r6, r3, #25
 8005b32:	bf48      	it	mi
 8005b34:	b2ad      	uxthmi	r5, r5
 8005b36:	e7e6      	b.n	8005b06 <_printf_i+0x182>
 8005b38:	4616      	mov	r6, r2
 8005b3a:	e7bb      	b.n	8005ab4 <_printf_i+0x130>
 8005b3c:	680b      	ldr	r3, [r1, #0]
 8005b3e:	6826      	ldr	r6, [r4, #0]
 8005b40:	6960      	ldr	r0, [r4, #20]
 8005b42:	1d1d      	adds	r5, r3, #4
 8005b44:	600d      	str	r5, [r1, #0]
 8005b46:	0635      	lsls	r5, r6, #24
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	d501      	bpl.n	8005b50 <_printf_i+0x1cc>
 8005b4c:	6018      	str	r0, [r3, #0]
 8005b4e:	e002      	b.n	8005b56 <_printf_i+0x1d2>
 8005b50:	0671      	lsls	r1, r6, #25
 8005b52:	d5fb      	bpl.n	8005b4c <_printf_i+0x1c8>
 8005b54:	8018      	strh	r0, [r3, #0]
 8005b56:	2300      	movs	r3, #0
 8005b58:	6123      	str	r3, [r4, #16]
 8005b5a:	4616      	mov	r6, r2
 8005b5c:	e7ba      	b.n	8005ad4 <_printf_i+0x150>
 8005b5e:	680b      	ldr	r3, [r1, #0]
 8005b60:	1d1a      	adds	r2, r3, #4
 8005b62:	600a      	str	r2, [r1, #0]
 8005b64:	681e      	ldr	r6, [r3, #0]
 8005b66:	6862      	ldr	r2, [r4, #4]
 8005b68:	2100      	movs	r1, #0
 8005b6a:	4630      	mov	r0, r6
 8005b6c:	f7fa fb30 	bl	80001d0 <memchr>
 8005b70:	b108      	cbz	r0, 8005b76 <_printf_i+0x1f2>
 8005b72:	1b80      	subs	r0, r0, r6
 8005b74:	6060      	str	r0, [r4, #4]
 8005b76:	6863      	ldr	r3, [r4, #4]
 8005b78:	6123      	str	r3, [r4, #16]
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b80:	e7a8      	b.n	8005ad4 <_printf_i+0x150>
 8005b82:	6923      	ldr	r3, [r4, #16]
 8005b84:	4632      	mov	r2, r6
 8005b86:	4649      	mov	r1, r9
 8005b88:	4640      	mov	r0, r8
 8005b8a:	47d0      	blx	sl
 8005b8c:	3001      	adds	r0, #1
 8005b8e:	d0ab      	beq.n	8005ae8 <_printf_i+0x164>
 8005b90:	6823      	ldr	r3, [r4, #0]
 8005b92:	079b      	lsls	r3, r3, #30
 8005b94:	d413      	bmi.n	8005bbe <_printf_i+0x23a>
 8005b96:	68e0      	ldr	r0, [r4, #12]
 8005b98:	9b03      	ldr	r3, [sp, #12]
 8005b9a:	4298      	cmp	r0, r3
 8005b9c:	bfb8      	it	lt
 8005b9e:	4618      	movlt	r0, r3
 8005ba0:	e7a4      	b.n	8005aec <_printf_i+0x168>
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	4632      	mov	r2, r6
 8005ba6:	4649      	mov	r1, r9
 8005ba8:	4640      	mov	r0, r8
 8005baa:	47d0      	blx	sl
 8005bac:	3001      	adds	r0, #1
 8005bae:	d09b      	beq.n	8005ae8 <_printf_i+0x164>
 8005bb0:	3501      	adds	r5, #1
 8005bb2:	68e3      	ldr	r3, [r4, #12]
 8005bb4:	9903      	ldr	r1, [sp, #12]
 8005bb6:	1a5b      	subs	r3, r3, r1
 8005bb8:	42ab      	cmp	r3, r5
 8005bba:	dcf2      	bgt.n	8005ba2 <_printf_i+0x21e>
 8005bbc:	e7eb      	b.n	8005b96 <_printf_i+0x212>
 8005bbe:	2500      	movs	r5, #0
 8005bc0:	f104 0619 	add.w	r6, r4, #25
 8005bc4:	e7f5      	b.n	8005bb2 <_printf_i+0x22e>
 8005bc6:	bf00      	nop
 8005bc8:	080062e5 	.word	0x080062e5
 8005bcc:	080062f6 	.word	0x080062f6

08005bd0 <_sbrk_r>:
 8005bd0:	b538      	push	{r3, r4, r5, lr}
 8005bd2:	4d06      	ldr	r5, [pc, #24]	; (8005bec <_sbrk_r+0x1c>)
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	4604      	mov	r4, r0
 8005bd8:	4608      	mov	r0, r1
 8005bda:	602b      	str	r3, [r5, #0]
 8005bdc:	f7fb f926 	bl	8000e2c <_sbrk>
 8005be0:	1c43      	adds	r3, r0, #1
 8005be2:	d102      	bne.n	8005bea <_sbrk_r+0x1a>
 8005be4:	682b      	ldr	r3, [r5, #0]
 8005be6:	b103      	cbz	r3, 8005bea <_sbrk_r+0x1a>
 8005be8:	6023      	str	r3, [r4, #0]
 8005bea:	bd38      	pop	{r3, r4, r5, pc}
 8005bec:	200001e4 	.word	0x200001e4

08005bf0 <__sread>:
 8005bf0:	b510      	push	{r4, lr}
 8005bf2:	460c      	mov	r4, r1
 8005bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bf8:	f000 fab4 	bl	8006164 <_read_r>
 8005bfc:	2800      	cmp	r0, #0
 8005bfe:	bfab      	itete	ge
 8005c00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005c02:	89a3      	ldrhlt	r3, [r4, #12]
 8005c04:	181b      	addge	r3, r3, r0
 8005c06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c0a:	bfac      	ite	ge
 8005c0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005c0e:	81a3      	strhlt	r3, [r4, #12]
 8005c10:	bd10      	pop	{r4, pc}

08005c12 <__swrite>:
 8005c12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c16:	461f      	mov	r7, r3
 8005c18:	898b      	ldrh	r3, [r1, #12]
 8005c1a:	05db      	lsls	r3, r3, #23
 8005c1c:	4605      	mov	r5, r0
 8005c1e:	460c      	mov	r4, r1
 8005c20:	4616      	mov	r6, r2
 8005c22:	d505      	bpl.n	8005c30 <__swrite+0x1e>
 8005c24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c28:	2302      	movs	r3, #2
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f000 f9c8 	bl	8005fc0 <_lseek_r>
 8005c30:	89a3      	ldrh	r3, [r4, #12]
 8005c32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c3a:	81a3      	strh	r3, [r4, #12]
 8005c3c:	4632      	mov	r2, r6
 8005c3e:	463b      	mov	r3, r7
 8005c40:	4628      	mov	r0, r5
 8005c42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c46:	f000 b869 	b.w	8005d1c <_write_r>

08005c4a <__sseek>:
 8005c4a:	b510      	push	{r4, lr}
 8005c4c:	460c      	mov	r4, r1
 8005c4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c52:	f000 f9b5 	bl	8005fc0 <_lseek_r>
 8005c56:	1c43      	adds	r3, r0, #1
 8005c58:	89a3      	ldrh	r3, [r4, #12]
 8005c5a:	bf15      	itete	ne
 8005c5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005c5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005c62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005c66:	81a3      	strheq	r3, [r4, #12]
 8005c68:	bf18      	it	ne
 8005c6a:	81a3      	strhne	r3, [r4, #12]
 8005c6c:	bd10      	pop	{r4, pc}

08005c6e <__sclose>:
 8005c6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c72:	f000 b8d3 	b.w	8005e1c <_close_r>
	...

08005c78 <__swbuf_r>:
 8005c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c7a:	460e      	mov	r6, r1
 8005c7c:	4614      	mov	r4, r2
 8005c7e:	4605      	mov	r5, r0
 8005c80:	b118      	cbz	r0, 8005c8a <__swbuf_r+0x12>
 8005c82:	6983      	ldr	r3, [r0, #24]
 8005c84:	b90b      	cbnz	r3, 8005c8a <__swbuf_r+0x12>
 8005c86:	f7ff fbbb 	bl	8005400 <__sinit>
 8005c8a:	4b21      	ldr	r3, [pc, #132]	; (8005d10 <__swbuf_r+0x98>)
 8005c8c:	429c      	cmp	r4, r3
 8005c8e:	d12b      	bne.n	8005ce8 <__swbuf_r+0x70>
 8005c90:	686c      	ldr	r4, [r5, #4]
 8005c92:	69a3      	ldr	r3, [r4, #24]
 8005c94:	60a3      	str	r3, [r4, #8]
 8005c96:	89a3      	ldrh	r3, [r4, #12]
 8005c98:	071a      	lsls	r2, r3, #28
 8005c9a:	d52f      	bpl.n	8005cfc <__swbuf_r+0x84>
 8005c9c:	6923      	ldr	r3, [r4, #16]
 8005c9e:	b36b      	cbz	r3, 8005cfc <__swbuf_r+0x84>
 8005ca0:	6923      	ldr	r3, [r4, #16]
 8005ca2:	6820      	ldr	r0, [r4, #0]
 8005ca4:	1ac0      	subs	r0, r0, r3
 8005ca6:	6963      	ldr	r3, [r4, #20]
 8005ca8:	b2f6      	uxtb	r6, r6
 8005caa:	4283      	cmp	r3, r0
 8005cac:	4637      	mov	r7, r6
 8005cae:	dc04      	bgt.n	8005cba <__swbuf_r+0x42>
 8005cb0:	4621      	mov	r1, r4
 8005cb2:	4628      	mov	r0, r5
 8005cb4:	f000 f948 	bl	8005f48 <_fflush_r>
 8005cb8:	bb30      	cbnz	r0, 8005d08 <__swbuf_r+0x90>
 8005cba:	68a3      	ldr	r3, [r4, #8]
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	60a3      	str	r3, [r4, #8]
 8005cc0:	6823      	ldr	r3, [r4, #0]
 8005cc2:	1c5a      	adds	r2, r3, #1
 8005cc4:	6022      	str	r2, [r4, #0]
 8005cc6:	701e      	strb	r6, [r3, #0]
 8005cc8:	6963      	ldr	r3, [r4, #20]
 8005cca:	3001      	adds	r0, #1
 8005ccc:	4283      	cmp	r3, r0
 8005cce:	d004      	beq.n	8005cda <__swbuf_r+0x62>
 8005cd0:	89a3      	ldrh	r3, [r4, #12]
 8005cd2:	07db      	lsls	r3, r3, #31
 8005cd4:	d506      	bpl.n	8005ce4 <__swbuf_r+0x6c>
 8005cd6:	2e0a      	cmp	r6, #10
 8005cd8:	d104      	bne.n	8005ce4 <__swbuf_r+0x6c>
 8005cda:	4621      	mov	r1, r4
 8005cdc:	4628      	mov	r0, r5
 8005cde:	f000 f933 	bl	8005f48 <_fflush_r>
 8005ce2:	b988      	cbnz	r0, 8005d08 <__swbuf_r+0x90>
 8005ce4:	4638      	mov	r0, r7
 8005ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ce8:	4b0a      	ldr	r3, [pc, #40]	; (8005d14 <__swbuf_r+0x9c>)
 8005cea:	429c      	cmp	r4, r3
 8005cec:	d101      	bne.n	8005cf2 <__swbuf_r+0x7a>
 8005cee:	68ac      	ldr	r4, [r5, #8]
 8005cf0:	e7cf      	b.n	8005c92 <__swbuf_r+0x1a>
 8005cf2:	4b09      	ldr	r3, [pc, #36]	; (8005d18 <__swbuf_r+0xa0>)
 8005cf4:	429c      	cmp	r4, r3
 8005cf6:	bf08      	it	eq
 8005cf8:	68ec      	ldreq	r4, [r5, #12]
 8005cfa:	e7ca      	b.n	8005c92 <__swbuf_r+0x1a>
 8005cfc:	4621      	mov	r1, r4
 8005cfe:	4628      	mov	r0, r5
 8005d00:	f000 f81e 	bl	8005d40 <__swsetup_r>
 8005d04:	2800      	cmp	r0, #0
 8005d06:	d0cb      	beq.n	8005ca0 <__swbuf_r+0x28>
 8005d08:	f04f 37ff 	mov.w	r7, #4294967295
 8005d0c:	e7ea      	b.n	8005ce4 <__swbuf_r+0x6c>
 8005d0e:	bf00      	nop
 8005d10:	08006294 	.word	0x08006294
 8005d14:	080062b4 	.word	0x080062b4
 8005d18:	08006274 	.word	0x08006274

08005d1c <_write_r>:
 8005d1c:	b538      	push	{r3, r4, r5, lr}
 8005d1e:	4d07      	ldr	r5, [pc, #28]	; (8005d3c <_write_r+0x20>)
 8005d20:	4604      	mov	r4, r0
 8005d22:	4608      	mov	r0, r1
 8005d24:	4611      	mov	r1, r2
 8005d26:	2200      	movs	r2, #0
 8005d28:	602a      	str	r2, [r5, #0]
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	f7fa fe1c 	bl	8000968 <_write>
 8005d30:	1c43      	adds	r3, r0, #1
 8005d32:	d102      	bne.n	8005d3a <_write_r+0x1e>
 8005d34:	682b      	ldr	r3, [r5, #0]
 8005d36:	b103      	cbz	r3, 8005d3a <_write_r+0x1e>
 8005d38:	6023      	str	r3, [r4, #0]
 8005d3a:	bd38      	pop	{r3, r4, r5, pc}
 8005d3c:	200001e4 	.word	0x200001e4

08005d40 <__swsetup_r>:
 8005d40:	4b32      	ldr	r3, [pc, #200]	; (8005e0c <__swsetup_r+0xcc>)
 8005d42:	b570      	push	{r4, r5, r6, lr}
 8005d44:	681d      	ldr	r5, [r3, #0]
 8005d46:	4606      	mov	r6, r0
 8005d48:	460c      	mov	r4, r1
 8005d4a:	b125      	cbz	r5, 8005d56 <__swsetup_r+0x16>
 8005d4c:	69ab      	ldr	r3, [r5, #24]
 8005d4e:	b913      	cbnz	r3, 8005d56 <__swsetup_r+0x16>
 8005d50:	4628      	mov	r0, r5
 8005d52:	f7ff fb55 	bl	8005400 <__sinit>
 8005d56:	4b2e      	ldr	r3, [pc, #184]	; (8005e10 <__swsetup_r+0xd0>)
 8005d58:	429c      	cmp	r4, r3
 8005d5a:	d10f      	bne.n	8005d7c <__swsetup_r+0x3c>
 8005d5c:	686c      	ldr	r4, [r5, #4]
 8005d5e:	89a3      	ldrh	r3, [r4, #12]
 8005d60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d64:	0719      	lsls	r1, r3, #28
 8005d66:	d42c      	bmi.n	8005dc2 <__swsetup_r+0x82>
 8005d68:	06dd      	lsls	r5, r3, #27
 8005d6a:	d411      	bmi.n	8005d90 <__swsetup_r+0x50>
 8005d6c:	2309      	movs	r3, #9
 8005d6e:	6033      	str	r3, [r6, #0]
 8005d70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005d74:	81a3      	strh	r3, [r4, #12]
 8005d76:	f04f 30ff 	mov.w	r0, #4294967295
 8005d7a:	e03e      	b.n	8005dfa <__swsetup_r+0xba>
 8005d7c:	4b25      	ldr	r3, [pc, #148]	; (8005e14 <__swsetup_r+0xd4>)
 8005d7e:	429c      	cmp	r4, r3
 8005d80:	d101      	bne.n	8005d86 <__swsetup_r+0x46>
 8005d82:	68ac      	ldr	r4, [r5, #8]
 8005d84:	e7eb      	b.n	8005d5e <__swsetup_r+0x1e>
 8005d86:	4b24      	ldr	r3, [pc, #144]	; (8005e18 <__swsetup_r+0xd8>)
 8005d88:	429c      	cmp	r4, r3
 8005d8a:	bf08      	it	eq
 8005d8c:	68ec      	ldreq	r4, [r5, #12]
 8005d8e:	e7e6      	b.n	8005d5e <__swsetup_r+0x1e>
 8005d90:	0758      	lsls	r0, r3, #29
 8005d92:	d512      	bpl.n	8005dba <__swsetup_r+0x7a>
 8005d94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d96:	b141      	cbz	r1, 8005daa <__swsetup_r+0x6a>
 8005d98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d9c:	4299      	cmp	r1, r3
 8005d9e:	d002      	beq.n	8005da6 <__swsetup_r+0x66>
 8005da0:	4630      	mov	r0, r6
 8005da2:	f000 f98f 	bl	80060c4 <_free_r>
 8005da6:	2300      	movs	r3, #0
 8005da8:	6363      	str	r3, [r4, #52]	; 0x34
 8005daa:	89a3      	ldrh	r3, [r4, #12]
 8005dac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005db0:	81a3      	strh	r3, [r4, #12]
 8005db2:	2300      	movs	r3, #0
 8005db4:	6063      	str	r3, [r4, #4]
 8005db6:	6923      	ldr	r3, [r4, #16]
 8005db8:	6023      	str	r3, [r4, #0]
 8005dba:	89a3      	ldrh	r3, [r4, #12]
 8005dbc:	f043 0308 	orr.w	r3, r3, #8
 8005dc0:	81a3      	strh	r3, [r4, #12]
 8005dc2:	6923      	ldr	r3, [r4, #16]
 8005dc4:	b94b      	cbnz	r3, 8005dda <__swsetup_r+0x9a>
 8005dc6:	89a3      	ldrh	r3, [r4, #12]
 8005dc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005dcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dd0:	d003      	beq.n	8005dda <__swsetup_r+0x9a>
 8005dd2:	4621      	mov	r1, r4
 8005dd4:	4630      	mov	r0, r6
 8005dd6:	f000 f929 	bl	800602c <__smakebuf_r>
 8005dda:	89a0      	ldrh	r0, [r4, #12]
 8005ddc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005de0:	f010 0301 	ands.w	r3, r0, #1
 8005de4:	d00a      	beq.n	8005dfc <__swsetup_r+0xbc>
 8005de6:	2300      	movs	r3, #0
 8005de8:	60a3      	str	r3, [r4, #8]
 8005dea:	6963      	ldr	r3, [r4, #20]
 8005dec:	425b      	negs	r3, r3
 8005dee:	61a3      	str	r3, [r4, #24]
 8005df0:	6923      	ldr	r3, [r4, #16]
 8005df2:	b943      	cbnz	r3, 8005e06 <__swsetup_r+0xc6>
 8005df4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005df8:	d1ba      	bne.n	8005d70 <__swsetup_r+0x30>
 8005dfa:	bd70      	pop	{r4, r5, r6, pc}
 8005dfc:	0781      	lsls	r1, r0, #30
 8005dfe:	bf58      	it	pl
 8005e00:	6963      	ldrpl	r3, [r4, #20]
 8005e02:	60a3      	str	r3, [r4, #8]
 8005e04:	e7f4      	b.n	8005df0 <__swsetup_r+0xb0>
 8005e06:	2000      	movs	r0, #0
 8005e08:	e7f7      	b.n	8005dfa <__swsetup_r+0xba>
 8005e0a:	bf00      	nop
 8005e0c:	2000000c 	.word	0x2000000c
 8005e10:	08006294 	.word	0x08006294
 8005e14:	080062b4 	.word	0x080062b4
 8005e18:	08006274 	.word	0x08006274

08005e1c <_close_r>:
 8005e1c:	b538      	push	{r3, r4, r5, lr}
 8005e1e:	4d06      	ldr	r5, [pc, #24]	; (8005e38 <_close_r+0x1c>)
 8005e20:	2300      	movs	r3, #0
 8005e22:	4604      	mov	r4, r0
 8005e24:	4608      	mov	r0, r1
 8005e26:	602b      	str	r3, [r5, #0]
 8005e28:	f7fa ffcb 	bl	8000dc2 <_close>
 8005e2c:	1c43      	adds	r3, r0, #1
 8005e2e:	d102      	bne.n	8005e36 <_close_r+0x1a>
 8005e30:	682b      	ldr	r3, [r5, #0]
 8005e32:	b103      	cbz	r3, 8005e36 <_close_r+0x1a>
 8005e34:	6023      	str	r3, [r4, #0]
 8005e36:	bd38      	pop	{r3, r4, r5, pc}
 8005e38:	200001e4 	.word	0x200001e4

08005e3c <__sflush_r>:
 8005e3c:	898a      	ldrh	r2, [r1, #12]
 8005e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e42:	4605      	mov	r5, r0
 8005e44:	0710      	lsls	r0, r2, #28
 8005e46:	460c      	mov	r4, r1
 8005e48:	d458      	bmi.n	8005efc <__sflush_r+0xc0>
 8005e4a:	684b      	ldr	r3, [r1, #4]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	dc05      	bgt.n	8005e5c <__sflush_r+0x20>
 8005e50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	dc02      	bgt.n	8005e5c <__sflush_r+0x20>
 8005e56:	2000      	movs	r0, #0
 8005e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e5e:	2e00      	cmp	r6, #0
 8005e60:	d0f9      	beq.n	8005e56 <__sflush_r+0x1a>
 8005e62:	2300      	movs	r3, #0
 8005e64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005e68:	682f      	ldr	r7, [r5, #0]
 8005e6a:	602b      	str	r3, [r5, #0]
 8005e6c:	d032      	beq.n	8005ed4 <__sflush_r+0x98>
 8005e6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005e70:	89a3      	ldrh	r3, [r4, #12]
 8005e72:	075a      	lsls	r2, r3, #29
 8005e74:	d505      	bpl.n	8005e82 <__sflush_r+0x46>
 8005e76:	6863      	ldr	r3, [r4, #4]
 8005e78:	1ac0      	subs	r0, r0, r3
 8005e7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e7c:	b10b      	cbz	r3, 8005e82 <__sflush_r+0x46>
 8005e7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e80:	1ac0      	subs	r0, r0, r3
 8005e82:	2300      	movs	r3, #0
 8005e84:	4602      	mov	r2, r0
 8005e86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e88:	6a21      	ldr	r1, [r4, #32]
 8005e8a:	4628      	mov	r0, r5
 8005e8c:	47b0      	blx	r6
 8005e8e:	1c43      	adds	r3, r0, #1
 8005e90:	89a3      	ldrh	r3, [r4, #12]
 8005e92:	d106      	bne.n	8005ea2 <__sflush_r+0x66>
 8005e94:	6829      	ldr	r1, [r5, #0]
 8005e96:	291d      	cmp	r1, #29
 8005e98:	d82c      	bhi.n	8005ef4 <__sflush_r+0xb8>
 8005e9a:	4a2a      	ldr	r2, [pc, #168]	; (8005f44 <__sflush_r+0x108>)
 8005e9c:	40ca      	lsrs	r2, r1
 8005e9e:	07d6      	lsls	r6, r2, #31
 8005ea0:	d528      	bpl.n	8005ef4 <__sflush_r+0xb8>
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	6062      	str	r2, [r4, #4]
 8005ea6:	04d9      	lsls	r1, r3, #19
 8005ea8:	6922      	ldr	r2, [r4, #16]
 8005eaa:	6022      	str	r2, [r4, #0]
 8005eac:	d504      	bpl.n	8005eb8 <__sflush_r+0x7c>
 8005eae:	1c42      	adds	r2, r0, #1
 8005eb0:	d101      	bne.n	8005eb6 <__sflush_r+0x7a>
 8005eb2:	682b      	ldr	r3, [r5, #0]
 8005eb4:	b903      	cbnz	r3, 8005eb8 <__sflush_r+0x7c>
 8005eb6:	6560      	str	r0, [r4, #84]	; 0x54
 8005eb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005eba:	602f      	str	r7, [r5, #0]
 8005ebc:	2900      	cmp	r1, #0
 8005ebe:	d0ca      	beq.n	8005e56 <__sflush_r+0x1a>
 8005ec0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ec4:	4299      	cmp	r1, r3
 8005ec6:	d002      	beq.n	8005ece <__sflush_r+0x92>
 8005ec8:	4628      	mov	r0, r5
 8005eca:	f000 f8fb 	bl	80060c4 <_free_r>
 8005ece:	2000      	movs	r0, #0
 8005ed0:	6360      	str	r0, [r4, #52]	; 0x34
 8005ed2:	e7c1      	b.n	8005e58 <__sflush_r+0x1c>
 8005ed4:	6a21      	ldr	r1, [r4, #32]
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	4628      	mov	r0, r5
 8005eda:	47b0      	blx	r6
 8005edc:	1c41      	adds	r1, r0, #1
 8005ede:	d1c7      	bne.n	8005e70 <__sflush_r+0x34>
 8005ee0:	682b      	ldr	r3, [r5, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d0c4      	beq.n	8005e70 <__sflush_r+0x34>
 8005ee6:	2b1d      	cmp	r3, #29
 8005ee8:	d001      	beq.n	8005eee <__sflush_r+0xb2>
 8005eea:	2b16      	cmp	r3, #22
 8005eec:	d101      	bne.n	8005ef2 <__sflush_r+0xb6>
 8005eee:	602f      	str	r7, [r5, #0]
 8005ef0:	e7b1      	b.n	8005e56 <__sflush_r+0x1a>
 8005ef2:	89a3      	ldrh	r3, [r4, #12]
 8005ef4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ef8:	81a3      	strh	r3, [r4, #12]
 8005efa:	e7ad      	b.n	8005e58 <__sflush_r+0x1c>
 8005efc:	690f      	ldr	r7, [r1, #16]
 8005efe:	2f00      	cmp	r7, #0
 8005f00:	d0a9      	beq.n	8005e56 <__sflush_r+0x1a>
 8005f02:	0793      	lsls	r3, r2, #30
 8005f04:	680e      	ldr	r6, [r1, #0]
 8005f06:	bf08      	it	eq
 8005f08:	694b      	ldreq	r3, [r1, #20]
 8005f0a:	600f      	str	r7, [r1, #0]
 8005f0c:	bf18      	it	ne
 8005f0e:	2300      	movne	r3, #0
 8005f10:	eba6 0807 	sub.w	r8, r6, r7
 8005f14:	608b      	str	r3, [r1, #8]
 8005f16:	f1b8 0f00 	cmp.w	r8, #0
 8005f1a:	dd9c      	ble.n	8005e56 <__sflush_r+0x1a>
 8005f1c:	6a21      	ldr	r1, [r4, #32]
 8005f1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005f20:	4643      	mov	r3, r8
 8005f22:	463a      	mov	r2, r7
 8005f24:	4628      	mov	r0, r5
 8005f26:	47b0      	blx	r6
 8005f28:	2800      	cmp	r0, #0
 8005f2a:	dc06      	bgt.n	8005f3a <__sflush_r+0xfe>
 8005f2c:	89a3      	ldrh	r3, [r4, #12]
 8005f2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f32:	81a3      	strh	r3, [r4, #12]
 8005f34:	f04f 30ff 	mov.w	r0, #4294967295
 8005f38:	e78e      	b.n	8005e58 <__sflush_r+0x1c>
 8005f3a:	4407      	add	r7, r0
 8005f3c:	eba8 0800 	sub.w	r8, r8, r0
 8005f40:	e7e9      	b.n	8005f16 <__sflush_r+0xda>
 8005f42:	bf00      	nop
 8005f44:	20400001 	.word	0x20400001

08005f48 <_fflush_r>:
 8005f48:	b538      	push	{r3, r4, r5, lr}
 8005f4a:	690b      	ldr	r3, [r1, #16]
 8005f4c:	4605      	mov	r5, r0
 8005f4e:	460c      	mov	r4, r1
 8005f50:	b913      	cbnz	r3, 8005f58 <_fflush_r+0x10>
 8005f52:	2500      	movs	r5, #0
 8005f54:	4628      	mov	r0, r5
 8005f56:	bd38      	pop	{r3, r4, r5, pc}
 8005f58:	b118      	cbz	r0, 8005f62 <_fflush_r+0x1a>
 8005f5a:	6983      	ldr	r3, [r0, #24]
 8005f5c:	b90b      	cbnz	r3, 8005f62 <_fflush_r+0x1a>
 8005f5e:	f7ff fa4f 	bl	8005400 <__sinit>
 8005f62:	4b14      	ldr	r3, [pc, #80]	; (8005fb4 <_fflush_r+0x6c>)
 8005f64:	429c      	cmp	r4, r3
 8005f66:	d11b      	bne.n	8005fa0 <_fflush_r+0x58>
 8005f68:	686c      	ldr	r4, [r5, #4]
 8005f6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d0ef      	beq.n	8005f52 <_fflush_r+0xa>
 8005f72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005f74:	07d0      	lsls	r0, r2, #31
 8005f76:	d404      	bmi.n	8005f82 <_fflush_r+0x3a>
 8005f78:	0599      	lsls	r1, r3, #22
 8005f7a:	d402      	bmi.n	8005f82 <_fflush_r+0x3a>
 8005f7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f7e:	f7ff fadd 	bl	800553c <__retarget_lock_acquire_recursive>
 8005f82:	4628      	mov	r0, r5
 8005f84:	4621      	mov	r1, r4
 8005f86:	f7ff ff59 	bl	8005e3c <__sflush_r>
 8005f8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f8c:	07da      	lsls	r2, r3, #31
 8005f8e:	4605      	mov	r5, r0
 8005f90:	d4e0      	bmi.n	8005f54 <_fflush_r+0xc>
 8005f92:	89a3      	ldrh	r3, [r4, #12]
 8005f94:	059b      	lsls	r3, r3, #22
 8005f96:	d4dd      	bmi.n	8005f54 <_fflush_r+0xc>
 8005f98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f9a:	f7ff fad0 	bl	800553e <__retarget_lock_release_recursive>
 8005f9e:	e7d9      	b.n	8005f54 <_fflush_r+0xc>
 8005fa0:	4b05      	ldr	r3, [pc, #20]	; (8005fb8 <_fflush_r+0x70>)
 8005fa2:	429c      	cmp	r4, r3
 8005fa4:	d101      	bne.n	8005faa <_fflush_r+0x62>
 8005fa6:	68ac      	ldr	r4, [r5, #8]
 8005fa8:	e7df      	b.n	8005f6a <_fflush_r+0x22>
 8005faa:	4b04      	ldr	r3, [pc, #16]	; (8005fbc <_fflush_r+0x74>)
 8005fac:	429c      	cmp	r4, r3
 8005fae:	bf08      	it	eq
 8005fb0:	68ec      	ldreq	r4, [r5, #12]
 8005fb2:	e7da      	b.n	8005f6a <_fflush_r+0x22>
 8005fb4:	08006294 	.word	0x08006294
 8005fb8:	080062b4 	.word	0x080062b4
 8005fbc:	08006274 	.word	0x08006274

08005fc0 <_lseek_r>:
 8005fc0:	b538      	push	{r3, r4, r5, lr}
 8005fc2:	4d07      	ldr	r5, [pc, #28]	; (8005fe0 <_lseek_r+0x20>)
 8005fc4:	4604      	mov	r4, r0
 8005fc6:	4608      	mov	r0, r1
 8005fc8:	4611      	mov	r1, r2
 8005fca:	2200      	movs	r2, #0
 8005fcc:	602a      	str	r2, [r5, #0]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	f7fa ff1e 	bl	8000e10 <_lseek>
 8005fd4:	1c43      	adds	r3, r0, #1
 8005fd6:	d102      	bne.n	8005fde <_lseek_r+0x1e>
 8005fd8:	682b      	ldr	r3, [r5, #0]
 8005fda:	b103      	cbz	r3, 8005fde <_lseek_r+0x1e>
 8005fdc:	6023      	str	r3, [r4, #0]
 8005fde:	bd38      	pop	{r3, r4, r5, pc}
 8005fe0:	200001e4 	.word	0x200001e4

08005fe4 <__swhatbuf_r>:
 8005fe4:	b570      	push	{r4, r5, r6, lr}
 8005fe6:	460e      	mov	r6, r1
 8005fe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fec:	2900      	cmp	r1, #0
 8005fee:	b096      	sub	sp, #88	; 0x58
 8005ff0:	4614      	mov	r4, r2
 8005ff2:	461d      	mov	r5, r3
 8005ff4:	da07      	bge.n	8006006 <__swhatbuf_r+0x22>
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	602b      	str	r3, [r5, #0]
 8005ffa:	89b3      	ldrh	r3, [r6, #12]
 8005ffc:	061a      	lsls	r2, r3, #24
 8005ffe:	d410      	bmi.n	8006022 <__swhatbuf_r+0x3e>
 8006000:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006004:	e00e      	b.n	8006024 <__swhatbuf_r+0x40>
 8006006:	466a      	mov	r2, sp
 8006008:	f000 f8be 	bl	8006188 <_fstat_r>
 800600c:	2800      	cmp	r0, #0
 800600e:	dbf2      	blt.n	8005ff6 <__swhatbuf_r+0x12>
 8006010:	9a01      	ldr	r2, [sp, #4]
 8006012:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006016:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800601a:	425a      	negs	r2, r3
 800601c:	415a      	adcs	r2, r3
 800601e:	602a      	str	r2, [r5, #0]
 8006020:	e7ee      	b.n	8006000 <__swhatbuf_r+0x1c>
 8006022:	2340      	movs	r3, #64	; 0x40
 8006024:	2000      	movs	r0, #0
 8006026:	6023      	str	r3, [r4, #0]
 8006028:	b016      	add	sp, #88	; 0x58
 800602a:	bd70      	pop	{r4, r5, r6, pc}

0800602c <__smakebuf_r>:
 800602c:	898b      	ldrh	r3, [r1, #12]
 800602e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006030:	079d      	lsls	r5, r3, #30
 8006032:	4606      	mov	r6, r0
 8006034:	460c      	mov	r4, r1
 8006036:	d507      	bpl.n	8006048 <__smakebuf_r+0x1c>
 8006038:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800603c:	6023      	str	r3, [r4, #0]
 800603e:	6123      	str	r3, [r4, #16]
 8006040:	2301      	movs	r3, #1
 8006042:	6163      	str	r3, [r4, #20]
 8006044:	b002      	add	sp, #8
 8006046:	bd70      	pop	{r4, r5, r6, pc}
 8006048:	ab01      	add	r3, sp, #4
 800604a:	466a      	mov	r2, sp
 800604c:	f7ff ffca 	bl	8005fe4 <__swhatbuf_r>
 8006050:	9900      	ldr	r1, [sp, #0]
 8006052:	4605      	mov	r5, r0
 8006054:	4630      	mov	r0, r6
 8006056:	f7ff fa73 	bl	8005540 <_malloc_r>
 800605a:	b948      	cbnz	r0, 8006070 <__smakebuf_r+0x44>
 800605c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006060:	059a      	lsls	r2, r3, #22
 8006062:	d4ef      	bmi.n	8006044 <__smakebuf_r+0x18>
 8006064:	f023 0303 	bic.w	r3, r3, #3
 8006068:	f043 0302 	orr.w	r3, r3, #2
 800606c:	81a3      	strh	r3, [r4, #12]
 800606e:	e7e3      	b.n	8006038 <__smakebuf_r+0xc>
 8006070:	4b0d      	ldr	r3, [pc, #52]	; (80060a8 <__smakebuf_r+0x7c>)
 8006072:	62b3      	str	r3, [r6, #40]	; 0x28
 8006074:	89a3      	ldrh	r3, [r4, #12]
 8006076:	6020      	str	r0, [r4, #0]
 8006078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800607c:	81a3      	strh	r3, [r4, #12]
 800607e:	9b00      	ldr	r3, [sp, #0]
 8006080:	6163      	str	r3, [r4, #20]
 8006082:	9b01      	ldr	r3, [sp, #4]
 8006084:	6120      	str	r0, [r4, #16]
 8006086:	b15b      	cbz	r3, 80060a0 <__smakebuf_r+0x74>
 8006088:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800608c:	4630      	mov	r0, r6
 800608e:	f000 f88d 	bl	80061ac <_isatty_r>
 8006092:	b128      	cbz	r0, 80060a0 <__smakebuf_r+0x74>
 8006094:	89a3      	ldrh	r3, [r4, #12]
 8006096:	f023 0303 	bic.w	r3, r3, #3
 800609a:	f043 0301 	orr.w	r3, r3, #1
 800609e:	81a3      	strh	r3, [r4, #12]
 80060a0:	89a0      	ldrh	r0, [r4, #12]
 80060a2:	4305      	orrs	r5, r0
 80060a4:	81a5      	strh	r5, [r4, #12]
 80060a6:	e7cd      	b.n	8006044 <__smakebuf_r+0x18>
 80060a8:	08005399 	.word	0x08005399

080060ac <__malloc_lock>:
 80060ac:	4801      	ldr	r0, [pc, #4]	; (80060b4 <__malloc_lock+0x8>)
 80060ae:	f7ff ba45 	b.w	800553c <__retarget_lock_acquire_recursive>
 80060b2:	bf00      	nop
 80060b4:	200001dc 	.word	0x200001dc

080060b8 <__malloc_unlock>:
 80060b8:	4801      	ldr	r0, [pc, #4]	; (80060c0 <__malloc_unlock+0x8>)
 80060ba:	f7ff ba40 	b.w	800553e <__retarget_lock_release_recursive>
 80060be:	bf00      	nop
 80060c0:	200001dc 	.word	0x200001dc

080060c4 <_free_r>:
 80060c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060c6:	2900      	cmp	r1, #0
 80060c8:	d048      	beq.n	800615c <_free_r+0x98>
 80060ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060ce:	9001      	str	r0, [sp, #4]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f1a1 0404 	sub.w	r4, r1, #4
 80060d6:	bfb8      	it	lt
 80060d8:	18e4      	addlt	r4, r4, r3
 80060da:	f7ff ffe7 	bl	80060ac <__malloc_lock>
 80060de:	4a20      	ldr	r2, [pc, #128]	; (8006160 <_free_r+0x9c>)
 80060e0:	9801      	ldr	r0, [sp, #4]
 80060e2:	6813      	ldr	r3, [r2, #0]
 80060e4:	4615      	mov	r5, r2
 80060e6:	b933      	cbnz	r3, 80060f6 <_free_r+0x32>
 80060e8:	6063      	str	r3, [r4, #4]
 80060ea:	6014      	str	r4, [r2, #0]
 80060ec:	b003      	add	sp, #12
 80060ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80060f2:	f7ff bfe1 	b.w	80060b8 <__malloc_unlock>
 80060f6:	42a3      	cmp	r3, r4
 80060f8:	d90b      	bls.n	8006112 <_free_r+0x4e>
 80060fa:	6821      	ldr	r1, [r4, #0]
 80060fc:	1862      	adds	r2, r4, r1
 80060fe:	4293      	cmp	r3, r2
 8006100:	bf04      	itt	eq
 8006102:	681a      	ldreq	r2, [r3, #0]
 8006104:	685b      	ldreq	r3, [r3, #4]
 8006106:	6063      	str	r3, [r4, #4]
 8006108:	bf04      	itt	eq
 800610a:	1852      	addeq	r2, r2, r1
 800610c:	6022      	streq	r2, [r4, #0]
 800610e:	602c      	str	r4, [r5, #0]
 8006110:	e7ec      	b.n	80060ec <_free_r+0x28>
 8006112:	461a      	mov	r2, r3
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	b10b      	cbz	r3, 800611c <_free_r+0x58>
 8006118:	42a3      	cmp	r3, r4
 800611a:	d9fa      	bls.n	8006112 <_free_r+0x4e>
 800611c:	6811      	ldr	r1, [r2, #0]
 800611e:	1855      	adds	r5, r2, r1
 8006120:	42a5      	cmp	r5, r4
 8006122:	d10b      	bne.n	800613c <_free_r+0x78>
 8006124:	6824      	ldr	r4, [r4, #0]
 8006126:	4421      	add	r1, r4
 8006128:	1854      	adds	r4, r2, r1
 800612a:	42a3      	cmp	r3, r4
 800612c:	6011      	str	r1, [r2, #0]
 800612e:	d1dd      	bne.n	80060ec <_free_r+0x28>
 8006130:	681c      	ldr	r4, [r3, #0]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	6053      	str	r3, [r2, #4]
 8006136:	4421      	add	r1, r4
 8006138:	6011      	str	r1, [r2, #0]
 800613a:	e7d7      	b.n	80060ec <_free_r+0x28>
 800613c:	d902      	bls.n	8006144 <_free_r+0x80>
 800613e:	230c      	movs	r3, #12
 8006140:	6003      	str	r3, [r0, #0]
 8006142:	e7d3      	b.n	80060ec <_free_r+0x28>
 8006144:	6825      	ldr	r5, [r4, #0]
 8006146:	1961      	adds	r1, r4, r5
 8006148:	428b      	cmp	r3, r1
 800614a:	bf04      	itt	eq
 800614c:	6819      	ldreq	r1, [r3, #0]
 800614e:	685b      	ldreq	r3, [r3, #4]
 8006150:	6063      	str	r3, [r4, #4]
 8006152:	bf04      	itt	eq
 8006154:	1949      	addeq	r1, r1, r5
 8006156:	6021      	streq	r1, [r4, #0]
 8006158:	6054      	str	r4, [r2, #4]
 800615a:	e7c7      	b.n	80060ec <_free_r+0x28>
 800615c:	b003      	add	sp, #12
 800615e:	bd30      	pop	{r4, r5, pc}
 8006160:	20000090 	.word	0x20000090

08006164 <_read_r>:
 8006164:	b538      	push	{r3, r4, r5, lr}
 8006166:	4d07      	ldr	r5, [pc, #28]	; (8006184 <_read_r+0x20>)
 8006168:	4604      	mov	r4, r0
 800616a:	4608      	mov	r0, r1
 800616c:	4611      	mov	r1, r2
 800616e:	2200      	movs	r2, #0
 8006170:	602a      	str	r2, [r5, #0]
 8006172:	461a      	mov	r2, r3
 8006174:	f7fa fe08 	bl	8000d88 <_read>
 8006178:	1c43      	adds	r3, r0, #1
 800617a:	d102      	bne.n	8006182 <_read_r+0x1e>
 800617c:	682b      	ldr	r3, [r5, #0]
 800617e:	b103      	cbz	r3, 8006182 <_read_r+0x1e>
 8006180:	6023      	str	r3, [r4, #0]
 8006182:	bd38      	pop	{r3, r4, r5, pc}
 8006184:	200001e4 	.word	0x200001e4

08006188 <_fstat_r>:
 8006188:	b538      	push	{r3, r4, r5, lr}
 800618a:	4d07      	ldr	r5, [pc, #28]	; (80061a8 <_fstat_r+0x20>)
 800618c:	2300      	movs	r3, #0
 800618e:	4604      	mov	r4, r0
 8006190:	4608      	mov	r0, r1
 8006192:	4611      	mov	r1, r2
 8006194:	602b      	str	r3, [r5, #0]
 8006196:	f7fa fe20 	bl	8000dda <_fstat>
 800619a:	1c43      	adds	r3, r0, #1
 800619c:	d102      	bne.n	80061a4 <_fstat_r+0x1c>
 800619e:	682b      	ldr	r3, [r5, #0]
 80061a0:	b103      	cbz	r3, 80061a4 <_fstat_r+0x1c>
 80061a2:	6023      	str	r3, [r4, #0]
 80061a4:	bd38      	pop	{r3, r4, r5, pc}
 80061a6:	bf00      	nop
 80061a8:	200001e4 	.word	0x200001e4

080061ac <_isatty_r>:
 80061ac:	b538      	push	{r3, r4, r5, lr}
 80061ae:	4d06      	ldr	r5, [pc, #24]	; (80061c8 <_isatty_r+0x1c>)
 80061b0:	2300      	movs	r3, #0
 80061b2:	4604      	mov	r4, r0
 80061b4:	4608      	mov	r0, r1
 80061b6:	602b      	str	r3, [r5, #0]
 80061b8:	f7fa fe1f 	bl	8000dfa <_isatty>
 80061bc:	1c43      	adds	r3, r0, #1
 80061be:	d102      	bne.n	80061c6 <_isatty_r+0x1a>
 80061c0:	682b      	ldr	r3, [r5, #0]
 80061c2:	b103      	cbz	r3, 80061c6 <_isatty_r+0x1a>
 80061c4:	6023      	str	r3, [r4, #0]
 80061c6:	bd38      	pop	{r3, r4, r5, pc}
 80061c8:	200001e4 	.word	0x200001e4

080061cc <_init>:
 80061cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ce:	bf00      	nop
 80061d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061d2:	bc08      	pop	{r3}
 80061d4:	469e      	mov	lr, r3
 80061d6:	4770      	bx	lr

080061d8 <_fini>:
 80061d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061da:	bf00      	nop
 80061dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061de:	bc08      	pop	{r3}
 80061e0:	469e      	mov	lr, r3
 80061e2:	4770      	bx	lr
