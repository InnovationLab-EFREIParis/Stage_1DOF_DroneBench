
Basics.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08004348  08004348  00014348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004460  08004460  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004460  08004460  00014460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004468  08004468  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004468  08004468  00014468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800446c  0800446c  0001446c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004470  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000070  080044e0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  080044e0  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d41f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b7c  00000000  00000000  0002d4bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  0002f040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b8  00000000  00000000  0002f9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026807  00000000  00000000  00030258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b0da  00000000  00000000  00056a5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb15b  00000000  00000000  00061b39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014cc94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cdc  00000000  00000000  0014cce8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004330 	.word	0x08004330

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004330 	.word	0x08004330

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:

/* USER CODE BEGIN 0 */
uint8_t rx_buffer[2];
GPIO_PinState PinState;

int main(void) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800056e:	f000 fae3 	bl	8000b38 <HAL_Init>
	/* Configure the system clock */
	SystemClock_Config();
 8000572:	f000 f869 	bl	8000648 <SystemClock_Config>
	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000576:	f000 f8e9 	bl	800074c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800057a:	f000 f8b7 	bl	80006ec <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	// Light up green led
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 800057e:	2201      	movs	r2, #1
 8000580:	2120      	movs	r1, #32
 8000582:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000586:	f000 fe1f 	bl	80011c8 <HAL_GPIO_WritePin>
	// blink green led
	for (int i = 0; i < 5; i++) {
 800058a:	2300      	movs	r3, #0
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	e00a      	b.n	80005a6 <main+0x3e>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000590:	2120      	movs	r1, #32
 8000592:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000596:	f000 fe2f 	bl	80011f8 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 800059a:	2064      	movs	r0, #100	; 0x64
 800059c:	f000 fb48 	bl	8000c30 <HAL_Delay>
	for (int i = 0; i < 5; i++) {
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	3301      	adds	r3, #1
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	2b04      	cmp	r3, #4
 80005aa:	ddf1      	ble.n	8000590 <main+0x28>
	}
	// Welcome message on UART
	if (HAL_UART_Transmit(&huart2, "Nucleo L476RG connected\n\r", 25, 100) != HAL_OK)
 80005ac:	2364      	movs	r3, #100	; 0x64
 80005ae:	2219      	movs	r2, #25
 80005b0:	491e      	ldr	r1, [pc, #120]	; (800062c <main+0xc4>)
 80005b2:	481f      	ldr	r0, [pc, #124]	; (8000630 <main+0xc8>)
 80005b4:	f002 f994 	bl	80028e0 <HAL_UART_Transmit>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <main+0x5a>
		Error_Handler();
 80005be:	f000 f92b 	bl	8000818 <Error_Handler>

	while (1) {
		/* USER CODE END WHILE */
		// Gpio, push button
		// by default, PUSH_BUTTON is at 1
		PinState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80005c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c6:	481b      	ldr	r0, [pc, #108]	; (8000634 <main+0xcc>)
 80005c8:	f000 fde6 	bl	8001198 <HAL_GPIO_ReadPin>
 80005cc:	4603      	mov	r3, r0
 80005ce:	461a      	mov	r2, r3
 80005d0:	4b19      	ldr	r3, [pc, #100]	; (8000638 <main+0xd0>)
 80005d2:	701a      	strb	r2, [r3, #0]
		if (PinState == 1)
 80005d4:	4b18      	ldr	r3, [pc, #96]	; (8000638 <main+0xd0>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d106      	bne.n	80005ea <main+0x82>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 80005dc:	2200      	movs	r2, #0
 80005de:	2120      	movs	r1, #32
 80005e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e4:	f000 fdf0 	bl	80011c8 <HAL_GPIO_WritePin>
 80005e8:	e005      	b.n	80005f6 <main+0x8e>
		else
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 80005ea:	2201      	movs	r2, #1
 80005ec:	2120      	movs	r1, #32
 80005ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f2:	f000 fde9 	bl	80011c8 <HAL_GPIO_WritePin>

		// UART (transmit receive character)
		if (HAL_UART_Receive(&huart2, rx_buffer, 1, 10) == HAL_OK) {
 80005f6:	230a      	movs	r3, #10
 80005f8:	2201      	movs	r2, #1
 80005fa:	4910      	ldr	r1, [pc, #64]	; (800063c <main+0xd4>)
 80005fc:	480c      	ldr	r0, [pc, #48]	; (8000630 <main+0xc8>)
 80005fe:	f002 fa03 	bl	8002a08 <HAL_UART_Receive>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d10c      	bne.n	8000622 <main+0xba>
			printf("Character recieved \n\r");
 8000608:	480d      	ldr	r0, [pc, #52]	; (8000640 <main+0xd8>)
 800060a:	f002 ff3b 	bl	8003484 <iprintf>
			HAL_UART_Transmit(&huart2, rx_buffer, 1, 10);
 800060e:	230a      	movs	r3, #10
 8000610:	2201      	movs	r2, #1
 8000612:	490a      	ldr	r1, [pc, #40]	; (800063c <main+0xd4>)
 8000614:	4806      	ldr	r0, [pc, #24]	; (8000630 <main+0xc8>)
 8000616:	f002 f963 	bl	80028e0 <HAL_UART_Transmit>
			printf("\n\r");
 800061a:	480a      	ldr	r0, [pc, #40]	; (8000644 <main+0xdc>)
 800061c:	f002 ff32 	bl	8003484 <iprintf>
 8000620:	e7cf      	b.n	80005c2 <main+0x5a>
		} else {
			__HAL_UART_CLEAR_OREFLAG(&huart2);
 8000622:	4b03      	ldr	r3, [pc, #12]	; (8000630 <main+0xc8>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	2208      	movs	r2, #8
 8000628:	621a      	str	r2, [r3, #32]
		PinState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 800062a:	e7ca      	b.n	80005c2 <main+0x5a>
 800062c:	08004348 	.word	0x08004348
 8000630:	2000009c 	.word	0x2000009c
 8000634:	48000800 	.word	0x48000800
 8000638:	2000009a 	.word	0x2000009a
 800063c:	20000098 	.word	0x20000098
 8000640:	08004364 	.word	0x08004364
 8000644:	0800437c 	.word	0x0800437c

08000648 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b096      	sub	sp, #88	; 0x58
 800064c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	2244      	movs	r2, #68	; 0x44
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f002 ff0c 	bl	8003474 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800065c:	463b      	mov	r3, r7
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
 8000668:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 800066a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800066e:	f000 fdeb 	bl	8001248 <HAL_PWREx_ControlVoltageScaling>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8000678:	f000 f8ce 	bl	8000818 <Error_Handler>
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800067c:	2302      	movs	r3, #2
 800067e:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000680:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000684:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000686:	2310      	movs	r3, #16
 8000688:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068a:	2302      	movs	r3, #2
 800068c:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800068e:	2302      	movs	r3, #2
 8000690:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000692:	2301      	movs	r3, #1
 8000694:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8000696:	230a      	movs	r3, #10
 8000698:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800069a:	2307      	movs	r3, #7
 800069c:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800069e:	2302      	movs	r3, #2
 80006a0:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006a2:	2302      	movs	r3, #2
 80006a4:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 fe22 	bl	80012f4 <HAL_RCC_OscConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0x72>
		Error_Handler();
 80006b6:	f000 f8af 	bl	8000818 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006ba:	230f      	movs	r3, #15
 80006bc:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006be:	2303      	movs	r3, #3
 80006c0:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80006ce:	463b      	mov	r3, r7
 80006d0:	2104      	movs	r1, #4
 80006d2:	4618      	mov	r0, r3
 80006d4:	f001 f9f4 	bl	8001ac0 <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0x9a>
		Error_Handler();
 80006de:	f000 f89b 	bl	8000818 <Error_Handler>
	}
}
 80006e2:	bf00      	nop
 80006e4:	3758      	adds	r7, #88	; 0x58
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
	...

080006ec <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80006f0:	4b14      	ldr	r3, [pc, #80]	; (8000744 <MX_USART2_UART_Init+0x58>)
 80006f2:	4a15      	ldr	r2, [pc, #84]	; (8000748 <MX_USART2_UART_Init+0x5c>)
 80006f4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80006f6:	4b13      	ldr	r3, [pc, #76]	; (8000744 <MX_USART2_UART_Init+0x58>)
 80006f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006fc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006fe:	4b11      	ldr	r3, [pc, #68]	; (8000744 <MX_USART2_UART_Init+0x58>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MX_USART2_UART_Init+0x58>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <MX_USART2_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MX_USART2_UART_Init+0x58>)
 8000712:	220c      	movs	r2, #12
 8000714:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <MX_USART2_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_USART2_UART_Init+0x58>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <MX_USART2_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_USART2_UART_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <MX_USART2_UART_Init+0x58>)
 8000730:	f002 f888 	bl	8002844 <HAL_UART_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_USART2_UART_Init+0x52>
		Error_Handler();
 800073a:	f000 f86d 	bl	8000818 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	2000009c 	.word	0x2000009c
 8000748:	40004400 	.word	0x40004400

0800074c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b08a      	sub	sp, #40	; 0x28
 8000750:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000762:	4b2b      	ldr	r3, [pc, #172]	; (8000810 <MX_GPIO_Init+0xc4>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	4a2a      	ldr	r2, [pc, #168]	; (8000810 <MX_GPIO_Init+0xc4>)
 8000768:	f043 0304 	orr.w	r3, r3, #4
 800076c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076e:	4b28      	ldr	r3, [pc, #160]	; (8000810 <MX_GPIO_Init+0xc4>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	f003 0304 	and.w	r3, r3, #4
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800077a:	4b25      	ldr	r3, [pc, #148]	; (8000810 <MX_GPIO_Init+0xc4>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	4a24      	ldr	r2, [pc, #144]	; (8000810 <MX_GPIO_Init+0xc4>)
 8000780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000786:	4b22      	ldr	r3, [pc, #136]	; (8000810 <MX_GPIO_Init+0xc4>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	4b1f      	ldr	r3, [pc, #124]	; (8000810 <MX_GPIO_Init+0xc4>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	4a1e      	ldr	r2, [pc, #120]	; (8000810 <MX_GPIO_Init+0xc4>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079e:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <MX_GPIO_Init+0xc4>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	4b19      	ldr	r3, [pc, #100]	; (8000810 <MX_GPIO_Init+0xc4>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	4a18      	ldr	r2, [pc, #96]	; (8000810 <MX_GPIO_Init+0xc4>)
 80007b0:	f043 0302 	orr.w	r3, r3, #2
 80007b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b6:	4b16      	ldr	r3, [pc, #88]	; (8000810 <MX_GPIO_Init+0xc4>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	f003 0302 	and.w	r3, r3, #2
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2120      	movs	r1, #32
 80007c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ca:	f000 fcfd 	bl	80011c8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80007ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007d2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007d4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007d8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	4619      	mov	r1, r3
 80007e4:	480b      	ldr	r0, [pc, #44]	; (8000814 <MX_GPIO_Init+0xc8>)
 80007e6:	f000 fb2d 	bl	8000e44 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80007ea:	2320      	movs	r3, #32
 80007ec:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ee:	2301      	movs	r3, #1
 80007f0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4619      	mov	r1, r3
 8000800:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000804:	f000 fb1e 	bl	8000e44 <HAL_GPIO_Init>

}
 8000808:	bf00      	nop
 800080a:	3728      	adds	r7, #40	; 0x28
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40021000 	.word	0x40021000
 8000814:	48000800 	.word	0x48000800

08000818 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800081c:	b672      	cpsid	i
}
 800081e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000820:	e7fe      	b.n	8000820 <Error_Handler+0x8>
	...

08000824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082a:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <HAL_MspInit+0x44>)
 800082c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800082e:	4a0e      	ldr	r2, [pc, #56]	; (8000868 <HAL_MspInit+0x44>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6613      	str	r3, [r2, #96]	; 0x60
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <HAL_MspInit+0x44>)
 8000838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <HAL_MspInit+0x44>)
 8000844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000846:	4a08      	ldr	r2, [pc, #32]	; (8000868 <HAL_MspInit+0x44>)
 8000848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084c:	6593      	str	r3, [r2, #88]	; 0x58
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <HAL_MspInit+0x44>)
 8000850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	40021000 	.word	0x40021000

0800086c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b0ac      	sub	sp, #176	; 0xb0
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	2288      	movs	r2, #136	; 0x88
 800088a:	2100      	movs	r1, #0
 800088c:	4618      	mov	r0, r3
 800088e:	f002 fdf1 	bl	8003474 <memset>
  if(huart->Instance==USART2)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a21      	ldr	r2, [pc, #132]	; (800091c <HAL_UART_MspInit+0xb0>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d13b      	bne.n	8000914 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800089c:	2302      	movs	r3, #2
 800089e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008a0:	2300      	movs	r3, #0
 80008a2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4618      	mov	r0, r3
 80008aa:	f001 fb0f 	bl	8001ecc <HAL_RCCEx_PeriphCLKConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008b4:	f7ff ffb0 	bl	8000818 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008b8:	4b19      	ldr	r3, [pc, #100]	; (8000920 <HAL_UART_MspInit+0xb4>)
 80008ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008bc:	4a18      	ldr	r2, [pc, #96]	; (8000920 <HAL_UART_MspInit+0xb4>)
 80008be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c2:	6593      	str	r3, [r2, #88]	; 0x58
 80008c4:	4b16      	ldr	r3, [pc, #88]	; (8000920 <HAL_UART_MspInit+0xb4>)
 80008c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008cc:	613b      	str	r3, [r7, #16]
 80008ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d0:	4b13      	ldr	r3, [pc, #76]	; (8000920 <HAL_UART_MspInit+0xb4>)
 80008d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d4:	4a12      	ldr	r2, [pc, #72]	; (8000920 <HAL_UART_MspInit+0xb4>)
 80008d6:	f043 0301 	orr.w	r3, r3, #1
 80008da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008dc:	4b10      	ldr	r3, [pc, #64]	; (8000920 <HAL_UART_MspInit+0xb4>)
 80008de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e0:	f003 0301 	and.w	r3, r3, #1
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008e8:	230c      	movs	r3, #12
 80008ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ee:	2302      	movs	r3, #2
 80008f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fa:	2303      	movs	r3, #3
 80008fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000900:	2307      	movs	r3, #7
 8000902:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000906:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800090a:	4619      	mov	r1, r3
 800090c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000910:	f000 fa98 	bl	8000e44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000914:	bf00      	nop
 8000916:	37b0      	adds	r7, #176	; 0xb0
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40004400 	.word	0x40004400
 8000920:	40021000 	.word	0x40021000

08000924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000928:	e7fe      	b.n	8000928 <NMI_Handler+0x4>

0800092a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092e:	e7fe      	b.n	800092e <HardFault_Handler+0x4>

08000930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <MemManage_Handler+0x4>

08000936 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800093a:	e7fe      	b.n	800093a <BusFault_Handler+0x4>

0800093c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <UsageFault_Handler+0x4>

08000942 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000970:	f000 f93e 	bl	8000bf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}

08000978 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]
 8000988:	e00a      	b.n	80009a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800098a:	f3af 8000 	nop.w
 800098e:	4601      	mov	r1, r0
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	1c5a      	adds	r2, r3, #1
 8000994:	60ba      	str	r2, [r7, #8]
 8000996:	b2ca      	uxtb	r2, r1
 8000998:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	3301      	adds	r3, #1
 800099e:	617b      	str	r3, [r7, #20]
 80009a0:	697a      	ldr	r2, [r7, #20]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	dbf0      	blt.n	800098a <_read+0x12>
	}

return len;
 80009a8:	687b      	ldr	r3, [r7, #4]
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3718      	adds	r7, #24
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b086      	sub	sp, #24
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	60f8      	str	r0, [r7, #12]
 80009ba:	60b9      	str	r1, [r7, #8]
 80009bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009be:	2300      	movs	r3, #0
 80009c0:	617b      	str	r3, [r7, #20]
 80009c2:	e009      	b.n	80009d8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	1c5a      	adds	r2, r3, #1
 80009c8:	60ba      	str	r2, [r7, #8]
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	3301      	adds	r3, #1
 80009d6:	617b      	str	r3, [r7, #20]
 80009d8:	697a      	ldr	r2, [r7, #20]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	429a      	cmp	r2, r3
 80009de:	dbf1      	blt.n	80009c4 <_write+0x12>
	}
	return len;
 80009e0:	687b      	ldr	r3, [r7, #4]
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3718      	adds	r7, #24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <_close>:

int _close(int file)
{
 80009ea:	b480      	push	{r7}
 80009ec:	b083      	sub	sp, #12
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
	return -1;
 80009f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a02:	b480      	push	{r7}
 8000a04:	b083      	sub	sp, #12
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
 8000a0a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a12:	605a      	str	r2, [r3, #4]
	return 0;
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <_isatty>:

int _isatty(int file)
{
 8000a22:	b480      	push	{r7}
 8000a24:	b083      	sub	sp, #12
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
	return 1;
 8000a2a:	2301      	movs	r3, #1
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
	return 0;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3714      	adds	r7, #20
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
	...

08000a54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a5c:	4a14      	ldr	r2, [pc, #80]	; (8000ab0 <_sbrk+0x5c>)
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <_sbrk+0x60>)
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <_sbrk+0x64>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d102      	bne.n	8000a76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <_sbrk+0x64>)
 8000a72:	4a12      	ldr	r2, [pc, #72]	; (8000abc <_sbrk+0x68>)
 8000a74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <_sbrk+0x64>)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d207      	bcs.n	8000a94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a84:	f002 fccc 	bl	8003420 <__errno>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	220c      	movs	r2, #12
 8000a8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a92:	e009      	b.n	8000aa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <_sbrk+0x64>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a9a:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <_sbrk+0x64>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	4a05      	ldr	r2, [pc, #20]	; (8000ab8 <_sbrk+0x64>)
 8000aa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3718      	adds	r7, #24
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20018000 	.word	0x20018000
 8000ab4:	00000400 	.word	0x00000400
 8000ab8:	2000008c 	.word	0x2000008c
 8000abc:	20000138 	.word	0x20000138

08000ac0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <SystemInit+0x20>)
 8000ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aca:	4a05      	ldr	r2, [pc, #20]	; (8000ae0 <SystemInit+0x20>)
 8000acc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ae4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b1c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ae8:	f7ff ffea 	bl	8000ac0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aec:	480c      	ldr	r0, [pc, #48]	; (8000b20 <LoopForever+0x6>)
  ldr r1, =_edata
 8000aee:	490d      	ldr	r1, [pc, #52]	; (8000b24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000af0:	4a0d      	ldr	r2, [pc, #52]	; (8000b28 <LoopForever+0xe>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af4:	e002      	b.n	8000afc <LoopCopyDataInit>

08000af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afa:	3304      	adds	r3, #4

08000afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b00:	d3f9      	bcc.n	8000af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b02:	4a0a      	ldr	r2, [pc, #40]	; (8000b2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b04:	4c0a      	ldr	r4, [pc, #40]	; (8000b30 <LoopForever+0x16>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b08:	e001      	b.n	8000b0e <LoopFillZerobss>

08000b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b0c:	3204      	adds	r2, #4

08000b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b10:	d3fb      	bcc.n	8000b0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b12:	f002 fc8b 	bl	800342c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b16:	f7ff fd27 	bl	8000568 <main>

08000b1a <LoopForever>:

LoopForever:
    b LoopForever
 8000b1a:	e7fe      	b.n	8000b1a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b1c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b24:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b28:	08004470 	.word	0x08004470
  ldr r2, =_sbss
 8000b2c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b30:	20000134 	.word	0x20000134

08000b34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b34:	e7fe      	b.n	8000b34 <ADC1_2_IRQHandler>
	...

08000b38 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b42:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <HAL_Init+0x3c>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a0b      	ldr	r2, [pc, #44]	; (8000b74 <HAL_Init+0x3c>)
 8000b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b4c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b4e:	2003      	movs	r0, #3
 8000b50:	f000 f944 	bl	8000ddc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b54:	2000      	movs	r0, #0
 8000b56:	f000 f80f 	bl	8000b78 <HAL_InitTick>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d002      	beq.n	8000b66 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b60:	2301      	movs	r3, #1
 8000b62:	71fb      	strb	r3, [r7, #7]
 8000b64:	e001      	b.n	8000b6a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b66:	f7ff fe5d 	bl	8000824 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40022000 	.word	0x40022000

08000b78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b80:	2300      	movs	r3, #0
 8000b82:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b84:	4b17      	ldr	r3, [pc, #92]	; (8000be4 <HAL_InitTick+0x6c>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d023      	beq.n	8000bd4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b8c:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <HAL_InitTick+0x70>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4b14      	ldr	r3, [pc, #80]	; (8000be4 <HAL_InitTick+0x6c>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	4619      	mov	r1, r3
 8000b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 f941 	bl	8000e2a <HAL_SYSTICK_Config>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d10f      	bne.n	8000bce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2b0f      	cmp	r3, #15
 8000bb2:	d809      	bhi.n	8000bc8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bbc:	f000 f919 	bl	8000df2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bc0:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <HAL_InitTick+0x74>)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6013      	str	r3, [r2, #0]
 8000bc6:	e007      	b.n	8000bd8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	73fb      	strb	r3, [r7, #15]
 8000bcc:	e004      	b.n	8000bd8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	73fb      	strb	r3, [r7, #15]
 8000bd2:	e001      	b.n	8000bd8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000008 	.word	0x20000008
 8000be8:	20000000 	.word	0x20000000
 8000bec:	20000004 	.word	0x20000004

08000bf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <HAL_IncTick+0x20>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_IncTick+0x24>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4413      	add	r3, r2
 8000c00:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <HAL_IncTick+0x24>)
 8000c02:	6013      	str	r3, [r2, #0]
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	20000008 	.word	0x20000008
 8000c14:	20000120 	.word	0x20000120

08000c18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c1c:	4b03      	ldr	r3, [pc, #12]	; (8000c2c <HAL_GetTick+0x14>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20000120 	.word	0x20000120

08000c30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c38:	f7ff ffee 	bl	8000c18 <HAL_GetTick>
 8000c3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c48:	d005      	beq.n	8000c56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <HAL_Delay+0x44>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	461a      	mov	r2, r3
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	4413      	add	r3, r2
 8000c54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c56:	bf00      	nop
 8000c58:	f7ff ffde 	bl	8000c18 <HAL_GetTick>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	68fa      	ldr	r2, [r7, #12]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d8f7      	bhi.n	8000c58 <HAL_Delay+0x28>
  {
  }
}
 8000c68:	bf00      	nop
 8000c6a:	bf00      	nop
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000008 	.word	0x20000008

08000c78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c88:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <__NVIC_SetPriorityGrouping+0x44>)
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c8e:	68ba      	ldr	r2, [r7, #8]
 8000c90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c94:	4013      	ands	r3, r2
 8000c96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ca0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000caa:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <__NVIC_SetPriorityGrouping+0x44>)
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	60d3      	str	r3, [r2, #12]
}
 8000cb0:	bf00      	nop
 8000cb2:	3714      	adds	r7, #20
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc4:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	0a1b      	lsrs	r3, r3, #8
 8000cca:	f003 0307 	and.w	r3, r3, #7
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	6039      	str	r1, [r7, #0]
 8000ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	db0a      	blt.n	8000d06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	b2da      	uxtb	r2, r3
 8000cf4:	490c      	ldr	r1, [pc, #48]	; (8000d28 <__NVIC_SetPriority+0x4c>)
 8000cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfa:	0112      	lsls	r2, r2, #4
 8000cfc:	b2d2      	uxtb	r2, r2
 8000cfe:	440b      	add	r3, r1
 8000d00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d04:	e00a      	b.n	8000d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	4908      	ldr	r1, [pc, #32]	; (8000d2c <__NVIC_SetPriority+0x50>)
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	f003 030f 	and.w	r3, r3, #15
 8000d12:	3b04      	subs	r3, #4
 8000d14:	0112      	lsls	r2, r2, #4
 8000d16:	b2d2      	uxtb	r2, r2
 8000d18:	440b      	add	r3, r1
 8000d1a:	761a      	strb	r2, [r3, #24]
}
 8000d1c:	bf00      	nop
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	e000e100 	.word	0xe000e100
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b089      	sub	sp, #36	; 0x24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	f003 0307 	and.w	r3, r3, #7
 8000d42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	f1c3 0307 	rsb	r3, r3, #7
 8000d4a:	2b04      	cmp	r3, #4
 8000d4c:	bf28      	it	cs
 8000d4e:	2304      	movcs	r3, #4
 8000d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	3304      	adds	r3, #4
 8000d56:	2b06      	cmp	r3, #6
 8000d58:	d902      	bls.n	8000d60 <NVIC_EncodePriority+0x30>
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	3b03      	subs	r3, #3
 8000d5e:	e000      	b.n	8000d62 <NVIC_EncodePriority+0x32>
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d64:	f04f 32ff 	mov.w	r2, #4294967295
 8000d68:	69bb      	ldr	r3, [r7, #24]
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	43da      	mvns	r2, r3
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	401a      	ands	r2, r3
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d78:	f04f 31ff 	mov.w	r1, #4294967295
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d82:	43d9      	mvns	r1, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d88:	4313      	orrs	r3, r2
         );
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3724      	adds	r7, #36	; 0x24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
	...

08000d98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000da8:	d301      	bcc.n	8000dae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000daa:	2301      	movs	r3, #1
 8000dac:	e00f      	b.n	8000dce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dae:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <SysTick_Config+0x40>)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3b01      	subs	r3, #1
 8000db4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000db6:	210f      	movs	r1, #15
 8000db8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dbc:	f7ff ff8e 	bl	8000cdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc0:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <SysTick_Config+0x40>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dc6:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <SysTick_Config+0x40>)
 8000dc8:	2207      	movs	r2, #7
 8000dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	e000e010 	.word	0xe000e010

08000ddc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f7ff ff47 	bl	8000c78 <__NVIC_SetPriorityGrouping>
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b086      	sub	sp, #24
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	4603      	mov	r3, r0
 8000dfa:	60b9      	str	r1, [r7, #8]
 8000dfc:	607a      	str	r2, [r7, #4]
 8000dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e04:	f7ff ff5c 	bl	8000cc0 <__NVIC_GetPriorityGrouping>
 8000e08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	68b9      	ldr	r1, [r7, #8]
 8000e0e:	6978      	ldr	r0, [r7, #20]
 8000e10:	f7ff ff8e 	bl	8000d30 <NVIC_EncodePriority>
 8000e14:	4602      	mov	r2, r0
 8000e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff ff5d 	bl	8000cdc <__NVIC_SetPriority>
}
 8000e22:	bf00      	nop
 8000e24:	3718      	adds	r7, #24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f7ff ffb0 	bl	8000d98 <SysTick_Config>
 8000e38:	4603      	mov	r3, r0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
	...

08000e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b087      	sub	sp, #28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e52:	e17f      	b.n	8001154 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	2101      	movs	r1, #1
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e60:	4013      	ands	r3, r2
 8000e62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	f000 8171 	beq.w	800114e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 0303 	and.w	r3, r3, #3
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d005      	beq.n	8000e84 <HAL_GPIO_Init+0x40>
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 0303 	and.w	r3, r3, #3
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d130      	bne.n	8000ee6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	2203      	movs	r2, #3
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	68da      	ldr	r2, [r3, #12]
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eba:	2201      	movs	r2, #1
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	091b      	lsrs	r3, r3, #4
 8000ed0:	f003 0201 	and.w	r2, r3, #1
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f003 0303 	and.w	r3, r3, #3
 8000eee:	2b03      	cmp	r3, #3
 8000ef0:	d118      	bne.n	8000f24 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ef8:	2201      	movs	r2, #1
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	4013      	ands	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	08db      	lsrs	r3, r3, #3
 8000f0e:	f003 0201 	and.w	r2, r3, #1
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 0303 	and.w	r3, r3, #3
 8000f2c:	2b03      	cmp	r3, #3
 8000f2e:	d017      	beq.n	8000f60 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	43db      	mvns	r3, r3
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4013      	ands	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	689a      	ldr	r2, [r3, #8]
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 0303 	and.w	r3, r3, #3
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d123      	bne.n	8000fb4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	08da      	lsrs	r2, r3, #3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3208      	adds	r2, #8
 8000f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f78:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	f003 0307 	and.w	r3, r3, #7
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	220f      	movs	r2, #15
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	691a      	ldr	r2, [r3, #16]
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	08da      	lsrs	r2, r3, #3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3208      	adds	r2, #8
 8000fae:	6939      	ldr	r1, [r7, #16]
 8000fb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 0203 	and.w	r2, r3, #3
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	f000 80ac 	beq.w	800114e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff6:	4b5f      	ldr	r3, [pc, #380]	; (8001174 <HAL_GPIO_Init+0x330>)
 8000ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ffa:	4a5e      	ldr	r2, [pc, #376]	; (8001174 <HAL_GPIO_Init+0x330>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	6613      	str	r3, [r2, #96]	; 0x60
 8001002:	4b5c      	ldr	r3, [pc, #368]	; (8001174 <HAL_GPIO_Init+0x330>)
 8001004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800100e:	4a5a      	ldr	r2, [pc, #360]	; (8001178 <HAL_GPIO_Init+0x334>)
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	089b      	lsrs	r3, r3, #2
 8001014:	3302      	adds	r3, #2
 8001016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800101a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	f003 0303 	and.w	r3, r3, #3
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	220f      	movs	r2, #15
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43db      	mvns	r3, r3
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4013      	ands	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001038:	d025      	beq.n	8001086 <HAL_GPIO_Init+0x242>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a4f      	ldr	r2, [pc, #316]	; (800117c <HAL_GPIO_Init+0x338>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d01f      	beq.n	8001082 <HAL_GPIO_Init+0x23e>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a4e      	ldr	r2, [pc, #312]	; (8001180 <HAL_GPIO_Init+0x33c>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d019      	beq.n	800107e <HAL_GPIO_Init+0x23a>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a4d      	ldr	r2, [pc, #308]	; (8001184 <HAL_GPIO_Init+0x340>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d013      	beq.n	800107a <HAL_GPIO_Init+0x236>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a4c      	ldr	r2, [pc, #304]	; (8001188 <HAL_GPIO_Init+0x344>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d00d      	beq.n	8001076 <HAL_GPIO_Init+0x232>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a4b      	ldr	r2, [pc, #300]	; (800118c <HAL_GPIO_Init+0x348>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d007      	beq.n	8001072 <HAL_GPIO_Init+0x22e>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a4a      	ldr	r2, [pc, #296]	; (8001190 <HAL_GPIO_Init+0x34c>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d101      	bne.n	800106e <HAL_GPIO_Init+0x22a>
 800106a:	2306      	movs	r3, #6
 800106c:	e00c      	b.n	8001088 <HAL_GPIO_Init+0x244>
 800106e:	2307      	movs	r3, #7
 8001070:	e00a      	b.n	8001088 <HAL_GPIO_Init+0x244>
 8001072:	2305      	movs	r3, #5
 8001074:	e008      	b.n	8001088 <HAL_GPIO_Init+0x244>
 8001076:	2304      	movs	r3, #4
 8001078:	e006      	b.n	8001088 <HAL_GPIO_Init+0x244>
 800107a:	2303      	movs	r3, #3
 800107c:	e004      	b.n	8001088 <HAL_GPIO_Init+0x244>
 800107e:	2302      	movs	r3, #2
 8001080:	e002      	b.n	8001088 <HAL_GPIO_Init+0x244>
 8001082:	2301      	movs	r3, #1
 8001084:	e000      	b.n	8001088 <HAL_GPIO_Init+0x244>
 8001086:	2300      	movs	r3, #0
 8001088:	697a      	ldr	r2, [r7, #20]
 800108a:	f002 0203 	and.w	r2, r2, #3
 800108e:	0092      	lsls	r2, r2, #2
 8001090:	4093      	lsls	r3, r2
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001098:	4937      	ldr	r1, [pc, #220]	; (8001178 <HAL_GPIO_Init+0x334>)
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	089b      	lsrs	r3, r3, #2
 800109e:	3302      	adds	r3, #2
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010a6:	4b3b      	ldr	r3, [pc, #236]	; (8001194 <HAL_GPIO_Init+0x350>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	43db      	mvns	r3, r3
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4013      	ands	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010ca:	4a32      	ldr	r2, [pc, #200]	; (8001194 <HAL_GPIO_Init+0x350>)
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010d0:	4b30      	ldr	r3, [pc, #192]	; (8001194 <HAL_GPIO_Init+0x350>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	43db      	mvns	r3, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d003      	beq.n	80010f4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010f4:	4a27      	ldr	r2, [pc, #156]	; (8001194 <HAL_GPIO_Init+0x350>)
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010fa:	4b26      	ldr	r3, [pc, #152]	; (8001194 <HAL_GPIO_Init+0x350>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	43db      	mvns	r3, r3
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	4013      	ands	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	4313      	orrs	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800111e:	4a1d      	ldr	r2, [pc, #116]	; (8001194 <HAL_GPIO_Init+0x350>)
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001124:	4b1b      	ldr	r3, [pc, #108]	; (8001194 <HAL_GPIO_Init+0x350>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	43db      	mvns	r3, r3
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	4013      	ands	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d003      	beq.n	8001148 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	4313      	orrs	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001148:	4a12      	ldr	r2, [pc, #72]	; (8001194 <HAL_GPIO_Init+0x350>)
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	3301      	adds	r3, #1
 8001152:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	fa22 f303 	lsr.w	r3, r2, r3
 800115e:	2b00      	cmp	r3, #0
 8001160:	f47f ae78 	bne.w	8000e54 <HAL_GPIO_Init+0x10>
  }
}
 8001164:	bf00      	nop
 8001166:	bf00      	nop
 8001168:	371c      	adds	r7, #28
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	40021000 	.word	0x40021000
 8001178:	40010000 	.word	0x40010000
 800117c:	48000400 	.word	0x48000400
 8001180:	48000800 	.word	0x48000800
 8001184:	48000c00 	.word	0x48000c00
 8001188:	48001000 	.word	0x48001000
 800118c:	48001400 	.word	0x48001400
 8001190:	48001800 	.word	0x48001800
 8001194:	40010400 	.word	0x40010400

08001198 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	691a      	ldr	r2, [r3, #16]
 80011a8:	887b      	ldrh	r3, [r7, #2]
 80011aa:	4013      	ands	r3, r2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d002      	beq.n	80011b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011b0:	2301      	movs	r3, #1
 80011b2:	73fb      	strb	r3, [r7, #15]
 80011b4:	e001      	b.n	80011ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011b6:	2300      	movs	r3, #0
 80011b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	807b      	strh	r3, [r7, #2]
 80011d4:	4613      	mov	r3, r2
 80011d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011d8:	787b      	ldrb	r3, [r7, #1]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d003      	beq.n	80011e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011de:	887a      	ldrh	r2, [r7, #2]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011e4:	e002      	b.n	80011ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011e6:	887a      	ldrh	r2, [r7, #2]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	460b      	mov	r3, r1
 8001202:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	695b      	ldr	r3, [r3, #20]
 8001208:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800120a:	887a      	ldrh	r2, [r7, #2]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4013      	ands	r3, r2
 8001210:	041a      	lsls	r2, r3, #16
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	43d9      	mvns	r1, r3
 8001216:	887b      	ldrh	r3, [r7, #2]
 8001218:	400b      	ands	r3, r1
 800121a:	431a      	orrs	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	619a      	str	r2, [r3, #24]
}
 8001220:	bf00      	nop
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001230:	4b04      	ldr	r3, [pc, #16]	; (8001244 <HAL_PWREx_GetVoltageRange+0x18>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001238:	4618      	mov	r0, r3
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40007000 	.word	0x40007000

08001248 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001256:	d130      	bne.n	80012ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001258:	4b23      	ldr	r3, [pc, #140]	; (80012e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001264:	d038      	beq.n	80012d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001266:	4b20      	ldr	r3, [pc, #128]	; (80012e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800126e:	4a1e      	ldr	r2, [pc, #120]	; (80012e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001270:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001274:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001276:	4b1d      	ldr	r3, [pc, #116]	; (80012ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2232      	movs	r2, #50	; 0x32
 800127c:	fb02 f303 	mul.w	r3, r2, r3
 8001280:	4a1b      	ldr	r2, [pc, #108]	; (80012f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001282:	fba2 2303 	umull	r2, r3, r2, r3
 8001286:	0c9b      	lsrs	r3, r3, #18
 8001288:	3301      	adds	r3, #1
 800128a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800128c:	e002      	b.n	8001294 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	3b01      	subs	r3, #1
 8001292:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001294:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001296:	695b      	ldr	r3, [r3, #20]
 8001298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800129c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012a0:	d102      	bne.n	80012a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1f2      	bne.n	800128e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012a8:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012aa:	695b      	ldr	r3, [r3, #20]
 80012ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012b4:	d110      	bne.n	80012d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e00f      	b.n	80012da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80012ba:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012c6:	d007      	beq.n	80012d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012c8:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012d0:	4a05      	ldr	r2, [pc, #20]	; (80012e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3714      	adds	r7, #20
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	40007000 	.word	0x40007000
 80012ec:	20000000 	.word	0x20000000
 80012f0:	431bde83 	.word	0x431bde83

080012f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d101      	bne.n	8001306 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e3d4      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001306:	4ba1      	ldr	r3, [pc, #644]	; (800158c <HAL_RCC_OscConfig+0x298>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f003 030c 	and.w	r3, r3, #12
 800130e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001310:	4b9e      	ldr	r3, [pc, #632]	; (800158c <HAL_RCC_OscConfig+0x298>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	f003 0303 	and.w	r3, r3, #3
 8001318:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0310 	and.w	r3, r3, #16
 8001322:	2b00      	cmp	r3, #0
 8001324:	f000 80e4 	beq.w	80014f0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d007      	beq.n	800133e <HAL_RCC_OscConfig+0x4a>
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	2b0c      	cmp	r3, #12
 8001332:	f040 808b 	bne.w	800144c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	2b01      	cmp	r3, #1
 800133a:	f040 8087 	bne.w	800144c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800133e:	4b93      	ldr	r3, [pc, #588]	; (800158c <HAL_RCC_OscConfig+0x298>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d005      	beq.n	8001356 <HAL_RCC_OscConfig+0x62>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	699b      	ldr	r3, [r3, #24]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d101      	bne.n	8001356 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e3ac      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a1a      	ldr	r2, [r3, #32]
 800135a:	4b8c      	ldr	r3, [pc, #560]	; (800158c <HAL_RCC_OscConfig+0x298>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0308 	and.w	r3, r3, #8
 8001362:	2b00      	cmp	r3, #0
 8001364:	d004      	beq.n	8001370 <HAL_RCC_OscConfig+0x7c>
 8001366:	4b89      	ldr	r3, [pc, #548]	; (800158c <HAL_RCC_OscConfig+0x298>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800136e:	e005      	b.n	800137c <HAL_RCC_OscConfig+0x88>
 8001370:	4b86      	ldr	r3, [pc, #536]	; (800158c <HAL_RCC_OscConfig+0x298>)
 8001372:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001376:	091b      	lsrs	r3, r3, #4
 8001378:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800137c:	4293      	cmp	r3, r2
 800137e:	d223      	bcs.n	80013c8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a1b      	ldr	r3, [r3, #32]
 8001384:	4618      	mov	r0, r3
 8001386:	f000 fd41 	bl	8001e0c <RCC_SetFlashLatencyFromMSIRange>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e38d      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001394:	4b7d      	ldr	r3, [pc, #500]	; (800158c <HAL_RCC_OscConfig+0x298>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a7c      	ldr	r2, [pc, #496]	; (800158c <HAL_RCC_OscConfig+0x298>)
 800139a:	f043 0308 	orr.w	r3, r3, #8
 800139e:	6013      	str	r3, [r2, #0]
 80013a0:	4b7a      	ldr	r3, [pc, #488]	; (800158c <HAL_RCC_OscConfig+0x298>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a1b      	ldr	r3, [r3, #32]
 80013ac:	4977      	ldr	r1, [pc, #476]	; (800158c <HAL_RCC_OscConfig+0x298>)
 80013ae:	4313      	orrs	r3, r2
 80013b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013b2:	4b76      	ldr	r3, [pc, #472]	; (800158c <HAL_RCC_OscConfig+0x298>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	021b      	lsls	r3, r3, #8
 80013c0:	4972      	ldr	r1, [pc, #456]	; (800158c <HAL_RCC_OscConfig+0x298>)
 80013c2:	4313      	orrs	r3, r2
 80013c4:	604b      	str	r3, [r1, #4]
 80013c6:	e025      	b.n	8001414 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013c8:	4b70      	ldr	r3, [pc, #448]	; (800158c <HAL_RCC_OscConfig+0x298>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a6f      	ldr	r2, [pc, #444]	; (800158c <HAL_RCC_OscConfig+0x298>)
 80013ce:	f043 0308 	orr.w	r3, r3, #8
 80013d2:	6013      	str	r3, [r2, #0]
 80013d4:	4b6d      	ldr	r3, [pc, #436]	; (800158c <HAL_RCC_OscConfig+0x298>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a1b      	ldr	r3, [r3, #32]
 80013e0:	496a      	ldr	r1, [pc, #424]	; (800158c <HAL_RCC_OscConfig+0x298>)
 80013e2:	4313      	orrs	r3, r2
 80013e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013e6:	4b69      	ldr	r3, [pc, #420]	; (800158c <HAL_RCC_OscConfig+0x298>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	021b      	lsls	r3, r3, #8
 80013f4:	4965      	ldr	r1, [pc, #404]	; (800158c <HAL_RCC_OscConfig+0x298>)
 80013f6:	4313      	orrs	r3, r2
 80013f8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d109      	bne.n	8001414 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a1b      	ldr	r3, [r3, #32]
 8001404:	4618      	mov	r0, r3
 8001406:	f000 fd01 	bl	8001e0c <RCC_SetFlashLatencyFromMSIRange>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e34d      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001414:	f000 fc36 	bl	8001c84 <HAL_RCC_GetSysClockFreq>
 8001418:	4602      	mov	r2, r0
 800141a:	4b5c      	ldr	r3, [pc, #368]	; (800158c <HAL_RCC_OscConfig+0x298>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	091b      	lsrs	r3, r3, #4
 8001420:	f003 030f 	and.w	r3, r3, #15
 8001424:	495a      	ldr	r1, [pc, #360]	; (8001590 <HAL_RCC_OscConfig+0x29c>)
 8001426:	5ccb      	ldrb	r3, [r1, r3]
 8001428:	f003 031f 	and.w	r3, r3, #31
 800142c:	fa22 f303 	lsr.w	r3, r2, r3
 8001430:	4a58      	ldr	r2, [pc, #352]	; (8001594 <HAL_RCC_OscConfig+0x2a0>)
 8001432:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001434:	4b58      	ldr	r3, [pc, #352]	; (8001598 <HAL_RCC_OscConfig+0x2a4>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff fb9d 	bl	8000b78 <HAL_InitTick>
 800143e:	4603      	mov	r3, r0
 8001440:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001442:	7bfb      	ldrb	r3, [r7, #15]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d052      	beq.n	80014ee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	e331      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d032      	beq.n	80014ba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001454:	4b4d      	ldr	r3, [pc, #308]	; (800158c <HAL_RCC_OscConfig+0x298>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a4c      	ldr	r2, [pc, #304]	; (800158c <HAL_RCC_OscConfig+0x298>)
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001460:	f7ff fbda 	bl	8000c18 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001468:	f7ff fbd6 	bl	8000c18 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e31a      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800147a:	4b44      	ldr	r3, [pc, #272]	; (800158c <HAL_RCC_OscConfig+0x298>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d0f0      	beq.n	8001468 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001486:	4b41      	ldr	r3, [pc, #260]	; (800158c <HAL_RCC_OscConfig+0x298>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a40      	ldr	r2, [pc, #256]	; (800158c <HAL_RCC_OscConfig+0x298>)
 800148c:	f043 0308 	orr.w	r3, r3, #8
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	4b3e      	ldr	r3, [pc, #248]	; (800158c <HAL_RCC_OscConfig+0x298>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a1b      	ldr	r3, [r3, #32]
 800149e:	493b      	ldr	r1, [pc, #236]	; (800158c <HAL_RCC_OscConfig+0x298>)
 80014a0:	4313      	orrs	r3, r2
 80014a2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014a4:	4b39      	ldr	r3, [pc, #228]	; (800158c <HAL_RCC_OscConfig+0x298>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	69db      	ldr	r3, [r3, #28]
 80014b0:	021b      	lsls	r3, r3, #8
 80014b2:	4936      	ldr	r1, [pc, #216]	; (800158c <HAL_RCC_OscConfig+0x298>)
 80014b4:	4313      	orrs	r3, r2
 80014b6:	604b      	str	r3, [r1, #4]
 80014b8:	e01a      	b.n	80014f0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014ba:	4b34      	ldr	r3, [pc, #208]	; (800158c <HAL_RCC_OscConfig+0x298>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a33      	ldr	r2, [pc, #204]	; (800158c <HAL_RCC_OscConfig+0x298>)
 80014c0:	f023 0301 	bic.w	r3, r3, #1
 80014c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014c6:	f7ff fba7 	bl	8000c18 <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014cc:	e008      	b.n	80014e0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014ce:	f7ff fba3 	bl	8000c18 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e2e7      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014e0:	4b2a      	ldr	r3, [pc, #168]	; (800158c <HAL_RCC_OscConfig+0x298>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1f0      	bne.n	80014ce <HAL_RCC_OscConfig+0x1da>
 80014ec:	e000      	b.n	80014f0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014ee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d074      	beq.n	80015e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	2b08      	cmp	r3, #8
 8001500:	d005      	beq.n	800150e <HAL_RCC_OscConfig+0x21a>
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	2b0c      	cmp	r3, #12
 8001506:	d10e      	bne.n	8001526 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	2b03      	cmp	r3, #3
 800150c:	d10b      	bne.n	8001526 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800150e:	4b1f      	ldr	r3, [pc, #124]	; (800158c <HAL_RCC_OscConfig+0x298>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d064      	beq.n	80015e4 <HAL_RCC_OscConfig+0x2f0>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d160      	bne.n	80015e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e2c4      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800152e:	d106      	bne.n	800153e <HAL_RCC_OscConfig+0x24a>
 8001530:	4b16      	ldr	r3, [pc, #88]	; (800158c <HAL_RCC_OscConfig+0x298>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a15      	ldr	r2, [pc, #84]	; (800158c <HAL_RCC_OscConfig+0x298>)
 8001536:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800153a:	6013      	str	r3, [r2, #0]
 800153c:	e01d      	b.n	800157a <HAL_RCC_OscConfig+0x286>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001546:	d10c      	bne.n	8001562 <HAL_RCC_OscConfig+0x26e>
 8001548:	4b10      	ldr	r3, [pc, #64]	; (800158c <HAL_RCC_OscConfig+0x298>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a0f      	ldr	r2, [pc, #60]	; (800158c <HAL_RCC_OscConfig+0x298>)
 800154e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	4b0d      	ldr	r3, [pc, #52]	; (800158c <HAL_RCC_OscConfig+0x298>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a0c      	ldr	r2, [pc, #48]	; (800158c <HAL_RCC_OscConfig+0x298>)
 800155a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800155e:	6013      	str	r3, [r2, #0]
 8001560:	e00b      	b.n	800157a <HAL_RCC_OscConfig+0x286>
 8001562:	4b0a      	ldr	r3, [pc, #40]	; (800158c <HAL_RCC_OscConfig+0x298>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a09      	ldr	r2, [pc, #36]	; (800158c <HAL_RCC_OscConfig+0x298>)
 8001568:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800156c:	6013      	str	r3, [r2, #0]
 800156e:	4b07      	ldr	r3, [pc, #28]	; (800158c <HAL_RCC_OscConfig+0x298>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a06      	ldr	r2, [pc, #24]	; (800158c <HAL_RCC_OscConfig+0x298>)
 8001574:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001578:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d01c      	beq.n	80015bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001582:	f7ff fb49 	bl	8000c18 <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001588:	e011      	b.n	80015ae <HAL_RCC_OscConfig+0x2ba>
 800158a:	bf00      	nop
 800158c:	40021000 	.word	0x40021000
 8001590:	08004380 	.word	0x08004380
 8001594:	20000000 	.word	0x20000000
 8001598:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800159c:	f7ff fb3c 	bl	8000c18 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b64      	cmp	r3, #100	; 0x64
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e280      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015ae:	4baf      	ldr	r3, [pc, #700]	; (800186c <HAL_RCC_OscConfig+0x578>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0f0      	beq.n	800159c <HAL_RCC_OscConfig+0x2a8>
 80015ba:	e014      	b.n	80015e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015bc:	f7ff fb2c 	bl	8000c18 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015c4:	f7ff fb28 	bl	8000c18 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b64      	cmp	r3, #100	; 0x64
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e26c      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015d6:	4ba5      	ldr	r3, [pc, #660]	; (800186c <HAL_RCC_OscConfig+0x578>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f0      	bne.n	80015c4 <HAL_RCC_OscConfig+0x2d0>
 80015e2:	e000      	b.n	80015e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d060      	beq.n	80016b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	2b04      	cmp	r3, #4
 80015f6:	d005      	beq.n	8001604 <HAL_RCC_OscConfig+0x310>
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	2b0c      	cmp	r3, #12
 80015fc:	d119      	bne.n	8001632 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	2b02      	cmp	r3, #2
 8001602:	d116      	bne.n	8001632 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001604:	4b99      	ldr	r3, [pc, #612]	; (800186c <HAL_RCC_OscConfig+0x578>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800160c:	2b00      	cmp	r3, #0
 800160e:	d005      	beq.n	800161c <HAL_RCC_OscConfig+0x328>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d101      	bne.n	800161c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e249      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800161c:	4b93      	ldr	r3, [pc, #588]	; (800186c <HAL_RCC_OscConfig+0x578>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	061b      	lsls	r3, r3, #24
 800162a:	4990      	ldr	r1, [pc, #576]	; (800186c <HAL_RCC_OscConfig+0x578>)
 800162c:	4313      	orrs	r3, r2
 800162e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001630:	e040      	b.n	80016b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d023      	beq.n	8001682 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800163a:	4b8c      	ldr	r3, [pc, #560]	; (800186c <HAL_RCC_OscConfig+0x578>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a8b      	ldr	r2, [pc, #556]	; (800186c <HAL_RCC_OscConfig+0x578>)
 8001640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001644:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001646:	f7ff fae7 	bl	8000c18 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800164e:	f7ff fae3 	bl	8000c18 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e227      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001660:	4b82      	ldr	r3, [pc, #520]	; (800186c <HAL_RCC_OscConfig+0x578>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001668:	2b00      	cmp	r3, #0
 800166a:	d0f0      	beq.n	800164e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800166c:	4b7f      	ldr	r3, [pc, #508]	; (800186c <HAL_RCC_OscConfig+0x578>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	691b      	ldr	r3, [r3, #16]
 8001678:	061b      	lsls	r3, r3, #24
 800167a:	497c      	ldr	r1, [pc, #496]	; (800186c <HAL_RCC_OscConfig+0x578>)
 800167c:	4313      	orrs	r3, r2
 800167e:	604b      	str	r3, [r1, #4]
 8001680:	e018      	b.n	80016b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001682:	4b7a      	ldr	r3, [pc, #488]	; (800186c <HAL_RCC_OscConfig+0x578>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a79      	ldr	r2, [pc, #484]	; (800186c <HAL_RCC_OscConfig+0x578>)
 8001688:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800168c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168e:	f7ff fac3 	bl	8000c18 <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001696:	f7ff fabf 	bl	8000c18 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e203      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016a8:	4b70      	ldr	r3, [pc, #448]	; (800186c <HAL_RCC_OscConfig+0x578>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1f0      	bne.n	8001696 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0308 	and.w	r3, r3, #8
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d03c      	beq.n	800173a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	695b      	ldr	r3, [r3, #20]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d01c      	beq.n	8001702 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016c8:	4b68      	ldr	r3, [pc, #416]	; (800186c <HAL_RCC_OscConfig+0x578>)
 80016ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016ce:	4a67      	ldr	r2, [pc, #412]	; (800186c <HAL_RCC_OscConfig+0x578>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d8:	f7ff fa9e 	bl	8000c18 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016e0:	f7ff fa9a 	bl	8000c18 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e1de      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016f2:	4b5e      	ldr	r3, [pc, #376]	; (800186c <HAL_RCC_OscConfig+0x578>)
 80016f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0ef      	beq.n	80016e0 <HAL_RCC_OscConfig+0x3ec>
 8001700:	e01b      	b.n	800173a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001702:	4b5a      	ldr	r3, [pc, #360]	; (800186c <HAL_RCC_OscConfig+0x578>)
 8001704:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001708:	4a58      	ldr	r2, [pc, #352]	; (800186c <HAL_RCC_OscConfig+0x578>)
 800170a:	f023 0301 	bic.w	r3, r3, #1
 800170e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001712:	f7ff fa81 	bl	8000c18 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800171a:	f7ff fa7d 	bl	8000c18 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e1c1      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800172c:	4b4f      	ldr	r3, [pc, #316]	; (800186c <HAL_RCC_OscConfig+0x578>)
 800172e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1ef      	bne.n	800171a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0304 	and.w	r3, r3, #4
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 80a6 	beq.w	8001894 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001748:	2300      	movs	r3, #0
 800174a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800174c:	4b47      	ldr	r3, [pc, #284]	; (800186c <HAL_RCC_OscConfig+0x578>)
 800174e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d10d      	bne.n	8001774 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001758:	4b44      	ldr	r3, [pc, #272]	; (800186c <HAL_RCC_OscConfig+0x578>)
 800175a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175c:	4a43      	ldr	r2, [pc, #268]	; (800186c <HAL_RCC_OscConfig+0x578>)
 800175e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001762:	6593      	str	r3, [r2, #88]	; 0x58
 8001764:	4b41      	ldr	r3, [pc, #260]	; (800186c <HAL_RCC_OscConfig+0x578>)
 8001766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176c:	60bb      	str	r3, [r7, #8]
 800176e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001770:	2301      	movs	r3, #1
 8001772:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001774:	4b3e      	ldr	r3, [pc, #248]	; (8001870 <HAL_RCC_OscConfig+0x57c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800177c:	2b00      	cmp	r3, #0
 800177e:	d118      	bne.n	80017b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001780:	4b3b      	ldr	r3, [pc, #236]	; (8001870 <HAL_RCC_OscConfig+0x57c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a3a      	ldr	r2, [pc, #232]	; (8001870 <HAL_RCC_OscConfig+0x57c>)
 8001786:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800178a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800178c:	f7ff fa44 	bl	8000c18 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001794:	f7ff fa40 	bl	8000c18 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e184      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017a6:	4b32      	ldr	r3, [pc, #200]	; (8001870 <HAL_RCC_OscConfig+0x57c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d0f0      	beq.n	8001794 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d108      	bne.n	80017cc <HAL_RCC_OscConfig+0x4d8>
 80017ba:	4b2c      	ldr	r3, [pc, #176]	; (800186c <HAL_RCC_OscConfig+0x578>)
 80017bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017c0:	4a2a      	ldr	r2, [pc, #168]	; (800186c <HAL_RCC_OscConfig+0x578>)
 80017c2:	f043 0301 	orr.w	r3, r3, #1
 80017c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017ca:	e024      	b.n	8001816 <HAL_RCC_OscConfig+0x522>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	2b05      	cmp	r3, #5
 80017d2:	d110      	bne.n	80017f6 <HAL_RCC_OscConfig+0x502>
 80017d4:	4b25      	ldr	r3, [pc, #148]	; (800186c <HAL_RCC_OscConfig+0x578>)
 80017d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017da:	4a24      	ldr	r2, [pc, #144]	; (800186c <HAL_RCC_OscConfig+0x578>)
 80017dc:	f043 0304 	orr.w	r3, r3, #4
 80017e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017e4:	4b21      	ldr	r3, [pc, #132]	; (800186c <HAL_RCC_OscConfig+0x578>)
 80017e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ea:	4a20      	ldr	r2, [pc, #128]	; (800186c <HAL_RCC_OscConfig+0x578>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017f4:	e00f      	b.n	8001816 <HAL_RCC_OscConfig+0x522>
 80017f6:	4b1d      	ldr	r3, [pc, #116]	; (800186c <HAL_RCC_OscConfig+0x578>)
 80017f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017fc:	4a1b      	ldr	r2, [pc, #108]	; (800186c <HAL_RCC_OscConfig+0x578>)
 80017fe:	f023 0301 	bic.w	r3, r3, #1
 8001802:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001806:	4b19      	ldr	r3, [pc, #100]	; (800186c <HAL_RCC_OscConfig+0x578>)
 8001808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800180c:	4a17      	ldr	r2, [pc, #92]	; (800186c <HAL_RCC_OscConfig+0x578>)
 800180e:	f023 0304 	bic.w	r3, r3, #4
 8001812:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d016      	beq.n	800184c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800181e:	f7ff f9fb 	bl	8000c18 <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001824:	e00a      	b.n	800183c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001826:	f7ff f9f7 	bl	8000c18 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	f241 3288 	movw	r2, #5000	; 0x1388
 8001834:	4293      	cmp	r3, r2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e139      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800183c:	4b0b      	ldr	r3, [pc, #44]	; (800186c <HAL_RCC_OscConfig+0x578>)
 800183e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d0ed      	beq.n	8001826 <HAL_RCC_OscConfig+0x532>
 800184a:	e01a      	b.n	8001882 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800184c:	f7ff f9e4 	bl	8000c18 <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001852:	e00f      	b.n	8001874 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001854:	f7ff f9e0 	bl	8000c18 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001862:	4293      	cmp	r3, r2
 8001864:	d906      	bls.n	8001874 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e122      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7bc>
 800186a:	bf00      	nop
 800186c:	40021000 	.word	0x40021000
 8001870:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001874:	4b90      	ldr	r3, [pc, #576]	; (8001ab8 <HAL_RCC_OscConfig+0x7c4>)
 8001876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1e8      	bne.n	8001854 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001882:	7ffb      	ldrb	r3, [r7, #31]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d105      	bne.n	8001894 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001888:	4b8b      	ldr	r3, [pc, #556]	; (8001ab8 <HAL_RCC_OscConfig+0x7c4>)
 800188a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800188c:	4a8a      	ldr	r2, [pc, #552]	; (8001ab8 <HAL_RCC_OscConfig+0x7c4>)
 800188e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001892:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001898:	2b00      	cmp	r3, #0
 800189a:	f000 8108 	beq.w	8001aae <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	f040 80d0 	bne.w	8001a48 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018a8:	4b83      	ldr	r3, [pc, #524]	; (8001ab8 <HAL_RCC_OscConfig+0x7c4>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f003 0203 	and.w	r2, r3, #3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d130      	bne.n	800191e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	3b01      	subs	r3, #1
 80018c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d127      	bne.n	800191e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018da:	429a      	cmp	r2, r3
 80018dc:	d11f      	bne.n	800191e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018e8:	2a07      	cmp	r2, #7
 80018ea:	bf14      	ite	ne
 80018ec:	2201      	movne	r2, #1
 80018ee:	2200      	moveq	r2, #0
 80018f0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d113      	bne.n	800191e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001900:	085b      	lsrs	r3, r3, #1
 8001902:	3b01      	subs	r3, #1
 8001904:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001906:	429a      	cmp	r2, r3
 8001908:	d109      	bne.n	800191e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001914:	085b      	lsrs	r3, r3, #1
 8001916:	3b01      	subs	r3, #1
 8001918:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800191a:	429a      	cmp	r2, r3
 800191c:	d06e      	beq.n	80019fc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	2b0c      	cmp	r3, #12
 8001922:	d069      	beq.n	80019f8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001924:	4b64      	ldr	r3, [pc, #400]	; (8001ab8 <HAL_RCC_OscConfig+0x7c4>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d105      	bne.n	800193c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001930:	4b61      	ldr	r3, [pc, #388]	; (8001ab8 <HAL_RCC_OscConfig+0x7c4>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e0b7      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001940:	4b5d      	ldr	r3, [pc, #372]	; (8001ab8 <HAL_RCC_OscConfig+0x7c4>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a5c      	ldr	r2, [pc, #368]	; (8001ab8 <HAL_RCC_OscConfig+0x7c4>)
 8001946:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800194a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800194c:	f7ff f964 	bl	8000c18 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001954:	f7ff f960 	bl	8000c18 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e0a4      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001966:	4b54      	ldr	r3, [pc, #336]	; (8001ab8 <HAL_RCC_OscConfig+0x7c4>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1f0      	bne.n	8001954 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001972:	4b51      	ldr	r3, [pc, #324]	; (8001ab8 <HAL_RCC_OscConfig+0x7c4>)
 8001974:	68da      	ldr	r2, [r3, #12]
 8001976:	4b51      	ldr	r3, [pc, #324]	; (8001abc <HAL_RCC_OscConfig+0x7c8>)
 8001978:	4013      	ands	r3, r2
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001982:	3a01      	subs	r2, #1
 8001984:	0112      	lsls	r2, r2, #4
 8001986:	4311      	orrs	r1, r2
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800198c:	0212      	lsls	r2, r2, #8
 800198e:	4311      	orrs	r1, r2
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001994:	0852      	lsrs	r2, r2, #1
 8001996:	3a01      	subs	r2, #1
 8001998:	0552      	lsls	r2, r2, #21
 800199a:	4311      	orrs	r1, r2
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019a0:	0852      	lsrs	r2, r2, #1
 80019a2:	3a01      	subs	r2, #1
 80019a4:	0652      	lsls	r2, r2, #25
 80019a6:	4311      	orrs	r1, r2
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019ac:	0912      	lsrs	r2, r2, #4
 80019ae:	0452      	lsls	r2, r2, #17
 80019b0:	430a      	orrs	r2, r1
 80019b2:	4941      	ldr	r1, [pc, #260]	; (8001ab8 <HAL_RCC_OscConfig+0x7c4>)
 80019b4:	4313      	orrs	r3, r2
 80019b6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019b8:	4b3f      	ldr	r3, [pc, #252]	; (8001ab8 <HAL_RCC_OscConfig+0x7c4>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a3e      	ldr	r2, [pc, #248]	; (8001ab8 <HAL_RCC_OscConfig+0x7c4>)
 80019be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019c2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019c4:	4b3c      	ldr	r3, [pc, #240]	; (8001ab8 <HAL_RCC_OscConfig+0x7c4>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	4a3b      	ldr	r2, [pc, #236]	; (8001ab8 <HAL_RCC_OscConfig+0x7c4>)
 80019ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019d0:	f7ff f922 	bl	8000c18 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d8:	f7ff f91e 	bl	8000c18 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e062      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ea:	4b33      	ldr	r3, [pc, #204]	; (8001ab8 <HAL_RCC_OscConfig+0x7c4>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0f0      	beq.n	80019d8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019f6:	e05a      	b.n	8001aae <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e059      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019fc:	4b2e      	ldr	r3, [pc, #184]	; (8001ab8 <HAL_RCC_OscConfig+0x7c4>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d152      	bne.n	8001aae <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a08:	4b2b      	ldr	r3, [pc, #172]	; (8001ab8 <HAL_RCC_OscConfig+0x7c4>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a2a      	ldr	r2, [pc, #168]	; (8001ab8 <HAL_RCC_OscConfig+0x7c4>)
 8001a0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a12:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a14:	4b28      	ldr	r3, [pc, #160]	; (8001ab8 <HAL_RCC_OscConfig+0x7c4>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	4a27      	ldr	r2, [pc, #156]	; (8001ab8 <HAL_RCC_OscConfig+0x7c4>)
 8001a1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a1e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a20:	f7ff f8fa 	bl	8000c18 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a28:	f7ff f8f6 	bl	8000c18 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e03a      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a3a:	4b1f      	ldr	r3, [pc, #124]	; (8001ab8 <HAL_RCC_OscConfig+0x7c4>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0f0      	beq.n	8001a28 <HAL_RCC_OscConfig+0x734>
 8001a46:	e032      	b.n	8001aae <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	2b0c      	cmp	r3, #12
 8001a4c:	d02d      	beq.n	8001aaa <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a4e:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <HAL_RCC_OscConfig+0x7c4>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a19      	ldr	r2, [pc, #100]	; (8001ab8 <HAL_RCC_OscConfig+0x7c4>)
 8001a54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a58:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001a5a:	4b17      	ldr	r3, [pc, #92]	; (8001ab8 <HAL_RCC_OscConfig+0x7c4>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d105      	bne.n	8001a72 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a66:	4b14      	ldr	r3, [pc, #80]	; (8001ab8 <HAL_RCC_OscConfig+0x7c4>)
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	4a13      	ldr	r2, [pc, #76]	; (8001ab8 <HAL_RCC_OscConfig+0x7c4>)
 8001a6c:	f023 0303 	bic.w	r3, r3, #3
 8001a70:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a72:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <HAL_RCC_OscConfig+0x7c4>)
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	4a10      	ldr	r2, [pc, #64]	; (8001ab8 <HAL_RCC_OscConfig+0x7c4>)
 8001a78:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a80:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a82:	f7ff f8c9 	bl	8000c18 <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a8a:	f7ff f8c5 	bl	8000c18 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e009      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a9c:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <HAL_RCC_OscConfig+0x7c4>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1f0      	bne.n	8001a8a <HAL_RCC_OscConfig+0x796>
 8001aa8:	e001      	b.n	8001aae <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e000      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3720      	adds	r7, #32
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	f99d808c 	.word	0xf99d808c

08001ac0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d101      	bne.n	8001ad4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e0c8      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ad4:	4b66      	ldr	r3, [pc, #408]	; (8001c70 <HAL_RCC_ClockConfig+0x1b0>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d910      	bls.n	8001b04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae2:	4b63      	ldr	r3, [pc, #396]	; (8001c70 <HAL_RCC_ClockConfig+0x1b0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f023 0207 	bic.w	r2, r3, #7
 8001aea:	4961      	ldr	r1, [pc, #388]	; (8001c70 <HAL_RCC_ClockConfig+0x1b0>)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af2:	4b5f      	ldr	r3, [pc, #380]	; (8001c70 <HAL_RCC_ClockConfig+0x1b0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d001      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e0b0      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d04c      	beq.n	8001baa <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2b03      	cmp	r3, #3
 8001b16:	d107      	bne.n	8001b28 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b18:	4b56      	ldr	r3, [pc, #344]	; (8001c74 <HAL_RCC_ClockConfig+0x1b4>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d121      	bne.n	8001b68 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e09e      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d107      	bne.n	8001b40 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b30:	4b50      	ldr	r3, [pc, #320]	; (8001c74 <HAL_RCC_ClockConfig+0x1b4>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d115      	bne.n	8001b68 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e092      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d107      	bne.n	8001b58 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b48:	4b4a      	ldr	r3, [pc, #296]	; (8001c74 <HAL_RCC_ClockConfig+0x1b4>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d109      	bne.n	8001b68 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e086      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b58:	4b46      	ldr	r3, [pc, #280]	; (8001c74 <HAL_RCC_ClockConfig+0x1b4>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d101      	bne.n	8001b68 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e07e      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b68:	4b42      	ldr	r3, [pc, #264]	; (8001c74 <HAL_RCC_ClockConfig+0x1b4>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f023 0203 	bic.w	r2, r3, #3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	493f      	ldr	r1, [pc, #252]	; (8001c74 <HAL_RCC_ClockConfig+0x1b4>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b7a:	f7ff f84d 	bl	8000c18 <HAL_GetTick>
 8001b7e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b80:	e00a      	b.n	8001b98 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b82:	f7ff f849 	bl	8000c18 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e066      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b98:	4b36      	ldr	r3, [pc, #216]	; (8001c74 <HAL_RCC_ClockConfig+0x1b4>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 020c 	and.w	r2, r3, #12
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d1eb      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d008      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bb6:	4b2f      	ldr	r3, [pc, #188]	; (8001c74 <HAL_RCC_ClockConfig+0x1b4>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	492c      	ldr	r1, [pc, #176]	; (8001c74 <HAL_RCC_ClockConfig+0x1b4>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bc8:	4b29      	ldr	r3, [pc, #164]	; (8001c70 <HAL_RCC_ClockConfig+0x1b0>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d210      	bcs.n	8001bf8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd6:	4b26      	ldr	r3, [pc, #152]	; (8001c70 <HAL_RCC_ClockConfig+0x1b0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f023 0207 	bic.w	r2, r3, #7
 8001bde:	4924      	ldr	r1, [pc, #144]	; (8001c70 <HAL_RCC_ClockConfig+0x1b0>)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be6:	4b22      	ldr	r3, [pc, #136]	; (8001c70 <HAL_RCC_ClockConfig+0x1b0>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d001      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e036      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d008      	beq.n	8001c16 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c04:	4b1b      	ldr	r3, [pc, #108]	; (8001c74 <HAL_RCC_ClockConfig+0x1b4>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	4918      	ldr	r1, [pc, #96]	; (8001c74 <HAL_RCC_ClockConfig+0x1b4>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0308 	and.w	r3, r3, #8
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d009      	beq.n	8001c36 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c22:	4b14      	ldr	r3, [pc, #80]	; (8001c74 <HAL_RCC_ClockConfig+0x1b4>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	4910      	ldr	r1, [pc, #64]	; (8001c74 <HAL_RCC_ClockConfig+0x1b4>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c36:	f000 f825 	bl	8001c84 <HAL_RCC_GetSysClockFreq>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	4b0d      	ldr	r3, [pc, #52]	; (8001c74 <HAL_RCC_ClockConfig+0x1b4>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	091b      	lsrs	r3, r3, #4
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	490c      	ldr	r1, [pc, #48]	; (8001c78 <HAL_RCC_ClockConfig+0x1b8>)
 8001c48:	5ccb      	ldrb	r3, [r1, r3]
 8001c4a:	f003 031f 	and.w	r3, r3, #31
 8001c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c52:	4a0a      	ldr	r2, [pc, #40]	; (8001c7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c56:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <HAL_RCC_ClockConfig+0x1c0>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7fe ff8c 	bl	8000b78 <HAL_InitTick>
 8001c60:	4603      	mov	r3, r0
 8001c62:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c64:	7afb      	ldrb	r3, [r7, #11]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40022000 	.word	0x40022000
 8001c74:	40021000 	.word	0x40021000
 8001c78:	08004380 	.word	0x08004380
 8001c7c:	20000000 	.word	0x20000000
 8001c80:	20000004 	.word	0x20000004

08001c84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b089      	sub	sp, #36	; 0x24
 8001c88:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61fb      	str	r3, [r7, #28]
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c92:	4b3e      	ldr	r3, [pc, #248]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f003 030c 	and.w	r3, r3, #12
 8001c9a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c9c:	4b3b      	ldr	r3, [pc, #236]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	f003 0303 	and.w	r3, r3, #3
 8001ca4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d005      	beq.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x34>
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	2b0c      	cmp	r3, #12
 8001cb0:	d121      	bne.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d11e      	bne.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001cb8:	4b34      	ldr	r3, [pc, #208]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0308 	and.w	r3, r3, #8
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d107      	bne.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001cc4:	4b31      	ldr	r3, [pc, #196]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cca:	0a1b      	lsrs	r3, r3, #8
 8001ccc:	f003 030f 	and.w	r3, r3, #15
 8001cd0:	61fb      	str	r3, [r7, #28]
 8001cd2:	e005      	b.n	8001ce0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001cd4:	4b2d      	ldr	r3, [pc, #180]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	091b      	lsrs	r3, r3, #4
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ce0:	4a2b      	ldr	r2, [pc, #172]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d10d      	bne.n	8001d0c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cf4:	e00a      	b.n	8001d0c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	2b04      	cmp	r3, #4
 8001cfa:	d102      	bne.n	8001d02 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cfc:	4b25      	ldr	r3, [pc, #148]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cfe:	61bb      	str	r3, [r7, #24]
 8001d00:	e004      	b.n	8001d0c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	2b08      	cmp	r3, #8
 8001d06:	d101      	bne.n	8001d0c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d08:	4b23      	ldr	r3, [pc, #140]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d0a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	2b0c      	cmp	r3, #12
 8001d10:	d134      	bne.n	8001d7c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d12:	4b1e      	ldr	r3, [pc, #120]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d003      	beq.n	8001d2a <HAL_RCC_GetSysClockFreq+0xa6>
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	2b03      	cmp	r3, #3
 8001d26:	d003      	beq.n	8001d30 <HAL_RCC_GetSysClockFreq+0xac>
 8001d28:	e005      	b.n	8001d36 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d2a:	4b1a      	ldr	r3, [pc, #104]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d2c:	617b      	str	r3, [r7, #20]
      break;
 8001d2e:	e005      	b.n	8001d3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d30:	4b19      	ldr	r3, [pc, #100]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d32:	617b      	str	r3, [r7, #20]
      break;
 8001d34:	e002      	b.n	8001d3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	617b      	str	r3, [r7, #20]
      break;
 8001d3a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d3c:	4b13      	ldr	r3, [pc, #76]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	091b      	lsrs	r3, r3, #4
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	3301      	adds	r3, #1
 8001d48:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d4a:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	0a1b      	lsrs	r3, r3, #8
 8001d50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	fb02 f203 	mul.w	r2, r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d60:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d62:	4b0a      	ldr	r3, [pc, #40]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	0e5b      	lsrs	r3, r3, #25
 8001d68:	f003 0303 	and.w	r3, r3, #3
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d7c:	69bb      	ldr	r3, [r7, #24]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3724      	adds	r7, #36	; 0x24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	08004398 	.word	0x08004398
 8001d94:	00f42400 	.word	0x00f42400
 8001d98:	007a1200 	.word	0x007a1200

08001d9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001da0:	4b03      	ldr	r3, [pc, #12]	; (8001db0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001da2:	681b      	ldr	r3, [r3, #0]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	20000000 	.word	0x20000000

08001db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001db8:	f7ff fff0 	bl	8001d9c <HAL_RCC_GetHCLKFreq>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	0a1b      	lsrs	r3, r3, #8
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	4904      	ldr	r1, [pc, #16]	; (8001ddc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dca:	5ccb      	ldrb	r3, [r1, r3]
 8001dcc:	f003 031f 	and.w	r3, r3, #31
 8001dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	08004390 	.word	0x08004390

08001de0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001de4:	f7ff ffda 	bl	8001d9c <HAL_RCC_GetHCLKFreq>
 8001de8:	4602      	mov	r2, r0
 8001dea:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	0adb      	lsrs	r3, r3, #11
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	4904      	ldr	r1, [pc, #16]	; (8001e08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001df6:	5ccb      	ldrb	r3, [r1, r3]
 8001df8:	f003 031f 	and.w	r3, r3, #31
 8001dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40021000 	.word	0x40021000
 8001e08:	08004390 	.word	0x08004390

08001e0c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e14:	2300      	movs	r3, #0
 8001e16:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e18:	4b2a      	ldr	r3, [pc, #168]	; (8001ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d003      	beq.n	8001e2c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e24:	f7ff fa02 	bl	800122c <HAL_PWREx_GetVoltageRange>
 8001e28:	6178      	str	r0, [r7, #20]
 8001e2a:	e014      	b.n	8001e56 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e2c:	4b25      	ldr	r3, [pc, #148]	; (8001ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e30:	4a24      	ldr	r2, [pc, #144]	; (8001ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e36:	6593      	str	r3, [r2, #88]	; 0x58
 8001e38:	4b22      	ldr	r3, [pc, #136]	; (8001ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e44:	f7ff f9f2 	bl	800122c <HAL_PWREx_GetVoltageRange>
 8001e48:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e4a:	4b1e      	ldr	r3, [pc, #120]	; (8001ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4e:	4a1d      	ldr	r2, [pc, #116]	; (8001ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e54:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e5c:	d10b      	bne.n	8001e76 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b80      	cmp	r3, #128	; 0x80
 8001e62:	d919      	bls.n	8001e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2ba0      	cmp	r3, #160	; 0xa0
 8001e68:	d902      	bls.n	8001e70 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	613b      	str	r3, [r7, #16]
 8001e6e:	e013      	b.n	8001e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e70:	2301      	movs	r3, #1
 8001e72:	613b      	str	r3, [r7, #16]
 8001e74:	e010      	b.n	8001e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b80      	cmp	r3, #128	; 0x80
 8001e7a:	d902      	bls.n	8001e82 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	e00a      	b.n	8001e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b80      	cmp	r3, #128	; 0x80
 8001e86:	d102      	bne.n	8001e8e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e88:	2302      	movs	r3, #2
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	e004      	b.n	8001e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b70      	cmp	r3, #112	; 0x70
 8001e92:	d101      	bne.n	8001e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e94:	2301      	movs	r3, #1
 8001e96:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e98:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f023 0207 	bic.w	r2, r3, #7
 8001ea0:	4909      	ldr	r1, [pc, #36]	; (8001ec8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ea8:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d001      	beq.n	8001eba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e000      	b.n	8001ebc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40022000 	.word	0x40022000

08001ecc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ed8:	2300      	movs	r3, #0
 8001eda:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d041      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001eec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ef0:	d02a      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001ef2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ef6:	d824      	bhi.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ef8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001efc:	d008      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001efe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f02:	d81e      	bhi.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00a      	beq.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f0c:	d010      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f0e:	e018      	b.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f10:	4b86      	ldr	r3, [pc, #536]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	4a85      	ldr	r2, [pc, #532]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f1a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f1c:	e015      	b.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	3304      	adds	r3, #4
 8001f22:	2100      	movs	r1, #0
 8001f24:	4618      	mov	r0, r3
 8001f26:	f000 fabb 	bl	80024a0 <RCCEx_PLLSAI1_Config>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f2e:	e00c      	b.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3320      	adds	r3, #32
 8001f34:	2100      	movs	r1, #0
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 fba6 	bl	8002688 <RCCEx_PLLSAI2_Config>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f40:	e003      	b.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	74fb      	strb	r3, [r7, #19]
      break;
 8001f46:	e000      	b.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001f48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f4a:	7cfb      	ldrb	r3, [r7, #19]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10b      	bne.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f50:	4b76      	ldr	r3, [pc, #472]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f5e:	4973      	ldr	r1, [pc, #460]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f66:	e001      	b.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f68:	7cfb      	ldrb	r3, [r7, #19]
 8001f6a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d041      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f7c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f80:	d02a      	beq.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001f82:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f86:	d824      	bhi.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f8c:	d008      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f92:	d81e      	bhi.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00a      	beq.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001f98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f9c:	d010      	beq.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f9e:	e018      	b.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001fa0:	4b62      	ldr	r3, [pc, #392]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	4a61      	ldr	r2, [pc, #388]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001faa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fac:	e015      	b.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f000 fa73 	bl	80024a0 <RCCEx_PLLSAI1_Config>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fbe:	e00c      	b.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3320      	adds	r3, #32
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f000 fb5e 	bl	8002688 <RCCEx_PLLSAI2_Config>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fd0:	e003      	b.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	74fb      	strb	r3, [r7, #19]
      break;
 8001fd6:	e000      	b.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001fd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fda:	7cfb      	ldrb	r3, [r7, #19]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d10b      	bne.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001fe0:	4b52      	ldr	r3, [pc, #328]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fee:	494f      	ldr	r1, [pc, #316]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001ff6:	e001      	b.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ff8:	7cfb      	ldrb	r3, [r7, #19]
 8001ffa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002004:	2b00      	cmp	r3, #0
 8002006:	f000 80a0 	beq.w	800214a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800200a:	2300      	movs	r3, #0
 800200c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800200e:	4b47      	ldr	r3, [pc, #284]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800201a:	2301      	movs	r3, #1
 800201c:	e000      	b.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800201e:	2300      	movs	r3, #0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00d      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002024:	4b41      	ldr	r3, [pc, #260]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002028:	4a40      	ldr	r2, [pc, #256]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800202a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800202e:	6593      	str	r3, [r2, #88]	; 0x58
 8002030:	4b3e      	ldr	r3, [pc, #248]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002038:	60bb      	str	r3, [r7, #8]
 800203a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800203c:	2301      	movs	r3, #1
 800203e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002040:	4b3b      	ldr	r3, [pc, #236]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a3a      	ldr	r2, [pc, #232]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800204a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800204c:	f7fe fde4 	bl	8000c18 <HAL_GetTick>
 8002050:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002052:	e009      	b.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002054:	f7fe fde0 	bl	8000c18 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d902      	bls.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	74fb      	strb	r3, [r7, #19]
        break;
 8002066:	e005      	b.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002068:	4b31      	ldr	r3, [pc, #196]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002070:	2b00      	cmp	r3, #0
 8002072:	d0ef      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002074:	7cfb      	ldrb	r3, [r7, #19]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d15c      	bne.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800207a:	4b2c      	ldr	r3, [pc, #176]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800207c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002080:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002084:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d01f      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	429a      	cmp	r2, r3
 8002096:	d019      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002098:	4b24      	ldr	r3, [pc, #144]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800209a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020a4:	4b21      	ldr	r3, [pc, #132]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020aa:	4a20      	ldr	r2, [pc, #128]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020b4:	4b1d      	ldr	r3, [pc, #116]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ba:	4a1c      	ldr	r2, [pc, #112]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020c4:	4a19      	ldr	r2, [pc, #100]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d016      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d6:	f7fe fd9f 	bl	8000c18 <HAL_GetTick>
 80020da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020dc:	e00b      	b.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020de:	f7fe fd9b 	bl	8000c18 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d902      	bls.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	74fb      	strb	r3, [r7, #19]
            break;
 80020f4:	e006      	b.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020f6:	4b0d      	ldr	r3, [pc, #52]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0ec      	beq.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002104:	7cfb      	ldrb	r3, [r7, #19]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d10c      	bne.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800210a:	4b08      	ldr	r3, [pc, #32]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800210c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002110:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800211a:	4904      	ldr	r1, [pc, #16]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800211c:	4313      	orrs	r3, r2
 800211e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002122:	e009      	b.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002124:	7cfb      	ldrb	r3, [r7, #19]
 8002126:	74bb      	strb	r3, [r7, #18]
 8002128:	e006      	b.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800212a:	bf00      	nop
 800212c:	40021000 	.word	0x40021000
 8002130:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002134:	7cfb      	ldrb	r3, [r7, #19]
 8002136:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002138:	7c7b      	ldrb	r3, [r7, #17]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d105      	bne.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800213e:	4b9e      	ldr	r3, [pc, #632]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002142:	4a9d      	ldr	r2, [pc, #628]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002144:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002148:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00a      	beq.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002156:	4b98      	ldr	r3, [pc, #608]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800215c:	f023 0203 	bic.w	r2, r3, #3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002164:	4994      	ldr	r1, [pc, #592]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002166:	4313      	orrs	r3, r2
 8002168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00a      	beq.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002178:	4b8f      	ldr	r3, [pc, #572]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800217a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217e:	f023 020c 	bic.w	r2, r3, #12
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002186:	498c      	ldr	r1, [pc, #560]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002188:	4313      	orrs	r3, r2
 800218a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0304 	and.w	r3, r3, #4
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00a      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800219a:	4b87      	ldr	r3, [pc, #540]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800219c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	4983      	ldr	r1, [pc, #524]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0308 	and.w	r3, r3, #8
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00a      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021bc:	4b7e      	ldr	r3, [pc, #504]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ca:	497b      	ldr	r1, [pc, #492]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0310 	and.w	r3, r3, #16
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00a      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021de:	4b76      	ldr	r3, [pc, #472]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ec:	4972      	ldr	r1, [pc, #456]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0320 	and.w	r3, r3, #32
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00a      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002200:	4b6d      	ldr	r3, [pc, #436]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002206:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800220e:	496a      	ldr	r1, [pc, #424]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002210:	4313      	orrs	r3, r2
 8002212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00a      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002222:	4b65      	ldr	r3, [pc, #404]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002228:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002230:	4961      	ldr	r1, [pc, #388]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002232:	4313      	orrs	r3, r2
 8002234:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00a      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002244:	4b5c      	ldr	r3, [pc, #368]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800224a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002252:	4959      	ldr	r1, [pc, #356]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002254:	4313      	orrs	r3, r2
 8002256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00a      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002266:	4b54      	ldr	r3, [pc, #336]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002274:	4950      	ldr	r1, [pc, #320]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002276:	4313      	orrs	r3, r2
 8002278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00a      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002288:	4b4b      	ldr	r3, [pc, #300]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800228a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002296:	4948      	ldr	r1, [pc, #288]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002298:	4313      	orrs	r3, r2
 800229a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00a      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022aa:	4b43      	ldr	r3, [pc, #268]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b8:	493f      	ldr	r1, [pc, #252]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d028      	beq.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022cc:	4b3a      	ldr	r3, [pc, #232]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022da:	4937      	ldr	r1, [pc, #220]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022ea:	d106      	bne.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022ec:	4b32      	ldr	r3, [pc, #200]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	4a31      	ldr	r2, [pc, #196]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022f6:	60d3      	str	r3, [r2, #12]
 80022f8:	e011      	b.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002302:	d10c      	bne.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3304      	adds	r3, #4
 8002308:	2101      	movs	r1, #1
 800230a:	4618      	mov	r0, r3
 800230c:	f000 f8c8 	bl	80024a0 <RCCEx_PLLSAI1_Config>
 8002310:	4603      	mov	r3, r0
 8002312:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002314:	7cfb      	ldrb	r3, [r7, #19]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800231a:	7cfb      	ldrb	r3, [r7, #19]
 800231c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d028      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800232a:	4b23      	ldr	r3, [pc, #140]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800232c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002330:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002338:	491f      	ldr	r1, [pc, #124]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800233a:	4313      	orrs	r3, r2
 800233c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002344:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002348:	d106      	bne.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800234a:	4b1b      	ldr	r3, [pc, #108]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	4a1a      	ldr	r2, [pc, #104]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002350:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002354:	60d3      	str	r3, [r2, #12]
 8002356:	e011      	b.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800235c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002360:	d10c      	bne.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3304      	adds	r3, #4
 8002366:	2101      	movs	r1, #1
 8002368:	4618      	mov	r0, r3
 800236a:	f000 f899 	bl	80024a0 <RCCEx_PLLSAI1_Config>
 800236e:	4603      	mov	r3, r0
 8002370:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002372:	7cfb      	ldrb	r3, [r7, #19]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002378:	7cfb      	ldrb	r3, [r7, #19]
 800237a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d02b      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002388:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002396:	4908      	ldr	r1, [pc, #32]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002398:	4313      	orrs	r3, r2
 800239a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023a6:	d109      	bne.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023a8:	4b03      	ldr	r3, [pc, #12]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	4a02      	ldr	r2, [pc, #8]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023b2:	60d3      	str	r3, [r2, #12]
 80023b4:	e014      	b.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80023b6:	bf00      	nop
 80023b8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023c4:	d10c      	bne.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	3304      	adds	r3, #4
 80023ca:	2101      	movs	r1, #1
 80023cc:	4618      	mov	r0, r3
 80023ce:	f000 f867 	bl	80024a0 <RCCEx_PLLSAI1_Config>
 80023d2:	4603      	mov	r3, r0
 80023d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023d6:	7cfb      	ldrb	r3, [r7, #19]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80023dc:	7cfb      	ldrb	r3, [r7, #19]
 80023de:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d02f      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023ec:	4b2b      	ldr	r3, [pc, #172]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023fa:	4928      	ldr	r1, [pc, #160]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002406:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800240a:	d10d      	bne.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3304      	adds	r3, #4
 8002410:	2102      	movs	r1, #2
 8002412:	4618      	mov	r0, r3
 8002414:	f000 f844 	bl	80024a0 <RCCEx_PLLSAI1_Config>
 8002418:	4603      	mov	r3, r0
 800241a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800241c:	7cfb      	ldrb	r3, [r7, #19]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d014      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002422:	7cfb      	ldrb	r3, [r7, #19]
 8002424:	74bb      	strb	r3, [r7, #18]
 8002426:	e011      	b.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800242c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002430:	d10c      	bne.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3320      	adds	r3, #32
 8002436:	2102      	movs	r1, #2
 8002438:	4618      	mov	r0, r3
 800243a:	f000 f925 	bl	8002688 <RCCEx_PLLSAI2_Config>
 800243e:	4603      	mov	r3, r0
 8002440:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002442:	7cfb      	ldrb	r3, [r7, #19]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002448:	7cfb      	ldrb	r3, [r7, #19]
 800244a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00a      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002458:	4b10      	ldr	r3, [pc, #64]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800245a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800245e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002466:	490d      	ldr	r1, [pc, #52]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002468:	4313      	orrs	r3, r2
 800246a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00b      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800247a:	4b08      	ldr	r3, [pc, #32]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800247c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002480:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800248a:	4904      	ldr	r1, [pc, #16]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800248c:	4313      	orrs	r3, r2
 800248e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002492:	7cbb      	ldrb	r3, [r7, #18]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3718      	adds	r7, #24
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40021000 	.word	0x40021000

080024a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024aa:	2300      	movs	r3, #0
 80024ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024ae:	4b75      	ldr	r3, [pc, #468]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	f003 0303 	and.w	r3, r3, #3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d018      	beq.n	80024ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80024ba:	4b72      	ldr	r3, [pc, #456]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	f003 0203 	and.w	r2, r3, #3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d10d      	bne.n	80024e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
       ||
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d009      	beq.n	80024e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80024d2:	4b6c      	ldr	r3, [pc, #432]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	091b      	lsrs	r3, r3, #4
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	1c5a      	adds	r2, r3, #1
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
       ||
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d047      	beq.n	8002576 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	73fb      	strb	r3, [r7, #15]
 80024ea:	e044      	b.n	8002576 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2b03      	cmp	r3, #3
 80024f2:	d018      	beq.n	8002526 <RCCEx_PLLSAI1_Config+0x86>
 80024f4:	2b03      	cmp	r3, #3
 80024f6:	d825      	bhi.n	8002544 <RCCEx_PLLSAI1_Config+0xa4>
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d002      	beq.n	8002502 <RCCEx_PLLSAI1_Config+0x62>
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d009      	beq.n	8002514 <RCCEx_PLLSAI1_Config+0x74>
 8002500:	e020      	b.n	8002544 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002502:	4b60      	ldr	r3, [pc, #384]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d11d      	bne.n	800254a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002512:	e01a      	b.n	800254a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002514:	4b5b      	ldr	r3, [pc, #364]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800251c:	2b00      	cmp	r3, #0
 800251e:	d116      	bne.n	800254e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002524:	e013      	b.n	800254e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002526:	4b57      	ldr	r3, [pc, #348]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10f      	bne.n	8002552 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002532:	4b54      	ldr	r3, [pc, #336]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d109      	bne.n	8002552 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002542:	e006      	b.n	8002552 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	73fb      	strb	r3, [r7, #15]
      break;
 8002548:	e004      	b.n	8002554 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800254a:	bf00      	nop
 800254c:	e002      	b.n	8002554 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800254e:	bf00      	nop
 8002550:	e000      	b.n	8002554 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002552:	bf00      	nop
    }

    if(status == HAL_OK)
 8002554:	7bfb      	ldrb	r3, [r7, #15]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10d      	bne.n	8002576 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800255a:	4b4a      	ldr	r3, [pc, #296]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6819      	ldr	r1, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	3b01      	subs	r3, #1
 800256c:	011b      	lsls	r3, r3, #4
 800256e:	430b      	orrs	r3, r1
 8002570:	4944      	ldr	r1, [pc, #272]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002572:	4313      	orrs	r3, r2
 8002574:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002576:	7bfb      	ldrb	r3, [r7, #15]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d17d      	bne.n	8002678 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800257c:	4b41      	ldr	r3, [pc, #260]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a40      	ldr	r2, [pc, #256]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002582:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002586:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002588:	f7fe fb46 	bl	8000c18 <HAL_GetTick>
 800258c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800258e:	e009      	b.n	80025a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002590:	f7fe fb42 	bl	8000c18 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d902      	bls.n	80025a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	73fb      	strb	r3, [r7, #15]
        break;
 80025a2:	e005      	b.n	80025b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025a4:	4b37      	ldr	r3, [pc, #220]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1ef      	bne.n	8002590 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d160      	bne.n	8002678 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d111      	bne.n	80025e0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025bc:	4b31      	ldr	r3, [pc, #196]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80025c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6892      	ldr	r2, [r2, #8]
 80025cc:	0211      	lsls	r1, r2, #8
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	68d2      	ldr	r2, [r2, #12]
 80025d2:	0912      	lsrs	r2, r2, #4
 80025d4:	0452      	lsls	r2, r2, #17
 80025d6:	430a      	orrs	r2, r1
 80025d8:	492a      	ldr	r1, [pc, #168]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	610b      	str	r3, [r1, #16]
 80025de:	e027      	b.n	8002630 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d112      	bne.n	800260c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025e6:	4b27      	ldr	r3, [pc, #156]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80025ee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6892      	ldr	r2, [r2, #8]
 80025f6:	0211      	lsls	r1, r2, #8
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6912      	ldr	r2, [r2, #16]
 80025fc:	0852      	lsrs	r2, r2, #1
 80025fe:	3a01      	subs	r2, #1
 8002600:	0552      	lsls	r2, r2, #21
 8002602:	430a      	orrs	r2, r1
 8002604:	491f      	ldr	r1, [pc, #124]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002606:	4313      	orrs	r3, r2
 8002608:	610b      	str	r3, [r1, #16]
 800260a:	e011      	b.n	8002630 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800260c:	4b1d      	ldr	r3, [pc, #116]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002614:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6892      	ldr	r2, [r2, #8]
 800261c:	0211      	lsls	r1, r2, #8
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6952      	ldr	r2, [r2, #20]
 8002622:	0852      	lsrs	r2, r2, #1
 8002624:	3a01      	subs	r2, #1
 8002626:	0652      	lsls	r2, r2, #25
 8002628:	430a      	orrs	r2, r1
 800262a:	4916      	ldr	r1, [pc, #88]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 800262c:	4313      	orrs	r3, r2
 800262e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002630:	4b14      	ldr	r3, [pc, #80]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a13      	ldr	r2, [pc, #76]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002636:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800263a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263c:	f7fe faec 	bl	8000c18 <HAL_GetTick>
 8002640:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002642:	e009      	b.n	8002658 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002644:	f7fe fae8 	bl	8000c18 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d902      	bls.n	8002658 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	73fb      	strb	r3, [r7, #15]
          break;
 8002656:	e005      	b.n	8002664 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002658:	4b0a      	ldr	r3, [pc, #40]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0ef      	beq.n	8002644 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002664:	7bfb      	ldrb	r3, [r7, #15]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d106      	bne.n	8002678 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800266a:	4b06      	ldr	r3, [pc, #24]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 800266c:	691a      	ldr	r2, [r3, #16]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	4904      	ldr	r1, [pc, #16]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002674:	4313      	orrs	r3, r2
 8002676:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002678:	7bfb      	ldrb	r3, [r7, #15]
}
 800267a:	4618      	mov	r0, r3
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40021000 	.word	0x40021000

08002688 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002692:	2300      	movs	r3, #0
 8002694:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002696:	4b6a      	ldr	r3, [pc, #424]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d018      	beq.n	80026d4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80026a2:	4b67      	ldr	r3, [pc, #412]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	f003 0203 	and.w	r2, r3, #3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d10d      	bne.n	80026ce <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
       ||
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d009      	beq.n	80026ce <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80026ba:	4b61      	ldr	r3, [pc, #388]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	091b      	lsrs	r3, r3, #4
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	1c5a      	adds	r2, r3, #1
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
       ||
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d047      	beq.n	800275e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	73fb      	strb	r3, [r7, #15]
 80026d2:	e044      	b.n	800275e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b03      	cmp	r3, #3
 80026da:	d018      	beq.n	800270e <RCCEx_PLLSAI2_Config+0x86>
 80026dc:	2b03      	cmp	r3, #3
 80026de:	d825      	bhi.n	800272c <RCCEx_PLLSAI2_Config+0xa4>
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d002      	beq.n	80026ea <RCCEx_PLLSAI2_Config+0x62>
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d009      	beq.n	80026fc <RCCEx_PLLSAI2_Config+0x74>
 80026e8:	e020      	b.n	800272c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026ea:	4b55      	ldr	r3, [pc, #340]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d11d      	bne.n	8002732 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026fa:	e01a      	b.n	8002732 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026fc:	4b50      	ldr	r3, [pc, #320]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002704:	2b00      	cmp	r3, #0
 8002706:	d116      	bne.n	8002736 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800270c:	e013      	b.n	8002736 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800270e:	4b4c      	ldr	r3, [pc, #304]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10f      	bne.n	800273a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800271a:	4b49      	ldr	r3, [pc, #292]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d109      	bne.n	800273a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800272a:	e006      	b.n	800273a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	73fb      	strb	r3, [r7, #15]
      break;
 8002730:	e004      	b.n	800273c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002732:	bf00      	nop
 8002734:	e002      	b.n	800273c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002736:	bf00      	nop
 8002738:	e000      	b.n	800273c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800273a:	bf00      	nop
    }

    if(status == HAL_OK)
 800273c:	7bfb      	ldrb	r3, [r7, #15]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10d      	bne.n	800275e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002742:	4b3f      	ldr	r3, [pc, #252]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6819      	ldr	r1, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	3b01      	subs	r3, #1
 8002754:	011b      	lsls	r3, r3, #4
 8002756:	430b      	orrs	r3, r1
 8002758:	4939      	ldr	r1, [pc, #228]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 800275a:	4313      	orrs	r3, r2
 800275c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800275e:	7bfb      	ldrb	r3, [r7, #15]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d167      	bne.n	8002834 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002764:	4b36      	ldr	r3, [pc, #216]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a35      	ldr	r2, [pc, #212]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 800276a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800276e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002770:	f7fe fa52 	bl	8000c18 <HAL_GetTick>
 8002774:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002776:	e009      	b.n	800278c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002778:	f7fe fa4e 	bl	8000c18 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d902      	bls.n	800278c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	73fb      	strb	r3, [r7, #15]
        break;
 800278a:	e005      	b.n	8002798 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800278c:	4b2c      	ldr	r3, [pc, #176]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1ef      	bne.n	8002778 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002798:	7bfb      	ldrb	r3, [r7, #15]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d14a      	bne.n	8002834 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d111      	bne.n	80027c8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027a4:	4b26      	ldr	r3, [pc, #152]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80027ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	6892      	ldr	r2, [r2, #8]
 80027b4:	0211      	lsls	r1, r2, #8
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	68d2      	ldr	r2, [r2, #12]
 80027ba:	0912      	lsrs	r2, r2, #4
 80027bc:	0452      	lsls	r2, r2, #17
 80027be:	430a      	orrs	r2, r1
 80027c0:	491f      	ldr	r1, [pc, #124]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	614b      	str	r3, [r1, #20]
 80027c6:	e011      	b.n	80027ec <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027c8:	4b1d      	ldr	r3, [pc, #116]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80027d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	6892      	ldr	r2, [r2, #8]
 80027d8:	0211      	lsls	r1, r2, #8
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	6912      	ldr	r2, [r2, #16]
 80027de:	0852      	lsrs	r2, r2, #1
 80027e0:	3a01      	subs	r2, #1
 80027e2:	0652      	lsls	r2, r2, #25
 80027e4:	430a      	orrs	r2, r1
 80027e6:	4916      	ldr	r1, [pc, #88]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80027ec:	4b14      	ldr	r3, [pc, #80]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a13      	ldr	r2, [pc, #76]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f8:	f7fe fa0e 	bl	8000c18 <HAL_GetTick>
 80027fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80027fe:	e009      	b.n	8002814 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002800:	f7fe fa0a 	bl	8000c18 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d902      	bls.n	8002814 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	73fb      	strb	r3, [r7, #15]
          break;
 8002812:	e005      	b.n	8002820 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002814:	4b0a      	ldr	r3, [pc, #40]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0ef      	beq.n	8002800 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002820:	7bfb      	ldrb	r3, [r7, #15]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d106      	bne.n	8002834 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002826:	4b06      	ldr	r3, [pc, #24]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002828:	695a      	ldr	r2, [r3, #20]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	4904      	ldr	r1, [pc, #16]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002830:	4313      	orrs	r3, r2
 8002832:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002834:	7bfb      	ldrb	r3, [r7, #15]
}
 8002836:	4618      	mov	r0, r3
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40021000 	.word	0x40021000

08002844 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e040      	b.n	80028d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800285a:	2b00      	cmp	r3, #0
 800285c:	d106      	bne.n	800286c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7fe f800 	bl	800086c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2224      	movs	r2, #36	; 0x24
 8002870:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 0201 	bic.w	r2, r2, #1
 8002880:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f992 	bl	8002bac <UART_SetConfig>
 8002888:	4603      	mov	r3, r0
 800288a:	2b01      	cmp	r3, #1
 800288c:	d101      	bne.n	8002892 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e022      	b.n	80028d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002896:	2b00      	cmp	r3, #0
 8002898:	d002      	beq.n	80028a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 fc10 	bl	80030c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689a      	ldr	r2, [r3, #8]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 0201 	orr.w	r2, r2, #1
 80028ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 fc97 	bl	8003204 <UART_CheckIdleState>
 80028d6:	4603      	mov	r3, r0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b08a      	sub	sp, #40	; 0x28
 80028e4:	af02      	add	r7, sp, #8
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	603b      	str	r3, [r7, #0]
 80028ec:	4613      	mov	r3, r2
 80028ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028f4:	2b20      	cmp	r3, #32
 80028f6:	f040 8082 	bne.w	80029fe <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d002      	beq.n	8002906 <HAL_UART_Transmit+0x26>
 8002900:	88fb      	ldrh	r3, [r7, #6]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e07a      	b.n	8002a00 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002910:	2b01      	cmp	r3, #1
 8002912:	d101      	bne.n	8002918 <HAL_UART_Transmit+0x38>
 8002914:	2302      	movs	r3, #2
 8002916:	e073      	b.n	8002a00 <HAL_UART_Transmit+0x120>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2221      	movs	r2, #33	; 0x21
 800292c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800292e:	f7fe f973 	bl	8000c18 <HAL_GetTick>
 8002932:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	88fa      	ldrh	r2, [r7, #6]
 8002938:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	88fa      	ldrh	r2, [r7, #6]
 8002940:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800294c:	d108      	bne.n	8002960 <HAL_UART_Transmit+0x80>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d104      	bne.n	8002960 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002956:	2300      	movs	r3, #0
 8002958:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	61bb      	str	r3, [r7, #24]
 800295e:	e003      	b.n	8002968 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002964:	2300      	movs	r3, #0
 8002966:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002970:	e02d      	b.n	80029ce <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	2200      	movs	r2, #0
 800297a:	2180      	movs	r1, #128	; 0x80
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f000 fc8a 	bl	8003296 <UART_WaitOnFlagUntilTimeout>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e039      	b.n	8002a00 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10b      	bne.n	80029aa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	881a      	ldrh	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800299e:	b292      	uxth	r2, r2
 80029a0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	3302      	adds	r3, #2
 80029a6:	61bb      	str	r3, [r7, #24]
 80029a8:	e008      	b.n	80029bc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	781a      	ldrb	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	b292      	uxth	r2, r2
 80029b4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	3301      	adds	r3, #1
 80029ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	3b01      	subs	r3, #1
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1cb      	bne.n	8002972 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	2200      	movs	r2, #0
 80029e2:	2140      	movs	r1, #64	; 0x40
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f000 fc56 	bl	8003296 <UART_WaitOnFlagUntilTimeout>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e005      	b.n	8002a00 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2220      	movs	r2, #32
 80029f8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	e000      	b.n	8002a00 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80029fe:	2302      	movs	r3, #2
  }
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3720      	adds	r7, #32
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b08a      	sub	sp, #40	; 0x28
 8002a0c:	af02      	add	r7, sp, #8
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	603b      	str	r3, [r7, #0]
 8002a14:	4613      	mov	r3, r2
 8002a16:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a1c:	2b20      	cmp	r3, #32
 8002a1e:	f040 80bf 	bne.w	8002ba0 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d002      	beq.n	8002a2e <HAL_UART_Receive+0x26>
 8002a28:	88fb      	ldrh	r3, [r7, #6]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e0b7      	b.n	8002ba2 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d101      	bne.n	8002a40 <HAL_UART_Receive+0x38>
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	e0b0      	b.n	8002ba2 <HAL_UART_Receive+0x19a>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2222      	movs	r2, #34	; 0x22
 8002a54:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a5c:	f7fe f8dc 	bl	8000c18 <HAL_GetTick>
 8002a60:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	88fa      	ldrh	r2, [r7, #6]
 8002a66:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	88fa      	ldrh	r2, [r7, #6]
 8002a6e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a7a:	d10e      	bne.n	8002a9a <HAL_UART_Receive+0x92>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d105      	bne.n	8002a90 <HAL_UART_Receive+0x88>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002a8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a8e:	e02d      	b.n	8002aec <HAL_UART_Receive+0xe4>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	22ff      	movs	r2, #255	; 0xff
 8002a94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a98:	e028      	b.n	8002aec <HAL_UART_Receive+0xe4>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10d      	bne.n	8002abe <HAL_UART_Receive+0xb6>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d104      	bne.n	8002ab4 <HAL_UART_Receive+0xac>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	22ff      	movs	r2, #255	; 0xff
 8002aae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002ab2:	e01b      	b.n	8002aec <HAL_UART_Receive+0xe4>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	227f      	movs	r2, #127	; 0x7f
 8002ab8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002abc:	e016      	b.n	8002aec <HAL_UART_Receive+0xe4>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ac6:	d10d      	bne.n	8002ae4 <HAL_UART_Receive+0xdc>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d104      	bne.n	8002ada <HAL_UART_Receive+0xd2>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	227f      	movs	r2, #127	; 0x7f
 8002ad4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002ad8:	e008      	b.n	8002aec <HAL_UART_Receive+0xe4>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	223f      	movs	r2, #63	; 0x3f
 8002ade:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002ae2:	e003      	b.n	8002aec <HAL_UART_Receive+0xe4>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002af2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002afc:	d108      	bne.n	8002b10 <HAL_UART_Receive+0x108>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d104      	bne.n	8002b10 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8002b06:	2300      	movs	r3, #0
 8002b08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	61bb      	str	r3, [r7, #24]
 8002b0e:	e003      	b.n	8002b18 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b14:	2300      	movs	r3, #0
 8002b16:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002b20:	e033      	b.n	8002b8a <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	2120      	movs	r1, #32
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f000 fbb2 	bl	8003296 <UART_WaitOnFlagUntilTimeout>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e032      	b.n	8002ba2 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10c      	bne.n	8002b5c <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	8a7b      	ldrh	r3, [r7, #18]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	3302      	adds	r3, #2
 8002b58:	61bb      	str	r3, [r7, #24]
 8002b5a:	e00d      	b.n	8002b78 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	8a7b      	ldrh	r3, [r7, #18]
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	3301      	adds	r3, #1
 8002b76:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	3b01      	subs	r3, #1
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1c5      	bne.n	8002b22 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2220      	movs	r2, #32
 8002b9a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	e000      	b.n	8002ba2 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8002ba0:	2302      	movs	r3, #2
  }
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3720      	adds	r7, #32
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
	...

08002bac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bac:	b5b0      	push	{r4, r5, r7, lr}
 8002bae:	b088      	sub	sp, #32
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	69db      	ldr	r3, [r3, #28]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	4bad      	ldr	r3, [pc, #692]	; (8002e8c <UART_SetConfig+0x2e0>)
 8002bd8:	4013      	ands	r3, r2
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	6812      	ldr	r2, [r2, #0]
 8002bde:	69f9      	ldr	r1, [r7, #28]
 8002be0:	430b      	orrs	r3, r1
 8002be2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68da      	ldr	r2, [r3, #12]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4aa2      	ldr	r2, [pc, #648]	; (8002e90 <UART_SetConfig+0x2e4>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d004      	beq.n	8002c14 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	69fa      	ldr	r2, [r7, #28]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	69fa      	ldr	r2, [r7, #28]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a99      	ldr	r2, [pc, #612]	; (8002e94 <UART_SetConfig+0x2e8>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d121      	bne.n	8002c76 <UART_SetConfig+0xca>
 8002c32:	4b99      	ldr	r3, [pc, #612]	; (8002e98 <UART_SetConfig+0x2ec>)
 8002c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c38:	f003 0303 	and.w	r3, r3, #3
 8002c3c:	2b03      	cmp	r3, #3
 8002c3e:	d817      	bhi.n	8002c70 <UART_SetConfig+0xc4>
 8002c40:	a201      	add	r2, pc, #4	; (adr r2, 8002c48 <UART_SetConfig+0x9c>)
 8002c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c46:	bf00      	nop
 8002c48:	08002c59 	.word	0x08002c59
 8002c4c:	08002c65 	.word	0x08002c65
 8002c50:	08002c5f 	.word	0x08002c5f
 8002c54:	08002c6b 	.word	0x08002c6b
 8002c58:	2301      	movs	r3, #1
 8002c5a:	76fb      	strb	r3, [r7, #27]
 8002c5c:	e0e7      	b.n	8002e2e <UART_SetConfig+0x282>
 8002c5e:	2302      	movs	r3, #2
 8002c60:	76fb      	strb	r3, [r7, #27]
 8002c62:	e0e4      	b.n	8002e2e <UART_SetConfig+0x282>
 8002c64:	2304      	movs	r3, #4
 8002c66:	76fb      	strb	r3, [r7, #27]
 8002c68:	e0e1      	b.n	8002e2e <UART_SetConfig+0x282>
 8002c6a:	2308      	movs	r3, #8
 8002c6c:	76fb      	strb	r3, [r7, #27]
 8002c6e:	e0de      	b.n	8002e2e <UART_SetConfig+0x282>
 8002c70:	2310      	movs	r3, #16
 8002c72:	76fb      	strb	r3, [r7, #27]
 8002c74:	e0db      	b.n	8002e2e <UART_SetConfig+0x282>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a88      	ldr	r2, [pc, #544]	; (8002e9c <UART_SetConfig+0x2f0>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d132      	bne.n	8002ce6 <UART_SetConfig+0x13a>
 8002c80:	4b85      	ldr	r3, [pc, #532]	; (8002e98 <UART_SetConfig+0x2ec>)
 8002c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c86:	f003 030c 	and.w	r3, r3, #12
 8002c8a:	2b0c      	cmp	r3, #12
 8002c8c:	d828      	bhi.n	8002ce0 <UART_SetConfig+0x134>
 8002c8e:	a201      	add	r2, pc, #4	; (adr r2, 8002c94 <UART_SetConfig+0xe8>)
 8002c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c94:	08002cc9 	.word	0x08002cc9
 8002c98:	08002ce1 	.word	0x08002ce1
 8002c9c:	08002ce1 	.word	0x08002ce1
 8002ca0:	08002ce1 	.word	0x08002ce1
 8002ca4:	08002cd5 	.word	0x08002cd5
 8002ca8:	08002ce1 	.word	0x08002ce1
 8002cac:	08002ce1 	.word	0x08002ce1
 8002cb0:	08002ce1 	.word	0x08002ce1
 8002cb4:	08002ccf 	.word	0x08002ccf
 8002cb8:	08002ce1 	.word	0x08002ce1
 8002cbc:	08002ce1 	.word	0x08002ce1
 8002cc0:	08002ce1 	.word	0x08002ce1
 8002cc4:	08002cdb 	.word	0x08002cdb
 8002cc8:	2300      	movs	r3, #0
 8002cca:	76fb      	strb	r3, [r7, #27]
 8002ccc:	e0af      	b.n	8002e2e <UART_SetConfig+0x282>
 8002cce:	2302      	movs	r3, #2
 8002cd0:	76fb      	strb	r3, [r7, #27]
 8002cd2:	e0ac      	b.n	8002e2e <UART_SetConfig+0x282>
 8002cd4:	2304      	movs	r3, #4
 8002cd6:	76fb      	strb	r3, [r7, #27]
 8002cd8:	e0a9      	b.n	8002e2e <UART_SetConfig+0x282>
 8002cda:	2308      	movs	r3, #8
 8002cdc:	76fb      	strb	r3, [r7, #27]
 8002cde:	e0a6      	b.n	8002e2e <UART_SetConfig+0x282>
 8002ce0:	2310      	movs	r3, #16
 8002ce2:	76fb      	strb	r3, [r7, #27]
 8002ce4:	e0a3      	b.n	8002e2e <UART_SetConfig+0x282>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a6d      	ldr	r2, [pc, #436]	; (8002ea0 <UART_SetConfig+0x2f4>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d120      	bne.n	8002d32 <UART_SetConfig+0x186>
 8002cf0:	4b69      	ldr	r3, [pc, #420]	; (8002e98 <UART_SetConfig+0x2ec>)
 8002cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002cfa:	2b30      	cmp	r3, #48	; 0x30
 8002cfc:	d013      	beq.n	8002d26 <UART_SetConfig+0x17a>
 8002cfe:	2b30      	cmp	r3, #48	; 0x30
 8002d00:	d814      	bhi.n	8002d2c <UART_SetConfig+0x180>
 8002d02:	2b20      	cmp	r3, #32
 8002d04:	d009      	beq.n	8002d1a <UART_SetConfig+0x16e>
 8002d06:	2b20      	cmp	r3, #32
 8002d08:	d810      	bhi.n	8002d2c <UART_SetConfig+0x180>
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d002      	beq.n	8002d14 <UART_SetConfig+0x168>
 8002d0e:	2b10      	cmp	r3, #16
 8002d10:	d006      	beq.n	8002d20 <UART_SetConfig+0x174>
 8002d12:	e00b      	b.n	8002d2c <UART_SetConfig+0x180>
 8002d14:	2300      	movs	r3, #0
 8002d16:	76fb      	strb	r3, [r7, #27]
 8002d18:	e089      	b.n	8002e2e <UART_SetConfig+0x282>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	76fb      	strb	r3, [r7, #27]
 8002d1e:	e086      	b.n	8002e2e <UART_SetConfig+0x282>
 8002d20:	2304      	movs	r3, #4
 8002d22:	76fb      	strb	r3, [r7, #27]
 8002d24:	e083      	b.n	8002e2e <UART_SetConfig+0x282>
 8002d26:	2308      	movs	r3, #8
 8002d28:	76fb      	strb	r3, [r7, #27]
 8002d2a:	e080      	b.n	8002e2e <UART_SetConfig+0x282>
 8002d2c:	2310      	movs	r3, #16
 8002d2e:	76fb      	strb	r3, [r7, #27]
 8002d30:	e07d      	b.n	8002e2e <UART_SetConfig+0x282>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a5b      	ldr	r2, [pc, #364]	; (8002ea4 <UART_SetConfig+0x2f8>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d120      	bne.n	8002d7e <UART_SetConfig+0x1d2>
 8002d3c:	4b56      	ldr	r3, [pc, #344]	; (8002e98 <UART_SetConfig+0x2ec>)
 8002d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002d46:	2bc0      	cmp	r3, #192	; 0xc0
 8002d48:	d013      	beq.n	8002d72 <UART_SetConfig+0x1c6>
 8002d4a:	2bc0      	cmp	r3, #192	; 0xc0
 8002d4c:	d814      	bhi.n	8002d78 <UART_SetConfig+0x1cc>
 8002d4e:	2b80      	cmp	r3, #128	; 0x80
 8002d50:	d009      	beq.n	8002d66 <UART_SetConfig+0x1ba>
 8002d52:	2b80      	cmp	r3, #128	; 0x80
 8002d54:	d810      	bhi.n	8002d78 <UART_SetConfig+0x1cc>
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d002      	beq.n	8002d60 <UART_SetConfig+0x1b4>
 8002d5a:	2b40      	cmp	r3, #64	; 0x40
 8002d5c:	d006      	beq.n	8002d6c <UART_SetConfig+0x1c0>
 8002d5e:	e00b      	b.n	8002d78 <UART_SetConfig+0x1cc>
 8002d60:	2300      	movs	r3, #0
 8002d62:	76fb      	strb	r3, [r7, #27]
 8002d64:	e063      	b.n	8002e2e <UART_SetConfig+0x282>
 8002d66:	2302      	movs	r3, #2
 8002d68:	76fb      	strb	r3, [r7, #27]
 8002d6a:	e060      	b.n	8002e2e <UART_SetConfig+0x282>
 8002d6c:	2304      	movs	r3, #4
 8002d6e:	76fb      	strb	r3, [r7, #27]
 8002d70:	e05d      	b.n	8002e2e <UART_SetConfig+0x282>
 8002d72:	2308      	movs	r3, #8
 8002d74:	76fb      	strb	r3, [r7, #27]
 8002d76:	e05a      	b.n	8002e2e <UART_SetConfig+0x282>
 8002d78:	2310      	movs	r3, #16
 8002d7a:	76fb      	strb	r3, [r7, #27]
 8002d7c:	e057      	b.n	8002e2e <UART_SetConfig+0x282>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a49      	ldr	r2, [pc, #292]	; (8002ea8 <UART_SetConfig+0x2fc>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d125      	bne.n	8002dd4 <UART_SetConfig+0x228>
 8002d88:	4b43      	ldr	r3, [pc, #268]	; (8002e98 <UART_SetConfig+0x2ec>)
 8002d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d96:	d017      	beq.n	8002dc8 <UART_SetConfig+0x21c>
 8002d98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d9c:	d817      	bhi.n	8002dce <UART_SetConfig+0x222>
 8002d9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002da2:	d00b      	beq.n	8002dbc <UART_SetConfig+0x210>
 8002da4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002da8:	d811      	bhi.n	8002dce <UART_SetConfig+0x222>
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <UART_SetConfig+0x20a>
 8002dae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002db2:	d006      	beq.n	8002dc2 <UART_SetConfig+0x216>
 8002db4:	e00b      	b.n	8002dce <UART_SetConfig+0x222>
 8002db6:	2300      	movs	r3, #0
 8002db8:	76fb      	strb	r3, [r7, #27]
 8002dba:	e038      	b.n	8002e2e <UART_SetConfig+0x282>
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	76fb      	strb	r3, [r7, #27]
 8002dc0:	e035      	b.n	8002e2e <UART_SetConfig+0x282>
 8002dc2:	2304      	movs	r3, #4
 8002dc4:	76fb      	strb	r3, [r7, #27]
 8002dc6:	e032      	b.n	8002e2e <UART_SetConfig+0x282>
 8002dc8:	2308      	movs	r3, #8
 8002dca:	76fb      	strb	r3, [r7, #27]
 8002dcc:	e02f      	b.n	8002e2e <UART_SetConfig+0x282>
 8002dce:	2310      	movs	r3, #16
 8002dd0:	76fb      	strb	r3, [r7, #27]
 8002dd2:	e02c      	b.n	8002e2e <UART_SetConfig+0x282>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a2d      	ldr	r2, [pc, #180]	; (8002e90 <UART_SetConfig+0x2e4>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d125      	bne.n	8002e2a <UART_SetConfig+0x27e>
 8002dde:	4b2e      	ldr	r3, [pc, #184]	; (8002e98 <UART_SetConfig+0x2ec>)
 8002de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002de8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002dec:	d017      	beq.n	8002e1e <UART_SetConfig+0x272>
 8002dee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002df2:	d817      	bhi.n	8002e24 <UART_SetConfig+0x278>
 8002df4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002df8:	d00b      	beq.n	8002e12 <UART_SetConfig+0x266>
 8002dfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dfe:	d811      	bhi.n	8002e24 <UART_SetConfig+0x278>
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <UART_SetConfig+0x260>
 8002e04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e08:	d006      	beq.n	8002e18 <UART_SetConfig+0x26c>
 8002e0a:	e00b      	b.n	8002e24 <UART_SetConfig+0x278>
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	76fb      	strb	r3, [r7, #27]
 8002e10:	e00d      	b.n	8002e2e <UART_SetConfig+0x282>
 8002e12:	2302      	movs	r3, #2
 8002e14:	76fb      	strb	r3, [r7, #27]
 8002e16:	e00a      	b.n	8002e2e <UART_SetConfig+0x282>
 8002e18:	2304      	movs	r3, #4
 8002e1a:	76fb      	strb	r3, [r7, #27]
 8002e1c:	e007      	b.n	8002e2e <UART_SetConfig+0x282>
 8002e1e:	2308      	movs	r3, #8
 8002e20:	76fb      	strb	r3, [r7, #27]
 8002e22:	e004      	b.n	8002e2e <UART_SetConfig+0x282>
 8002e24:	2310      	movs	r3, #16
 8002e26:	76fb      	strb	r3, [r7, #27]
 8002e28:	e001      	b.n	8002e2e <UART_SetConfig+0x282>
 8002e2a:	2310      	movs	r3, #16
 8002e2c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a17      	ldr	r2, [pc, #92]	; (8002e90 <UART_SetConfig+0x2e4>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	f040 8087 	bne.w	8002f48 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002e3a:	7efb      	ldrb	r3, [r7, #27]
 8002e3c:	2b08      	cmp	r3, #8
 8002e3e:	d837      	bhi.n	8002eb0 <UART_SetConfig+0x304>
 8002e40:	a201      	add	r2, pc, #4	; (adr r2, 8002e48 <UART_SetConfig+0x29c>)
 8002e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e46:	bf00      	nop
 8002e48:	08002e6d 	.word	0x08002e6d
 8002e4c:	08002eb1 	.word	0x08002eb1
 8002e50:	08002e75 	.word	0x08002e75
 8002e54:	08002eb1 	.word	0x08002eb1
 8002e58:	08002e7b 	.word	0x08002e7b
 8002e5c:	08002eb1 	.word	0x08002eb1
 8002e60:	08002eb1 	.word	0x08002eb1
 8002e64:	08002eb1 	.word	0x08002eb1
 8002e68:	08002e83 	.word	0x08002e83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e6c:	f7fe ffa2 	bl	8001db4 <HAL_RCC_GetPCLK1Freq>
 8002e70:	6178      	str	r0, [r7, #20]
        break;
 8002e72:	e022      	b.n	8002eba <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e74:	4b0d      	ldr	r3, [pc, #52]	; (8002eac <UART_SetConfig+0x300>)
 8002e76:	617b      	str	r3, [r7, #20]
        break;
 8002e78:	e01f      	b.n	8002eba <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e7a:	f7fe ff03 	bl	8001c84 <HAL_RCC_GetSysClockFreq>
 8002e7e:	6178      	str	r0, [r7, #20]
        break;
 8002e80:	e01b      	b.n	8002eba <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e86:	617b      	str	r3, [r7, #20]
        break;
 8002e88:	e017      	b.n	8002eba <UART_SetConfig+0x30e>
 8002e8a:	bf00      	nop
 8002e8c:	efff69f3 	.word	0xefff69f3
 8002e90:	40008000 	.word	0x40008000
 8002e94:	40013800 	.word	0x40013800
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	40004400 	.word	0x40004400
 8002ea0:	40004800 	.word	0x40004800
 8002ea4:	40004c00 	.word	0x40004c00
 8002ea8:	40005000 	.word	0x40005000
 8002eac:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	76bb      	strb	r3, [r7, #26]
        break;
 8002eb8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 80f1 	beq.w	80030a4 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	4413      	add	r3, r2
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d305      	bcc.n	8002ede <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d902      	bls.n	8002ee4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	76bb      	strb	r3, [r7, #26]
 8002ee2:	e0df      	b.n	80030a4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f04f 0100 	mov.w	r1, #0
 8002eec:	f04f 0200 	mov.w	r2, #0
 8002ef0:	f04f 0300 	mov.w	r3, #0
 8002ef4:	020b      	lsls	r3, r1, #8
 8002ef6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002efa:	0202      	lsls	r2, r0, #8
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	6849      	ldr	r1, [r1, #4]
 8002f00:	0849      	lsrs	r1, r1, #1
 8002f02:	4608      	mov	r0, r1
 8002f04:	f04f 0100 	mov.w	r1, #0
 8002f08:	1814      	adds	r4, r2, r0
 8002f0a:	eb43 0501 	adc.w	r5, r3, r1
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	461a      	mov	r2, r3
 8002f14:	f04f 0300 	mov.w	r3, #0
 8002f18:	4620      	mov	r0, r4
 8002f1a:	4629      	mov	r1, r5
 8002f1c:	f7fd f9a8 	bl	8000270 <__aeabi_uldivmod>
 8002f20:	4602      	mov	r2, r0
 8002f22:	460b      	mov	r3, r1
 8002f24:	4613      	mov	r3, r2
 8002f26:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f2e:	d308      	bcc.n	8002f42 <UART_SetConfig+0x396>
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f36:	d204      	bcs.n	8002f42 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	60da      	str	r2, [r3, #12]
 8002f40:	e0b0      	b.n	80030a4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	76bb      	strb	r3, [r7, #26]
 8002f46:	e0ad      	b.n	80030a4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	69db      	ldr	r3, [r3, #28]
 8002f4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f50:	d15b      	bne.n	800300a <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8002f52:	7efb      	ldrb	r3, [r7, #27]
 8002f54:	2b08      	cmp	r3, #8
 8002f56:	d828      	bhi.n	8002faa <UART_SetConfig+0x3fe>
 8002f58:	a201      	add	r2, pc, #4	; (adr r2, 8002f60 <UART_SetConfig+0x3b4>)
 8002f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f5e:	bf00      	nop
 8002f60:	08002f85 	.word	0x08002f85
 8002f64:	08002f8d 	.word	0x08002f8d
 8002f68:	08002f95 	.word	0x08002f95
 8002f6c:	08002fab 	.word	0x08002fab
 8002f70:	08002f9b 	.word	0x08002f9b
 8002f74:	08002fab 	.word	0x08002fab
 8002f78:	08002fab 	.word	0x08002fab
 8002f7c:	08002fab 	.word	0x08002fab
 8002f80:	08002fa3 	.word	0x08002fa3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f84:	f7fe ff16 	bl	8001db4 <HAL_RCC_GetPCLK1Freq>
 8002f88:	6178      	str	r0, [r7, #20]
        break;
 8002f8a:	e013      	b.n	8002fb4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f8c:	f7fe ff28 	bl	8001de0 <HAL_RCC_GetPCLK2Freq>
 8002f90:	6178      	str	r0, [r7, #20]
        break;
 8002f92:	e00f      	b.n	8002fb4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f94:	4b49      	ldr	r3, [pc, #292]	; (80030bc <UART_SetConfig+0x510>)
 8002f96:	617b      	str	r3, [r7, #20]
        break;
 8002f98:	e00c      	b.n	8002fb4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f9a:	f7fe fe73 	bl	8001c84 <HAL_RCC_GetSysClockFreq>
 8002f9e:	6178      	str	r0, [r7, #20]
        break;
 8002fa0:	e008      	b.n	8002fb4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fa6:	617b      	str	r3, [r7, #20]
        break;
 8002fa8:	e004      	b.n	8002fb4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8002faa:	2300      	movs	r3, #0
 8002fac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	76bb      	strb	r3, [r7, #26]
        break;
 8002fb2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d074      	beq.n	80030a4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	005a      	lsls	r2, r3, #1
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	085b      	lsrs	r3, r3, #1
 8002fc4:	441a      	add	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fce:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	2b0f      	cmp	r3, #15
 8002fd4:	d916      	bls.n	8003004 <UART_SetConfig+0x458>
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fdc:	d212      	bcs.n	8003004 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	f023 030f 	bic.w	r3, r3, #15
 8002fe6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	085b      	lsrs	r3, r3, #1
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	89fb      	ldrh	r3, [r7, #14]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	89fa      	ldrh	r2, [r7, #14]
 8003000:	60da      	str	r2, [r3, #12]
 8003002:	e04f      	b.n	80030a4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	76bb      	strb	r3, [r7, #26]
 8003008:	e04c      	b.n	80030a4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800300a:	7efb      	ldrb	r3, [r7, #27]
 800300c:	2b08      	cmp	r3, #8
 800300e:	d828      	bhi.n	8003062 <UART_SetConfig+0x4b6>
 8003010:	a201      	add	r2, pc, #4	; (adr r2, 8003018 <UART_SetConfig+0x46c>)
 8003012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003016:	bf00      	nop
 8003018:	0800303d 	.word	0x0800303d
 800301c:	08003045 	.word	0x08003045
 8003020:	0800304d 	.word	0x0800304d
 8003024:	08003063 	.word	0x08003063
 8003028:	08003053 	.word	0x08003053
 800302c:	08003063 	.word	0x08003063
 8003030:	08003063 	.word	0x08003063
 8003034:	08003063 	.word	0x08003063
 8003038:	0800305b 	.word	0x0800305b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800303c:	f7fe feba 	bl	8001db4 <HAL_RCC_GetPCLK1Freq>
 8003040:	6178      	str	r0, [r7, #20]
        break;
 8003042:	e013      	b.n	800306c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003044:	f7fe fecc 	bl	8001de0 <HAL_RCC_GetPCLK2Freq>
 8003048:	6178      	str	r0, [r7, #20]
        break;
 800304a:	e00f      	b.n	800306c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800304c:	4b1b      	ldr	r3, [pc, #108]	; (80030bc <UART_SetConfig+0x510>)
 800304e:	617b      	str	r3, [r7, #20]
        break;
 8003050:	e00c      	b.n	800306c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003052:	f7fe fe17 	bl	8001c84 <HAL_RCC_GetSysClockFreq>
 8003056:	6178      	str	r0, [r7, #20]
        break;
 8003058:	e008      	b.n	800306c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800305a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800305e:	617b      	str	r3, [r7, #20]
        break;
 8003060:	e004      	b.n	800306c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003062:	2300      	movs	r3, #0
 8003064:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	76bb      	strb	r3, [r7, #26]
        break;
 800306a:	bf00      	nop
    }

    if (pclk != 0U)
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d018      	beq.n	80030a4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	085a      	lsrs	r2, r3, #1
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	441a      	add	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	fbb2 f3f3 	udiv	r3, r2, r3
 8003084:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	2b0f      	cmp	r3, #15
 800308a:	d909      	bls.n	80030a0 <UART_SetConfig+0x4f4>
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003092:	d205      	bcs.n	80030a0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	b29a      	uxth	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	60da      	str	r2, [r3, #12]
 800309e:	e001      	b.n	80030a4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80030b0:	7ebb      	ldrb	r3, [r7, #26]
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3720      	adds	r7, #32
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bdb0      	pop	{r4, r5, r7, pc}
 80030ba:	bf00      	nop
 80030bc:	00f42400 	.word	0x00f42400

080030c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00a      	beq.n	80030ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00a      	beq.n	800310c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00a      	beq.n	800312e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003132:	f003 0308 	and.w	r3, r3, #8
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00a      	beq.n	8003150 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	430a      	orrs	r2, r1
 800314e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	f003 0310 	and.w	r3, r3, #16
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00a      	beq.n	8003172 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003176:	f003 0320 	and.w	r3, r3, #32
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00a      	beq.n	8003194 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319c:	2b00      	cmp	r3, #0
 800319e:	d01a      	beq.n	80031d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031be:	d10a      	bne.n	80031d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00a      	beq.n	80031f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	605a      	str	r2, [r3, #4]
  }
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af02      	add	r7, sp, #8
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003214:	f7fd fd00 	bl	8000c18 <HAL_GetTick>
 8003218:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0308 	and.w	r3, r3, #8
 8003224:	2b08      	cmp	r3, #8
 8003226:	d10e      	bne.n	8003246 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003228:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800322c:	9300      	str	r3, [sp, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f82d 	bl	8003296 <UART_WaitOnFlagUntilTimeout>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e023      	b.n	800328e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	2b04      	cmp	r3, #4
 8003252:	d10e      	bne.n	8003272 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003254:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003258:	9300      	str	r3, [sp, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f817 	bl	8003296 <UART_WaitOnFlagUntilTimeout>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e00d      	b.n	800328e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2220      	movs	r2, #32
 8003276:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2220      	movs	r2, #32
 800327c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b09c      	sub	sp, #112	; 0x70
 800329a:	af00      	add	r7, sp, #0
 800329c:	60f8      	str	r0, [r7, #12]
 800329e:	60b9      	str	r1, [r7, #8]
 80032a0:	603b      	str	r3, [r7, #0]
 80032a2:	4613      	mov	r3, r2
 80032a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032a6:	e0a5      	b.n	80033f4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ae:	f000 80a1 	beq.w	80033f4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032b2:	f7fd fcb1 	bl	8000c18 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80032be:	429a      	cmp	r2, r3
 80032c0:	d302      	bcc.n	80032c8 <UART_WaitOnFlagUntilTimeout+0x32>
 80032c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d13e      	bne.n	8003346 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032d0:	e853 3f00 	ldrex	r3, [r3]
 80032d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80032d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80032dc:	667b      	str	r3, [r7, #100]	; 0x64
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	461a      	mov	r2, r3
 80032e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032e8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80032ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80032ee:	e841 2300 	strex	r3, r2, [r1]
 80032f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80032f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1e6      	bne.n	80032c8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	3308      	adds	r3, #8
 8003300:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003304:	e853 3f00 	ldrex	r3, [r3]
 8003308:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800330a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800330c:	f023 0301 	bic.w	r3, r3, #1
 8003310:	663b      	str	r3, [r7, #96]	; 0x60
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	3308      	adds	r3, #8
 8003318:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800331a:	64ba      	str	r2, [r7, #72]	; 0x48
 800331c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800331e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003320:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003322:	e841 2300 	strex	r3, r2, [r1]
 8003326:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1e5      	bne.n	80032fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2220      	movs	r2, #32
 8003332:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2220      	movs	r2, #32
 8003338:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e067      	b.n	8003416 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0304 	and.w	r3, r3, #4
 8003350:	2b00      	cmp	r3, #0
 8003352:	d04f      	beq.n	80033f4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800335e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003362:	d147      	bne.n	80033f4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800336c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003376:	e853 3f00 	ldrex	r3, [r3]
 800337a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003382:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	461a      	mov	r2, r3
 800338a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800338c:	637b      	str	r3, [r7, #52]	; 0x34
 800338e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003390:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003392:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003394:	e841 2300 	strex	r3, r2, [r1]
 8003398:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800339a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1e6      	bne.n	800336e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	3308      	adds	r3, #8
 80033a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	e853 3f00 	ldrex	r3, [r3]
 80033ae:	613b      	str	r3, [r7, #16]
   return(result);
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	f023 0301 	bic.w	r3, r3, #1
 80033b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	3308      	adds	r3, #8
 80033be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80033c0:	623a      	str	r2, [r7, #32]
 80033c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c4:	69f9      	ldr	r1, [r7, #28]
 80033c6:	6a3a      	ldr	r2, [r7, #32]
 80033c8:	e841 2300 	strex	r3, r2, [r1]
 80033cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1e5      	bne.n	80033a0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2220      	movs	r2, #32
 80033d8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2220      	movs	r2, #32
 80033de:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2220      	movs	r2, #32
 80033e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e010      	b.n	8003416 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	69da      	ldr	r2, [r3, #28]
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	4013      	ands	r3, r2
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	429a      	cmp	r2, r3
 8003402:	bf0c      	ite	eq
 8003404:	2301      	moveq	r3, #1
 8003406:	2300      	movne	r3, #0
 8003408:	b2db      	uxtb	r3, r3
 800340a:	461a      	mov	r2, r3
 800340c:	79fb      	ldrb	r3, [r7, #7]
 800340e:	429a      	cmp	r2, r3
 8003410:	f43f af4a 	beq.w	80032a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3770      	adds	r7, #112	; 0x70
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
	...

08003420 <__errno>:
 8003420:	4b01      	ldr	r3, [pc, #4]	; (8003428 <__errno+0x8>)
 8003422:	6818      	ldr	r0, [r3, #0]
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	2000000c 	.word	0x2000000c

0800342c <__libc_init_array>:
 800342c:	b570      	push	{r4, r5, r6, lr}
 800342e:	4d0d      	ldr	r5, [pc, #52]	; (8003464 <__libc_init_array+0x38>)
 8003430:	4c0d      	ldr	r4, [pc, #52]	; (8003468 <__libc_init_array+0x3c>)
 8003432:	1b64      	subs	r4, r4, r5
 8003434:	10a4      	asrs	r4, r4, #2
 8003436:	2600      	movs	r6, #0
 8003438:	42a6      	cmp	r6, r4
 800343a:	d109      	bne.n	8003450 <__libc_init_array+0x24>
 800343c:	4d0b      	ldr	r5, [pc, #44]	; (800346c <__libc_init_array+0x40>)
 800343e:	4c0c      	ldr	r4, [pc, #48]	; (8003470 <__libc_init_array+0x44>)
 8003440:	f000 ff76 	bl	8004330 <_init>
 8003444:	1b64      	subs	r4, r4, r5
 8003446:	10a4      	asrs	r4, r4, #2
 8003448:	2600      	movs	r6, #0
 800344a:	42a6      	cmp	r6, r4
 800344c:	d105      	bne.n	800345a <__libc_init_array+0x2e>
 800344e:	bd70      	pop	{r4, r5, r6, pc}
 8003450:	f855 3b04 	ldr.w	r3, [r5], #4
 8003454:	4798      	blx	r3
 8003456:	3601      	adds	r6, #1
 8003458:	e7ee      	b.n	8003438 <__libc_init_array+0xc>
 800345a:	f855 3b04 	ldr.w	r3, [r5], #4
 800345e:	4798      	blx	r3
 8003460:	3601      	adds	r6, #1
 8003462:	e7f2      	b.n	800344a <__libc_init_array+0x1e>
 8003464:	08004468 	.word	0x08004468
 8003468:	08004468 	.word	0x08004468
 800346c:	08004468 	.word	0x08004468
 8003470:	0800446c 	.word	0x0800446c

08003474 <memset>:
 8003474:	4402      	add	r2, r0
 8003476:	4603      	mov	r3, r0
 8003478:	4293      	cmp	r3, r2
 800347a:	d100      	bne.n	800347e <memset+0xa>
 800347c:	4770      	bx	lr
 800347e:	f803 1b01 	strb.w	r1, [r3], #1
 8003482:	e7f9      	b.n	8003478 <memset+0x4>

08003484 <iprintf>:
 8003484:	b40f      	push	{r0, r1, r2, r3}
 8003486:	4b0a      	ldr	r3, [pc, #40]	; (80034b0 <iprintf+0x2c>)
 8003488:	b513      	push	{r0, r1, r4, lr}
 800348a:	681c      	ldr	r4, [r3, #0]
 800348c:	b124      	cbz	r4, 8003498 <iprintf+0x14>
 800348e:	69a3      	ldr	r3, [r4, #24]
 8003490:	b913      	cbnz	r3, 8003498 <iprintf+0x14>
 8003492:	4620      	mov	r0, r4
 8003494:	f000 f866 	bl	8003564 <__sinit>
 8003498:	ab05      	add	r3, sp, #20
 800349a:	9a04      	ldr	r2, [sp, #16]
 800349c:	68a1      	ldr	r1, [r4, #8]
 800349e:	9301      	str	r3, [sp, #4]
 80034a0:	4620      	mov	r0, r4
 80034a2:	f000 f983 	bl	80037ac <_vfiprintf_r>
 80034a6:	b002      	add	sp, #8
 80034a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034ac:	b004      	add	sp, #16
 80034ae:	4770      	bx	lr
 80034b0:	2000000c 	.word	0x2000000c

080034b4 <std>:
 80034b4:	2300      	movs	r3, #0
 80034b6:	b510      	push	{r4, lr}
 80034b8:	4604      	mov	r4, r0
 80034ba:	e9c0 3300 	strd	r3, r3, [r0]
 80034be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80034c2:	6083      	str	r3, [r0, #8]
 80034c4:	8181      	strh	r1, [r0, #12]
 80034c6:	6643      	str	r3, [r0, #100]	; 0x64
 80034c8:	81c2      	strh	r2, [r0, #14]
 80034ca:	6183      	str	r3, [r0, #24]
 80034cc:	4619      	mov	r1, r3
 80034ce:	2208      	movs	r2, #8
 80034d0:	305c      	adds	r0, #92	; 0x5c
 80034d2:	f7ff ffcf 	bl	8003474 <memset>
 80034d6:	4b05      	ldr	r3, [pc, #20]	; (80034ec <std+0x38>)
 80034d8:	6263      	str	r3, [r4, #36]	; 0x24
 80034da:	4b05      	ldr	r3, [pc, #20]	; (80034f0 <std+0x3c>)
 80034dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80034de:	4b05      	ldr	r3, [pc, #20]	; (80034f4 <std+0x40>)
 80034e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80034e2:	4b05      	ldr	r3, [pc, #20]	; (80034f8 <std+0x44>)
 80034e4:	6224      	str	r4, [r4, #32]
 80034e6:	6323      	str	r3, [r4, #48]	; 0x30
 80034e8:	bd10      	pop	{r4, pc}
 80034ea:	bf00      	nop
 80034ec:	08003d55 	.word	0x08003d55
 80034f0:	08003d77 	.word	0x08003d77
 80034f4:	08003daf 	.word	0x08003daf
 80034f8:	08003dd3 	.word	0x08003dd3

080034fc <_cleanup_r>:
 80034fc:	4901      	ldr	r1, [pc, #4]	; (8003504 <_cleanup_r+0x8>)
 80034fe:	f000 b8af 	b.w	8003660 <_fwalk_reent>
 8003502:	bf00      	nop
 8003504:	080040ad 	.word	0x080040ad

08003508 <__sfmoreglue>:
 8003508:	b570      	push	{r4, r5, r6, lr}
 800350a:	1e4a      	subs	r2, r1, #1
 800350c:	2568      	movs	r5, #104	; 0x68
 800350e:	4355      	muls	r5, r2
 8003510:	460e      	mov	r6, r1
 8003512:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003516:	f000 f8c5 	bl	80036a4 <_malloc_r>
 800351a:	4604      	mov	r4, r0
 800351c:	b140      	cbz	r0, 8003530 <__sfmoreglue+0x28>
 800351e:	2100      	movs	r1, #0
 8003520:	e9c0 1600 	strd	r1, r6, [r0]
 8003524:	300c      	adds	r0, #12
 8003526:	60a0      	str	r0, [r4, #8]
 8003528:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800352c:	f7ff ffa2 	bl	8003474 <memset>
 8003530:	4620      	mov	r0, r4
 8003532:	bd70      	pop	{r4, r5, r6, pc}

08003534 <__sfp_lock_acquire>:
 8003534:	4801      	ldr	r0, [pc, #4]	; (800353c <__sfp_lock_acquire+0x8>)
 8003536:	f000 b8b3 	b.w	80036a0 <__retarget_lock_acquire_recursive>
 800353a:	bf00      	nop
 800353c:	2000012c 	.word	0x2000012c

08003540 <__sfp_lock_release>:
 8003540:	4801      	ldr	r0, [pc, #4]	; (8003548 <__sfp_lock_release+0x8>)
 8003542:	f000 b8ae 	b.w	80036a2 <__retarget_lock_release_recursive>
 8003546:	bf00      	nop
 8003548:	2000012c 	.word	0x2000012c

0800354c <__sinit_lock_acquire>:
 800354c:	4801      	ldr	r0, [pc, #4]	; (8003554 <__sinit_lock_acquire+0x8>)
 800354e:	f000 b8a7 	b.w	80036a0 <__retarget_lock_acquire_recursive>
 8003552:	bf00      	nop
 8003554:	20000127 	.word	0x20000127

08003558 <__sinit_lock_release>:
 8003558:	4801      	ldr	r0, [pc, #4]	; (8003560 <__sinit_lock_release+0x8>)
 800355a:	f000 b8a2 	b.w	80036a2 <__retarget_lock_release_recursive>
 800355e:	bf00      	nop
 8003560:	20000127 	.word	0x20000127

08003564 <__sinit>:
 8003564:	b510      	push	{r4, lr}
 8003566:	4604      	mov	r4, r0
 8003568:	f7ff fff0 	bl	800354c <__sinit_lock_acquire>
 800356c:	69a3      	ldr	r3, [r4, #24]
 800356e:	b11b      	cbz	r3, 8003578 <__sinit+0x14>
 8003570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003574:	f7ff bff0 	b.w	8003558 <__sinit_lock_release>
 8003578:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800357c:	6523      	str	r3, [r4, #80]	; 0x50
 800357e:	4b13      	ldr	r3, [pc, #76]	; (80035cc <__sinit+0x68>)
 8003580:	4a13      	ldr	r2, [pc, #76]	; (80035d0 <__sinit+0x6c>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	62a2      	str	r2, [r4, #40]	; 0x28
 8003586:	42a3      	cmp	r3, r4
 8003588:	bf04      	itt	eq
 800358a:	2301      	moveq	r3, #1
 800358c:	61a3      	streq	r3, [r4, #24]
 800358e:	4620      	mov	r0, r4
 8003590:	f000 f820 	bl	80035d4 <__sfp>
 8003594:	6060      	str	r0, [r4, #4]
 8003596:	4620      	mov	r0, r4
 8003598:	f000 f81c 	bl	80035d4 <__sfp>
 800359c:	60a0      	str	r0, [r4, #8]
 800359e:	4620      	mov	r0, r4
 80035a0:	f000 f818 	bl	80035d4 <__sfp>
 80035a4:	2200      	movs	r2, #0
 80035a6:	60e0      	str	r0, [r4, #12]
 80035a8:	2104      	movs	r1, #4
 80035aa:	6860      	ldr	r0, [r4, #4]
 80035ac:	f7ff ff82 	bl	80034b4 <std>
 80035b0:	68a0      	ldr	r0, [r4, #8]
 80035b2:	2201      	movs	r2, #1
 80035b4:	2109      	movs	r1, #9
 80035b6:	f7ff ff7d 	bl	80034b4 <std>
 80035ba:	68e0      	ldr	r0, [r4, #12]
 80035bc:	2202      	movs	r2, #2
 80035be:	2112      	movs	r1, #18
 80035c0:	f7ff ff78 	bl	80034b4 <std>
 80035c4:	2301      	movs	r3, #1
 80035c6:	61a3      	str	r3, [r4, #24]
 80035c8:	e7d2      	b.n	8003570 <__sinit+0xc>
 80035ca:	bf00      	nop
 80035cc:	080043c8 	.word	0x080043c8
 80035d0:	080034fd 	.word	0x080034fd

080035d4 <__sfp>:
 80035d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035d6:	4607      	mov	r7, r0
 80035d8:	f7ff ffac 	bl	8003534 <__sfp_lock_acquire>
 80035dc:	4b1e      	ldr	r3, [pc, #120]	; (8003658 <__sfp+0x84>)
 80035de:	681e      	ldr	r6, [r3, #0]
 80035e0:	69b3      	ldr	r3, [r6, #24]
 80035e2:	b913      	cbnz	r3, 80035ea <__sfp+0x16>
 80035e4:	4630      	mov	r0, r6
 80035e6:	f7ff ffbd 	bl	8003564 <__sinit>
 80035ea:	3648      	adds	r6, #72	; 0x48
 80035ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80035f0:	3b01      	subs	r3, #1
 80035f2:	d503      	bpl.n	80035fc <__sfp+0x28>
 80035f4:	6833      	ldr	r3, [r6, #0]
 80035f6:	b30b      	cbz	r3, 800363c <__sfp+0x68>
 80035f8:	6836      	ldr	r6, [r6, #0]
 80035fa:	e7f7      	b.n	80035ec <__sfp+0x18>
 80035fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003600:	b9d5      	cbnz	r5, 8003638 <__sfp+0x64>
 8003602:	4b16      	ldr	r3, [pc, #88]	; (800365c <__sfp+0x88>)
 8003604:	60e3      	str	r3, [r4, #12]
 8003606:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800360a:	6665      	str	r5, [r4, #100]	; 0x64
 800360c:	f000 f847 	bl	800369e <__retarget_lock_init_recursive>
 8003610:	f7ff ff96 	bl	8003540 <__sfp_lock_release>
 8003614:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003618:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800361c:	6025      	str	r5, [r4, #0]
 800361e:	61a5      	str	r5, [r4, #24]
 8003620:	2208      	movs	r2, #8
 8003622:	4629      	mov	r1, r5
 8003624:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003628:	f7ff ff24 	bl	8003474 <memset>
 800362c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003630:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003634:	4620      	mov	r0, r4
 8003636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003638:	3468      	adds	r4, #104	; 0x68
 800363a:	e7d9      	b.n	80035f0 <__sfp+0x1c>
 800363c:	2104      	movs	r1, #4
 800363e:	4638      	mov	r0, r7
 8003640:	f7ff ff62 	bl	8003508 <__sfmoreglue>
 8003644:	4604      	mov	r4, r0
 8003646:	6030      	str	r0, [r6, #0]
 8003648:	2800      	cmp	r0, #0
 800364a:	d1d5      	bne.n	80035f8 <__sfp+0x24>
 800364c:	f7ff ff78 	bl	8003540 <__sfp_lock_release>
 8003650:	230c      	movs	r3, #12
 8003652:	603b      	str	r3, [r7, #0]
 8003654:	e7ee      	b.n	8003634 <__sfp+0x60>
 8003656:	bf00      	nop
 8003658:	080043c8 	.word	0x080043c8
 800365c:	ffff0001 	.word	0xffff0001

08003660 <_fwalk_reent>:
 8003660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003664:	4606      	mov	r6, r0
 8003666:	4688      	mov	r8, r1
 8003668:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800366c:	2700      	movs	r7, #0
 800366e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003672:	f1b9 0901 	subs.w	r9, r9, #1
 8003676:	d505      	bpl.n	8003684 <_fwalk_reent+0x24>
 8003678:	6824      	ldr	r4, [r4, #0]
 800367a:	2c00      	cmp	r4, #0
 800367c:	d1f7      	bne.n	800366e <_fwalk_reent+0xe>
 800367e:	4638      	mov	r0, r7
 8003680:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003684:	89ab      	ldrh	r3, [r5, #12]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d907      	bls.n	800369a <_fwalk_reent+0x3a>
 800368a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800368e:	3301      	adds	r3, #1
 8003690:	d003      	beq.n	800369a <_fwalk_reent+0x3a>
 8003692:	4629      	mov	r1, r5
 8003694:	4630      	mov	r0, r6
 8003696:	47c0      	blx	r8
 8003698:	4307      	orrs	r7, r0
 800369a:	3568      	adds	r5, #104	; 0x68
 800369c:	e7e9      	b.n	8003672 <_fwalk_reent+0x12>

0800369e <__retarget_lock_init_recursive>:
 800369e:	4770      	bx	lr

080036a0 <__retarget_lock_acquire_recursive>:
 80036a0:	4770      	bx	lr

080036a2 <__retarget_lock_release_recursive>:
 80036a2:	4770      	bx	lr

080036a4 <_malloc_r>:
 80036a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036a6:	1ccd      	adds	r5, r1, #3
 80036a8:	f025 0503 	bic.w	r5, r5, #3
 80036ac:	3508      	adds	r5, #8
 80036ae:	2d0c      	cmp	r5, #12
 80036b0:	bf38      	it	cc
 80036b2:	250c      	movcc	r5, #12
 80036b4:	2d00      	cmp	r5, #0
 80036b6:	4606      	mov	r6, r0
 80036b8:	db01      	blt.n	80036be <_malloc_r+0x1a>
 80036ba:	42a9      	cmp	r1, r5
 80036bc:	d903      	bls.n	80036c6 <_malloc_r+0x22>
 80036be:	230c      	movs	r3, #12
 80036c0:	6033      	str	r3, [r6, #0]
 80036c2:	2000      	movs	r0, #0
 80036c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036c6:	f000 fda3 	bl	8004210 <__malloc_lock>
 80036ca:	4921      	ldr	r1, [pc, #132]	; (8003750 <_malloc_r+0xac>)
 80036cc:	680a      	ldr	r2, [r1, #0]
 80036ce:	4614      	mov	r4, r2
 80036d0:	b99c      	cbnz	r4, 80036fa <_malloc_r+0x56>
 80036d2:	4f20      	ldr	r7, [pc, #128]	; (8003754 <_malloc_r+0xb0>)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	b923      	cbnz	r3, 80036e2 <_malloc_r+0x3e>
 80036d8:	4621      	mov	r1, r4
 80036da:	4630      	mov	r0, r6
 80036dc:	f000 fb2a 	bl	8003d34 <_sbrk_r>
 80036e0:	6038      	str	r0, [r7, #0]
 80036e2:	4629      	mov	r1, r5
 80036e4:	4630      	mov	r0, r6
 80036e6:	f000 fb25 	bl	8003d34 <_sbrk_r>
 80036ea:	1c43      	adds	r3, r0, #1
 80036ec:	d123      	bne.n	8003736 <_malloc_r+0x92>
 80036ee:	230c      	movs	r3, #12
 80036f0:	6033      	str	r3, [r6, #0]
 80036f2:	4630      	mov	r0, r6
 80036f4:	f000 fd92 	bl	800421c <__malloc_unlock>
 80036f8:	e7e3      	b.n	80036c2 <_malloc_r+0x1e>
 80036fa:	6823      	ldr	r3, [r4, #0]
 80036fc:	1b5b      	subs	r3, r3, r5
 80036fe:	d417      	bmi.n	8003730 <_malloc_r+0x8c>
 8003700:	2b0b      	cmp	r3, #11
 8003702:	d903      	bls.n	800370c <_malloc_r+0x68>
 8003704:	6023      	str	r3, [r4, #0]
 8003706:	441c      	add	r4, r3
 8003708:	6025      	str	r5, [r4, #0]
 800370a:	e004      	b.n	8003716 <_malloc_r+0x72>
 800370c:	6863      	ldr	r3, [r4, #4]
 800370e:	42a2      	cmp	r2, r4
 8003710:	bf0c      	ite	eq
 8003712:	600b      	streq	r3, [r1, #0]
 8003714:	6053      	strne	r3, [r2, #4]
 8003716:	4630      	mov	r0, r6
 8003718:	f000 fd80 	bl	800421c <__malloc_unlock>
 800371c:	f104 000b 	add.w	r0, r4, #11
 8003720:	1d23      	adds	r3, r4, #4
 8003722:	f020 0007 	bic.w	r0, r0, #7
 8003726:	1ac2      	subs	r2, r0, r3
 8003728:	d0cc      	beq.n	80036c4 <_malloc_r+0x20>
 800372a:	1a1b      	subs	r3, r3, r0
 800372c:	50a3      	str	r3, [r4, r2]
 800372e:	e7c9      	b.n	80036c4 <_malloc_r+0x20>
 8003730:	4622      	mov	r2, r4
 8003732:	6864      	ldr	r4, [r4, #4]
 8003734:	e7cc      	b.n	80036d0 <_malloc_r+0x2c>
 8003736:	1cc4      	adds	r4, r0, #3
 8003738:	f024 0403 	bic.w	r4, r4, #3
 800373c:	42a0      	cmp	r0, r4
 800373e:	d0e3      	beq.n	8003708 <_malloc_r+0x64>
 8003740:	1a21      	subs	r1, r4, r0
 8003742:	4630      	mov	r0, r6
 8003744:	f000 faf6 	bl	8003d34 <_sbrk_r>
 8003748:	3001      	adds	r0, #1
 800374a:	d1dd      	bne.n	8003708 <_malloc_r+0x64>
 800374c:	e7cf      	b.n	80036ee <_malloc_r+0x4a>
 800374e:	bf00      	nop
 8003750:	20000090 	.word	0x20000090
 8003754:	20000094 	.word	0x20000094

08003758 <__sfputc_r>:
 8003758:	6893      	ldr	r3, [r2, #8]
 800375a:	3b01      	subs	r3, #1
 800375c:	2b00      	cmp	r3, #0
 800375e:	b410      	push	{r4}
 8003760:	6093      	str	r3, [r2, #8]
 8003762:	da08      	bge.n	8003776 <__sfputc_r+0x1e>
 8003764:	6994      	ldr	r4, [r2, #24]
 8003766:	42a3      	cmp	r3, r4
 8003768:	db01      	blt.n	800376e <__sfputc_r+0x16>
 800376a:	290a      	cmp	r1, #10
 800376c:	d103      	bne.n	8003776 <__sfputc_r+0x1e>
 800376e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003772:	f000 bb33 	b.w	8003ddc <__swbuf_r>
 8003776:	6813      	ldr	r3, [r2, #0]
 8003778:	1c58      	adds	r0, r3, #1
 800377a:	6010      	str	r0, [r2, #0]
 800377c:	7019      	strb	r1, [r3, #0]
 800377e:	4608      	mov	r0, r1
 8003780:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003784:	4770      	bx	lr

08003786 <__sfputs_r>:
 8003786:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003788:	4606      	mov	r6, r0
 800378a:	460f      	mov	r7, r1
 800378c:	4614      	mov	r4, r2
 800378e:	18d5      	adds	r5, r2, r3
 8003790:	42ac      	cmp	r4, r5
 8003792:	d101      	bne.n	8003798 <__sfputs_r+0x12>
 8003794:	2000      	movs	r0, #0
 8003796:	e007      	b.n	80037a8 <__sfputs_r+0x22>
 8003798:	f814 1b01 	ldrb.w	r1, [r4], #1
 800379c:	463a      	mov	r2, r7
 800379e:	4630      	mov	r0, r6
 80037a0:	f7ff ffda 	bl	8003758 <__sfputc_r>
 80037a4:	1c43      	adds	r3, r0, #1
 80037a6:	d1f3      	bne.n	8003790 <__sfputs_r+0xa>
 80037a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080037ac <_vfiprintf_r>:
 80037ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037b0:	460d      	mov	r5, r1
 80037b2:	b09d      	sub	sp, #116	; 0x74
 80037b4:	4614      	mov	r4, r2
 80037b6:	4698      	mov	r8, r3
 80037b8:	4606      	mov	r6, r0
 80037ba:	b118      	cbz	r0, 80037c4 <_vfiprintf_r+0x18>
 80037bc:	6983      	ldr	r3, [r0, #24]
 80037be:	b90b      	cbnz	r3, 80037c4 <_vfiprintf_r+0x18>
 80037c0:	f7ff fed0 	bl	8003564 <__sinit>
 80037c4:	4b89      	ldr	r3, [pc, #548]	; (80039ec <_vfiprintf_r+0x240>)
 80037c6:	429d      	cmp	r5, r3
 80037c8:	d11b      	bne.n	8003802 <_vfiprintf_r+0x56>
 80037ca:	6875      	ldr	r5, [r6, #4]
 80037cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80037ce:	07d9      	lsls	r1, r3, #31
 80037d0:	d405      	bmi.n	80037de <_vfiprintf_r+0x32>
 80037d2:	89ab      	ldrh	r3, [r5, #12]
 80037d4:	059a      	lsls	r2, r3, #22
 80037d6:	d402      	bmi.n	80037de <_vfiprintf_r+0x32>
 80037d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80037da:	f7ff ff61 	bl	80036a0 <__retarget_lock_acquire_recursive>
 80037de:	89ab      	ldrh	r3, [r5, #12]
 80037e0:	071b      	lsls	r3, r3, #28
 80037e2:	d501      	bpl.n	80037e8 <_vfiprintf_r+0x3c>
 80037e4:	692b      	ldr	r3, [r5, #16]
 80037e6:	b9eb      	cbnz	r3, 8003824 <_vfiprintf_r+0x78>
 80037e8:	4629      	mov	r1, r5
 80037ea:	4630      	mov	r0, r6
 80037ec:	f000 fb5a 	bl	8003ea4 <__swsetup_r>
 80037f0:	b1c0      	cbz	r0, 8003824 <_vfiprintf_r+0x78>
 80037f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80037f4:	07dc      	lsls	r4, r3, #31
 80037f6:	d50e      	bpl.n	8003816 <_vfiprintf_r+0x6a>
 80037f8:	f04f 30ff 	mov.w	r0, #4294967295
 80037fc:	b01d      	add	sp, #116	; 0x74
 80037fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003802:	4b7b      	ldr	r3, [pc, #492]	; (80039f0 <_vfiprintf_r+0x244>)
 8003804:	429d      	cmp	r5, r3
 8003806:	d101      	bne.n	800380c <_vfiprintf_r+0x60>
 8003808:	68b5      	ldr	r5, [r6, #8]
 800380a:	e7df      	b.n	80037cc <_vfiprintf_r+0x20>
 800380c:	4b79      	ldr	r3, [pc, #484]	; (80039f4 <_vfiprintf_r+0x248>)
 800380e:	429d      	cmp	r5, r3
 8003810:	bf08      	it	eq
 8003812:	68f5      	ldreq	r5, [r6, #12]
 8003814:	e7da      	b.n	80037cc <_vfiprintf_r+0x20>
 8003816:	89ab      	ldrh	r3, [r5, #12]
 8003818:	0598      	lsls	r0, r3, #22
 800381a:	d4ed      	bmi.n	80037f8 <_vfiprintf_r+0x4c>
 800381c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800381e:	f7ff ff40 	bl	80036a2 <__retarget_lock_release_recursive>
 8003822:	e7e9      	b.n	80037f8 <_vfiprintf_r+0x4c>
 8003824:	2300      	movs	r3, #0
 8003826:	9309      	str	r3, [sp, #36]	; 0x24
 8003828:	2320      	movs	r3, #32
 800382a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800382e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003832:	2330      	movs	r3, #48	; 0x30
 8003834:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80039f8 <_vfiprintf_r+0x24c>
 8003838:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800383c:	f04f 0901 	mov.w	r9, #1
 8003840:	4623      	mov	r3, r4
 8003842:	469a      	mov	sl, r3
 8003844:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003848:	b10a      	cbz	r2, 800384e <_vfiprintf_r+0xa2>
 800384a:	2a25      	cmp	r2, #37	; 0x25
 800384c:	d1f9      	bne.n	8003842 <_vfiprintf_r+0x96>
 800384e:	ebba 0b04 	subs.w	fp, sl, r4
 8003852:	d00b      	beq.n	800386c <_vfiprintf_r+0xc0>
 8003854:	465b      	mov	r3, fp
 8003856:	4622      	mov	r2, r4
 8003858:	4629      	mov	r1, r5
 800385a:	4630      	mov	r0, r6
 800385c:	f7ff ff93 	bl	8003786 <__sfputs_r>
 8003860:	3001      	adds	r0, #1
 8003862:	f000 80aa 	beq.w	80039ba <_vfiprintf_r+0x20e>
 8003866:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003868:	445a      	add	r2, fp
 800386a:	9209      	str	r2, [sp, #36]	; 0x24
 800386c:	f89a 3000 	ldrb.w	r3, [sl]
 8003870:	2b00      	cmp	r3, #0
 8003872:	f000 80a2 	beq.w	80039ba <_vfiprintf_r+0x20e>
 8003876:	2300      	movs	r3, #0
 8003878:	f04f 32ff 	mov.w	r2, #4294967295
 800387c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003880:	f10a 0a01 	add.w	sl, sl, #1
 8003884:	9304      	str	r3, [sp, #16]
 8003886:	9307      	str	r3, [sp, #28]
 8003888:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800388c:	931a      	str	r3, [sp, #104]	; 0x68
 800388e:	4654      	mov	r4, sl
 8003890:	2205      	movs	r2, #5
 8003892:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003896:	4858      	ldr	r0, [pc, #352]	; (80039f8 <_vfiprintf_r+0x24c>)
 8003898:	f7fc fc9a 	bl	80001d0 <memchr>
 800389c:	9a04      	ldr	r2, [sp, #16]
 800389e:	b9d8      	cbnz	r0, 80038d8 <_vfiprintf_r+0x12c>
 80038a0:	06d1      	lsls	r1, r2, #27
 80038a2:	bf44      	itt	mi
 80038a4:	2320      	movmi	r3, #32
 80038a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038aa:	0713      	lsls	r3, r2, #28
 80038ac:	bf44      	itt	mi
 80038ae:	232b      	movmi	r3, #43	; 0x2b
 80038b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038b4:	f89a 3000 	ldrb.w	r3, [sl]
 80038b8:	2b2a      	cmp	r3, #42	; 0x2a
 80038ba:	d015      	beq.n	80038e8 <_vfiprintf_r+0x13c>
 80038bc:	9a07      	ldr	r2, [sp, #28]
 80038be:	4654      	mov	r4, sl
 80038c0:	2000      	movs	r0, #0
 80038c2:	f04f 0c0a 	mov.w	ip, #10
 80038c6:	4621      	mov	r1, r4
 80038c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80038cc:	3b30      	subs	r3, #48	; 0x30
 80038ce:	2b09      	cmp	r3, #9
 80038d0:	d94e      	bls.n	8003970 <_vfiprintf_r+0x1c4>
 80038d2:	b1b0      	cbz	r0, 8003902 <_vfiprintf_r+0x156>
 80038d4:	9207      	str	r2, [sp, #28]
 80038d6:	e014      	b.n	8003902 <_vfiprintf_r+0x156>
 80038d8:	eba0 0308 	sub.w	r3, r0, r8
 80038dc:	fa09 f303 	lsl.w	r3, r9, r3
 80038e0:	4313      	orrs	r3, r2
 80038e2:	9304      	str	r3, [sp, #16]
 80038e4:	46a2      	mov	sl, r4
 80038e6:	e7d2      	b.n	800388e <_vfiprintf_r+0xe2>
 80038e8:	9b03      	ldr	r3, [sp, #12]
 80038ea:	1d19      	adds	r1, r3, #4
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	9103      	str	r1, [sp, #12]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	bfbb      	ittet	lt
 80038f4:	425b      	neglt	r3, r3
 80038f6:	f042 0202 	orrlt.w	r2, r2, #2
 80038fa:	9307      	strge	r3, [sp, #28]
 80038fc:	9307      	strlt	r3, [sp, #28]
 80038fe:	bfb8      	it	lt
 8003900:	9204      	strlt	r2, [sp, #16]
 8003902:	7823      	ldrb	r3, [r4, #0]
 8003904:	2b2e      	cmp	r3, #46	; 0x2e
 8003906:	d10c      	bne.n	8003922 <_vfiprintf_r+0x176>
 8003908:	7863      	ldrb	r3, [r4, #1]
 800390a:	2b2a      	cmp	r3, #42	; 0x2a
 800390c:	d135      	bne.n	800397a <_vfiprintf_r+0x1ce>
 800390e:	9b03      	ldr	r3, [sp, #12]
 8003910:	1d1a      	adds	r2, r3, #4
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	9203      	str	r2, [sp, #12]
 8003916:	2b00      	cmp	r3, #0
 8003918:	bfb8      	it	lt
 800391a:	f04f 33ff 	movlt.w	r3, #4294967295
 800391e:	3402      	adds	r4, #2
 8003920:	9305      	str	r3, [sp, #20]
 8003922:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003a08 <_vfiprintf_r+0x25c>
 8003926:	7821      	ldrb	r1, [r4, #0]
 8003928:	2203      	movs	r2, #3
 800392a:	4650      	mov	r0, sl
 800392c:	f7fc fc50 	bl	80001d0 <memchr>
 8003930:	b140      	cbz	r0, 8003944 <_vfiprintf_r+0x198>
 8003932:	2340      	movs	r3, #64	; 0x40
 8003934:	eba0 000a 	sub.w	r0, r0, sl
 8003938:	fa03 f000 	lsl.w	r0, r3, r0
 800393c:	9b04      	ldr	r3, [sp, #16]
 800393e:	4303      	orrs	r3, r0
 8003940:	3401      	adds	r4, #1
 8003942:	9304      	str	r3, [sp, #16]
 8003944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003948:	482c      	ldr	r0, [pc, #176]	; (80039fc <_vfiprintf_r+0x250>)
 800394a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800394e:	2206      	movs	r2, #6
 8003950:	f7fc fc3e 	bl	80001d0 <memchr>
 8003954:	2800      	cmp	r0, #0
 8003956:	d03f      	beq.n	80039d8 <_vfiprintf_r+0x22c>
 8003958:	4b29      	ldr	r3, [pc, #164]	; (8003a00 <_vfiprintf_r+0x254>)
 800395a:	bb1b      	cbnz	r3, 80039a4 <_vfiprintf_r+0x1f8>
 800395c:	9b03      	ldr	r3, [sp, #12]
 800395e:	3307      	adds	r3, #7
 8003960:	f023 0307 	bic.w	r3, r3, #7
 8003964:	3308      	adds	r3, #8
 8003966:	9303      	str	r3, [sp, #12]
 8003968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800396a:	443b      	add	r3, r7
 800396c:	9309      	str	r3, [sp, #36]	; 0x24
 800396e:	e767      	b.n	8003840 <_vfiprintf_r+0x94>
 8003970:	fb0c 3202 	mla	r2, ip, r2, r3
 8003974:	460c      	mov	r4, r1
 8003976:	2001      	movs	r0, #1
 8003978:	e7a5      	b.n	80038c6 <_vfiprintf_r+0x11a>
 800397a:	2300      	movs	r3, #0
 800397c:	3401      	adds	r4, #1
 800397e:	9305      	str	r3, [sp, #20]
 8003980:	4619      	mov	r1, r3
 8003982:	f04f 0c0a 	mov.w	ip, #10
 8003986:	4620      	mov	r0, r4
 8003988:	f810 2b01 	ldrb.w	r2, [r0], #1
 800398c:	3a30      	subs	r2, #48	; 0x30
 800398e:	2a09      	cmp	r2, #9
 8003990:	d903      	bls.n	800399a <_vfiprintf_r+0x1ee>
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0c5      	beq.n	8003922 <_vfiprintf_r+0x176>
 8003996:	9105      	str	r1, [sp, #20]
 8003998:	e7c3      	b.n	8003922 <_vfiprintf_r+0x176>
 800399a:	fb0c 2101 	mla	r1, ip, r1, r2
 800399e:	4604      	mov	r4, r0
 80039a0:	2301      	movs	r3, #1
 80039a2:	e7f0      	b.n	8003986 <_vfiprintf_r+0x1da>
 80039a4:	ab03      	add	r3, sp, #12
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	462a      	mov	r2, r5
 80039aa:	4b16      	ldr	r3, [pc, #88]	; (8003a04 <_vfiprintf_r+0x258>)
 80039ac:	a904      	add	r1, sp, #16
 80039ae:	4630      	mov	r0, r6
 80039b0:	f3af 8000 	nop.w
 80039b4:	4607      	mov	r7, r0
 80039b6:	1c78      	adds	r0, r7, #1
 80039b8:	d1d6      	bne.n	8003968 <_vfiprintf_r+0x1bc>
 80039ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80039bc:	07d9      	lsls	r1, r3, #31
 80039be:	d405      	bmi.n	80039cc <_vfiprintf_r+0x220>
 80039c0:	89ab      	ldrh	r3, [r5, #12]
 80039c2:	059a      	lsls	r2, r3, #22
 80039c4:	d402      	bmi.n	80039cc <_vfiprintf_r+0x220>
 80039c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80039c8:	f7ff fe6b 	bl	80036a2 <__retarget_lock_release_recursive>
 80039cc:	89ab      	ldrh	r3, [r5, #12]
 80039ce:	065b      	lsls	r3, r3, #25
 80039d0:	f53f af12 	bmi.w	80037f8 <_vfiprintf_r+0x4c>
 80039d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80039d6:	e711      	b.n	80037fc <_vfiprintf_r+0x50>
 80039d8:	ab03      	add	r3, sp, #12
 80039da:	9300      	str	r3, [sp, #0]
 80039dc:	462a      	mov	r2, r5
 80039de:	4b09      	ldr	r3, [pc, #36]	; (8003a04 <_vfiprintf_r+0x258>)
 80039e0:	a904      	add	r1, sp, #16
 80039e2:	4630      	mov	r0, r6
 80039e4:	f000 f880 	bl	8003ae8 <_printf_i>
 80039e8:	e7e4      	b.n	80039b4 <_vfiprintf_r+0x208>
 80039ea:	bf00      	nop
 80039ec:	080043ec 	.word	0x080043ec
 80039f0:	0800440c 	.word	0x0800440c
 80039f4:	080043cc 	.word	0x080043cc
 80039f8:	0800442c 	.word	0x0800442c
 80039fc:	08004436 	.word	0x08004436
 8003a00:	00000000 	.word	0x00000000
 8003a04:	08003787 	.word	0x08003787
 8003a08:	08004432 	.word	0x08004432

08003a0c <_printf_common>:
 8003a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a10:	4616      	mov	r6, r2
 8003a12:	4699      	mov	r9, r3
 8003a14:	688a      	ldr	r2, [r1, #8]
 8003a16:	690b      	ldr	r3, [r1, #16]
 8003a18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	bfb8      	it	lt
 8003a20:	4613      	movlt	r3, r2
 8003a22:	6033      	str	r3, [r6, #0]
 8003a24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a28:	4607      	mov	r7, r0
 8003a2a:	460c      	mov	r4, r1
 8003a2c:	b10a      	cbz	r2, 8003a32 <_printf_common+0x26>
 8003a2e:	3301      	adds	r3, #1
 8003a30:	6033      	str	r3, [r6, #0]
 8003a32:	6823      	ldr	r3, [r4, #0]
 8003a34:	0699      	lsls	r1, r3, #26
 8003a36:	bf42      	ittt	mi
 8003a38:	6833      	ldrmi	r3, [r6, #0]
 8003a3a:	3302      	addmi	r3, #2
 8003a3c:	6033      	strmi	r3, [r6, #0]
 8003a3e:	6825      	ldr	r5, [r4, #0]
 8003a40:	f015 0506 	ands.w	r5, r5, #6
 8003a44:	d106      	bne.n	8003a54 <_printf_common+0x48>
 8003a46:	f104 0a19 	add.w	sl, r4, #25
 8003a4a:	68e3      	ldr	r3, [r4, #12]
 8003a4c:	6832      	ldr	r2, [r6, #0]
 8003a4e:	1a9b      	subs	r3, r3, r2
 8003a50:	42ab      	cmp	r3, r5
 8003a52:	dc26      	bgt.n	8003aa2 <_printf_common+0x96>
 8003a54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a58:	1e13      	subs	r3, r2, #0
 8003a5a:	6822      	ldr	r2, [r4, #0]
 8003a5c:	bf18      	it	ne
 8003a5e:	2301      	movne	r3, #1
 8003a60:	0692      	lsls	r2, r2, #26
 8003a62:	d42b      	bmi.n	8003abc <_printf_common+0xb0>
 8003a64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a68:	4649      	mov	r1, r9
 8003a6a:	4638      	mov	r0, r7
 8003a6c:	47c0      	blx	r8
 8003a6e:	3001      	adds	r0, #1
 8003a70:	d01e      	beq.n	8003ab0 <_printf_common+0xa4>
 8003a72:	6823      	ldr	r3, [r4, #0]
 8003a74:	68e5      	ldr	r5, [r4, #12]
 8003a76:	6832      	ldr	r2, [r6, #0]
 8003a78:	f003 0306 	and.w	r3, r3, #6
 8003a7c:	2b04      	cmp	r3, #4
 8003a7e:	bf08      	it	eq
 8003a80:	1aad      	subeq	r5, r5, r2
 8003a82:	68a3      	ldr	r3, [r4, #8]
 8003a84:	6922      	ldr	r2, [r4, #16]
 8003a86:	bf0c      	ite	eq
 8003a88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a8c:	2500      	movne	r5, #0
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	bfc4      	itt	gt
 8003a92:	1a9b      	subgt	r3, r3, r2
 8003a94:	18ed      	addgt	r5, r5, r3
 8003a96:	2600      	movs	r6, #0
 8003a98:	341a      	adds	r4, #26
 8003a9a:	42b5      	cmp	r5, r6
 8003a9c:	d11a      	bne.n	8003ad4 <_printf_common+0xc8>
 8003a9e:	2000      	movs	r0, #0
 8003aa0:	e008      	b.n	8003ab4 <_printf_common+0xa8>
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	4652      	mov	r2, sl
 8003aa6:	4649      	mov	r1, r9
 8003aa8:	4638      	mov	r0, r7
 8003aaa:	47c0      	blx	r8
 8003aac:	3001      	adds	r0, #1
 8003aae:	d103      	bne.n	8003ab8 <_printf_common+0xac>
 8003ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ab8:	3501      	adds	r5, #1
 8003aba:	e7c6      	b.n	8003a4a <_printf_common+0x3e>
 8003abc:	18e1      	adds	r1, r4, r3
 8003abe:	1c5a      	adds	r2, r3, #1
 8003ac0:	2030      	movs	r0, #48	; 0x30
 8003ac2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ac6:	4422      	add	r2, r4
 8003ac8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003acc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ad0:	3302      	adds	r3, #2
 8003ad2:	e7c7      	b.n	8003a64 <_printf_common+0x58>
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	4622      	mov	r2, r4
 8003ad8:	4649      	mov	r1, r9
 8003ada:	4638      	mov	r0, r7
 8003adc:	47c0      	blx	r8
 8003ade:	3001      	adds	r0, #1
 8003ae0:	d0e6      	beq.n	8003ab0 <_printf_common+0xa4>
 8003ae2:	3601      	adds	r6, #1
 8003ae4:	e7d9      	b.n	8003a9a <_printf_common+0x8e>
	...

08003ae8 <_printf_i>:
 8003ae8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003aec:	460c      	mov	r4, r1
 8003aee:	4691      	mov	r9, r2
 8003af0:	7e27      	ldrb	r7, [r4, #24]
 8003af2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003af4:	2f78      	cmp	r7, #120	; 0x78
 8003af6:	4680      	mov	r8, r0
 8003af8:	469a      	mov	sl, r3
 8003afa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003afe:	d807      	bhi.n	8003b10 <_printf_i+0x28>
 8003b00:	2f62      	cmp	r7, #98	; 0x62
 8003b02:	d80a      	bhi.n	8003b1a <_printf_i+0x32>
 8003b04:	2f00      	cmp	r7, #0
 8003b06:	f000 80d8 	beq.w	8003cba <_printf_i+0x1d2>
 8003b0a:	2f58      	cmp	r7, #88	; 0x58
 8003b0c:	f000 80a3 	beq.w	8003c56 <_printf_i+0x16e>
 8003b10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003b14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b18:	e03a      	b.n	8003b90 <_printf_i+0xa8>
 8003b1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b1e:	2b15      	cmp	r3, #21
 8003b20:	d8f6      	bhi.n	8003b10 <_printf_i+0x28>
 8003b22:	a001      	add	r0, pc, #4	; (adr r0, 8003b28 <_printf_i+0x40>)
 8003b24:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003b28:	08003b81 	.word	0x08003b81
 8003b2c:	08003b95 	.word	0x08003b95
 8003b30:	08003b11 	.word	0x08003b11
 8003b34:	08003b11 	.word	0x08003b11
 8003b38:	08003b11 	.word	0x08003b11
 8003b3c:	08003b11 	.word	0x08003b11
 8003b40:	08003b95 	.word	0x08003b95
 8003b44:	08003b11 	.word	0x08003b11
 8003b48:	08003b11 	.word	0x08003b11
 8003b4c:	08003b11 	.word	0x08003b11
 8003b50:	08003b11 	.word	0x08003b11
 8003b54:	08003ca1 	.word	0x08003ca1
 8003b58:	08003bc5 	.word	0x08003bc5
 8003b5c:	08003c83 	.word	0x08003c83
 8003b60:	08003b11 	.word	0x08003b11
 8003b64:	08003b11 	.word	0x08003b11
 8003b68:	08003cc3 	.word	0x08003cc3
 8003b6c:	08003b11 	.word	0x08003b11
 8003b70:	08003bc5 	.word	0x08003bc5
 8003b74:	08003b11 	.word	0x08003b11
 8003b78:	08003b11 	.word	0x08003b11
 8003b7c:	08003c8b 	.word	0x08003c8b
 8003b80:	680b      	ldr	r3, [r1, #0]
 8003b82:	1d1a      	adds	r2, r3, #4
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	600a      	str	r2, [r1, #0]
 8003b88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003b8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b90:	2301      	movs	r3, #1
 8003b92:	e0a3      	b.n	8003cdc <_printf_i+0x1f4>
 8003b94:	6825      	ldr	r5, [r4, #0]
 8003b96:	6808      	ldr	r0, [r1, #0]
 8003b98:	062e      	lsls	r6, r5, #24
 8003b9a:	f100 0304 	add.w	r3, r0, #4
 8003b9e:	d50a      	bpl.n	8003bb6 <_printf_i+0xce>
 8003ba0:	6805      	ldr	r5, [r0, #0]
 8003ba2:	600b      	str	r3, [r1, #0]
 8003ba4:	2d00      	cmp	r5, #0
 8003ba6:	da03      	bge.n	8003bb0 <_printf_i+0xc8>
 8003ba8:	232d      	movs	r3, #45	; 0x2d
 8003baa:	426d      	negs	r5, r5
 8003bac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bb0:	485e      	ldr	r0, [pc, #376]	; (8003d2c <_printf_i+0x244>)
 8003bb2:	230a      	movs	r3, #10
 8003bb4:	e019      	b.n	8003bea <_printf_i+0x102>
 8003bb6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003bba:	6805      	ldr	r5, [r0, #0]
 8003bbc:	600b      	str	r3, [r1, #0]
 8003bbe:	bf18      	it	ne
 8003bc0:	b22d      	sxthne	r5, r5
 8003bc2:	e7ef      	b.n	8003ba4 <_printf_i+0xbc>
 8003bc4:	680b      	ldr	r3, [r1, #0]
 8003bc6:	6825      	ldr	r5, [r4, #0]
 8003bc8:	1d18      	adds	r0, r3, #4
 8003bca:	6008      	str	r0, [r1, #0]
 8003bcc:	0628      	lsls	r0, r5, #24
 8003bce:	d501      	bpl.n	8003bd4 <_printf_i+0xec>
 8003bd0:	681d      	ldr	r5, [r3, #0]
 8003bd2:	e002      	b.n	8003bda <_printf_i+0xf2>
 8003bd4:	0669      	lsls	r1, r5, #25
 8003bd6:	d5fb      	bpl.n	8003bd0 <_printf_i+0xe8>
 8003bd8:	881d      	ldrh	r5, [r3, #0]
 8003bda:	4854      	ldr	r0, [pc, #336]	; (8003d2c <_printf_i+0x244>)
 8003bdc:	2f6f      	cmp	r7, #111	; 0x6f
 8003bde:	bf0c      	ite	eq
 8003be0:	2308      	moveq	r3, #8
 8003be2:	230a      	movne	r3, #10
 8003be4:	2100      	movs	r1, #0
 8003be6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003bea:	6866      	ldr	r6, [r4, #4]
 8003bec:	60a6      	str	r6, [r4, #8]
 8003bee:	2e00      	cmp	r6, #0
 8003bf0:	bfa2      	ittt	ge
 8003bf2:	6821      	ldrge	r1, [r4, #0]
 8003bf4:	f021 0104 	bicge.w	r1, r1, #4
 8003bf8:	6021      	strge	r1, [r4, #0]
 8003bfa:	b90d      	cbnz	r5, 8003c00 <_printf_i+0x118>
 8003bfc:	2e00      	cmp	r6, #0
 8003bfe:	d04d      	beq.n	8003c9c <_printf_i+0x1b4>
 8003c00:	4616      	mov	r6, r2
 8003c02:	fbb5 f1f3 	udiv	r1, r5, r3
 8003c06:	fb03 5711 	mls	r7, r3, r1, r5
 8003c0a:	5dc7      	ldrb	r7, [r0, r7]
 8003c0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003c10:	462f      	mov	r7, r5
 8003c12:	42bb      	cmp	r3, r7
 8003c14:	460d      	mov	r5, r1
 8003c16:	d9f4      	bls.n	8003c02 <_printf_i+0x11a>
 8003c18:	2b08      	cmp	r3, #8
 8003c1a:	d10b      	bne.n	8003c34 <_printf_i+0x14c>
 8003c1c:	6823      	ldr	r3, [r4, #0]
 8003c1e:	07df      	lsls	r7, r3, #31
 8003c20:	d508      	bpl.n	8003c34 <_printf_i+0x14c>
 8003c22:	6923      	ldr	r3, [r4, #16]
 8003c24:	6861      	ldr	r1, [r4, #4]
 8003c26:	4299      	cmp	r1, r3
 8003c28:	bfde      	ittt	le
 8003c2a:	2330      	movle	r3, #48	; 0x30
 8003c2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003c30:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003c34:	1b92      	subs	r2, r2, r6
 8003c36:	6122      	str	r2, [r4, #16]
 8003c38:	f8cd a000 	str.w	sl, [sp]
 8003c3c:	464b      	mov	r3, r9
 8003c3e:	aa03      	add	r2, sp, #12
 8003c40:	4621      	mov	r1, r4
 8003c42:	4640      	mov	r0, r8
 8003c44:	f7ff fee2 	bl	8003a0c <_printf_common>
 8003c48:	3001      	adds	r0, #1
 8003c4a:	d14c      	bne.n	8003ce6 <_printf_i+0x1fe>
 8003c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c50:	b004      	add	sp, #16
 8003c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c56:	4835      	ldr	r0, [pc, #212]	; (8003d2c <_printf_i+0x244>)
 8003c58:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003c5c:	6823      	ldr	r3, [r4, #0]
 8003c5e:	680e      	ldr	r6, [r1, #0]
 8003c60:	061f      	lsls	r7, r3, #24
 8003c62:	f856 5b04 	ldr.w	r5, [r6], #4
 8003c66:	600e      	str	r6, [r1, #0]
 8003c68:	d514      	bpl.n	8003c94 <_printf_i+0x1ac>
 8003c6a:	07d9      	lsls	r1, r3, #31
 8003c6c:	bf44      	itt	mi
 8003c6e:	f043 0320 	orrmi.w	r3, r3, #32
 8003c72:	6023      	strmi	r3, [r4, #0]
 8003c74:	b91d      	cbnz	r5, 8003c7e <_printf_i+0x196>
 8003c76:	6823      	ldr	r3, [r4, #0]
 8003c78:	f023 0320 	bic.w	r3, r3, #32
 8003c7c:	6023      	str	r3, [r4, #0]
 8003c7e:	2310      	movs	r3, #16
 8003c80:	e7b0      	b.n	8003be4 <_printf_i+0xfc>
 8003c82:	6823      	ldr	r3, [r4, #0]
 8003c84:	f043 0320 	orr.w	r3, r3, #32
 8003c88:	6023      	str	r3, [r4, #0]
 8003c8a:	2378      	movs	r3, #120	; 0x78
 8003c8c:	4828      	ldr	r0, [pc, #160]	; (8003d30 <_printf_i+0x248>)
 8003c8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c92:	e7e3      	b.n	8003c5c <_printf_i+0x174>
 8003c94:	065e      	lsls	r6, r3, #25
 8003c96:	bf48      	it	mi
 8003c98:	b2ad      	uxthmi	r5, r5
 8003c9a:	e7e6      	b.n	8003c6a <_printf_i+0x182>
 8003c9c:	4616      	mov	r6, r2
 8003c9e:	e7bb      	b.n	8003c18 <_printf_i+0x130>
 8003ca0:	680b      	ldr	r3, [r1, #0]
 8003ca2:	6826      	ldr	r6, [r4, #0]
 8003ca4:	6960      	ldr	r0, [r4, #20]
 8003ca6:	1d1d      	adds	r5, r3, #4
 8003ca8:	600d      	str	r5, [r1, #0]
 8003caa:	0635      	lsls	r5, r6, #24
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	d501      	bpl.n	8003cb4 <_printf_i+0x1cc>
 8003cb0:	6018      	str	r0, [r3, #0]
 8003cb2:	e002      	b.n	8003cba <_printf_i+0x1d2>
 8003cb4:	0671      	lsls	r1, r6, #25
 8003cb6:	d5fb      	bpl.n	8003cb0 <_printf_i+0x1c8>
 8003cb8:	8018      	strh	r0, [r3, #0]
 8003cba:	2300      	movs	r3, #0
 8003cbc:	6123      	str	r3, [r4, #16]
 8003cbe:	4616      	mov	r6, r2
 8003cc0:	e7ba      	b.n	8003c38 <_printf_i+0x150>
 8003cc2:	680b      	ldr	r3, [r1, #0]
 8003cc4:	1d1a      	adds	r2, r3, #4
 8003cc6:	600a      	str	r2, [r1, #0]
 8003cc8:	681e      	ldr	r6, [r3, #0]
 8003cca:	6862      	ldr	r2, [r4, #4]
 8003ccc:	2100      	movs	r1, #0
 8003cce:	4630      	mov	r0, r6
 8003cd0:	f7fc fa7e 	bl	80001d0 <memchr>
 8003cd4:	b108      	cbz	r0, 8003cda <_printf_i+0x1f2>
 8003cd6:	1b80      	subs	r0, r0, r6
 8003cd8:	6060      	str	r0, [r4, #4]
 8003cda:	6863      	ldr	r3, [r4, #4]
 8003cdc:	6123      	str	r3, [r4, #16]
 8003cde:	2300      	movs	r3, #0
 8003ce0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ce4:	e7a8      	b.n	8003c38 <_printf_i+0x150>
 8003ce6:	6923      	ldr	r3, [r4, #16]
 8003ce8:	4632      	mov	r2, r6
 8003cea:	4649      	mov	r1, r9
 8003cec:	4640      	mov	r0, r8
 8003cee:	47d0      	blx	sl
 8003cf0:	3001      	adds	r0, #1
 8003cf2:	d0ab      	beq.n	8003c4c <_printf_i+0x164>
 8003cf4:	6823      	ldr	r3, [r4, #0]
 8003cf6:	079b      	lsls	r3, r3, #30
 8003cf8:	d413      	bmi.n	8003d22 <_printf_i+0x23a>
 8003cfa:	68e0      	ldr	r0, [r4, #12]
 8003cfc:	9b03      	ldr	r3, [sp, #12]
 8003cfe:	4298      	cmp	r0, r3
 8003d00:	bfb8      	it	lt
 8003d02:	4618      	movlt	r0, r3
 8003d04:	e7a4      	b.n	8003c50 <_printf_i+0x168>
 8003d06:	2301      	movs	r3, #1
 8003d08:	4632      	mov	r2, r6
 8003d0a:	4649      	mov	r1, r9
 8003d0c:	4640      	mov	r0, r8
 8003d0e:	47d0      	blx	sl
 8003d10:	3001      	adds	r0, #1
 8003d12:	d09b      	beq.n	8003c4c <_printf_i+0x164>
 8003d14:	3501      	adds	r5, #1
 8003d16:	68e3      	ldr	r3, [r4, #12]
 8003d18:	9903      	ldr	r1, [sp, #12]
 8003d1a:	1a5b      	subs	r3, r3, r1
 8003d1c:	42ab      	cmp	r3, r5
 8003d1e:	dcf2      	bgt.n	8003d06 <_printf_i+0x21e>
 8003d20:	e7eb      	b.n	8003cfa <_printf_i+0x212>
 8003d22:	2500      	movs	r5, #0
 8003d24:	f104 0619 	add.w	r6, r4, #25
 8003d28:	e7f5      	b.n	8003d16 <_printf_i+0x22e>
 8003d2a:	bf00      	nop
 8003d2c:	0800443d 	.word	0x0800443d
 8003d30:	0800444e 	.word	0x0800444e

08003d34 <_sbrk_r>:
 8003d34:	b538      	push	{r3, r4, r5, lr}
 8003d36:	4d06      	ldr	r5, [pc, #24]	; (8003d50 <_sbrk_r+0x1c>)
 8003d38:	2300      	movs	r3, #0
 8003d3a:	4604      	mov	r4, r0
 8003d3c:	4608      	mov	r0, r1
 8003d3e:	602b      	str	r3, [r5, #0]
 8003d40:	f7fc fe88 	bl	8000a54 <_sbrk>
 8003d44:	1c43      	adds	r3, r0, #1
 8003d46:	d102      	bne.n	8003d4e <_sbrk_r+0x1a>
 8003d48:	682b      	ldr	r3, [r5, #0]
 8003d4a:	b103      	cbz	r3, 8003d4e <_sbrk_r+0x1a>
 8003d4c:	6023      	str	r3, [r4, #0]
 8003d4e:	bd38      	pop	{r3, r4, r5, pc}
 8003d50:	20000130 	.word	0x20000130

08003d54 <__sread>:
 8003d54:	b510      	push	{r4, lr}
 8003d56:	460c      	mov	r4, r1
 8003d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d5c:	f000 fab4 	bl	80042c8 <_read_r>
 8003d60:	2800      	cmp	r0, #0
 8003d62:	bfab      	itete	ge
 8003d64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003d66:	89a3      	ldrhlt	r3, [r4, #12]
 8003d68:	181b      	addge	r3, r3, r0
 8003d6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003d6e:	bfac      	ite	ge
 8003d70:	6563      	strge	r3, [r4, #84]	; 0x54
 8003d72:	81a3      	strhlt	r3, [r4, #12]
 8003d74:	bd10      	pop	{r4, pc}

08003d76 <__swrite>:
 8003d76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d7a:	461f      	mov	r7, r3
 8003d7c:	898b      	ldrh	r3, [r1, #12]
 8003d7e:	05db      	lsls	r3, r3, #23
 8003d80:	4605      	mov	r5, r0
 8003d82:	460c      	mov	r4, r1
 8003d84:	4616      	mov	r6, r2
 8003d86:	d505      	bpl.n	8003d94 <__swrite+0x1e>
 8003d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f000 f9c8 	bl	8004124 <_lseek_r>
 8003d94:	89a3      	ldrh	r3, [r4, #12]
 8003d96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d9e:	81a3      	strh	r3, [r4, #12]
 8003da0:	4632      	mov	r2, r6
 8003da2:	463b      	mov	r3, r7
 8003da4:	4628      	mov	r0, r5
 8003da6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003daa:	f000 b869 	b.w	8003e80 <_write_r>

08003dae <__sseek>:
 8003dae:	b510      	push	{r4, lr}
 8003db0:	460c      	mov	r4, r1
 8003db2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003db6:	f000 f9b5 	bl	8004124 <_lseek_r>
 8003dba:	1c43      	adds	r3, r0, #1
 8003dbc:	89a3      	ldrh	r3, [r4, #12]
 8003dbe:	bf15      	itete	ne
 8003dc0:	6560      	strne	r0, [r4, #84]	; 0x54
 8003dc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003dc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003dca:	81a3      	strheq	r3, [r4, #12]
 8003dcc:	bf18      	it	ne
 8003dce:	81a3      	strhne	r3, [r4, #12]
 8003dd0:	bd10      	pop	{r4, pc}

08003dd2 <__sclose>:
 8003dd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dd6:	f000 b8d3 	b.w	8003f80 <_close_r>
	...

08003ddc <__swbuf_r>:
 8003ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dde:	460e      	mov	r6, r1
 8003de0:	4614      	mov	r4, r2
 8003de2:	4605      	mov	r5, r0
 8003de4:	b118      	cbz	r0, 8003dee <__swbuf_r+0x12>
 8003de6:	6983      	ldr	r3, [r0, #24]
 8003de8:	b90b      	cbnz	r3, 8003dee <__swbuf_r+0x12>
 8003dea:	f7ff fbbb 	bl	8003564 <__sinit>
 8003dee:	4b21      	ldr	r3, [pc, #132]	; (8003e74 <__swbuf_r+0x98>)
 8003df0:	429c      	cmp	r4, r3
 8003df2:	d12b      	bne.n	8003e4c <__swbuf_r+0x70>
 8003df4:	686c      	ldr	r4, [r5, #4]
 8003df6:	69a3      	ldr	r3, [r4, #24]
 8003df8:	60a3      	str	r3, [r4, #8]
 8003dfa:	89a3      	ldrh	r3, [r4, #12]
 8003dfc:	071a      	lsls	r2, r3, #28
 8003dfe:	d52f      	bpl.n	8003e60 <__swbuf_r+0x84>
 8003e00:	6923      	ldr	r3, [r4, #16]
 8003e02:	b36b      	cbz	r3, 8003e60 <__swbuf_r+0x84>
 8003e04:	6923      	ldr	r3, [r4, #16]
 8003e06:	6820      	ldr	r0, [r4, #0]
 8003e08:	1ac0      	subs	r0, r0, r3
 8003e0a:	6963      	ldr	r3, [r4, #20]
 8003e0c:	b2f6      	uxtb	r6, r6
 8003e0e:	4283      	cmp	r3, r0
 8003e10:	4637      	mov	r7, r6
 8003e12:	dc04      	bgt.n	8003e1e <__swbuf_r+0x42>
 8003e14:	4621      	mov	r1, r4
 8003e16:	4628      	mov	r0, r5
 8003e18:	f000 f948 	bl	80040ac <_fflush_r>
 8003e1c:	bb30      	cbnz	r0, 8003e6c <__swbuf_r+0x90>
 8003e1e:	68a3      	ldr	r3, [r4, #8]
 8003e20:	3b01      	subs	r3, #1
 8003e22:	60a3      	str	r3, [r4, #8]
 8003e24:	6823      	ldr	r3, [r4, #0]
 8003e26:	1c5a      	adds	r2, r3, #1
 8003e28:	6022      	str	r2, [r4, #0]
 8003e2a:	701e      	strb	r6, [r3, #0]
 8003e2c:	6963      	ldr	r3, [r4, #20]
 8003e2e:	3001      	adds	r0, #1
 8003e30:	4283      	cmp	r3, r0
 8003e32:	d004      	beq.n	8003e3e <__swbuf_r+0x62>
 8003e34:	89a3      	ldrh	r3, [r4, #12]
 8003e36:	07db      	lsls	r3, r3, #31
 8003e38:	d506      	bpl.n	8003e48 <__swbuf_r+0x6c>
 8003e3a:	2e0a      	cmp	r6, #10
 8003e3c:	d104      	bne.n	8003e48 <__swbuf_r+0x6c>
 8003e3e:	4621      	mov	r1, r4
 8003e40:	4628      	mov	r0, r5
 8003e42:	f000 f933 	bl	80040ac <_fflush_r>
 8003e46:	b988      	cbnz	r0, 8003e6c <__swbuf_r+0x90>
 8003e48:	4638      	mov	r0, r7
 8003e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e4c:	4b0a      	ldr	r3, [pc, #40]	; (8003e78 <__swbuf_r+0x9c>)
 8003e4e:	429c      	cmp	r4, r3
 8003e50:	d101      	bne.n	8003e56 <__swbuf_r+0x7a>
 8003e52:	68ac      	ldr	r4, [r5, #8]
 8003e54:	e7cf      	b.n	8003df6 <__swbuf_r+0x1a>
 8003e56:	4b09      	ldr	r3, [pc, #36]	; (8003e7c <__swbuf_r+0xa0>)
 8003e58:	429c      	cmp	r4, r3
 8003e5a:	bf08      	it	eq
 8003e5c:	68ec      	ldreq	r4, [r5, #12]
 8003e5e:	e7ca      	b.n	8003df6 <__swbuf_r+0x1a>
 8003e60:	4621      	mov	r1, r4
 8003e62:	4628      	mov	r0, r5
 8003e64:	f000 f81e 	bl	8003ea4 <__swsetup_r>
 8003e68:	2800      	cmp	r0, #0
 8003e6a:	d0cb      	beq.n	8003e04 <__swbuf_r+0x28>
 8003e6c:	f04f 37ff 	mov.w	r7, #4294967295
 8003e70:	e7ea      	b.n	8003e48 <__swbuf_r+0x6c>
 8003e72:	bf00      	nop
 8003e74:	080043ec 	.word	0x080043ec
 8003e78:	0800440c 	.word	0x0800440c
 8003e7c:	080043cc 	.word	0x080043cc

08003e80 <_write_r>:
 8003e80:	b538      	push	{r3, r4, r5, lr}
 8003e82:	4d07      	ldr	r5, [pc, #28]	; (8003ea0 <_write_r+0x20>)
 8003e84:	4604      	mov	r4, r0
 8003e86:	4608      	mov	r0, r1
 8003e88:	4611      	mov	r1, r2
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	602a      	str	r2, [r5, #0]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	f7fc fd8f 	bl	80009b2 <_write>
 8003e94:	1c43      	adds	r3, r0, #1
 8003e96:	d102      	bne.n	8003e9e <_write_r+0x1e>
 8003e98:	682b      	ldr	r3, [r5, #0]
 8003e9a:	b103      	cbz	r3, 8003e9e <_write_r+0x1e>
 8003e9c:	6023      	str	r3, [r4, #0]
 8003e9e:	bd38      	pop	{r3, r4, r5, pc}
 8003ea0:	20000130 	.word	0x20000130

08003ea4 <__swsetup_r>:
 8003ea4:	4b32      	ldr	r3, [pc, #200]	; (8003f70 <__swsetup_r+0xcc>)
 8003ea6:	b570      	push	{r4, r5, r6, lr}
 8003ea8:	681d      	ldr	r5, [r3, #0]
 8003eaa:	4606      	mov	r6, r0
 8003eac:	460c      	mov	r4, r1
 8003eae:	b125      	cbz	r5, 8003eba <__swsetup_r+0x16>
 8003eb0:	69ab      	ldr	r3, [r5, #24]
 8003eb2:	b913      	cbnz	r3, 8003eba <__swsetup_r+0x16>
 8003eb4:	4628      	mov	r0, r5
 8003eb6:	f7ff fb55 	bl	8003564 <__sinit>
 8003eba:	4b2e      	ldr	r3, [pc, #184]	; (8003f74 <__swsetup_r+0xd0>)
 8003ebc:	429c      	cmp	r4, r3
 8003ebe:	d10f      	bne.n	8003ee0 <__swsetup_r+0x3c>
 8003ec0:	686c      	ldr	r4, [r5, #4]
 8003ec2:	89a3      	ldrh	r3, [r4, #12]
 8003ec4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ec8:	0719      	lsls	r1, r3, #28
 8003eca:	d42c      	bmi.n	8003f26 <__swsetup_r+0x82>
 8003ecc:	06dd      	lsls	r5, r3, #27
 8003ece:	d411      	bmi.n	8003ef4 <__swsetup_r+0x50>
 8003ed0:	2309      	movs	r3, #9
 8003ed2:	6033      	str	r3, [r6, #0]
 8003ed4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003ed8:	81a3      	strh	r3, [r4, #12]
 8003eda:	f04f 30ff 	mov.w	r0, #4294967295
 8003ede:	e03e      	b.n	8003f5e <__swsetup_r+0xba>
 8003ee0:	4b25      	ldr	r3, [pc, #148]	; (8003f78 <__swsetup_r+0xd4>)
 8003ee2:	429c      	cmp	r4, r3
 8003ee4:	d101      	bne.n	8003eea <__swsetup_r+0x46>
 8003ee6:	68ac      	ldr	r4, [r5, #8]
 8003ee8:	e7eb      	b.n	8003ec2 <__swsetup_r+0x1e>
 8003eea:	4b24      	ldr	r3, [pc, #144]	; (8003f7c <__swsetup_r+0xd8>)
 8003eec:	429c      	cmp	r4, r3
 8003eee:	bf08      	it	eq
 8003ef0:	68ec      	ldreq	r4, [r5, #12]
 8003ef2:	e7e6      	b.n	8003ec2 <__swsetup_r+0x1e>
 8003ef4:	0758      	lsls	r0, r3, #29
 8003ef6:	d512      	bpl.n	8003f1e <__swsetup_r+0x7a>
 8003ef8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003efa:	b141      	cbz	r1, 8003f0e <__swsetup_r+0x6a>
 8003efc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f00:	4299      	cmp	r1, r3
 8003f02:	d002      	beq.n	8003f0a <__swsetup_r+0x66>
 8003f04:	4630      	mov	r0, r6
 8003f06:	f000 f98f 	bl	8004228 <_free_r>
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	6363      	str	r3, [r4, #52]	; 0x34
 8003f0e:	89a3      	ldrh	r3, [r4, #12]
 8003f10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003f14:	81a3      	strh	r3, [r4, #12]
 8003f16:	2300      	movs	r3, #0
 8003f18:	6063      	str	r3, [r4, #4]
 8003f1a:	6923      	ldr	r3, [r4, #16]
 8003f1c:	6023      	str	r3, [r4, #0]
 8003f1e:	89a3      	ldrh	r3, [r4, #12]
 8003f20:	f043 0308 	orr.w	r3, r3, #8
 8003f24:	81a3      	strh	r3, [r4, #12]
 8003f26:	6923      	ldr	r3, [r4, #16]
 8003f28:	b94b      	cbnz	r3, 8003f3e <__swsetup_r+0x9a>
 8003f2a:	89a3      	ldrh	r3, [r4, #12]
 8003f2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003f30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f34:	d003      	beq.n	8003f3e <__swsetup_r+0x9a>
 8003f36:	4621      	mov	r1, r4
 8003f38:	4630      	mov	r0, r6
 8003f3a:	f000 f929 	bl	8004190 <__smakebuf_r>
 8003f3e:	89a0      	ldrh	r0, [r4, #12]
 8003f40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f44:	f010 0301 	ands.w	r3, r0, #1
 8003f48:	d00a      	beq.n	8003f60 <__swsetup_r+0xbc>
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60a3      	str	r3, [r4, #8]
 8003f4e:	6963      	ldr	r3, [r4, #20]
 8003f50:	425b      	negs	r3, r3
 8003f52:	61a3      	str	r3, [r4, #24]
 8003f54:	6923      	ldr	r3, [r4, #16]
 8003f56:	b943      	cbnz	r3, 8003f6a <__swsetup_r+0xc6>
 8003f58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003f5c:	d1ba      	bne.n	8003ed4 <__swsetup_r+0x30>
 8003f5e:	bd70      	pop	{r4, r5, r6, pc}
 8003f60:	0781      	lsls	r1, r0, #30
 8003f62:	bf58      	it	pl
 8003f64:	6963      	ldrpl	r3, [r4, #20]
 8003f66:	60a3      	str	r3, [r4, #8]
 8003f68:	e7f4      	b.n	8003f54 <__swsetup_r+0xb0>
 8003f6a:	2000      	movs	r0, #0
 8003f6c:	e7f7      	b.n	8003f5e <__swsetup_r+0xba>
 8003f6e:	bf00      	nop
 8003f70:	2000000c 	.word	0x2000000c
 8003f74:	080043ec 	.word	0x080043ec
 8003f78:	0800440c 	.word	0x0800440c
 8003f7c:	080043cc 	.word	0x080043cc

08003f80 <_close_r>:
 8003f80:	b538      	push	{r3, r4, r5, lr}
 8003f82:	4d06      	ldr	r5, [pc, #24]	; (8003f9c <_close_r+0x1c>)
 8003f84:	2300      	movs	r3, #0
 8003f86:	4604      	mov	r4, r0
 8003f88:	4608      	mov	r0, r1
 8003f8a:	602b      	str	r3, [r5, #0]
 8003f8c:	f7fc fd2d 	bl	80009ea <_close>
 8003f90:	1c43      	adds	r3, r0, #1
 8003f92:	d102      	bne.n	8003f9a <_close_r+0x1a>
 8003f94:	682b      	ldr	r3, [r5, #0]
 8003f96:	b103      	cbz	r3, 8003f9a <_close_r+0x1a>
 8003f98:	6023      	str	r3, [r4, #0]
 8003f9a:	bd38      	pop	{r3, r4, r5, pc}
 8003f9c:	20000130 	.word	0x20000130

08003fa0 <__sflush_r>:
 8003fa0:	898a      	ldrh	r2, [r1, #12]
 8003fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fa6:	4605      	mov	r5, r0
 8003fa8:	0710      	lsls	r0, r2, #28
 8003faa:	460c      	mov	r4, r1
 8003fac:	d458      	bmi.n	8004060 <__sflush_r+0xc0>
 8003fae:	684b      	ldr	r3, [r1, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	dc05      	bgt.n	8003fc0 <__sflush_r+0x20>
 8003fb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	dc02      	bgt.n	8003fc0 <__sflush_r+0x20>
 8003fba:	2000      	movs	r0, #0
 8003fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003fc2:	2e00      	cmp	r6, #0
 8003fc4:	d0f9      	beq.n	8003fba <__sflush_r+0x1a>
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003fcc:	682f      	ldr	r7, [r5, #0]
 8003fce:	602b      	str	r3, [r5, #0]
 8003fd0:	d032      	beq.n	8004038 <__sflush_r+0x98>
 8003fd2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003fd4:	89a3      	ldrh	r3, [r4, #12]
 8003fd6:	075a      	lsls	r2, r3, #29
 8003fd8:	d505      	bpl.n	8003fe6 <__sflush_r+0x46>
 8003fda:	6863      	ldr	r3, [r4, #4]
 8003fdc:	1ac0      	subs	r0, r0, r3
 8003fde:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003fe0:	b10b      	cbz	r3, 8003fe6 <__sflush_r+0x46>
 8003fe2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003fe4:	1ac0      	subs	r0, r0, r3
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	4602      	mov	r2, r0
 8003fea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003fec:	6a21      	ldr	r1, [r4, #32]
 8003fee:	4628      	mov	r0, r5
 8003ff0:	47b0      	blx	r6
 8003ff2:	1c43      	adds	r3, r0, #1
 8003ff4:	89a3      	ldrh	r3, [r4, #12]
 8003ff6:	d106      	bne.n	8004006 <__sflush_r+0x66>
 8003ff8:	6829      	ldr	r1, [r5, #0]
 8003ffa:	291d      	cmp	r1, #29
 8003ffc:	d82c      	bhi.n	8004058 <__sflush_r+0xb8>
 8003ffe:	4a2a      	ldr	r2, [pc, #168]	; (80040a8 <__sflush_r+0x108>)
 8004000:	40ca      	lsrs	r2, r1
 8004002:	07d6      	lsls	r6, r2, #31
 8004004:	d528      	bpl.n	8004058 <__sflush_r+0xb8>
 8004006:	2200      	movs	r2, #0
 8004008:	6062      	str	r2, [r4, #4]
 800400a:	04d9      	lsls	r1, r3, #19
 800400c:	6922      	ldr	r2, [r4, #16]
 800400e:	6022      	str	r2, [r4, #0]
 8004010:	d504      	bpl.n	800401c <__sflush_r+0x7c>
 8004012:	1c42      	adds	r2, r0, #1
 8004014:	d101      	bne.n	800401a <__sflush_r+0x7a>
 8004016:	682b      	ldr	r3, [r5, #0]
 8004018:	b903      	cbnz	r3, 800401c <__sflush_r+0x7c>
 800401a:	6560      	str	r0, [r4, #84]	; 0x54
 800401c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800401e:	602f      	str	r7, [r5, #0]
 8004020:	2900      	cmp	r1, #0
 8004022:	d0ca      	beq.n	8003fba <__sflush_r+0x1a>
 8004024:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004028:	4299      	cmp	r1, r3
 800402a:	d002      	beq.n	8004032 <__sflush_r+0x92>
 800402c:	4628      	mov	r0, r5
 800402e:	f000 f8fb 	bl	8004228 <_free_r>
 8004032:	2000      	movs	r0, #0
 8004034:	6360      	str	r0, [r4, #52]	; 0x34
 8004036:	e7c1      	b.n	8003fbc <__sflush_r+0x1c>
 8004038:	6a21      	ldr	r1, [r4, #32]
 800403a:	2301      	movs	r3, #1
 800403c:	4628      	mov	r0, r5
 800403e:	47b0      	blx	r6
 8004040:	1c41      	adds	r1, r0, #1
 8004042:	d1c7      	bne.n	8003fd4 <__sflush_r+0x34>
 8004044:	682b      	ldr	r3, [r5, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0c4      	beq.n	8003fd4 <__sflush_r+0x34>
 800404a:	2b1d      	cmp	r3, #29
 800404c:	d001      	beq.n	8004052 <__sflush_r+0xb2>
 800404e:	2b16      	cmp	r3, #22
 8004050:	d101      	bne.n	8004056 <__sflush_r+0xb6>
 8004052:	602f      	str	r7, [r5, #0]
 8004054:	e7b1      	b.n	8003fba <__sflush_r+0x1a>
 8004056:	89a3      	ldrh	r3, [r4, #12]
 8004058:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800405c:	81a3      	strh	r3, [r4, #12]
 800405e:	e7ad      	b.n	8003fbc <__sflush_r+0x1c>
 8004060:	690f      	ldr	r7, [r1, #16]
 8004062:	2f00      	cmp	r7, #0
 8004064:	d0a9      	beq.n	8003fba <__sflush_r+0x1a>
 8004066:	0793      	lsls	r3, r2, #30
 8004068:	680e      	ldr	r6, [r1, #0]
 800406a:	bf08      	it	eq
 800406c:	694b      	ldreq	r3, [r1, #20]
 800406e:	600f      	str	r7, [r1, #0]
 8004070:	bf18      	it	ne
 8004072:	2300      	movne	r3, #0
 8004074:	eba6 0807 	sub.w	r8, r6, r7
 8004078:	608b      	str	r3, [r1, #8]
 800407a:	f1b8 0f00 	cmp.w	r8, #0
 800407e:	dd9c      	ble.n	8003fba <__sflush_r+0x1a>
 8004080:	6a21      	ldr	r1, [r4, #32]
 8004082:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004084:	4643      	mov	r3, r8
 8004086:	463a      	mov	r2, r7
 8004088:	4628      	mov	r0, r5
 800408a:	47b0      	blx	r6
 800408c:	2800      	cmp	r0, #0
 800408e:	dc06      	bgt.n	800409e <__sflush_r+0xfe>
 8004090:	89a3      	ldrh	r3, [r4, #12]
 8004092:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004096:	81a3      	strh	r3, [r4, #12]
 8004098:	f04f 30ff 	mov.w	r0, #4294967295
 800409c:	e78e      	b.n	8003fbc <__sflush_r+0x1c>
 800409e:	4407      	add	r7, r0
 80040a0:	eba8 0800 	sub.w	r8, r8, r0
 80040a4:	e7e9      	b.n	800407a <__sflush_r+0xda>
 80040a6:	bf00      	nop
 80040a8:	20400001 	.word	0x20400001

080040ac <_fflush_r>:
 80040ac:	b538      	push	{r3, r4, r5, lr}
 80040ae:	690b      	ldr	r3, [r1, #16]
 80040b0:	4605      	mov	r5, r0
 80040b2:	460c      	mov	r4, r1
 80040b4:	b913      	cbnz	r3, 80040bc <_fflush_r+0x10>
 80040b6:	2500      	movs	r5, #0
 80040b8:	4628      	mov	r0, r5
 80040ba:	bd38      	pop	{r3, r4, r5, pc}
 80040bc:	b118      	cbz	r0, 80040c6 <_fflush_r+0x1a>
 80040be:	6983      	ldr	r3, [r0, #24]
 80040c0:	b90b      	cbnz	r3, 80040c6 <_fflush_r+0x1a>
 80040c2:	f7ff fa4f 	bl	8003564 <__sinit>
 80040c6:	4b14      	ldr	r3, [pc, #80]	; (8004118 <_fflush_r+0x6c>)
 80040c8:	429c      	cmp	r4, r3
 80040ca:	d11b      	bne.n	8004104 <_fflush_r+0x58>
 80040cc:	686c      	ldr	r4, [r5, #4]
 80040ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d0ef      	beq.n	80040b6 <_fflush_r+0xa>
 80040d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80040d8:	07d0      	lsls	r0, r2, #31
 80040da:	d404      	bmi.n	80040e6 <_fflush_r+0x3a>
 80040dc:	0599      	lsls	r1, r3, #22
 80040de:	d402      	bmi.n	80040e6 <_fflush_r+0x3a>
 80040e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040e2:	f7ff fadd 	bl	80036a0 <__retarget_lock_acquire_recursive>
 80040e6:	4628      	mov	r0, r5
 80040e8:	4621      	mov	r1, r4
 80040ea:	f7ff ff59 	bl	8003fa0 <__sflush_r>
 80040ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040f0:	07da      	lsls	r2, r3, #31
 80040f2:	4605      	mov	r5, r0
 80040f4:	d4e0      	bmi.n	80040b8 <_fflush_r+0xc>
 80040f6:	89a3      	ldrh	r3, [r4, #12]
 80040f8:	059b      	lsls	r3, r3, #22
 80040fa:	d4dd      	bmi.n	80040b8 <_fflush_r+0xc>
 80040fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040fe:	f7ff fad0 	bl	80036a2 <__retarget_lock_release_recursive>
 8004102:	e7d9      	b.n	80040b8 <_fflush_r+0xc>
 8004104:	4b05      	ldr	r3, [pc, #20]	; (800411c <_fflush_r+0x70>)
 8004106:	429c      	cmp	r4, r3
 8004108:	d101      	bne.n	800410e <_fflush_r+0x62>
 800410a:	68ac      	ldr	r4, [r5, #8]
 800410c:	e7df      	b.n	80040ce <_fflush_r+0x22>
 800410e:	4b04      	ldr	r3, [pc, #16]	; (8004120 <_fflush_r+0x74>)
 8004110:	429c      	cmp	r4, r3
 8004112:	bf08      	it	eq
 8004114:	68ec      	ldreq	r4, [r5, #12]
 8004116:	e7da      	b.n	80040ce <_fflush_r+0x22>
 8004118:	080043ec 	.word	0x080043ec
 800411c:	0800440c 	.word	0x0800440c
 8004120:	080043cc 	.word	0x080043cc

08004124 <_lseek_r>:
 8004124:	b538      	push	{r3, r4, r5, lr}
 8004126:	4d07      	ldr	r5, [pc, #28]	; (8004144 <_lseek_r+0x20>)
 8004128:	4604      	mov	r4, r0
 800412a:	4608      	mov	r0, r1
 800412c:	4611      	mov	r1, r2
 800412e:	2200      	movs	r2, #0
 8004130:	602a      	str	r2, [r5, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	f7fc fc80 	bl	8000a38 <_lseek>
 8004138:	1c43      	adds	r3, r0, #1
 800413a:	d102      	bne.n	8004142 <_lseek_r+0x1e>
 800413c:	682b      	ldr	r3, [r5, #0]
 800413e:	b103      	cbz	r3, 8004142 <_lseek_r+0x1e>
 8004140:	6023      	str	r3, [r4, #0]
 8004142:	bd38      	pop	{r3, r4, r5, pc}
 8004144:	20000130 	.word	0x20000130

08004148 <__swhatbuf_r>:
 8004148:	b570      	push	{r4, r5, r6, lr}
 800414a:	460e      	mov	r6, r1
 800414c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004150:	2900      	cmp	r1, #0
 8004152:	b096      	sub	sp, #88	; 0x58
 8004154:	4614      	mov	r4, r2
 8004156:	461d      	mov	r5, r3
 8004158:	da07      	bge.n	800416a <__swhatbuf_r+0x22>
 800415a:	2300      	movs	r3, #0
 800415c:	602b      	str	r3, [r5, #0]
 800415e:	89b3      	ldrh	r3, [r6, #12]
 8004160:	061a      	lsls	r2, r3, #24
 8004162:	d410      	bmi.n	8004186 <__swhatbuf_r+0x3e>
 8004164:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004168:	e00e      	b.n	8004188 <__swhatbuf_r+0x40>
 800416a:	466a      	mov	r2, sp
 800416c:	f000 f8be 	bl	80042ec <_fstat_r>
 8004170:	2800      	cmp	r0, #0
 8004172:	dbf2      	blt.n	800415a <__swhatbuf_r+0x12>
 8004174:	9a01      	ldr	r2, [sp, #4]
 8004176:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800417a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800417e:	425a      	negs	r2, r3
 8004180:	415a      	adcs	r2, r3
 8004182:	602a      	str	r2, [r5, #0]
 8004184:	e7ee      	b.n	8004164 <__swhatbuf_r+0x1c>
 8004186:	2340      	movs	r3, #64	; 0x40
 8004188:	2000      	movs	r0, #0
 800418a:	6023      	str	r3, [r4, #0]
 800418c:	b016      	add	sp, #88	; 0x58
 800418e:	bd70      	pop	{r4, r5, r6, pc}

08004190 <__smakebuf_r>:
 8004190:	898b      	ldrh	r3, [r1, #12]
 8004192:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004194:	079d      	lsls	r5, r3, #30
 8004196:	4606      	mov	r6, r0
 8004198:	460c      	mov	r4, r1
 800419a:	d507      	bpl.n	80041ac <__smakebuf_r+0x1c>
 800419c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80041a0:	6023      	str	r3, [r4, #0]
 80041a2:	6123      	str	r3, [r4, #16]
 80041a4:	2301      	movs	r3, #1
 80041a6:	6163      	str	r3, [r4, #20]
 80041a8:	b002      	add	sp, #8
 80041aa:	bd70      	pop	{r4, r5, r6, pc}
 80041ac:	ab01      	add	r3, sp, #4
 80041ae:	466a      	mov	r2, sp
 80041b0:	f7ff ffca 	bl	8004148 <__swhatbuf_r>
 80041b4:	9900      	ldr	r1, [sp, #0]
 80041b6:	4605      	mov	r5, r0
 80041b8:	4630      	mov	r0, r6
 80041ba:	f7ff fa73 	bl	80036a4 <_malloc_r>
 80041be:	b948      	cbnz	r0, 80041d4 <__smakebuf_r+0x44>
 80041c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041c4:	059a      	lsls	r2, r3, #22
 80041c6:	d4ef      	bmi.n	80041a8 <__smakebuf_r+0x18>
 80041c8:	f023 0303 	bic.w	r3, r3, #3
 80041cc:	f043 0302 	orr.w	r3, r3, #2
 80041d0:	81a3      	strh	r3, [r4, #12]
 80041d2:	e7e3      	b.n	800419c <__smakebuf_r+0xc>
 80041d4:	4b0d      	ldr	r3, [pc, #52]	; (800420c <__smakebuf_r+0x7c>)
 80041d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80041d8:	89a3      	ldrh	r3, [r4, #12]
 80041da:	6020      	str	r0, [r4, #0]
 80041dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041e0:	81a3      	strh	r3, [r4, #12]
 80041e2:	9b00      	ldr	r3, [sp, #0]
 80041e4:	6163      	str	r3, [r4, #20]
 80041e6:	9b01      	ldr	r3, [sp, #4]
 80041e8:	6120      	str	r0, [r4, #16]
 80041ea:	b15b      	cbz	r3, 8004204 <__smakebuf_r+0x74>
 80041ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041f0:	4630      	mov	r0, r6
 80041f2:	f000 f88d 	bl	8004310 <_isatty_r>
 80041f6:	b128      	cbz	r0, 8004204 <__smakebuf_r+0x74>
 80041f8:	89a3      	ldrh	r3, [r4, #12]
 80041fa:	f023 0303 	bic.w	r3, r3, #3
 80041fe:	f043 0301 	orr.w	r3, r3, #1
 8004202:	81a3      	strh	r3, [r4, #12]
 8004204:	89a0      	ldrh	r0, [r4, #12]
 8004206:	4305      	orrs	r5, r0
 8004208:	81a5      	strh	r5, [r4, #12]
 800420a:	e7cd      	b.n	80041a8 <__smakebuf_r+0x18>
 800420c:	080034fd 	.word	0x080034fd

08004210 <__malloc_lock>:
 8004210:	4801      	ldr	r0, [pc, #4]	; (8004218 <__malloc_lock+0x8>)
 8004212:	f7ff ba45 	b.w	80036a0 <__retarget_lock_acquire_recursive>
 8004216:	bf00      	nop
 8004218:	20000128 	.word	0x20000128

0800421c <__malloc_unlock>:
 800421c:	4801      	ldr	r0, [pc, #4]	; (8004224 <__malloc_unlock+0x8>)
 800421e:	f7ff ba40 	b.w	80036a2 <__retarget_lock_release_recursive>
 8004222:	bf00      	nop
 8004224:	20000128 	.word	0x20000128

08004228 <_free_r>:
 8004228:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800422a:	2900      	cmp	r1, #0
 800422c:	d048      	beq.n	80042c0 <_free_r+0x98>
 800422e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004232:	9001      	str	r0, [sp, #4]
 8004234:	2b00      	cmp	r3, #0
 8004236:	f1a1 0404 	sub.w	r4, r1, #4
 800423a:	bfb8      	it	lt
 800423c:	18e4      	addlt	r4, r4, r3
 800423e:	f7ff ffe7 	bl	8004210 <__malloc_lock>
 8004242:	4a20      	ldr	r2, [pc, #128]	; (80042c4 <_free_r+0x9c>)
 8004244:	9801      	ldr	r0, [sp, #4]
 8004246:	6813      	ldr	r3, [r2, #0]
 8004248:	4615      	mov	r5, r2
 800424a:	b933      	cbnz	r3, 800425a <_free_r+0x32>
 800424c:	6063      	str	r3, [r4, #4]
 800424e:	6014      	str	r4, [r2, #0]
 8004250:	b003      	add	sp, #12
 8004252:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004256:	f7ff bfe1 	b.w	800421c <__malloc_unlock>
 800425a:	42a3      	cmp	r3, r4
 800425c:	d90b      	bls.n	8004276 <_free_r+0x4e>
 800425e:	6821      	ldr	r1, [r4, #0]
 8004260:	1862      	adds	r2, r4, r1
 8004262:	4293      	cmp	r3, r2
 8004264:	bf04      	itt	eq
 8004266:	681a      	ldreq	r2, [r3, #0]
 8004268:	685b      	ldreq	r3, [r3, #4]
 800426a:	6063      	str	r3, [r4, #4]
 800426c:	bf04      	itt	eq
 800426e:	1852      	addeq	r2, r2, r1
 8004270:	6022      	streq	r2, [r4, #0]
 8004272:	602c      	str	r4, [r5, #0]
 8004274:	e7ec      	b.n	8004250 <_free_r+0x28>
 8004276:	461a      	mov	r2, r3
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	b10b      	cbz	r3, 8004280 <_free_r+0x58>
 800427c:	42a3      	cmp	r3, r4
 800427e:	d9fa      	bls.n	8004276 <_free_r+0x4e>
 8004280:	6811      	ldr	r1, [r2, #0]
 8004282:	1855      	adds	r5, r2, r1
 8004284:	42a5      	cmp	r5, r4
 8004286:	d10b      	bne.n	80042a0 <_free_r+0x78>
 8004288:	6824      	ldr	r4, [r4, #0]
 800428a:	4421      	add	r1, r4
 800428c:	1854      	adds	r4, r2, r1
 800428e:	42a3      	cmp	r3, r4
 8004290:	6011      	str	r1, [r2, #0]
 8004292:	d1dd      	bne.n	8004250 <_free_r+0x28>
 8004294:	681c      	ldr	r4, [r3, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	6053      	str	r3, [r2, #4]
 800429a:	4421      	add	r1, r4
 800429c:	6011      	str	r1, [r2, #0]
 800429e:	e7d7      	b.n	8004250 <_free_r+0x28>
 80042a0:	d902      	bls.n	80042a8 <_free_r+0x80>
 80042a2:	230c      	movs	r3, #12
 80042a4:	6003      	str	r3, [r0, #0]
 80042a6:	e7d3      	b.n	8004250 <_free_r+0x28>
 80042a8:	6825      	ldr	r5, [r4, #0]
 80042aa:	1961      	adds	r1, r4, r5
 80042ac:	428b      	cmp	r3, r1
 80042ae:	bf04      	itt	eq
 80042b0:	6819      	ldreq	r1, [r3, #0]
 80042b2:	685b      	ldreq	r3, [r3, #4]
 80042b4:	6063      	str	r3, [r4, #4]
 80042b6:	bf04      	itt	eq
 80042b8:	1949      	addeq	r1, r1, r5
 80042ba:	6021      	streq	r1, [r4, #0]
 80042bc:	6054      	str	r4, [r2, #4]
 80042be:	e7c7      	b.n	8004250 <_free_r+0x28>
 80042c0:	b003      	add	sp, #12
 80042c2:	bd30      	pop	{r4, r5, pc}
 80042c4:	20000090 	.word	0x20000090

080042c8 <_read_r>:
 80042c8:	b538      	push	{r3, r4, r5, lr}
 80042ca:	4d07      	ldr	r5, [pc, #28]	; (80042e8 <_read_r+0x20>)
 80042cc:	4604      	mov	r4, r0
 80042ce:	4608      	mov	r0, r1
 80042d0:	4611      	mov	r1, r2
 80042d2:	2200      	movs	r2, #0
 80042d4:	602a      	str	r2, [r5, #0]
 80042d6:	461a      	mov	r2, r3
 80042d8:	f7fc fb4e 	bl	8000978 <_read>
 80042dc:	1c43      	adds	r3, r0, #1
 80042de:	d102      	bne.n	80042e6 <_read_r+0x1e>
 80042e0:	682b      	ldr	r3, [r5, #0]
 80042e2:	b103      	cbz	r3, 80042e6 <_read_r+0x1e>
 80042e4:	6023      	str	r3, [r4, #0]
 80042e6:	bd38      	pop	{r3, r4, r5, pc}
 80042e8:	20000130 	.word	0x20000130

080042ec <_fstat_r>:
 80042ec:	b538      	push	{r3, r4, r5, lr}
 80042ee:	4d07      	ldr	r5, [pc, #28]	; (800430c <_fstat_r+0x20>)
 80042f0:	2300      	movs	r3, #0
 80042f2:	4604      	mov	r4, r0
 80042f4:	4608      	mov	r0, r1
 80042f6:	4611      	mov	r1, r2
 80042f8:	602b      	str	r3, [r5, #0]
 80042fa:	f7fc fb82 	bl	8000a02 <_fstat>
 80042fe:	1c43      	adds	r3, r0, #1
 8004300:	d102      	bne.n	8004308 <_fstat_r+0x1c>
 8004302:	682b      	ldr	r3, [r5, #0]
 8004304:	b103      	cbz	r3, 8004308 <_fstat_r+0x1c>
 8004306:	6023      	str	r3, [r4, #0]
 8004308:	bd38      	pop	{r3, r4, r5, pc}
 800430a:	bf00      	nop
 800430c:	20000130 	.word	0x20000130

08004310 <_isatty_r>:
 8004310:	b538      	push	{r3, r4, r5, lr}
 8004312:	4d06      	ldr	r5, [pc, #24]	; (800432c <_isatty_r+0x1c>)
 8004314:	2300      	movs	r3, #0
 8004316:	4604      	mov	r4, r0
 8004318:	4608      	mov	r0, r1
 800431a:	602b      	str	r3, [r5, #0]
 800431c:	f7fc fb81 	bl	8000a22 <_isatty>
 8004320:	1c43      	adds	r3, r0, #1
 8004322:	d102      	bne.n	800432a <_isatty_r+0x1a>
 8004324:	682b      	ldr	r3, [r5, #0]
 8004326:	b103      	cbz	r3, 800432a <_isatty_r+0x1a>
 8004328:	6023      	str	r3, [r4, #0]
 800432a:	bd38      	pop	{r3, r4, r5, pc}
 800432c:	20000130 	.word	0x20000130

08004330 <_init>:
 8004330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004332:	bf00      	nop
 8004334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004336:	bc08      	pop	{r3}
 8004338:	469e      	mov	lr, r3
 800433a:	4770      	bx	lr

0800433c <_fini>:
 800433c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800433e:	bf00      	nop
 8004340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004342:	bc08      	pop	{r3}
 8004344:	469e      	mov	lr, r3
 8004346:	4770      	bx	lr
